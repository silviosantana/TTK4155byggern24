
byggern24_node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800200  00000d52  00000de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800322  00800322  00000f08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001208  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ce  00000000  00000000  000022b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af7  00000000  00000000  00002a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  0000357c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b9  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b68  00000000  00000000  00003d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000048fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	60 c1       	rjmp	.+704    	; 0x2c6 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e5       	ldi	r30, 0x52	; 82
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a2 e2       	ldi	r26, 0x22	; 34
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 32       	cpi	r26, 0x2C	; 44
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	9d d1       	rcall	.+826    	; 0x45a <main>
 120:	16 c6       	rjmp	.+3116   	; 0xd4e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_controller_reset>:
	status = spi_read();

	PORTB |= ~(1<<CAN_CS);

	return status;
}
 124:	2f 98       	cbi	0x05, 7	; 5
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	b5 d1       	rcall	.+874    	; 0x494 <spi_send>
 12a:	2f 9a       	sbi	0x05, 7	; 5
 12c:	8f e3       	ldi	r24, 0x3F	; 63
 12e:	9c e9       	ldi	r25, 0x9C	; 156
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <can_controller_reset+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <can_controller_reset+0x12>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <can_controller_read>:
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
 13e:	2f 98       	cbi	0x05, 7	; 5
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	a8 d1       	rcall	.+848    	; 0x494 <spi_send>
 144:	8c 2f       	mov	r24, r28
 146:	a6 d1       	rcall	.+844    	; 0x494 <spi_send>
 148:	a7 d1       	rcall	.+846    	; 0x498 <spi_read>
 14a:	2f 9a       	sbi	0x05, 7	; 5
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <can_controller_request_to_send>:
 150:	2f 98       	cbi	0x05, 7	; 5
 152:	81 e8       	ldi	r24, 0x81	; 129
 154:	9f d1       	rcall	.+830    	; 0x494 <spi_send>
 156:	85 b1       	in	r24, 0x05	; 5
 158:	8f 67       	ori	r24, 0x7F	; 127
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	08 95       	ret

0000015e <can_controller_bit_modify>:
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	18 2f       	mov	r17, r24
 166:	d6 2f       	mov	r29, r22
 168:	c4 2f       	mov	r28, r20
 16a:	2f 98       	cbi	0x05, 7	; 5
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	92 d1       	rcall	.+804    	; 0x494 <spi_send>
 170:	81 2f       	mov	r24, r17
 172:	90 d1       	rcall	.+800    	; 0x494 <spi_send>
 174:	8d 2f       	mov	r24, r29
 176:	8e d1       	rcall	.+796    	; 0x494 <spi_send>
 178:	8c 2f       	mov	r24, r28
 17a:	8c d1       	rcall	.+792    	; 0x494 <spi_send>
 17c:	2f 9a       	sbi	0x05, 7	; 5
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	08 95       	ret

00000186 <can_controller_set_mode>:
 186:	48 2f       	mov	r20, r24
 188:	60 ee       	ldi	r22, 0xE0	; 224
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	e8 df       	rcall	.-48     	; 0x15e <can_controller_bit_modify>
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	d4 df       	rcall	.-88     	; 0x13a <can_controller_read>
 192:	80 7e       	andi	r24, 0xE0	; 224
 194:	08 95       	ret

00000196 <can_controller_write>:

void can_controller_write(uint8_t address, uint8_t data)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	d8 2f       	mov	r29, r24
 19c:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
 19e:	2f 98       	cbi	0x05, 7	; 5
	
	spi_send(MCP_WRITE);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	78 d1       	rcall	.+752    	; 0x494 <spi_send>
	spi_send(address);
 1a4:	8d 2f       	mov	r24, r29
 1a6:	76 d1       	rcall	.+748    	; 0x494 <spi_send>
	spi_send(data);
 1a8:	8c 2f       	mov	r24, r28
 1aa:	74 d1       	rcall	.+744    	; 0x494 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
 1ac:	2f 9a       	sbi	0x05, 7	; 5
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <can_controller_init>:
uint8_t can_controller_init()
{
	uint8_t value;

	//spi_init(); // Initialize SPI
	can_controller_reset(); // Send reset-command
 1b4:	b7 df       	rcall	.-146    	; 0x124 <can_controller_reset>
	

	// Self-test
	value = can_controller_read(MCP_CANSTAT);
 1b6:	8e e0       	ldi	r24, 0x0E	; 14
 1b8:	c0 df       	rcall	.-128    	; 0x13a <can_controller_read>
	if ((value & MODE_MASK)  != MODE_CONFIG)
 1ba:	98 2f       	mov	r25, r24
 1bc:	90 7e       	andi	r25, 0xE0	; 224
 1be:	90 38       	cpi	r25, 0x80	; 128
 1c0:	69 f0       	breq	.+26     	; 0x1dc <can_controller_init+0x28>
	{
		printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
 1c2:	1f 92       	push	r1
 1c4:	8f 93       	push	r24
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	9f 93       	push	r25
 1cc:	8f 93       	push	r24
 1ce:	f9 d2       	rcall	.+1522   	; 0x7c2 <printf>
		return 1;
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
	}
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000001);
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	6f ef       	ldi	r22, 0xFF	; 255
 1e0:	8b e2       	ldi	r24, 0x2B	; 43
 1e2:	bd df       	rcall	.-134    	; 0x15e <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000);
 1e4:	40 e6       	ldi	r20, 0x60	; 96
 1e6:	60 e6       	ldi	r22, 0x60	; 96
 1e8:	80 e6       	ldi	r24, 0x60	; 96
 1ea:	b9 df       	rcall	.-142    	; 0x15e <can_controller_bit_modify>
	//can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

	
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	82 e3       	ldi	r24, 0x32	; 50
 1f0:	d2 df       	rcall	.-92     	; 0x196 <can_controller_write>
	return 0;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
}
 1f4:	08 95       	ret

000001f6 <can_init>:
}

void can_init ()
{
	//set loopback mode
	uint8_t mode = can_controller_set_mode(MODE_NORMAL);
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	c6 df       	rcall	.-116    	; 0x186 <can_controller_set_mode>
	if (mode != MODE_NORMAL)
 1fa:	88 23       	and	r24, r24
 1fc:	39 f0       	breq	.+14     	; 0x20c <can_init+0x16>
	{
		printf("Could not set normal mode! I am sorry!\n\r");
 1fe:	83 e5       	ldi	r24, 0x53	; 83
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	9f 93       	push	r25
 204:	8f 93       	push	r24
 206:	dd d2       	rcall	.+1466   	; 0x7c2 <printf>
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
	}
	
	//enable RX interrupts
	can_controller_bit_modify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
 20c:	43 e0       	ldi	r20, 0x03	; 3
 20e:	63 e0       	ldi	r22, 0x03	; 3
 210:	8b e2       	ldi	r24, 0x2B	; 43
 212:	a5 df       	rcall	.-182    	; 0x15e <can_controller_bit_modify>
	//can_controller_write(MCP_CANINTE, MCP_RX_INT);
	
	// SET UP INTERRUPTION TO RECIEVE MESSAGE
	DDRD &= ~(1<<PD0);
 214:	50 98       	cbi	0x0a, 0	; 10
	cli();
 216:	f8 94       	cli
	EICRA &= ~(1 << ISC01);
 218:	e9 e6       	ldi	r30, 0x69	; 105
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8d 7f       	andi	r24, 0xFD	; 253
 220:	80 83       	st	Z, r24
	EICRA |= (1 << ISC00);	//interrupt on the falling edge
 222:	80 81       	ld	r24, Z
 224:	81 60       	ori	r24, 0x01	; 1
 226:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT0);						//enable external interrupt INT0
 228:	e8 9a       	sbi	0x1d, 0	; 29
	sei();									//enable Global Interrupt
 22a:	78 94       	sei
 22c:	08 95       	ret

0000022e <can_send_msg>:
}

uint8_t can_send_msg(can_message* msg)
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
	//writhe higher id
	can_controller_write(MCP_TXB0SIDH, msg->id);
 238:	68 81       	ld	r22, Y
 23a:	81 e3       	ldi	r24, 0x31	; 49
 23c:	ac df       	rcall	.-168    	; 0x196 <can_controller_write>
	
	// Define data length of message
	uint8_t data_length = msg->length;
 23e:	09 81       	ldd	r16, Y+1	; 0x01
	can_controller_write(MCP_TXB0DLC, msg->length);
 240:	60 2f       	mov	r22, r16
 242:	85 e3       	ldi	r24, 0x35	; 53
 244:	a8 df       	rcall	.-176    	; 0x196 <can_controller_write>
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
 246:	22 96       	adiw	r28, 0x02	; 2
	for (uint8_t byte = 0; byte < data_length; byte++) {
 248:	00 23       	and	r16, r16
 24a:	41 f0       	breq	.+16     	; 0x25c <can_send_msg+0x2e>
 24c:	0a 5c       	subi	r16, 0xCA	; 202
 24e:	16 e3       	ldi	r17, 0x36	; 54
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
 250:	69 91       	ld	r22, Y+
 252:	81 2f       	mov	r24, r17
 254:	a0 df       	rcall	.-192    	; 0x196 <can_controller_write>
 256:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = msg->length;
	can_controller_write(MCP_TXB0DLC, msg->length);
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
 258:	10 13       	cpse	r17, r16
 25a:	fa cf       	rjmp	.-12     	; 0x250 <can_send_msg+0x22>
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
	}

	// Request to send message, send if successful
	can_controller_request_to_send();
 25c:	79 df       	rcall	.-270    	; 0x150 <can_controller_request_to_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <can_send_msg+0x36>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <can_send_msg+0x40>
 26e:	00 00       	nop
	// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE));
	// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF));
	// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
	// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	08 95       	ret

0000027a <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	eb 01       	movw	r28, r22

	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
 284:	18 2f       	mov	r17, r24
 286:	12 95       	swap	r17
 288:	10 7f       	andi	r17, 0xF0	; 240
 28a:	81 e6       	ldi	r24, 0x61	; 97
 28c:	81 0f       	add	r24, r17
 28e:	55 df       	rcall	.-342    	; 0x13a <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
 290:	85 e6       	ldi	r24, 0x65	; 101
 292:	81 0f       	add	r24, r17
 294:	52 df       	rcall	.-348    	; 0x13a <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
 296:	98 2f       	mov	r25, r24
 298:	9f 70       	andi	r25, 0x0F	; 15
 29a:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 29c:	88 23       	and	r24, r24
 29e:	51 f0       	breq	.+20     	; 0x2b4 <can_recieve_msg+0x3a>
 2a0:	1a 59       	subi	r17, 0x9A	; 154
 2a2:	22 96       	adiw	r28, 0x02	; 2
 2a4:	08 2f       	mov	r16, r24
 2a6:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
 2a8:	81 2f       	mov	r24, r17
 2aa:	47 df       	rcall	.-370    	; 0x13a <can_controller_read>
 2ac:	89 93       	st	Y+, r24
 2ae:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 2b0:	10 13       	cpse	r17, r16
 2b2:	fa cf       	rjmp	.-12     	; 0x2a8 <can_recieve_msg+0x2e>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}
	can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	8c e2       	ldi	r24, 0x2C	; 44
 2ba:	51 df       	rcall	.-350    	; 0x15e <can_controller_bit_modify>
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	08 95       	ret

000002c6 <__vector_1>:
#include "util.h"
#include "can_controller_driver.h"


ISR(INT0_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	0b b6       	in	r0, 0x3b	; 59
 2d2:	0f 92       	push	r0
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
	cli();
 2f6:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 2f8:	8a e0       	ldi	r24, 0x0A	; 10
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	f1 d0       	rcall	.+482    	; 0x4e0 <malloc>
 2fe:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	printf("message INTERRUPTION recieved\n\r");
 300:	8c e7       	ldi	r24, 0x7C	; 124
 302:	92 e0       	ldi	r25, 0x02	; 2
 304:	9f 93       	push	r25
 306:	8f 93       	push	r24
 308:	5c d2       	rcall	.+1208   	; 0x7c2 <printf>
	uint8_t canInt = can_controller_read(MCP_CANINTF);
 30a:	8c e2       	ldi	r24, 0x2C	; 44
 30c:	16 df       	rcall	.-468    	; 0x13a <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	80 ff       	sbrs	r24, 0
 314:	1c c0       	rjmp	.+56     	; 0x34e <__vector_1+0x88>
	{
		
		can_recieve_msg(0, msg);
 316:	be 01       	movw	r22, r28
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	af df       	rcall	.-162    	; 0x27a <can_recieve_msg>
		
		//printf("DATA ON RX0\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 23       	and	r24, r24
 320:	09 f4       	brne	.+2      	; 0x324 <__vector_1+0x5e>
 322:	44 c0       	rjmp	.+136    	; 0x3ac <__vector_1+0xe6>
 324:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
 326:	0c e9       	ldi	r16, 0x9C	; 156
 328:	12 e0       	ldi	r17, 0x02	; 2
 32a:	fe 01       	movw	r30, r28
 32c:	ef 0d       	add	r30, r15
 32e:	f1 1d       	adc	r31, r1
 330:	82 81       	ldd	r24, Z+2	; 0x02
 332:	1f 92       	push	r1
 334:	8f 93       	push	r24
 336:	1f 93       	push	r17
 338:	0f 93       	push	r16
 33a:	43 d2       	rcall	.+1158   	; 0x7c2 <printf>
	{
		
		can_recieve_msg(0, msg);
		
		//printf("DATA ON RX0\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 33c:	f3 94       	inc	r15
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	f8 16       	cp	r15, r24
 34a:	78 f3       	brcs	.-34     	; 0x32a <__vector_1+0x64>
 34c:	2f c0       	rjmp	.+94     	; 0x3ac <__vector_1+0xe6>
			printf("%d \n\r", msg->data[byte]);
		}
		
	}else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
 34e:	81 ff       	sbrs	r24, 1
 350:	26 c0       	rjmp	.+76     	; 0x39e <__vector_1+0xd8>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	8c e2       	ldi	r24, 0x2C	; 44
 358:	02 df       	rcall	.-508    	; 0x15e <can_controller_bit_modify>
		can_recieve_msg(1, msg);
 35a:	be 01       	movw	r22, r28
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	8d df       	rcall	.-230    	; 0x27a <can_recieve_msg>
		
		printf("DATA ON RX1\n\r");
 360:	82 ea       	ldi	r24, 0xA2	; 162
 362:	92 e0       	ldi	r25, 0x02	; 2
 364:	9f 93       	push	r25
 366:	8f 93       	push	r24
 368:	2c d2       	rcall	.+1112   	; 0x7c2 <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	88 23       	and	r24, r24
 372:	e1 f0       	breq	.+56     	; 0x3ac <__vector_1+0xe6>
 374:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
 376:	0c e9       	ldi	r16, 0x9C	; 156
 378:	12 e0       	ldi	r17, 0x02	; 2
 37a:	fe 01       	movw	r30, r28
 37c:	ef 0d       	add	r30, r15
 37e:	f1 1d       	adc	r31, r1
 380:	82 81       	ldd	r24, Z+2	; 0x02
 382:	1f 92       	push	r1
 384:	8f 93       	push	r24
 386:	1f 93       	push	r17
 388:	0f 93       	push	r16
 38a:	1b d2       	rcall	.+1078   	; 0x7c2 <printf>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
		can_recieve_msg(1, msg);
		
		printf("DATA ON RX1\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 38c:	f3 94       	inc	r15
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	f8 16       	cp	r15, r24
 39a:	78 f3       	brcs	.-34     	; 0x37a <__vector_1+0xb4>
 39c:	07 c0       	rjmp	.+14     	; 0x3ac <__vector_1+0xe6>
			printf("%d \n\r", msg->data[byte]);
		}
	}else
	{
		printf("No message available on the CAN REX BUFFERs\n\r");
 39e:	80 eb       	ldi	r24, 0xB0	; 176
 3a0:	92 e0       	ldi	r25, 0x02	; 2
 3a2:	9f 93       	push	r25
 3a4:	8f 93       	push	r24
 3a6:	0d d2       	rcall	.+1050   	; 0x7c2 <printf>
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
		
	}
	printf("===========================================\n\r");
 3ac:	8e ed       	ldi	r24, 0xDE	; 222
 3ae:	92 e0       	ldi	r25, 0x02	; 2
 3b0:	9f 93       	push	r25
 3b2:	8f 93       	push	r24
 3b4:	06 d2       	rcall	.+1036   	; 0x7c2 <printf>
	free(msg);
 3b6:	ce 01       	movw	r24, r28
 3b8:	2b d1       	rcall	.+598    	; 0x610 <free>
	sei();
 3ba:	78 94       	sei
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	0f 90       	pop	r0
 3e4:	0b be       	out	0x3b, r0	; 59
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <can_driver_test>:
	}
	can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
}

void can_driver_test()
{
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 3f8:	8a e0       	ldi	r24, 0x0A	; 10
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	71 d0       	rcall	.+226    	; 0x4e0 <malloc>
 3fe:	ec 01       	movw	r28, r24
	msg->id = 2;
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	88 83       	st	Y, r24
	msg->data[0] = 1;
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	9a 83       	std	Y+2, r25	; 0x02
	msg->data[1] = 2;
 408:	8b 83       	std	Y+3, r24	; 0x03
	msg->data[2] = 3;
 40a:	03 e0       	ldi	r16, 0x03	; 3
 40c:	0c 83       	std	Y+4, r16	; 0x04
	msg->data[3] = 4;
 40e:	14 e0       	ldi	r17, 0x04	; 4
 410:	1d 83       	std	Y+5, r17	; 0x05
	msg->data[4] = 5;
 412:	85 e0       	ldi	r24, 0x05	; 5
 414:	8e 83       	std	Y+6, r24	; 0x06
	msg->data[5] = 6;
 416:	86 e0       	ldi	r24, 0x06	; 6
 418:	8f 83       	std	Y+7, r24	; 0x07
	msg->data[6] = 7;
 41a:	87 e0       	ldi	r24, 0x07	; 7
 41c:	88 87       	std	Y+8, r24	; 0x08
	msg->data[7] = 8;
 41e:	88 e0       	ldi	r24, 0x08	; 8
 420:	89 87       	std	Y+9, r24	; 0x09
	msg->length = 8;
 422:	89 83       	std	Y+1, r24	; 0x01
	can_send_msg(msg);
 424:	ce 01       	movw	r24, r28
 426:	03 df       	rcall	.-506    	; 0x22e <can_send_msg>
	free(msg);
 428:	ce 01       	movw	r24, r28
 42a:	f2 d0       	rcall	.+484    	; 0x610 <free>
	
	msg = (can_message *) malloc(1*sizeof(can_message));
 42c:	8a e0       	ldi	r24, 0x0A	; 10
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	57 d0       	rcall	.+174    	; 0x4e0 <malloc>
 432:	ec 01       	movw	r28, r24
	msg->id = 3;
 434:	08 83       	st	Y, r16
	msg->data[0] = 12;
 436:	8c e0       	ldi	r24, 0x0C	; 12
 438:	8a 83       	std	Y+2, r24	; 0x02
	msg->data[1] = 13;
 43a:	8d e0       	ldi	r24, 0x0D	; 13
 43c:	8b 83       	std	Y+3, r24	; 0x03
	msg->data[2] = 14;
 43e:	8e e0       	ldi	r24, 0x0E	; 14
 440:	8c 83       	std	Y+4, r24	; 0x04
	msg->data[3] = 15;
 442:	8f e0       	ldi	r24, 0x0F	; 15
 444:	8d 83       	std	Y+5, r24	; 0x05
	msg->length = 4;
 446:	19 83       	std	Y+1, r17	; 0x01
	can_send_msg(msg);
 448:	ce 01       	movw	r24, r28
 44a:	f1 de       	rcall	.-542    	; 0x22e <can_send_msg>
	free(msg);
 44c:	ce 01       	movw	r24, r28
 44e:	e0 d0       	rcall	.+448    	; 0x610 <free>
	
	

}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <main>:
#include "can_controller_driver.h"
#include "can_driver.h"

int main(void)
{
	USART_Init(MYUBRR);
 45a:	87 e6       	ldi	r24, 0x67	; 103
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	30 d0       	rcall	.+96     	; 0x4c0 <USART_Init>
	spi_init();
 460:	17 d0       	rcall	.+46     	; 0x490 <spi_init>
	can_controller_init();
 462:	a8 de       	rcall	.-688    	; 0x1b4 <can_controller_init>
	can_init();
 464:	c8 de       	rcall	.-624    	; 0x1f6 <can_init>
	
	printf("Hello from node 2!\n\r");
 466:	8c e0       	ldi	r24, 0x0C	; 12
 468:	93 e0       	ldi	r25, 0x03	; 3
 46a:	9f 93       	push	r25
 46c:	8f 93       	push	r24
 46e:	a9 d1       	rcall	.+850    	; 0x7c2 <printf>

	can_driver_test();
 470:	bf df       	rcall	.-130    	; 0x3f0 <can_driver_test>
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	ff cf       	rjmp	.-2      	; 0x476 <main+0x1c>

00000478 <SPI_MasterInit>:
 478:	84 b1       	in	r24, 0x04	; 4
 47a:	87 68       	ori	r24, 0x87	; 135
 47c:	84 b9       	out	0x04, r24	; 4
 47e:	23 98       	cbi	0x04, 3	; 4
 480:	81 e5       	ldi	r24, 0x51	; 81
 482:	8c bd       	out	0x2c, r24	; 44
 484:	08 95       	ret

00000486 <SPI_MasterTransmit>:
 486:	8e bd       	out	0x2e, r24	; 46
 488:	0d b4       	in	r0, 0x2d	; 45
 48a:	07 fe       	sbrs	r0, 7
 48c:	fd cf       	rjmp	.-6      	; 0x488 <SPI_MasterTransmit+0x2>
 48e:	08 95       	ret

00000490 <spi_init>:
 490:	f3 cf       	rjmp	.-26     	; 0x478 <SPI_MasterInit>
 492:	08 95       	ret

00000494 <spi_send>:
 494:	f8 cf       	rjmp	.-16     	; 0x486 <SPI_MasterTransmit>
 496:	08 95       	ret

00000498 <spi_read>:
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	f5 df       	rcall	.-22     	; 0x486 <SPI_MasterTransmit>
 49c:	8e b5       	in	r24, 0x2e	; 46
 49e:	08 95       	ret

000004a0 <USART_Transmit>:
 4a0:	e0 ec       	ldi	r30, 0xC0	; 192
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	90 81       	ld	r25, Z
 4a6:	95 ff       	sbrs	r25, 5
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <USART_Transmit+0x4>
 4aa:	80 93 c6 00 	sts	0x00C6, r24
 4ae:	08 95       	ret

000004b0 <USART_Receive>:
 4b0:	e0 ec       	ldi	r30, 0xC0	; 192
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	88 23       	and	r24, r24
 4b8:	ec f7       	brge	.-6      	; 0x4b4 <USART_Receive+0x4>
 4ba:	80 91 c6 00 	lds	r24, 0x00C6
 4be:	08 95       	ret

000004c0 <USART_Init>:
 4c0:	90 93 c5 00 	sts	0x00C5, r25
 4c4:	80 93 c4 00 	sts	0x00C4, r24
 4c8:	88 e1       	ldi	r24, 0x18	; 24
 4ca:	80 93 c1 00 	sts	0x00C1, r24
 4ce:	8e e0       	ldi	r24, 0x0E	; 14
 4d0:	80 93 c2 00 	sts	0x00C2, r24
 4d4:	68 e5       	ldi	r22, 0x58	; 88
 4d6:	72 e0       	ldi	r23, 0x02	; 2
 4d8:	80 e5       	ldi	r24, 0x50	; 80
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	28 c1       	rjmp	.+592    	; 0x72e <fdevopen>
 4de:	08 95       	ret

000004e0 <malloc>:
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	91 05       	cpc	r25, r1
 4e8:	10 f4       	brcc	.+4      	; 0x4ee <malloc+0xe>
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	e0 91 24 03 	lds	r30, 0x0324
 4f2:	f0 91 25 03 	lds	r31, 0x0325
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	a0 e0       	ldi	r26, 0x00	; 0
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	30 97       	sbiw	r30, 0x00	; 0
 500:	39 f1       	breq	.+78     	; 0x550 <malloc+0x70>
 502:	40 81       	ld	r20, Z
 504:	51 81       	ldd	r21, Z+1	; 0x01
 506:	48 17       	cp	r20, r24
 508:	59 07       	cpc	r21, r25
 50a:	b8 f0       	brcs	.+46     	; 0x53a <malloc+0x5a>
 50c:	48 17       	cp	r20, r24
 50e:	59 07       	cpc	r21, r25
 510:	71 f4       	brne	.+28     	; 0x52e <malloc+0x4e>
 512:	82 81       	ldd	r24, Z+2	; 0x02
 514:	93 81       	ldd	r25, Z+3	; 0x03
 516:	10 97       	sbiw	r26, 0x00	; 0
 518:	29 f0       	breq	.+10     	; 0x524 <malloc+0x44>
 51a:	13 96       	adiw	r26, 0x03	; 3
 51c:	9c 93       	st	X, r25
 51e:	8e 93       	st	-X, r24
 520:	12 97       	sbiw	r26, 0x02	; 2
 522:	2c c0       	rjmp	.+88     	; 0x57c <malloc+0x9c>
 524:	90 93 25 03 	sts	0x0325, r25
 528:	80 93 24 03 	sts	0x0324, r24
 52c:	27 c0       	rjmp	.+78     	; 0x57c <malloc+0x9c>
 52e:	21 15       	cp	r18, r1
 530:	31 05       	cpc	r19, r1
 532:	31 f0       	breq	.+12     	; 0x540 <malloc+0x60>
 534:	42 17       	cp	r20, r18
 536:	53 07       	cpc	r21, r19
 538:	18 f0       	brcs	.+6      	; 0x540 <malloc+0x60>
 53a:	a9 01       	movw	r20, r18
 53c:	db 01       	movw	r26, r22
 53e:	01 c0       	rjmp	.+2      	; 0x542 <malloc+0x62>
 540:	ef 01       	movw	r28, r30
 542:	9a 01       	movw	r18, r20
 544:	bd 01       	movw	r22, r26
 546:	df 01       	movw	r26, r30
 548:	02 80       	ldd	r0, Z+2	; 0x02
 54a:	f3 81       	ldd	r31, Z+3	; 0x03
 54c:	e0 2d       	mov	r30, r0
 54e:	d7 cf       	rjmp	.-82     	; 0x4fe <malloc+0x1e>
 550:	21 15       	cp	r18, r1
 552:	31 05       	cpc	r19, r1
 554:	f9 f0       	breq	.+62     	; 0x594 <malloc+0xb4>
 556:	28 1b       	sub	r18, r24
 558:	39 0b       	sbc	r19, r25
 55a:	24 30       	cpi	r18, 0x04	; 4
 55c:	31 05       	cpc	r19, r1
 55e:	80 f4       	brcc	.+32     	; 0x580 <malloc+0xa0>
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	9b 81       	ldd	r25, Y+3	; 0x03
 564:	61 15       	cp	r22, r1
 566:	71 05       	cpc	r23, r1
 568:	21 f0       	breq	.+8      	; 0x572 <malloc+0x92>
 56a:	fb 01       	movw	r30, r22
 56c:	93 83       	std	Z+3, r25	; 0x03
 56e:	82 83       	std	Z+2, r24	; 0x02
 570:	04 c0       	rjmp	.+8      	; 0x57a <malloc+0x9a>
 572:	90 93 25 03 	sts	0x0325, r25
 576:	80 93 24 03 	sts	0x0324, r24
 57a:	fe 01       	movw	r30, r28
 57c:	32 96       	adiw	r30, 0x02	; 2
 57e:	44 c0       	rjmp	.+136    	; 0x608 <malloc+0x128>
 580:	fe 01       	movw	r30, r28
 582:	e2 0f       	add	r30, r18
 584:	f3 1f       	adc	r31, r19
 586:	81 93       	st	Z+, r24
 588:	91 93       	st	Z+, r25
 58a:	22 50       	subi	r18, 0x02	; 2
 58c:	31 09       	sbc	r19, r1
 58e:	39 83       	std	Y+1, r19	; 0x01
 590:	28 83       	st	Y, r18
 592:	3a c0       	rjmp	.+116    	; 0x608 <malloc+0x128>
 594:	20 91 22 03 	lds	r18, 0x0322
 598:	30 91 23 03 	lds	r19, 0x0323
 59c:	23 2b       	or	r18, r19
 59e:	41 f4       	brne	.+16     	; 0x5b0 <malloc+0xd0>
 5a0:	20 91 02 02 	lds	r18, 0x0202
 5a4:	30 91 03 02 	lds	r19, 0x0203
 5a8:	30 93 23 03 	sts	0x0323, r19
 5ac:	20 93 22 03 	sts	0x0322, r18
 5b0:	20 91 00 02 	lds	r18, 0x0200
 5b4:	30 91 01 02 	lds	r19, 0x0201
 5b8:	21 15       	cp	r18, r1
 5ba:	31 05       	cpc	r19, r1
 5bc:	41 f4       	brne	.+16     	; 0x5ce <malloc+0xee>
 5be:	2d b7       	in	r18, 0x3d	; 61
 5c0:	3e b7       	in	r19, 0x3e	; 62
 5c2:	40 91 04 02 	lds	r20, 0x0204
 5c6:	50 91 05 02 	lds	r21, 0x0205
 5ca:	24 1b       	sub	r18, r20
 5cc:	35 0b       	sbc	r19, r21
 5ce:	e0 91 22 03 	lds	r30, 0x0322
 5d2:	f0 91 23 03 	lds	r31, 0x0323
 5d6:	e2 17       	cp	r30, r18
 5d8:	f3 07       	cpc	r31, r19
 5da:	a0 f4       	brcc	.+40     	; 0x604 <malloc+0x124>
 5dc:	2e 1b       	sub	r18, r30
 5de:	3f 0b       	sbc	r19, r31
 5e0:	28 17       	cp	r18, r24
 5e2:	39 07       	cpc	r19, r25
 5e4:	78 f0       	brcs	.+30     	; 0x604 <malloc+0x124>
 5e6:	ac 01       	movw	r20, r24
 5e8:	4e 5f       	subi	r20, 0xFE	; 254
 5ea:	5f 4f       	sbci	r21, 0xFF	; 255
 5ec:	24 17       	cp	r18, r20
 5ee:	35 07       	cpc	r19, r21
 5f0:	48 f0       	brcs	.+18     	; 0x604 <malloc+0x124>
 5f2:	4e 0f       	add	r20, r30
 5f4:	5f 1f       	adc	r21, r31
 5f6:	50 93 23 03 	sts	0x0323, r21
 5fa:	40 93 22 03 	sts	0x0322, r20
 5fe:	81 93       	st	Z+, r24
 600:	91 93       	st	Z+, r25
 602:	02 c0       	rjmp	.+4      	; 0x608 <malloc+0x128>
 604:	e0 e0       	ldi	r30, 0x00	; 0
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	cf 01       	movw	r24, r30
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <free>:
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	00 97       	sbiw	r24, 0x00	; 0
 616:	09 f4       	brne	.+2      	; 0x61a <free+0xa>
 618:	87 c0       	rjmp	.+270    	; 0x728 <free+0x118>
 61a:	fc 01       	movw	r30, r24
 61c:	32 97       	sbiw	r30, 0x02	; 2
 61e:	13 82       	std	Z+3, r1	; 0x03
 620:	12 82       	std	Z+2, r1	; 0x02
 622:	c0 91 24 03 	lds	r28, 0x0324
 626:	d0 91 25 03 	lds	r29, 0x0325
 62a:	20 97       	sbiw	r28, 0x00	; 0
 62c:	81 f4       	brne	.+32     	; 0x64e <free+0x3e>
 62e:	20 81       	ld	r18, Z
 630:	31 81       	ldd	r19, Z+1	; 0x01
 632:	28 0f       	add	r18, r24
 634:	39 1f       	adc	r19, r25
 636:	80 91 22 03 	lds	r24, 0x0322
 63a:	90 91 23 03 	lds	r25, 0x0323
 63e:	82 17       	cp	r24, r18
 640:	93 07       	cpc	r25, r19
 642:	79 f5       	brne	.+94     	; 0x6a2 <free+0x92>
 644:	f0 93 23 03 	sts	0x0323, r31
 648:	e0 93 22 03 	sts	0x0322, r30
 64c:	6d c0       	rjmp	.+218    	; 0x728 <free+0x118>
 64e:	de 01       	movw	r26, r28
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	ae 17       	cp	r26, r30
 656:	bf 07       	cpc	r27, r31
 658:	50 f4       	brcc	.+20     	; 0x66e <free+0x5e>
 65a:	12 96       	adiw	r26, 0x02	; 2
 65c:	4d 91       	ld	r20, X+
 65e:	5c 91       	ld	r21, X
 660:	13 97       	sbiw	r26, 0x03	; 3
 662:	9d 01       	movw	r18, r26
 664:	41 15       	cp	r20, r1
 666:	51 05       	cpc	r21, r1
 668:	09 f1       	breq	.+66     	; 0x6ac <free+0x9c>
 66a:	da 01       	movw	r26, r20
 66c:	f3 cf       	rjmp	.-26     	; 0x654 <free+0x44>
 66e:	b3 83       	std	Z+3, r27	; 0x03
 670:	a2 83       	std	Z+2, r26	; 0x02
 672:	40 81       	ld	r20, Z
 674:	51 81       	ldd	r21, Z+1	; 0x01
 676:	84 0f       	add	r24, r20
 678:	95 1f       	adc	r25, r21
 67a:	8a 17       	cp	r24, r26
 67c:	9b 07       	cpc	r25, r27
 67e:	71 f4       	brne	.+28     	; 0x69c <free+0x8c>
 680:	8d 91       	ld	r24, X+
 682:	9c 91       	ld	r25, X
 684:	11 97       	sbiw	r26, 0x01	; 1
 686:	84 0f       	add	r24, r20
 688:	95 1f       	adc	r25, r21
 68a:	02 96       	adiw	r24, 0x02	; 2
 68c:	91 83       	std	Z+1, r25	; 0x01
 68e:	80 83       	st	Z, r24
 690:	12 96       	adiw	r26, 0x02	; 2
 692:	8d 91       	ld	r24, X+
 694:	9c 91       	ld	r25, X
 696:	13 97       	sbiw	r26, 0x03	; 3
 698:	93 83       	std	Z+3, r25	; 0x03
 69a:	82 83       	std	Z+2, r24	; 0x02
 69c:	21 15       	cp	r18, r1
 69e:	31 05       	cpc	r19, r1
 6a0:	29 f4       	brne	.+10     	; 0x6ac <free+0x9c>
 6a2:	f0 93 25 03 	sts	0x0325, r31
 6a6:	e0 93 24 03 	sts	0x0324, r30
 6aa:	3e c0       	rjmp	.+124    	; 0x728 <free+0x118>
 6ac:	d9 01       	movw	r26, r18
 6ae:	13 96       	adiw	r26, 0x03	; 3
 6b0:	fc 93       	st	X, r31
 6b2:	ee 93       	st	-X, r30
 6b4:	12 97       	sbiw	r26, 0x02	; 2
 6b6:	4d 91       	ld	r20, X+
 6b8:	5d 91       	ld	r21, X+
 6ba:	a4 0f       	add	r26, r20
 6bc:	b5 1f       	adc	r27, r21
 6be:	ea 17       	cp	r30, r26
 6c0:	fb 07       	cpc	r31, r27
 6c2:	79 f4       	brne	.+30     	; 0x6e2 <free+0xd2>
 6c4:	80 81       	ld	r24, Z
 6c6:	91 81       	ldd	r25, Z+1	; 0x01
 6c8:	84 0f       	add	r24, r20
 6ca:	95 1f       	adc	r25, r21
 6cc:	02 96       	adiw	r24, 0x02	; 2
 6ce:	d9 01       	movw	r26, r18
 6d0:	11 96       	adiw	r26, 0x01	; 1
 6d2:	9c 93       	st	X, r25
 6d4:	8e 93       	st	-X, r24
 6d6:	82 81       	ldd	r24, Z+2	; 0x02
 6d8:	93 81       	ldd	r25, Z+3	; 0x03
 6da:	13 96       	adiw	r26, 0x03	; 3
 6dc:	9c 93       	st	X, r25
 6de:	8e 93       	st	-X, r24
 6e0:	12 97       	sbiw	r26, 0x02	; 2
 6e2:	e0 e0       	ldi	r30, 0x00	; 0
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	9b 81       	ldd	r25, Y+3	; 0x03
 6ea:	00 97       	sbiw	r24, 0x00	; 0
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <free+0xe4>
 6ee:	fe 01       	movw	r30, r28
 6f0:	ec 01       	movw	r28, r24
 6f2:	f9 cf       	rjmp	.-14     	; 0x6e6 <free+0xd6>
 6f4:	ce 01       	movw	r24, r28
 6f6:	02 96       	adiw	r24, 0x02	; 2
 6f8:	28 81       	ld	r18, Y
 6fa:	39 81       	ldd	r19, Y+1	; 0x01
 6fc:	82 0f       	add	r24, r18
 6fe:	93 1f       	adc	r25, r19
 700:	20 91 22 03 	lds	r18, 0x0322
 704:	30 91 23 03 	lds	r19, 0x0323
 708:	28 17       	cp	r18, r24
 70a:	39 07       	cpc	r19, r25
 70c:	69 f4       	brne	.+26     	; 0x728 <free+0x118>
 70e:	30 97       	sbiw	r30, 0x00	; 0
 710:	29 f4       	brne	.+10     	; 0x71c <free+0x10c>
 712:	10 92 25 03 	sts	0x0325, r1
 716:	10 92 24 03 	sts	0x0324, r1
 71a:	02 c0       	rjmp	.+4      	; 0x720 <free+0x110>
 71c:	13 82       	std	Z+3, r1	; 0x03
 71e:	12 82       	std	Z+2, r1	; 0x02
 720:	d0 93 23 03 	sts	0x0323, r29
 724:	c0 93 22 03 	sts	0x0322, r28
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	08 95       	ret

0000072e <fdevopen>:
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	ec 01       	movw	r28, r24
 738:	8b 01       	movw	r16, r22
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	31 f4       	brne	.+12     	; 0x74a <fdevopen+0x1c>
 73e:	61 15       	cp	r22, r1
 740:	71 05       	cpc	r23, r1
 742:	19 f4       	brne	.+6      	; 0x74a <fdevopen+0x1c>
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	37 c0       	rjmp	.+110    	; 0x7b8 <fdevopen+0x8a>
 74a:	6e e0       	ldi	r22, 0x0E	; 14
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	36 d2       	rcall	.+1132   	; 0xbc0 <calloc>
 754:	fc 01       	movw	r30, r24
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	a9 f3       	breq	.-22     	; 0x744 <fdevopen+0x16>
 75a:	80 e8       	ldi	r24, 0x80	; 128
 75c:	83 83       	std	Z+3, r24	; 0x03
 75e:	01 15       	cp	r16, r1
 760:	11 05       	cpc	r17, r1
 762:	71 f0       	breq	.+28     	; 0x780 <fdevopen+0x52>
 764:	13 87       	std	Z+11, r17	; 0x0b
 766:	02 87       	std	Z+10, r16	; 0x0a
 768:	81 e8       	ldi	r24, 0x81	; 129
 76a:	83 83       	std	Z+3, r24	; 0x03
 76c:	80 91 26 03 	lds	r24, 0x0326
 770:	90 91 27 03 	lds	r25, 0x0327
 774:	89 2b       	or	r24, r25
 776:	21 f4       	brne	.+8      	; 0x780 <fdevopen+0x52>
 778:	f0 93 27 03 	sts	0x0327, r31
 77c:	e0 93 26 03 	sts	0x0326, r30
 780:	20 97       	sbiw	r28, 0x00	; 0
 782:	c9 f0       	breq	.+50     	; 0x7b6 <fdevopen+0x88>
 784:	d1 87       	std	Z+9, r29	; 0x09
 786:	c0 87       	std	Z+8, r28	; 0x08
 788:	83 81       	ldd	r24, Z+3	; 0x03
 78a:	82 60       	ori	r24, 0x02	; 2
 78c:	83 83       	std	Z+3, r24	; 0x03
 78e:	80 91 28 03 	lds	r24, 0x0328
 792:	90 91 29 03 	lds	r25, 0x0329
 796:	89 2b       	or	r24, r25
 798:	71 f4       	brne	.+28     	; 0x7b6 <fdevopen+0x88>
 79a:	f0 93 29 03 	sts	0x0329, r31
 79e:	e0 93 28 03 	sts	0x0328, r30
 7a2:	80 91 2a 03 	lds	r24, 0x032A
 7a6:	90 91 2b 03 	lds	r25, 0x032B
 7aa:	89 2b       	or	r24, r25
 7ac:	21 f4       	brne	.+8      	; 0x7b6 <fdevopen+0x88>
 7ae:	f0 93 2b 03 	sts	0x032B, r31
 7b2:	e0 93 2a 03 	sts	0x032A, r30
 7b6:	cf 01       	movw	r24, r30
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	08 95       	ret

000007c2 <printf>:
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	fe 01       	movw	r30, r28
 7cc:	36 96       	adiw	r30, 0x06	; 6
 7ce:	61 91       	ld	r22, Z+
 7d0:	71 91       	ld	r23, Z+
 7d2:	af 01       	movw	r20, r30
 7d4:	80 91 28 03 	lds	r24, 0x0328
 7d8:	90 91 29 03 	lds	r25, 0x0329
 7dc:	03 d0       	rcall	.+6      	; 0x7e4 <vfprintf>
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	08 95       	ret

000007e4 <vfprintf>:
 7e4:	2f 92       	push	r2
 7e6:	3f 92       	push	r3
 7e8:	4f 92       	push	r4
 7ea:	5f 92       	push	r5
 7ec:	6f 92       	push	r6
 7ee:	7f 92       	push	r7
 7f0:	8f 92       	push	r8
 7f2:	9f 92       	push	r9
 7f4:	af 92       	push	r10
 7f6:	bf 92       	push	r11
 7f8:	cf 92       	push	r12
 7fa:	df 92       	push	r13
 7fc:	ef 92       	push	r14
 7fe:	ff 92       	push	r15
 800:	0f 93       	push	r16
 802:	1f 93       	push	r17
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	cd b7       	in	r28, 0x3d	; 61
 80a:	de b7       	in	r29, 0x3e	; 62
 80c:	2c 97       	sbiw	r28, 0x0c	; 12
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	f8 94       	cli
 812:	de bf       	out	0x3e, r29	; 62
 814:	0f be       	out	0x3f, r0	; 63
 816:	cd bf       	out	0x3d, r28	; 61
 818:	7c 01       	movw	r14, r24
 81a:	6b 01       	movw	r12, r22
 81c:	8a 01       	movw	r16, r20
 81e:	fc 01       	movw	r30, r24
 820:	17 82       	std	Z+7, r1	; 0x07
 822:	16 82       	std	Z+6, r1	; 0x06
 824:	83 81       	ldd	r24, Z+3	; 0x03
 826:	81 ff       	sbrs	r24, 1
 828:	b0 c1       	rjmp	.+864    	; 0xb8a <vfprintf+0x3a6>
 82a:	ce 01       	movw	r24, r28
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	4c 01       	movw	r8, r24
 830:	f7 01       	movw	r30, r14
 832:	93 81       	ldd	r25, Z+3	; 0x03
 834:	f6 01       	movw	r30, r12
 836:	93 fd       	sbrc	r25, 3
 838:	85 91       	lpm	r24, Z+
 83a:	93 ff       	sbrs	r25, 3
 83c:	81 91       	ld	r24, Z+
 83e:	6f 01       	movw	r12, r30
 840:	88 23       	and	r24, r24
 842:	09 f4       	brne	.+2      	; 0x846 <vfprintf+0x62>
 844:	9e c1       	rjmp	.+828    	; 0xb82 <vfprintf+0x39e>
 846:	85 32       	cpi	r24, 0x25	; 37
 848:	39 f4       	brne	.+14     	; 0x858 <vfprintf+0x74>
 84a:	93 fd       	sbrc	r25, 3
 84c:	85 91       	lpm	r24, Z+
 84e:	93 ff       	sbrs	r25, 3
 850:	81 91       	ld	r24, Z+
 852:	6f 01       	movw	r12, r30
 854:	85 32       	cpi	r24, 0x25	; 37
 856:	21 f4       	brne	.+8      	; 0x860 <vfprintf+0x7c>
 858:	b7 01       	movw	r22, r14
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	e8 d1       	rcall	.+976    	; 0xc2e <fputc>
 85e:	e8 cf       	rjmp	.-48     	; 0x830 <vfprintf+0x4c>
 860:	51 2c       	mov	r5, r1
 862:	31 2c       	mov	r3, r1
 864:	20 e0       	ldi	r18, 0x00	; 0
 866:	20 32       	cpi	r18, 0x20	; 32
 868:	a0 f4       	brcc	.+40     	; 0x892 <vfprintf+0xae>
 86a:	8b 32       	cpi	r24, 0x2B	; 43
 86c:	69 f0       	breq	.+26     	; 0x888 <vfprintf+0xa4>
 86e:	30 f4       	brcc	.+12     	; 0x87c <vfprintf+0x98>
 870:	80 32       	cpi	r24, 0x20	; 32
 872:	59 f0       	breq	.+22     	; 0x88a <vfprintf+0xa6>
 874:	83 32       	cpi	r24, 0x23	; 35
 876:	69 f4       	brne	.+26     	; 0x892 <vfprintf+0xae>
 878:	20 61       	ori	r18, 0x10	; 16
 87a:	2c c0       	rjmp	.+88     	; 0x8d4 <vfprintf+0xf0>
 87c:	8d 32       	cpi	r24, 0x2D	; 45
 87e:	39 f0       	breq	.+14     	; 0x88e <vfprintf+0xaa>
 880:	80 33       	cpi	r24, 0x30	; 48
 882:	39 f4       	brne	.+14     	; 0x892 <vfprintf+0xae>
 884:	21 60       	ori	r18, 0x01	; 1
 886:	26 c0       	rjmp	.+76     	; 0x8d4 <vfprintf+0xf0>
 888:	22 60       	ori	r18, 0x02	; 2
 88a:	24 60       	ori	r18, 0x04	; 4
 88c:	23 c0       	rjmp	.+70     	; 0x8d4 <vfprintf+0xf0>
 88e:	28 60       	ori	r18, 0x08	; 8
 890:	21 c0       	rjmp	.+66     	; 0x8d4 <vfprintf+0xf0>
 892:	27 fd       	sbrc	r18, 7
 894:	27 c0       	rjmp	.+78     	; 0x8e4 <vfprintf+0x100>
 896:	30 ed       	ldi	r19, 0xD0	; 208
 898:	38 0f       	add	r19, r24
 89a:	3a 30       	cpi	r19, 0x0A	; 10
 89c:	78 f4       	brcc	.+30     	; 0x8bc <vfprintf+0xd8>
 89e:	26 ff       	sbrs	r18, 6
 8a0:	06 c0       	rjmp	.+12     	; 0x8ae <vfprintf+0xca>
 8a2:	fa e0       	ldi	r31, 0x0A	; 10
 8a4:	5f 9e       	mul	r5, r31
 8a6:	30 0d       	add	r19, r0
 8a8:	11 24       	eor	r1, r1
 8aa:	53 2e       	mov	r5, r19
 8ac:	13 c0       	rjmp	.+38     	; 0x8d4 <vfprintf+0xf0>
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	38 9e       	mul	r3, r24
 8b2:	30 0d       	add	r19, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	33 2e       	mov	r3, r19
 8b8:	20 62       	ori	r18, 0x20	; 32
 8ba:	0c c0       	rjmp	.+24     	; 0x8d4 <vfprintf+0xf0>
 8bc:	8e 32       	cpi	r24, 0x2E	; 46
 8be:	21 f4       	brne	.+8      	; 0x8c8 <vfprintf+0xe4>
 8c0:	26 fd       	sbrc	r18, 6
 8c2:	5f c1       	rjmp	.+702    	; 0xb82 <vfprintf+0x39e>
 8c4:	20 64       	ori	r18, 0x40	; 64
 8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <vfprintf+0xf0>
 8c8:	8c 36       	cpi	r24, 0x6C	; 108
 8ca:	11 f4       	brne	.+4      	; 0x8d0 <vfprintf+0xec>
 8cc:	20 68       	ori	r18, 0x80	; 128
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <vfprintf+0xf0>
 8d0:	88 36       	cpi	r24, 0x68	; 104
 8d2:	41 f4       	brne	.+16     	; 0x8e4 <vfprintf+0x100>
 8d4:	f6 01       	movw	r30, r12
 8d6:	93 fd       	sbrc	r25, 3
 8d8:	85 91       	lpm	r24, Z+
 8da:	93 ff       	sbrs	r25, 3
 8dc:	81 91       	ld	r24, Z+
 8de:	6f 01       	movw	r12, r30
 8e0:	81 11       	cpse	r24, r1
 8e2:	c1 cf       	rjmp	.-126    	; 0x866 <vfprintf+0x82>
 8e4:	98 2f       	mov	r25, r24
 8e6:	9f 7d       	andi	r25, 0xDF	; 223
 8e8:	95 54       	subi	r25, 0x45	; 69
 8ea:	93 30       	cpi	r25, 0x03	; 3
 8ec:	28 f4       	brcc	.+10     	; 0x8f8 <vfprintf+0x114>
 8ee:	0c 5f       	subi	r16, 0xFC	; 252
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	ff e3       	ldi	r31, 0x3F	; 63
 8f4:	f9 83       	std	Y+1, r31	; 0x01
 8f6:	0d c0       	rjmp	.+26     	; 0x912 <vfprintf+0x12e>
 8f8:	83 36       	cpi	r24, 0x63	; 99
 8fa:	31 f0       	breq	.+12     	; 0x908 <vfprintf+0x124>
 8fc:	83 37       	cpi	r24, 0x73	; 115
 8fe:	71 f0       	breq	.+28     	; 0x91c <vfprintf+0x138>
 900:	83 35       	cpi	r24, 0x53	; 83
 902:	09 f0       	breq	.+2      	; 0x906 <vfprintf+0x122>
 904:	57 c0       	rjmp	.+174    	; 0x9b4 <vfprintf+0x1d0>
 906:	21 c0       	rjmp	.+66     	; 0x94a <vfprintf+0x166>
 908:	f8 01       	movw	r30, r16
 90a:	80 81       	ld	r24, Z
 90c:	89 83       	std	Y+1, r24	; 0x01
 90e:	0e 5f       	subi	r16, 0xFE	; 254
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	44 24       	eor	r4, r4
 914:	43 94       	inc	r4
 916:	51 2c       	mov	r5, r1
 918:	54 01       	movw	r10, r8
 91a:	14 c0       	rjmp	.+40     	; 0x944 <vfprintf+0x160>
 91c:	38 01       	movw	r6, r16
 91e:	f2 e0       	ldi	r31, 0x02	; 2
 920:	6f 0e       	add	r6, r31
 922:	71 1c       	adc	r7, r1
 924:	f8 01       	movw	r30, r16
 926:	a0 80       	ld	r10, Z
 928:	b1 80       	ldd	r11, Z+1	; 0x01
 92a:	26 ff       	sbrs	r18, 6
 92c:	03 c0       	rjmp	.+6      	; 0x934 <vfprintf+0x150>
 92e:	65 2d       	mov	r22, r5
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	02 c0       	rjmp	.+4      	; 0x938 <vfprintf+0x154>
 934:	6f ef       	ldi	r22, 0xFF	; 255
 936:	7f ef       	ldi	r23, 0xFF	; 255
 938:	c5 01       	movw	r24, r10
 93a:	2c 87       	std	Y+12, r18	; 0x0c
 93c:	6d d1       	rcall	.+730    	; 0xc18 <strnlen>
 93e:	2c 01       	movw	r4, r24
 940:	83 01       	movw	r16, r6
 942:	2c 85       	ldd	r18, Y+12	; 0x0c
 944:	2f 77       	andi	r18, 0x7F	; 127
 946:	22 2e       	mov	r2, r18
 948:	16 c0       	rjmp	.+44     	; 0x976 <vfprintf+0x192>
 94a:	38 01       	movw	r6, r16
 94c:	f2 e0       	ldi	r31, 0x02	; 2
 94e:	6f 0e       	add	r6, r31
 950:	71 1c       	adc	r7, r1
 952:	f8 01       	movw	r30, r16
 954:	a0 80       	ld	r10, Z
 956:	b1 80       	ldd	r11, Z+1	; 0x01
 958:	26 ff       	sbrs	r18, 6
 95a:	03 c0       	rjmp	.+6      	; 0x962 <vfprintf+0x17e>
 95c:	65 2d       	mov	r22, r5
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	02 c0       	rjmp	.+4      	; 0x966 <vfprintf+0x182>
 962:	6f ef       	ldi	r22, 0xFF	; 255
 964:	7f ef       	ldi	r23, 0xFF	; 255
 966:	c5 01       	movw	r24, r10
 968:	2c 87       	std	Y+12, r18	; 0x0c
 96a:	44 d1       	rcall	.+648    	; 0xbf4 <strnlen_P>
 96c:	2c 01       	movw	r4, r24
 96e:	2c 85       	ldd	r18, Y+12	; 0x0c
 970:	20 68       	ori	r18, 0x80	; 128
 972:	22 2e       	mov	r2, r18
 974:	83 01       	movw	r16, r6
 976:	23 fc       	sbrc	r2, 3
 978:	19 c0       	rjmp	.+50     	; 0x9ac <vfprintf+0x1c8>
 97a:	83 2d       	mov	r24, r3
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	48 16       	cp	r4, r24
 980:	59 06       	cpc	r5, r25
 982:	a0 f4       	brcc	.+40     	; 0x9ac <vfprintf+0x1c8>
 984:	b7 01       	movw	r22, r14
 986:	80 e2       	ldi	r24, 0x20	; 32
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	51 d1       	rcall	.+674    	; 0xc2e <fputc>
 98c:	3a 94       	dec	r3
 98e:	f5 cf       	rjmp	.-22     	; 0x97a <vfprintf+0x196>
 990:	f5 01       	movw	r30, r10
 992:	27 fc       	sbrc	r2, 7
 994:	85 91       	lpm	r24, Z+
 996:	27 fe       	sbrs	r2, 7
 998:	81 91       	ld	r24, Z+
 99a:	5f 01       	movw	r10, r30
 99c:	b7 01       	movw	r22, r14
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	46 d1       	rcall	.+652    	; 0xc2e <fputc>
 9a2:	31 10       	cpse	r3, r1
 9a4:	3a 94       	dec	r3
 9a6:	f1 e0       	ldi	r31, 0x01	; 1
 9a8:	4f 1a       	sub	r4, r31
 9aa:	51 08       	sbc	r5, r1
 9ac:	41 14       	cp	r4, r1
 9ae:	51 04       	cpc	r5, r1
 9b0:	79 f7       	brne	.-34     	; 0x990 <vfprintf+0x1ac>
 9b2:	de c0       	rjmp	.+444    	; 0xb70 <vfprintf+0x38c>
 9b4:	84 36       	cpi	r24, 0x64	; 100
 9b6:	11 f0       	breq	.+4      	; 0x9bc <vfprintf+0x1d8>
 9b8:	89 36       	cpi	r24, 0x69	; 105
 9ba:	31 f5       	brne	.+76     	; 0xa08 <vfprintf+0x224>
 9bc:	f8 01       	movw	r30, r16
 9be:	27 ff       	sbrs	r18, 7
 9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <vfprintf+0x1ec>
 9c2:	60 81       	ld	r22, Z
 9c4:	71 81       	ldd	r23, Z+1	; 0x01
 9c6:	82 81       	ldd	r24, Z+2	; 0x02
 9c8:	93 81       	ldd	r25, Z+3	; 0x03
 9ca:	0c 5f       	subi	r16, 0xFC	; 252
 9cc:	1f 4f       	sbci	r17, 0xFF	; 255
 9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <vfprintf+0x1fc>
 9d0:	60 81       	ld	r22, Z
 9d2:	71 81       	ldd	r23, Z+1	; 0x01
 9d4:	88 27       	eor	r24, r24
 9d6:	77 fd       	sbrc	r23, 7
 9d8:	80 95       	com	r24
 9da:	98 2f       	mov	r25, r24
 9dc:	0e 5f       	subi	r16, 0xFE	; 254
 9de:	1f 4f       	sbci	r17, 0xFF	; 255
 9e0:	2f 76       	andi	r18, 0x6F	; 111
 9e2:	b2 2e       	mov	r11, r18
 9e4:	97 ff       	sbrs	r25, 7
 9e6:	09 c0       	rjmp	.+18     	; 0x9fa <vfprintf+0x216>
 9e8:	90 95       	com	r25
 9ea:	80 95       	com	r24
 9ec:	70 95       	com	r23
 9ee:	61 95       	neg	r22
 9f0:	7f 4f       	sbci	r23, 0xFF	; 255
 9f2:	8f 4f       	sbci	r24, 0xFF	; 255
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	20 68       	ori	r18, 0x80	; 128
 9f8:	b2 2e       	mov	r11, r18
 9fa:	2a e0       	ldi	r18, 0x0A	; 10
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	a4 01       	movw	r20, r8
 a00:	48 d1       	rcall	.+656    	; 0xc92 <__ultoa_invert>
 a02:	a8 2e       	mov	r10, r24
 a04:	a8 18       	sub	r10, r8
 a06:	43 c0       	rjmp	.+134    	; 0xa8e <vfprintf+0x2aa>
 a08:	85 37       	cpi	r24, 0x75	; 117
 a0a:	29 f4       	brne	.+10     	; 0xa16 <vfprintf+0x232>
 a0c:	2f 7e       	andi	r18, 0xEF	; 239
 a0e:	b2 2e       	mov	r11, r18
 a10:	2a e0       	ldi	r18, 0x0A	; 10
 a12:	30 e0       	ldi	r19, 0x00	; 0
 a14:	25 c0       	rjmp	.+74     	; 0xa60 <vfprintf+0x27c>
 a16:	f2 2f       	mov	r31, r18
 a18:	f9 7f       	andi	r31, 0xF9	; 249
 a1a:	bf 2e       	mov	r11, r31
 a1c:	8f 36       	cpi	r24, 0x6F	; 111
 a1e:	c1 f0       	breq	.+48     	; 0xa50 <vfprintf+0x26c>
 a20:	18 f4       	brcc	.+6      	; 0xa28 <vfprintf+0x244>
 a22:	88 35       	cpi	r24, 0x58	; 88
 a24:	79 f0       	breq	.+30     	; 0xa44 <vfprintf+0x260>
 a26:	ad c0       	rjmp	.+346    	; 0xb82 <vfprintf+0x39e>
 a28:	80 37       	cpi	r24, 0x70	; 112
 a2a:	19 f0       	breq	.+6      	; 0xa32 <vfprintf+0x24e>
 a2c:	88 37       	cpi	r24, 0x78	; 120
 a2e:	21 f0       	breq	.+8      	; 0xa38 <vfprintf+0x254>
 a30:	a8 c0       	rjmp	.+336    	; 0xb82 <vfprintf+0x39e>
 a32:	2f 2f       	mov	r18, r31
 a34:	20 61       	ori	r18, 0x10	; 16
 a36:	b2 2e       	mov	r11, r18
 a38:	b4 fe       	sbrs	r11, 4
 a3a:	0d c0       	rjmp	.+26     	; 0xa56 <vfprintf+0x272>
 a3c:	8b 2d       	mov	r24, r11
 a3e:	84 60       	ori	r24, 0x04	; 4
 a40:	b8 2e       	mov	r11, r24
 a42:	09 c0       	rjmp	.+18     	; 0xa56 <vfprintf+0x272>
 a44:	24 ff       	sbrs	r18, 4
 a46:	0a c0       	rjmp	.+20     	; 0xa5c <vfprintf+0x278>
 a48:	9f 2f       	mov	r25, r31
 a4a:	96 60       	ori	r25, 0x06	; 6
 a4c:	b9 2e       	mov	r11, r25
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <vfprintf+0x278>
 a50:	28 e0       	ldi	r18, 0x08	; 8
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	05 c0       	rjmp	.+10     	; 0xa60 <vfprintf+0x27c>
 a56:	20 e1       	ldi	r18, 0x10	; 16
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <vfprintf+0x27c>
 a5c:	20 e1       	ldi	r18, 0x10	; 16
 a5e:	32 e0       	ldi	r19, 0x02	; 2
 a60:	f8 01       	movw	r30, r16
 a62:	b7 fe       	sbrs	r11, 7
 a64:	07 c0       	rjmp	.+14     	; 0xa74 <vfprintf+0x290>
 a66:	60 81       	ld	r22, Z
 a68:	71 81       	ldd	r23, Z+1	; 0x01
 a6a:	82 81       	ldd	r24, Z+2	; 0x02
 a6c:	93 81       	ldd	r25, Z+3	; 0x03
 a6e:	0c 5f       	subi	r16, 0xFC	; 252
 a70:	1f 4f       	sbci	r17, 0xFF	; 255
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <vfprintf+0x29c>
 a74:	60 81       	ld	r22, Z
 a76:	71 81       	ldd	r23, Z+1	; 0x01
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 5f       	subi	r16, 0xFE	; 254
 a7e:	1f 4f       	sbci	r17, 0xFF	; 255
 a80:	a4 01       	movw	r20, r8
 a82:	07 d1       	rcall	.+526    	; 0xc92 <__ultoa_invert>
 a84:	a8 2e       	mov	r10, r24
 a86:	a8 18       	sub	r10, r8
 a88:	fb 2d       	mov	r31, r11
 a8a:	ff 77       	andi	r31, 0x7F	; 127
 a8c:	bf 2e       	mov	r11, r31
 a8e:	b6 fe       	sbrs	r11, 6
 a90:	0b c0       	rjmp	.+22     	; 0xaa8 <vfprintf+0x2c4>
 a92:	2b 2d       	mov	r18, r11
 a94:	2e 7f       	andi	r18, 0xFE	; 254
 a96:	a5 14       	cp	r10, r5
 a98:	50 f4       	brcc	.+20     	; 0xaae <vfprintf+0x2ca>
 a9a:	b4 fe       	sbrs	r11, 4
 a9c:	0a c0       	rjmp	.+20     	; 0xab2 <vfprintf+0x2ce>
 a9e:	b2 fc       	sbrc	r11, 2
 aa0:	08 c0       	rjmp	.+16     	; 0xab2 <vfprintf+0x2ce>
 aa2:	2b 2d       	mov	r18, r11
 aa4:	2e 7e       	andi	r18, 0xEE	; 238
 aa6:	05 c0       	rjmp	.+10     	; 0xab2 <vfprintf+0x2ce>
 aa8:	7a 2c       	mov	r7, r10
 aaa:	2b 2d       	mov	r18, r11
 aac:	03 c0       	rjmp	.+6      	; 0xab4 <vfprintf+0x2d0>
 aae:	7a 2c       	mov	r7, r10
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <vfprintf+0x2d0>
 ab2:	75 2c       	mov	r7, r5
 ab4:	24 ff       	sbrs	r18, 4
 ab6:	0d c0       	rjmp	.+26     	; 0xad2 <vfprintf+0x2ee>
 ab8:	fe 01       	movw	r30, r28
 aba:	ea 0d       	add	r30, r10
 abc:	f1 1d       	adc	r31, r1
 abe:	80 81       	ld	r24, Z
 ac0:	80 33       	cpi	r24, 0x30	; 48
 ac2:	11 f4       	brne	.+4      	; 0xac8 <vfprintf+0x2e4>
 ac4:	29 7e       	andi	r18, 0xE9	; 233
 ac6:	09 c0       	rjmp	.+18     	; 0xada <vfprintf+0x2f6>
 ac8:	22 ff       	sbrs	r18, 2
 aca:	06 c0       	rjmp	.+12     	; 0xad8 <vfprintf+0x2f4>
 acc:	73 94       	inc	r7
 ace:	73 94       	inc	r7
 ad0:	04 c0       	rjmp	.+8      	; 0xada <vfprintf+0x2f6>
 ad2:	82 2f       	mov	r24, r18
 ad4:	86 78       	andi	r24, 0x86	; 134
 ad6:	09 f0       	breq	.+2      	; 0xada <vfprintf+0x2f6>
 ad8:	73 94       	inc	r7
 ada:	23 fd       	sbrc	r18, 3
 adc:	12 c0       	rjmp	.+36     	; 0xb02 <vfprintf+0x31e>
 ade:	20 ff       	sbrs	r18, 0
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <vfprintf+0x30a>
 ae2:	5a 2c       	mov	r5, r10
 ae4:	73 14       	cp	r7, r3
 ae6:	18 f4       	brcc	.+6      	; 0xaee <vfprintf+0x30a>
 ae8:	53 0c       	add	r5, r3
 aea:	57 18       	sub	r5, r7
 aec:	73 2c       	mov	r7, r3
 aee:	73 14       	cp	r7, r3
 af0:	60 f4       	brcc	.+24     	; 0xb0a <vfprintf+0x326>
 af2:	b7 01       	movw	r22, r14
 af4:	80 e2       	ldi	r24, 0x20	; 32
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	2c 87       	std	Y+12, r18	; 0x0c
 afa:	99 d0       	rcall	.+306    	; 0xc2e <fputc>
 afc:	73 94       	inc	r7
 afe:	2c 85       	ldd	r18, Y+12	; 0x0c
 b00:	f6 cf       	rjmp	.-20     	; 0xaee <vfprintf+0x30a>
 b02:	73 14       	cp	r7, r3
 b04:	10 f4       	brcc	.+4      	; 0xb0a <vfprintf+0x326>
 b06:	37 18       	sub	r3, r7
 b08:	01 c0       	rjmp	.+2      	; 0xb0c <vfprintf+0x328>
 b0a:	31 2c       	mov	r3, r1
 b0c:	24 ff       	sbrs	r18, 4
 b0e:	11 c0       	rjmp	.+34     	; 0xb32 <vfprintf+0x34e>
 b10:	b7 01       	movw	r22, r14
 b12:	80 e3       	ldi	r24, 0x30	; 48
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	2c 87       	std	Y+12, r18	; 0x0c
 b18:	8a d0       	rcall	.+276    	; 0xc2e <fputc>
 b1a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b1c:	22 ff       	sbrs	r18, 2
 b1e:	16 c0       	rjmp	.+44     	; 0xb4c <vfprintf+0x368>
 b20:	21 ff       	sbrs	r18, 1
 b22:	03 c0       	rjmp	.+6      	; 0xb2a <vfprintf+0x346>
 b24:	88 e5       	ldi	r24, 0x58	; 88
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <vfprintf+0x34a>
 b2a:	88 e7       	ldi	r24, 0x78	; 120
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	b7 01       	movw	r22, r14
 b30:	0c c0       	rjmp	.+24     	; 0xb4a <vfprintf+0x366>
 b32:	82 2f       	mov	r24, r18
 b34:	86 78       	andi	r24, 0x86	; 134
 b36:	51 f0       	breq	.+20     	; 0xb4c <vfprintf+0x368>
 b38:	21 fd       	sbrc	r18, 1
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <vfprintf+0x35c>
 b3c:	80 e2       	ldi	r24, 0x20	; 32
 b3e:	01 c0       	rjmp	.+2      	; 0xb42 <vfprintf+0x35e>
 b40:	8b e2       	ldi	r24, 0x2B	; 43
 b42:	27 fd       	sbrc	r18, 7
 b44:	8d e2       	ldi	r24, 0x2D	; 45
 b46:	b7 01       	movw	r22, r14
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	71 d0       	rcall	.+226    	; 0xc2e <fputc>
 b4c:	a5 14       	cp	r10, r5
 b4e:	30 f4       	brcc	.+12     	; 0xb5c <vfprintf+0x378>
 b50:	b7 01       	movw	r22, r14
 b52:	80 e3       	ldi	r24, 0x30	; 48
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	6b d0       	rcall	.+214    	; 0xc2e <fputc>
 b58:	5a 94       	dec	r5
 b5a:	f8 cf       	rjmp	.-16     	; 0xb4c <vfprintf+0x368>
 b5c:	aa 94       	dec	r10
 b5e:	f4 01       	movw	r30, r8
 b60:	ea 0d       	add	r30, r10
 b62:	f1 1d       	adc	r31, r1
 b64:	80 81       	ld	r24, Z
 b66:	b7 01       	movw	r22, r14
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	61 d0       	rcall	.+194    	; 0xc2e <fputc>
 b6c:	a1 10       	cpse	r10, r1
 b6e:	f6 cf       	rjmp	.-20     	; 0xb5c <vfprintf+0x378>
 b70:	33 20       	and	r3, r3
 b72:	09 f4       	brne	.+2      	; 0xb76 <vfprintf+0x392>
 b74:	5d ce       	rjmp	.-838    	; 0x830 <vfprintf+0x4c>
 b76:	b7 01       	movw	r22, r14
 b78:	80 e2       	ldi	r24, 0x20	; 32
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	58 d0       	rcall	.+176    	; 0xc2e <fputc>
 b7e:	3a 94       	dec	r3
 b80:	f7 cf       	rjmp	.-18     	; 0xb70 <vfprintf+0x38c>
 b82:	f7 01       	movw	r30, r14
 b84:	86 81       	ldd	r24, Z+6	; 0x06
 b86:	97 81       	ldd	r25, Z+7	; 0x07
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <vfprintf+0x3aa>
 b8a:	8f ef       	ldi	r24, 0xFF	; 255
 b8c:	9f ef       	ldi	r25, 0xFF	; 255
 b8e:	2c 96       	adiw	r28, 0x0c	; 12
 b90:	0f b6       	in	r0, 0x3f	; 63
 b92:	f8 94       	cli
 b94:	de bf       	out	0x3e, r29	; 62
 b96:	0f be       	out	0x3f, r0	; 63
 b98:	cd bf       	out	0x3d, r28	; 61
 b9a:	df 91       	pop	r29
 b9c:	cf 91       	pop	r28
 b9e:	1f 91       	pop	r17
 ba0:	0f 91       	pop	r16
 ba2:	ff 90       	pop	r15
 ba4:	ef 90       	pop	r14
 ba6:	df 90       	pop	r13
 ba8:	cf 90       	pop	r12
 baa:	bf 90       	pop	r11
 bac:	af 90       	pop	r10
 bae:	9f 90       	pop	r9
 bb0:	8f 90       	pop	r8
 bb2:	7f 90       	pop	r7
 bb4:	6f 90       	pop	r6
 bb6:	5f 90       	pop	r5
 bb8:	4f 90       	pop	r4
 bba:	3f 90       	pop	r3
 bbc:	2f 90       	pop	r2
 bbe:	08 95       	ret

00000bc0 <calloc>:
 bc0:	0f 93       	push	r16
 bc2:	1f 93       	push	r17
 bc4:	cf 93       	push	r28
 bc6:	df 93       	push	r29
 bc8:	86 9f       	mul	r24, r22
 bca:	80 01       	movw	r16, r0
 bcc:	87 9f       	mul	r24, r23
 bce:	10 0d       	add	r17, r0
 bd0:	96 9f       	mul	r25, r22
 bd2:	10 0d       	add	r17, r0
 bd4:	11 24       	eor	r1, r1
 bd6:	c8 01       	movw	r24, r16
 bd8:	83 dc       	rcall	.-1786   	; 0x4e0 <malloc>
 bda:	ec 01       	movw	r28, r24
 bdc:	00 97       	sbiw	r24, 0x00	; 0
 bde:	21 f0       	breq	.+8      	; 0xbe8 <calloc+0x28>
 be0:	a8 01       	movw	r20, r16
 be2:	60 e0       	ldi	r22, 0x00	; 0
 be4:	70 e0       	ldi	r23, 0x00	; 0
 be6:	11 d0       	rcall	.+34     	; 0xc0a <memset>
 be8:	ce 01       	movw	r24, r28
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	1f 91       	pop	r17
 bf0:	0f 91       	pop	r16
 bf2:	08 95       	ret

00000bf4 <strnlen_P>:
 bf4:	fc 01       	movw	r30, r24
 bf6:	05 90       	lpm	r0, Z+
 bf8:	61 50       	subi	r22, 0x01	; 1
 bfa:	70 40       	sbci	r23, 0x00	; 0
 bfc:	01 10       	cpse	r0, r1
 bfe:	d8 f7       	brcc	.-10     	; 0xbf6 <strnlen_P+0x2>
 c00:	80 95       	com	r24
 c02:	90 95       	com	r25
 c04:	8e 0f       	add	r24, r30
 c06:	9f 1f       	adc	r25, r31
 c08:	08 95       	ret

00000c0a <memset>:
 c0a:	dc 01       	movw	r26, r24
 c0c:	01 c0       	rjmp	.+2      	; 0xc10 <memset+0x6>
 c0e:	6d 93       	st	X+, r22
 c10:	41 50       	subi	r20, 0x01	; 1
 c12:	50 40       	sbci	r21, 0x00	; 0
 c14:	e0 f7       	brcc	.-8      	; 0xc0e <memset+0x4>
 c16:	08 95       	ret

00000c18 <strnlen>:
 c18:	fc 01       	movw	r30, r24
 c1a:	61 50       	subi	r22, 0x01	; 1
 c1c:	70 40       	sbci	r23, 0x00	; 0
 c1e:	01 90       	ld	r0, Z+
 c20:	01 10       	cpse	r0, r1
 c22:	d8 f7       	brcc	.-10     	; 0xc1a <strnlen+0x2>
 c24:	80 95       	com	r24
 c26:	90 95       	com	r25
 c28:	8e 0f       	add	r24, r30
 c2a:	9f 1f       	adc	r25, r31
 c2c:	08 95       	ret

00000c2e <fputc>:
 c2e:	0f 93       	push	r16
 c30:	1f 93       	push	r17
 c32:	cf 93       	push	r28
 c34:	df 93       	push	r29
 c36:	18 2f       	mov	r17, r24
 c38:	09 2f       	mov	r16, r25
 c3a:	eb 01       	movw	r28, r22
 c3c:	8b 81       	ldd	r24, Y+3	; 0x03
 c3e:	81 fd       	sbrc	r24, 1
 c40:	03 c0       	rjmp	.+6      	; 0xc48 <fputc+0x1a>
 c42:	8f ef       	ldi	r24, 0xFF	; 255
 c44:	9f ef       	ldi	r25, 0xFF	; 255
 c46:	20 c0       	rjmp	.+64     	; 0xc88 <fputc+0x5a>
 c48:	82 ff       	sbrs	r24, 2
 c4a:	10 c0       	rjmp	.+32     	; 0xc6c <fputc+0x3e>
 c4c:	4e 81       	ldd	r20, Y+6	; 0x06
 c4e:	5f 81       	ldd	r21, Y+7	; 0x07
 c50:	2c 81       	ldd	r18, Y+4	; 0x04
 c52:	3d 81       	ldd	r19, Y+5	; 0x05
 c54:	42 17       	cp	r20, r18
 c56:	53 07       	cpc	r21, r19
 c58:	7c f4       	brge	.+30     	; 0xc78 <fputc+0x4a>
 c5a:	e8 81       	ld	r30, Y
 c5c:	f9 81       	ldd	r31, Y+1	; 0x01
 c5e:	9f 01       	movw	r18, r30
 c60:	2f 5f       	subi	r18, 0xFF	; 255
 c62:	3f 4f       	sbci	r19, 0xFF	; 255
 c64:	39 83       	std	Y+1, r19	; 0x01
 c66:	28 83       	st	Y, r18
 c68:	10 83       	st	Z, r17
 c6a:	06 c0       	rjmp	.+12     	; 0xc78 <fputc+0x4a>
 c6c:	e8 85       	ldd	r30, Y+8	; 0x08
 c6e:	f9 85       	ldd	r31, Y+9	; 0x09
 c70:	81 2f       	mov	r24, r17
 c72:	19 95       	eicall
 c74:	89 2b       	or	r24, r25
 c76:	29 f7       	brne	.-54     	; 0xc42 <fputc+0x14>
 c78:	2e 81       	ldd	r18, Y+6	; 0x06
 c7a:	3f 81       	ldd	r19, Y+7	; 0x07
 c7c:	2f 5f       	subi	r18, 0xFF	; 255
 c7e:	3f 4f       	sbci	r19, 0xFF	; 255
 c80:	3f 83       	std	Y+7, r19	; 0x07
 c82:	2e 83       	std	Y+6, r18	; 0x06
 c84:	81 2f       	mov	r24, r17
 c86:	90 2f       	mov	r25, r16
 c88:	df 91       	pop	r29
 c8a:	cf 91       	pop	r28
 c8c:	1f 91       	pop	r17
 c8e:	0f 91       	pop	r16
 c90:	08 95       	ret

00000c92 <__ultoa_invert>:
 c92:	fa 01       	movw	r30, r20
 c94:	aa 27       	eor	r26, r26
 c96:	28 30       	cpi	r18, 0x08	; 8
 c98:	51 f1       	breq	.+84     	; 0xcee <__ultoa_invert+0x5c>
 c9a:	20 31       	cpi	r18, 0x10	; 16
 c9c:	81 f1       	breq	.+96     	; 0xcfe <__ultoa_invert+0x6c>
 c9e:	e8 94       	clt
 ca0:	6f 93       	push	r22
 ca2:	6e 7f       	andi	r22, 0xFE	; 254
 ca4:	6e 5f       	subi	r22, 0xFE	; 254
 ca6:	7f 4f       	sbci	r23, 0xFF	; 255
 ca8:	8f 4f       	sbci	r24, 0xFF	; 255
 caa:	9f 4f       	sbci	r25, 0xFF	; 255
 cac:	af 4f       	sbci	r26, 0xFF	; 255
 cae:	b1 e0       	ldi	r27, 0x01	; 1
 cb0:	3e d0       	rcall	.+124    	; 0xd2e <__ultoa_invert+0x9c>
 cb2:	b4 e0       	ldi	r27, 0x04	; 4
 cb4:	3c d0       	rcall	.+120    	; 0xd2e <__ultoa_invert+0x9c>
 cb6:	67 0f       	add	r22, r23
 cb8:	78 1f       	adc	r23, r24
 cba:	89 1f       	adc	r24, r25
 cbc:	9a 1f       	adc	r25, r26
 cbe:	a1 1d       	adc	r26, r1
 cc0:	68 0f       	add	r22, r24
 cc2:	79 1f       	adc	r23, r25
 cc4:	8a 1f       	adc	r24, r26
 cc6:	91 1d       	adc	r25, r1
 cc8:	a1 1d       	adc	r26, r1
 cca:	6a 0f       	add	r22, r26
 ccc:	71 1d       	adc	r23, r1
 cce:	81 1d       	adc	r24, r1
 cd0:	91 1d       	adc	r25, r1
 cd2:	a1 1d       	adc	r26, r1
 cd4:	20 d0       	rcall	.+64     	; 0xd16 <__ultoa_invert+0x84>
 cd6:	09 f4       	brne	.+2      	; 0xcda <__ultoa_invert+0x48>
 cd8:	68 94       	set
 cda:	3f 91       	pop	r19
 cdc:	2a e0       	ldi	r18, 0x0A	; 10
 cde:	26 9f       	mul	r18, r22
 ce0:	11 24       	eor	r1, r1
 ce2:	30 19       	sub	r19, r0
 ce4:	30 5d       	subi	r19, 0xD0	; 208
 ce6:	31 93       	st	Z+, r19
 ce8:	de f6       	brtc	.-74     	; 0xca0 <__ultoa_invert+0xe>
 cea:	cf 01       	movw	r24, r30
 cec:	08 95       	ret
 cee:	46 2f       	mov	r20, r22
 cf0:	47 70       	andi	r20, 0x07	; 7
 cf2:	40 5d       	subi	r20, 0xD0	; 208
 cf4:	41 93       	st	Z+, r20
 cf6:	b3 e0       	ldi	r27, 0x03	; 3
 cf8:	0f d0       	rcall	.+30     	; 0xd18 <__ultoa_invert+0x86>
 cfa:	c9 f7       	brne	.-14     	; 0xcee <__ultoa_invert+0x5c>
 cfc:	f6 cf       	rjmp	.-20     	; 0xcea <__ultoa_invert+0x58>
 cfe:	46 2f       	mov	r20, r22
 d00:	4f 70       	andi	r20, 0x0F	; 15
 d02:	40 5d       	subi	r20, 0xD0	; 208
 d04:	4a 33       	cpi	r20, 0x3A	; 58
 d06:	18 f0       	brcs	.+6      	; 0xd0e <__ultoa_invert+0x7c>
 d08:	49 5d       	subi	r20, 0xD9	; 217
 d0a:	31 fd       	sbrc	r19, 1
 d0c:	40 52       	subi	r20, 0x20	; 32
 d0e:	41 93       	st	Z+, r20
 d10:	02 d0       	rcall	.+4      	; 0xd16 <__ultoa_invert+0x84>
 d12:	a9 f7       	brne	.-22     	; 0xcfe <__ultoa_invert+0x6c>
 d14:	ea cf       	rjmp	.-44     	; 0xcea <__ultoa_invert+0x58>
 d16:	b4 e0       	ldi	r27, 0x04	; 4
 d18:	a6 95       	lsr	r26
 d1a:	97 95       	ror	r25
 d1c:	87 95       	ror	r24
 d1e:	77 95       	ror	r23
 d20:	67 95       	ror	r22
 d22:	ba 95       	dec	r27
 d24:	c9 f7       	brne	.-14     	; 0xd18 <__ultoa_invert+0x86>
 d26:	00 97       	sbiw	r24, 0x00	; 0
 d28:	61 05       	cpc	r22, r1
 d2a:	71 05       	cpc	r23, r1
 d2c:	08 95       	ret
 d2e:	9b 01       	movw	r18, r22
 d30:	ac 01       	movw	r20, r24
 d32:	0a 2e       	mov	r0, r26
 d34:	06 94       	lsr	r0
 d36:	57 95       	ror	r21
 d38:	47 95       	ror	r20
 d3a:	37 95       	ror	r19
 d3c:	27 95       	ror	r18
 d3e:	ba 95       	dec	r27
 d40:	c9 f7       	brne	.-14     	; 0xd34 <__ultoa_invert+0xa2>
 d42:	62 0f       	add	r22, r18
 d44:	73 1f       	adc	r23, r19
 d46:	84 1f       	adc	r24, r20
 d48:	95 1f       	adc	r25, r21
 d4a:	a0 1d       	adc	r26, r0
 d4c:	08 95       	ret

00000d4e <_exit>:
 d4e:	f8 94       	cli

00000d50 <__stop_program>:
 d50:	ff cf       	rjmp	.-2      	; 0xd50 <__stop_program>
