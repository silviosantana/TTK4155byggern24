
byggern24_node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800200  00000d04  00000d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002f4  008002f4  00000e8c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001158  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e4  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aaf  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  0000341c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ad8  00000000  00000000  00003ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000467e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	5d c1       	rjmp	.+698    	; 0x2c0 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 3f       	cpi	r26, 0xF4	; 244
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 ef       	ldi	r26, 0xF4	; 244
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 3f       	cpi	r26, 0xFE	; 254
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	76 d1       	rcall	.+748    	; 0x40c <main>
 120:	ef c5       	rjmp	.+3038   	; 0xd00 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_controller_reset>:
	status = spi_read();

	PORTB |= ~(1<<CAN_CS);

	return status;
}
 124:	2f 98       	cbi	0x05, 7	; 5
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	8e d1       	rcall	.+796    	; 0x446 <spi_send>
 12a:	2f 9a       	sbi	0x05, 7	; 5
 12c:	8f e3       	ldi	r24, 0x3F	; 63
 12e:	9c e9       	ldi	r25, 0x9C	; 156
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <can_controller_reset+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <can_controller_reset+0x12>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <can_controller_read>:
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
 13e:	2f 98       	cbi	0x05, 7	; 5
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	81 d1       	rcall	.+770    	; 0x446 <spi_send>
 144:	8c 2f       	mov	r24, r28
 146:	7f d1       	rcall	.+766    	; 0x446 <spi_send>
 148:	80 d1       	rcall	.+768    	; 0x44a <spi_read>
 14a:	2f 9a       	sbi	0x05, 7	; 5
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <can_controller_request_to_send>:
 150:	2f 98       	cbi	0x05, 7	; 5
 152:	81 e8       	ldi	r24, 0x81	; 129
 154:	78 d1       	rcall	.+752    	; 0x446 <spi_send>
 156:	85 b1       	in	r24, 0x05	; 5
 158:	8f 67       	ori	r24, 0x7F	; 127
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	08 95       	ret

0000015e <can_controller_bit_modify>:
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	18 2f       	mov	r17, r24
 166:	d6 2f       	mov	r29, r22
 168:	c4 2f       	mov	r28, r20
 16a:	2f 98       	cbi	0x05, 7	; 5
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	6b d1       	rcall	.+726    	; 0x446 <spi_send>
 170:	81 2f       	mov	r24, r17
 172:	69 d1       	rcall	.+722    	; 0x446 <spi_send>
 174:	8d 2f       	mov	r24, r29
 176:	67 d1       	rcall	.+718    	; 0x446 <spi_send>
 178:	8c 2f       	mov	r24, r28
 17a:	65 d1       	rcall	.+714    	; 0x446 <spi_send>
 17c:	2f 9a       	sbi	0x05, 7	; 5
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	08 95       	ret

00000186 <can_controller_set_mode>:
 186:	48 2f       	mov	r20, r24
 188:	60 ee       	ldi	r22, 0xE0	; 224
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	e8 df       	rcall	.-48     	; 0x15e <can_controller_bit_modify>
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	d4 df       	rcall	.-88     	; 0x13a <can_controller_read>
 192:	80 7e       	andi	r24, 0xE0	; 224
 194:	08 95       	ret

00000196 <can_controller_write>:

void can_controller_write(uint8_t address, uint8_t data)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	d8 2f       	mov	r29, r24
 19c:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
 19e:	2f 98       	cbi	0x05, 7	; 5
	
	spi_send(MCP_WRITE);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	51 d1       	rcall	.+674    	; 0x446 <spi_send>
	spi_send(address);
 1a4:	8d 2f       	mov	r24, r29
 1a6:	4f d1       	rcall	.+670    	; 0x446 <spi_send>
	spi_send(data);
 1a8:	8c 2f       	mov	r24, r28
 1aa:	4d d1       	rcall	.+666    	; 0x446 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
 1ac:	2f 9a       	sbi	0x05, 7	; 5
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <can_controller_init>:

uint8_t can_controller_init()
{
	uint8_t value;

	spi_init(); // Initialize SPI
 1b4:	46 d1       	rcall	.+652    	; 0x442 <spi_init>
	can_controller_reset(); // Send reset-command
 1b6:	b6 df       	rcall	.-148    	; 0x124 <can_controller_reset>
	

	// Self-test
	value = can_controller_read(MCP_CANSTAT);
 1b8:	8e e0       	ldi	r24, 0x0E	; 14
 1ba:	bf df       	rcall	.-130    	; 0x13a <can_controller_read>
	if ((value & MODE_MASK)  != MODE_CONFIG)
 1bc:	98 2f       	mov	r25, r24
 1be:	90 7e       	andi	r25, 0xE0	; 224
 1c0:	90 38       	cpi	r25, 0x80	; 128
 1c2:	69 f0       	breq	.+26     	; 0x1de <can_controller_init+0x2a>
	{
		printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
 1c4:	1f 92       	push	r1
 1c6:	8f 93       	push	r24
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	9f 93       	push	r25
 1ce:	8f 93       	push	r24
 1d0:	d1 d2       	rcall	.+1442   	; 0x774 <printf>
		return 1;
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	08 95       	ret
	}
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000);
 1de:	40 e6       	ldi	r20, 0x60	; 96
 1e0:	60 e6       	ldi	r22, 0x60	; 96
 1e2:	80 e6       	ldi	r24, 0x60	; 96
 1e4:	bc df       	rcall	.-136    	; 0x15e <can_controller_bit_modify>
	//printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
 1e6:	40 e6       	ldi	r20, 0x60	; 96
 1e8:	60 e6       	ldi	r22, 0x60	; 96
 1ea:	80 e7       	ldi	r24, 0x70	; 112
 1ec:	b8 df       	rcall	.-144    	; 0x15e <can_controller_bit_modify>
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

	
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	82 e3       	ldi	r24, 0x32	; 50
 1f2:	d1 df       	rcall	.-94     	; 0x196 <can_controller_write>
	return 0;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
}
 1f6:	08 95       	ret

000001f8 <can_init>:
}

void can_init ()
{
	//set loopback mode
	uint8_t mode = can_controller_set_mode(MODE_NORMAL);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	c5 df       	rcall	.-118    	; 0x186 <can_controller_set_mode>
	if (mode != MODE_NORMAL)
 1fc:	88 23       	and	r24, r24
 1fe:	39 f0       	breq	.+14     	; 0x20e <can_init+0x16>
	{
		printf("Could not set normal mode! I am sorry!\n\r");
 200:	83 e5       	ldi	r24, 0x53	; 83
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	9f 93       	push	r25
 206:	8f 93       	push	r24
 208:	b5 d2       	rcall	.+1386   	; 0x774 <printf>
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
	}
	
	//enable RX interrupts
	can_controller_bit_modify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
 20e:	43 e0       	ldi	r20, 0x03	; 3
 210:	63 e0       	ldi	r22, 0x03	; 3
 212:	8b e2       	ldi	r24, 0x2B	; 43
 214:	a4 df       	rcall	.-184    	; 0x15e <can_controller_bit_modify>
	//can_controller_write(MCP_CANINTE, MCP_RX_INT);
	
	// SET UP INTERRUPTION TO RECIEVE MESSAGE
	DDRD &= ~(1<<PD0);
 216:	50 98       	cbi	0x0a, 0	; 10
	cli();
 218:	f8 94       	cli
	EICRA &= ~(1 << ISC01);
 21a:	e9 e6       	ldi	r30, 0x69	; 105
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	8d 7f       	andi	r24, 0xFD	; 253
 222:	80 83       	st	Z, r24
	EICRA |= (1 << ISC00);	//interrupt on the falling edge
 224:	80 81       	ld	r24, Z
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT0);						//enable external interrupt INT0
 22a:	e8 9a       	sbi	0x1d, 0	; 29
	sei();									//enable Global Interrupt
 22c:	78 94       	sei
 22e:	08 95       	ret

00000230 <can_send_msg>:
}

uint8_t can_send_msg(can_message* msg)
{
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24


	//writhe higher id
	can_controller_write(MCP_TXB0SIDH, msg->id);
 23a:	68 81       	ld	r22, Y
 23c:	81 e3       	ldi	r24, 0x31	; 49
 23e:	ab df       	rcall	.-170    	; 0x196 <can_controller_write>
	
	// Define data length of message
	uint8_t data_length = msg->length;
 240:	09 81       	ldd	r16, Y+1	; 0x01
	can_controller_write(MCP_TXB0DLC, msg->length);
 242:	60 2f       	mov	r22, r16
 244:	85 e3       	ldi	r24, 0x35	; 53
 246:	a7 df       	rcall	.-178    	; 0x196 <can_controller_write>
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
 248:	22 96       	adiw	r28, 0x02	; 2
	for (uint8_t byte = 0; byte < data_length; byte++) {
 24a:	00 23       	and	r16, r16
 24c:	41 f0       	breq	.+16     	; 0x25e <can_send_msg+0x2e>
 24e:	0a 5c       	subi	r16, 0xCA	; 202
 250:	16 e3       	ldi	r17, 0x36	; 54
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
 252:	69 91       	ld	r22, Y+
 254:	81 2f       	mov	r24, r17
 256:	9f df       	rcall	.-194    	; 0x196 <can_controller_write>
 258:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = msg->length;
	can_controller_write(MCP_TXB0DLC, msg->length);
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
 25a:	10 13       	cpse	r17, r16
 25c:	fa cf       	rjmp	.-12     	; 0x252 <can_send_msg+0x22>
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
	}

	// Request to send message, send if successful
	can_controller_request_to_send();
 25e:	78 df       	rcall	.-272    	; 0x150 <can_controller_request_to_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	80 e7       	ldi	r24, 0x70	; 112
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <can_send_msg+0x36>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <can_send_msg+0x40>
 270:	00 00       	nop
	// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE));
	// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF));
	// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
	// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	eb 01       	movw	r28, r22

	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
 286:	18 2f       	mov	r17, r24
 288:	12 95       	swap	r17
 28a:	10 7f       	andi	r17, 0xF0	; 240
 28c:	81 e6       	ldi	r24, 0x61	; 97
 28e:	81 0f       	add	r24, r17
 290:	54 df       	rcall	.-344    	; 0x13a <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
 292:	85 e6       	ldi	r24, 0x65	; 101
 294:	81 0f       	add	r24, r17
 296:	51 df       	rcall	.-350    	; 0x13a <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
 298:	98 2f       	mov	r25, r24
 29a:	9f 70       	andi	r25, 0x0F	; 15
 29c:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 29e:	88 23       	and	r24, r24
 2a0:	51 f0       	breq	.+20     	; 0x2b6 <can_recieve_msg+0x3a>
 2a2:	1a 59       	subi	r17, 0x9A	; 154
 2a4:	22 96       	adiw	r28, 0x02	; 2
 2a6:	08 2f       	mov	r16, r24
 2a8:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
 2aa:	81 2f       	mov	r24, r17
 2ac:	46 df       	rcall	.-372    	; 0x13a <can_controller_read>
 2ae:	89 93       	st	Y+, r24
 2b0:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 2b2:	10 13       	cpse	r17, r16
 2b4:	fa cf       	rjmp	.-12     	; 0x2aa <can_recieve_msg+0x2e>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}	
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <__vector_1>:
#include "util.h"
#include "can_controller_driver.h"


ISR(INT0_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	0b b6       	in	r0, 0x3b	; 59
 2cc:	0f 92       	push	r0
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	cli();
 2f0:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 2f2:	8a e0       	ldi	r24, 0x0A	; 10
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	cd d0       	rcall	.+410    	; 0x492 <malloc>
 2f8:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	printf("message INTERRUPTION recieved\n\r");
 2fa:	8c e7       	ldi	r24, 0x7C	; 124
 2fc:	92 e0       	ldi	r25, 0x02	; 2
 2fe:	9f 93       	push	r25
 300:	8f 93       	push	r24
 302:	38 d2       	rcall	.+1136   	; 0x774 <printf>
	uint8_t canInt = can_controller_read(MCP_CANINTF);
 304:	8c e2       	ldi	r24, 0x2C	; 44
 306:	19 df       	rcall	.-462    	; 0x13a <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	80 ff       	sbrs	r24, 0
 30e:	20 c0       	rjmp	.+64     	; 0x350 <__vector_1+0x90>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	8c e2       	ldi	r24, 0x2C	; 44
 316:	23 df       	rcall	.-442    	; 0x15e <can_controller_bit_modify>
		can_recieve_msg(0, msg);
 318:	be 01       	movw	r22, r28
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	af df       	rcall	.-162    	; 0x27c <can_recieve_msg>
		
		//printf("DATA ON RX0\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	88 23       	and	r24, r24
 322:	09 f4       	brne	.+2      	; 0x326 <__vector_1+0x66>
 324:	44 c0       	rjmp	.+136    	; 0x3ae <__vector_1+0xee>
 326:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
 328:	0c e9       	ldi	r16, 0x9C	; 156
 32a:	12 e0       	ldi	r17, 0x02	; 2
 32c:	fe 01       	movw	r30, r28
 32e:	ef 0d       	add	r30, r15
 330:	f1 1d       	adc	r31, r1
 332:	82 81       	ldd	r24, Z+2	; 0x02
 334:	1f 92       	push	r1
 336:	8f 93       	push	r24
 338:	1f 93       	push	r17
 33a:	0f 93       	push	r16
 33c:	1b d2       	rcall	.+1078   	; 0x774 <printf>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
		can_recieve_msg(0, msg);
		
		//printf("DATA ON RX0\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 33e:	f3 94       	inc	r15
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	f8 16       	cp	r15, r24
 34c:	78 f3       	brcs	.-34     	; 0x32c <__vector_1+0x6c>
 34e:	2f c0       	rjmp	.+94     	; 0x3ae <__vector_1+0xee>
			printf("%d \n\r", msg->data[byte]);
		}
		
	}else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
 350:	81 ff       	sbrs	r24, 1
 352:	26 c0       	rjmp	.+76     	; 0x3a0 <__vector_1+0xe0>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	8c e2       	ldi	r24, 0x2C	; 44
 35a:	01 df       	rcall	.-510    	; 0x15e <can_controller_bit_modify>
		can_recieve_msg(1, msg);
 35c:	be 01       	movw	r22, r28
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	8d df       	rcall	.-230    	; 0x27c <can_recieve_msg>
		
		printf("DATA ON RX1\n\r");
 362:	82 ea       	ldi	r24, 0xA2	; 162
 364:	92 e0       	ldi	r25, 0x02	; 2
 366:	9f 93       	push	r25
 368:	8f 93       	push	r24
 36a:	04 d2       	rcall	.+1032   	; 0x774 <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	88 23       	and	r24, r24
 374:	e1 f0       	breq	.+56     	; 0x3ae <__vector_1+0xee>
 376:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
 378:	0c e9       	ldi	r16, 0x9C	; 156
 37a:	12 e0       	ldi	r17, 0x02	; 2
 37c:	fe 01       	movw	r30, r28
 37e:	ef 0d       	add	r30, r15
 380:	f1 1d       	adc	r31, r1
 382:	82 81       	ldd	r24, Z+2	; 0x02
 384:	1f 92       	push	r1
 386:	8f 93       	push	r24
 388:	1f 93       	push	r17
 38a:	0f 93       	push	r16
 38c:	f3 d1       	rcall	.+998    	; 0x774 <printf>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
		can_recieve_msg(1, msg);
		
		printf("DATA ON RX1\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 38e:	f3 94       	inc	r15
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	f8 16       	cp	r15, r24
 39c:	78 f3       	brcs	.-34     	; 0x37c <__vector_1+0xbc>
 39e:	07 c0       	rjmp	.+14     	; 0x3ae <__vector_1+0xee>
			printf("%d \n\r", msg->data[byte]);
		}
	}else
	{
		printf("No message available on the CAN REX BUFFERs\n\r");
 3a0:	80 eb       	ldi	r24, 0xB0	; 176
 3a2:	92 e0       	ldi	r25, 0x02	; 2
 3a4:	9f 93       	push	r25
 3a6:	8f 93       	push	r24
 3a8:	e5 d1       	rcall	.+970    	; 0x774 <printf>
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
	}
	sei();
 3ae:	78 94       	sei
	
}
 3b0:	ff 91       	pop	r31
 3b2:	ef 91       	pop	r30
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	0f 90       	pop	r0
 3d4:	0b be       	out	0x3b, r0	; 59
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <can_driver_test>:
	}	
}

void can_driver_test()
{
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 3e0:	8a e0       	ldi	r24, 0x0A	; 10
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	56 d0       	rcall	.+172    	; 0x492 <malloc>
 3e6:	fc 01       	movw	r30, r24
	msg->id = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 83       	st	Z, r24
	msg->data[0] = 25;
 3ec:	29 e1       	ldi	r18, 0x19	; 25
 3ee:	22 83       	std	Z+2, r18	; 0x02
	msg->data[1] = 38;
 3f0:	96 e2       	ldi	r25, 0x26	; 38
 3f2:	93 83       	std	Z+3, r25	; 0x03
	msg->data[2] = 95;
 3f4:	8f e5       	ldi	r24, 0x5F	; 95
 3f6:	84 83       	std	Z+4, r24	; 0x04
	msg->data[3] = 25;
 3f8:	25 83       	std	Z+5, r18	; 0x05
	msg->data[4] = 38;
 3fa:	96 83       	std	Z+6, r25	; 0x06
	msg->data[5] = 95;
 3fc:	87 83       	std	Z+7, r24	; 0x07
	msg->data[6] = 38;
 3fe:	90 87       	std	Z+8, r25	; 0x08
	msg->data[7] = 95;
 400:	81 87       	std	Z+9, r24	; 0x09
	msg->length = 8;
 402:	88 e0       	ldi	r24, 0x08	; 8
 404:	81 83       	std	Z+1, r24	; 0x01
	can_send_msg(msg);
 406:	cf 01       	movw	r24, r30
 408:	13 cf       	rjmp	.-474    	; 0x230 <can_send_msg>
 40a:	08 95       	ret

0000040c <main>:
#include "can_controller_driver.h"
#include "can_driver.h"

int main(void)
{
	USART_Init(MYUBRR);
 40c:	87 e6       	ldi	r24, 0x67	; 103
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	30 d0       	rcall	.+96     	; 0x472 <USART_Init>
	
	spi_init();
 412:	17 d0       	rcall	.+46     	; 0x442 <spi_init>
	can_controller_init();
 414:	cf de       	rcall	.-610    	; 0x1b4 <can_controller_init>
	can_init();
 416:	f0 de       	rcall	.-544    	; 0x1f8 <can_init>
	
	printf("Hello from node 2!\n\r");
 418:	8e ed       	ldi	r24, 0xDE	; 222
 41a:	92 e0       	ldi	r25, 0x02	; 2
 41c:	9f 93       	push	r25
 41e:	8f 93       	push	r24
 420:	a9 d1       	rcall	.+850    	; 0x774 <printf>

	can_driver_test();
 422:	de df       	rcall	.-68     	; 0x3e0 <can_driver_test>
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	ff cf       	rjmp	.-2      	; 0x428 <main+0x1c>

0000042a <SPI_MasterInit>:
//TODO - define for register bit (reusable code)

void SPI_MasterInit(void)
{
	/* Set MOSI, SCK and SS output all others input */
	DDRB |= (1<<PB2)|(1<<PB1)|(1<<PB7)|(1<<PB0);
 42a:	84 b1       	in	r24, 0x04	; 4
 42c:	87 68       	ori	r24, 0x87	; 135
 42e:	84 b9       	out	0x04, r24	; 4
	//Set MISO as input
	DDRB &= ~(1<<PB3);
 430:	23 98       	cbi	0x04, 3	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 432:	81 e5       	ldi	r24, 0x51	; 81
 434:	8c bd       	out	0x2c, r24	; 44
 436:	08 95       	ret

00000438 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 438:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 43a:	0d b4       	in	r0, 0x2d	; 45
 43c:	07 fe       	sbrs	r0, 7
 43e:	fd cf       	rjmp	.-6      	; 0x43a <SPI_MasterTransmit+0x2>
}
 440:	08 95       	ret

00000442 <spi_init>:
// }


void spi_init()
{
	SPI_MasterInit();
 442:	f3 cf       	rjmp	.-26     	; 0x42a <SPI_MasterInit>
 444:	08 95       	ret

00000446 <spi_send>:
}

void spi_send(char data)
{
	SPI_MasterTransmit(data);
 446:	f8 cf       	rjmp	.-16     	; 0x438 <SPI_MasterTransmit>
 448:	08 95       	ret

0000044a <spi_read>:
	
}

char spi_read()
{
	SPI_MasterTransmit(0x00);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	f5 df       	rcall	.-22     	; 0x438 <SPI_MasterTransmit>
	return SPDR;
 44e:	8e b5       	in	r24, 0x2e	; 46
}
 450:	08 95       	ret

00000452 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 452:	e0 ec       	ldi	r30, 0xC0	; 192
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	90 81       	ld	r25, Z
 458:	95 ff       	sbrs	r25, 5
 45a:	fd cf       	rjmp	.-6      	; 0x456 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 45c:	80 93 c6 00 	sts	0x00C6, r24
 460:	08 95       	ret

00000462 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 462:	e0 ec       	ldi	r30, 0xC0	; 192
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	88 23       	and	r24, r24
 46a:	ec f7       	brge	.-6      	; 0x466 <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 46c:	80 91 c6 00 	lds	r24, 0x00C6
}
 470:	08 95       	ret

00000472 <USART_Init>:
#include "avr/io.h"

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr >> 8);
 472:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 476:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 47a:	88 e1       	ldi	r24, 0x18	; 24
 47c:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0)|(3 << UCSZ00);
 480:	8e e0       	ldi	r24, 0x0E	; 14
 482:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_Transmit, USART_Receive);
 486:	61 e3       	ldi	r22, 0x31	; 49
 488:	72 e0       	ldi	r23, 0x02	; 2
 48a:	89 e2       	ldi	r24, 0x29	; 41
 48c:	92 e0       	ldi	r25, 0x02	; 2
 48e:	28 c1       	rjmp	.+592    	; 0x6e0 <fdevopen>
 490:	08 95       	ret

00000492 <malloc>:
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	91 05       	cpc	r25, r1
 49a:	10 f4       	brcc	.+4      	; 0x4a0 <malloc+0xe>
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	e0 91 f6 02 	lds	r30, 0x02F6
 4a4:	f0 91 f7 02 	lds	r31, 0x02F7
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	a0 e0       	ldi	r26, 0x00	; 0
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	30 97       	sbiw	r30, 0x00	; 0
 4b2:	39 f1       	breq	.+78     	; 0x502 <malloc+0x70>
 4b4:	40 81       	ld	r20, Z
 4b6:	51 81       	ldd	r21, Z+1	; 0x01
 4b8:	48 17       	cp	r20, r24
 4ba:	59 07       	cpc	r21, r25
 4bc:	b8 f0       	brcs	.+46     	; 0x4ec <malloc+0x5a>
 4be:	48 17       	cp	r20, r24
 4c0:	59 07       	cpc	r21, r25
 4c2:	71 f4       	brne	.+28     	; 0x4e0 <malloc+0x4e>
 4c4:	82 81       	ldd	r24, Z+2	; 0x02
 4c6:	93 81       	ldd	r25, Z+3	; 0x03
 4c8:	10 97       	sbiw	r26, 0x00	; 0
 4ca:	29 f0       	breq	.+10     	; 0x4d6 <malloc+0x44>
 4cc:	13 96       	adiw	r26, 0x03	; 3
 4ce:	9c 93       	st	X, r25
 4d0:	8e 93       	st	-X, r24
 4d2:	12 97       	sbiw	r26, 0x02	; 2
 4d4:	2c c0       	rjmp	.+88     	; 0x52e <malloc+0x9c>
 4d6:	90 93 f7 02 	sts	0x02F7, r25
 4da:	80 93 f6 02 	sts	0x02F6, r24
 4de:	27 c0       	rjmp	.+78     	; 0x52e <malloc+0x9c>
 4e0:	21 15       	cp	r18, r1
 4e2:	31 05       	cpc	r19, r1
 4e4:	31 f0       	breq	.+12     	; 0x4f2 <malloc+0x60>
 4e6:	42 17       	cp	r20, r18
 4e8:	53 07       	cpc	r21, r19
 4ea:	18 f0       	brcs	.+6      	; 0x4f2 <malloc+0x60>
 4ec:	a9 01       	movw	r20, r18
 4ee:	db 01       	movw	r26, r22
 4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <malloc+0x62>
 4f2:	ef 01       	movw	r28, r30
 4f4:	9a 01       	movw	r18, r20
 4f6:	bd 01       	movw	r22, r26
 4f8:	df 01       	movw	r26, r30
 4fa:	02 80       	ldd	r0, Z+2	; 0x02
 4fc:	f3 81       	ldd	r31, Z+3	; 0x03
 4fe:	e0 2d       	mov	r30, r0
 500:	d7 cf       	rjmp	.-82     	; 0x4b0 <malloc+0x1e>
 502:	21 15       	cp	r18, r1
 504:	31 05       	cpc	r19, r1
 506:	f9 f0       	breq	.+62     	; 0x546 <malloc+0xb4>
 508:	28 1b       	sub	r18, r24
 50a:	39 0b       	sbc	r19, r25
 50c:	24 30       	cpi	r18, 0x04	; 4
 50e:	31 05       	cpc	r19, r1
 510:	80 f4       	brcc	.+32     	; 0x532 <malloc+0xa0>
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	9b 81       	ldd	r25, Y+3	; 0x03
 516:	61 15       	cp	r22, r1
 518:	71 05       	cpc	r23, r1
 51a:	21 f0       	breq	.+8      	; 0x524 <malloc+0x92>
 51c:	fb 01       	movw	r30, r22
 51e:	93 83       	std	Z+3, r25	; 0x03
 520:	82 83       	std	Z+2, r24	; 0x02
 522:	04 c0       	rjmp	.+8      	; 0x52c <malloc+0x9a>
 524:	90 93 f7 02 	sts	0x02F7, r25
 528:	80 93 f6 02 	sts	0x02F6, r24
 52c:	fe 01       	movw	r30, r28
 52e:	32 96       	adiw	r30, 0x02	; 2
 530:	44 c0       	rjmp	.+136    	; 0x5ba <malloc+0x128>
 532:	fe 01       	movw	r30, r28
 534:	e2 0f       	add	r30, r18
 536:	f3 1f       	adc	r31, r19
 538:	81 93       	st	Z+, r24
 53a:	91 93       	st	Z+, r25
 53c:	22 50       	subi	r18, 0x02	; 2
 53e:	31 09       	sbc	r19, r1
 540:	39 83       	std	Y+1, r19	; 0x01
 542:	28 83       	st	Y, r18
 544:	3a c0       	rjmp	.+116    	; 0x5ba <malloc+0x128>
 546:	20 91 f4 02 	lds	r18, 0x02F4
 54a:	30 91 f5 02 	lds	r19, 0x02F5
 54e:	23 2b       	or	r18, r19
 550:	41 f4       	brne	.+16     	; 0x562 <malloc+0xd0>
 552:	20 91 02 02 	lds	r18, 0x0202
 556:	30 91 03 02 	lds	r19, 0x0203
 55a:	30 93 f5 02 	sts	0x02F5, r19
 55e:	20 93 f4 02 	sts	0x02F4, r18
 562:	20 91 00 02 	lds	r18, 0x0200
 566:	30 91 01 02 	lds	r19, 0x0201
 56a:	21 15       	cp	r18, r1
 56c:	31 05       	cpc	r19, r1
 56e:	41 f4       	brne	.+16     	; 0x580 <malloc+0xee>
 570:	2d b7       	in	r18, 0x3d	; 61
 572:	3e b7       	in	r19, 0x3e	; 62
 574:	40 91 04 02 	lds	r20, 0x0204
 578:	50 91 05 02 	lds	r21, 0x0205
 57c:	24 1b       	sub	r18, r20
 57e:	35 0b       	sbc	r19, r21
 580:	e0 91 f4 02 	lds	r30, 0x02F4
 584:	f0 91 f5 02 	lds	r31, 0x02F5
 588:	e2 17       	cp	r30, r18
 58a:	f3 07       	cpc	r31, r19
 58c:	a0 f4       	brcc	.+40     	; 0x5b6 <malloc+0x124>
 58e:	2e 1b       	sub	r18, r30
 590:	3f 0b       	sbc	r19, r31
 592:	28 17       	cp	r18, r24
 594:	39 07       	cpc	r19, r25
 596:	78 f0       	brcs	.+30     	; 0x5b6 <malloc+0x124>
 598:	ac 01       	movw	r20, r24
 59a:	4e 5f       	subi	r20, 0xFE	; 254
 59c:	5f 4f       	sbci	r21, 0xFF	; 255
 59e:	24 17       	cp	r18, r20
 5a0:	35 07       	cpc	r19, r21
 5a2:	48 f0       	brcs	.+18     	; 0x5b6 <malloc+0x124>
 5a4:	4e 0f       	add	r20, r30
 5a6:	5f 1f       	adc	r21, r31
 5a8:	50 93 f5 02 	sts	0x02F5, r21
 5ac:	40 93 f4 02 	sts	0x02F4, r20
 5b0:	81 93       	st	Z+, r24
 5b2:	91 93       	st	Z+, r25
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <malloc+0x128>
 5b6:	e0 e0       	ldi	r30, 0x00	; 0
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	cf 01       	movw	r24, r30
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <free>:
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	00 97       	sbiw	r24, 0x00	; 0
 5c8:	09 f4       	brne	.+2      	; 0x5cc <free+0xa>
 5ca:	87 c0       	rjmp	.+270    	; 0x6da <free+0x118>
 5cc:	fc 01       	movw	r30, r24
 5ce:	32 97       	sbiw	r30, 0x02	; 2
 5d0:	13 82       	std	Z+3, r1	; 0x03
 5d2:	12 82       	std	Z+2, r1	; 0x02
 5d4:	c0 91 f6 02 	lds	r28, 0x02F6
 5d8:	d0 91 f7 02 	lds	r29, 0x02F7
 5dc:	20 97       	sbiw	r28, 0x00	; 0
 5de:	81 f4       	brne	.+32     	; 0x600 <free+0x3e>
 5e0:	20 81       	ld	r18, Z
 5e2:	31 81       	ldd	r19, Z+1	; 0x01
 5e4:	28 0f       	add	r18, r24
 5e6:	39 1f       	adc	r19, r25
 5e8:	80 91 f4 02 	lds	r24, 0x02F4
 5ec:	90 91 f5 02 	lds	r25, 0x02F5
 5f0:	82 17       	cp	r24, r18
 5f2:	93 07       	cpc	r25, r19
 5f4:	79 f5       	brne	.+94     	; 0x654 <free+0x92>
 5f6:	f0 93 f5 02 	sts	0x02F5, r31
 5fa:	e0 93 f4 02 	sts	0x02F4, r30
 5fe:	6d c0       	rjmp	.+218    	; 0x6da <free+0x118>
 600:	de 01       	movw	r26, r28
 602:	20 e0       	ldi	r18, 0x00	; 0
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	ae 17       	cp	r26, r30
 608:	bf 07       	cpc	r27, r31
 60a:	50 f4       	brcc	.+20     	; 0x620 <free+0x5e>
 60c:	12 96       	adiw	r26, 0x02	; 2
 60e:	4d 91       	ld	r20, X+
 610:	5c 91       	ld	r21, X
 612:	13 97       	sbiw	r26, 0x03	; 3
 614:	9d 01       	movw	r18, r26
 616:	41 15       	cp	r20, r1
 618:	51 05       	cpc	r21, r1
 61a:	09 f1       	breq	.+66     	; 0x65e <free+0x9c>
 61c:	da 01       	movw	r26, r20
 61e:	f3 cf       	rjmp	.-26     	; 0x606 <free+0x44>
 620:	b3 83       	std	Z+3, r27	; 0x03
 622:	a2 83       	std	Z+2, r26	; 0x02
 624:	40 81       	ld	r20, Z
 626:	51 81       	ldd	r21, Z+1	; 0x01
 628:	84 0f       	add	r24, r20
 62a:	95 1f       	adc	r25, r21
 62c:	8a 17       	cp	r24, r26
 62e:	9b 07       	cpc	r25, r27
 630:	71 f4       	brne	.+28     	; 0x64e <free+0x8c>
 632:	8d 91       	ld	r24, X+
 634:	9c 91       	ld	r25, X
 636:	11 97       	sbiw	r26, 0x01	; 1
 638:	84 0f       	add	r24, r20
 63a:	95 1f       	adc	r25, r21
 63c:	02 96       	adiw	r24, 0x02	; 2
 63e:	91 83       	std	Z+1, r25	; 0x01
 640:	80 83       	st	Z, r24
 642:	12 96       	adiw	r26, 0x02	; 2
 644:	8d 91       	ld	r24, X+
 646:	9c 91       	ld	r25, X
 648:	13 97       	sbiw	r26, 0x03	; 3
 64a:	93 83       	std	Z+3, r25	; 0x03
 64c:	82 83       	std	Z+2, r24	; 0x02
 64e:	21 15       	cp	r18, r1
 650:	31 05       	cpc	r19, r1
 652:	29 f4       	brne	.+10     	; 0x65e <free+0x9c>
 654:	f0 93 f7 02 	sts	0x02F7, r31
 658:	e0 93 f6 02 	sts	0x02F6, r30
 65c:	3e c0       	rjmp	.+124    	; 0x6da <free+0x118>
 65e:	d9 01       	movw	r26, r18
 660:	13 96       	adiw	r26, 0x03	; 3
 662:	fc 93       	st	X, r31
 664:	ee 93       	st	-X, r30
 666:	12 97       	sbiw	r26, 0x02	; 2
 668:	4d 91       	ld	r20, X+
 66a:	5d 91       	ld	r21, X+
 66c:	a4 0f       	add	r26, r20
 66e:	b5 1f       	adc	r27, r21
 670:	ea 17       	cp	r30, r26
 672:	fb 07       	cpc	r31, r27
 674:	79 f4       	brne	.+30     	; 0x694 <free+0xd2>
 676:	80 81       	ld	r24, Z
 678:	91 81       	ldd	r25, Z+1	; 0x01
 67a:	84 0f       	add	r24, r20
 67c:	95 1f       	adc	r25, r21
 67e:	02 96       	adiw	r24, 0x02	; 2
 680:	d9 01       	movw	r26, r18
 682:	11 96       	adiw	r26, 0x01	; 1
 684:	9c 93       	st	X, r25
 686:	8e 93       	st	-X, r24
 688:	82 81       	ldd	r24, Z+2	; 0x02
 68a:	93 81       	ldd	r25, Z+3	; 0x03
 68c:	13 96       	adiw	r26, 0x03	; 3
 68e:	9c 93       	st	X, r25
 690:	8e 93       	st	-X, r24
 692:	12 97       	sbiw	r26, 0x02	; 2
 694:	e0 e0       	ldi	r30, 0x00	; 0
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	8a 81       	ldd	r24, Y+2	; 0x02
 69a:	9b 81       	ldd	r25, Y+3	; 0x03
 69c:	00 97       	sbiw	r24, 0x00	; 0
 69e:	19 f0       	breq	.+6      	; 0x6a6 <free+0xe4>
 6a0:	fe 01       	movw	r30, r28
 6a2:	ec 01       	movw	r28, r24
 6a4:	f9 cf       	rjmp	.-14     	; 0x698 <free+0xd6>
 6a6:	ce 01       	movw	r24, r28
 6a8:	02 96       	adiw	r24, 0x02	; 2
 6aa:	28 81       	ld	r18, Y
 6ac:	39 81       	ldd	r19, Y+1	; 0x01
 6ae:	82 0f       	add	r24, r18
 6b0:	93 1f       	adc	r25, r19
 6b2:	20 91 f4 02 	lds	r18, 0x02F4
 6b6:	30 91 f5 02 	lds	r19, 0x02F5
 6ba:	28 17       	cp	r18, r24
 6bc:	39 07       	cpc	r19, r25
 6be:	69 f4       	brne	.+26     	; 0x6da <free+0x118>
 6c0:	30 97       	sbiw	r30, 0x00	; 0
 6c2:	29 f4       	brne	.+10     	; 0x6ce <free+0x10c>
 6c4:	10 92 f7 02 	sts	0x02F7, r1
 6c8:	10 92 f6 02 	sts	0x02F6, r1
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <free+0x110>
 6ce:	13 82       	std	Z+3, r1	; 0x03
 6d0:	12 82       	std	Z+2, r1	; 0x02
 6d2:	d0 93 f5 02 	sts	0x02F5, r29
 6d6:	c0 93 f4 02 	sts	0x02F4, r28
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <fdevopen>:
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	ec 01       	movw	r28, r24
 6ea:	8b 01       	movw	r16, r22
 6ec:	00 97       	sbiw	r24, 0x00	; 0
 6ee:	31 f4       	brne	.+12     	; 0x6fc <fdevopen+0x1c>
 6f0:	61 15       	cp	r22, r1
 6f2:	71 05       	cpc	r23, r1
 6f4:	19 f4       	brne	.+6      	; 0x6fc <fdevopen+0x1c>
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	37 c0       	rjmp	.+110    	; 0x76a <fdevopen+0x8a>
 6fc:	6e e0       	ldi	r22, 0x0E	; 14
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	36 d2       	rcall	.+1132   	; 0xb72 <calloc>
 706:	fc 01       	movw	r30, r24
 708:	00 97       	sbiw	r24, 0x00	; 0
 70a:	a9 f3       	breq	.-22     	; 0x6f6 <fdevopen+0x16>
 70c:	80 e8       	ldi	r24, 0x80	; 128
 70e:	83 83       	std	Z+3, r24	; 0x03
 710:	01 15       	cp	r16, r1
 712:	11 05       	cpc	r17, r1
 714:	71 f0       	breq	.+28     	; 0x732 <fdevopen+0x52>
 716:	13 87       	std	Z+11, r17	; 0x0b
 718:	02 87       	std	Z+10, r16	; 0x0a
 71a:	81 e8       	ldi	r24, 0x81	; 129
 71c:	83 83       	std	Z+3, r24	; 0x03
 71e:	80 91 f8 02 	lds	r24, 0x02F8
 722:	90 91 f9 02 	lds	r25, 0x02F9
 726:	89 2b       	or	r24, r25
 728:	21 f4       	brne	.+8      	; 0x732 <fdevopen+0x52>
 72a:	f0 93 f9 02 	sts	0x02F9, r31
 72e:	e0 93 f8 02 	sts	0x02F8, r30
 732:	20 97       	sbiw	r28, 0x00	; 0
 734:	c9 f0       	breq	.+50     	; 0x768 <fdevopen+0x88>
 736:	d1 87       	std	Z+9, r29	; 0x09
 738:	c0 87       	std	Z+8, r28	; 0x08
 73a:	83 81       	ldd	r24, Z+3	; 0x03
 73c:	82 60       	ori	r24, 0x02	; 2
 73e:	83 83       	std	Z+3, r24	; 0x03
 740:	80 91 fa 02 	lds	r24, 0x02FA
 744:	90 91 fb 02 	lds	r25, 0x02FB
 748:	89 2b       	or	r24, r25
 74a:	71 f4       	brne	.+28     	; 0x768 <fdevopen+0x88>
 74c:	f0 93 fb 02 	sts	0x02FB, r31
 750:	e0 93 fa 02 	sts	0x02FA, r30
 754:	80 91 fc 02 	lds	r24, 0x02FC
 758:	90 91 fd 02 	lds	r25, 0x02FD
 75c:	89 2b       	or	r24, r25
 75e:	21 f4       	brne	.+8      	; 0x768 <fdevopen+0x88>
 760:	f0 93 fd 02 	sts	0x02FD, r31
 764:	e0 93 fc 02 	sts	0x02FC, r30
 768:	cf 01       	movw	r24, r30
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	08 95       	ret

00000774 <printf>:
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	fe 01       	movw	r30, r28
 77e:	36 96       	adiw	r30, 0x06	; 6
 780:	61 91       	ld	r22, Z+
 782:	71 91       	ld	r23, Z+
 784:	af 01       	movw	r20, r30
 786:	80 91 fa 02 	lds	r24, 0x02FA
 78a:	90 91 fb 02 	lds	r25, 0x02FB
 78e:	03 d0       	rcall	.+6      	; 0x796 <vfprintf>
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <vfprintf>:
 796:	2f 92       	push	r2
 798:	3f 92       	push	r3
 79a:	4f 92       	push	r4
 79c:	5f 92       	push	r5
 79e:	6f 92       	push	r6
 7a0:	7f 92       	push	r7
 7a2:	8f 92       	push	r8
 7a4:	9f 92       	push	r9
 7a6:	af 92       	push	r10
 7a8:	bf 92       	push	r11
 7aa:	cf 92       	push	r12
 7ac:	df 92       	push	r13
 7ae:	ef 92       	push	r14
 7b0:	ff 92       	push	r15
 7b2:	0f 93       	push	r16
 7b4:	1f 93       	push	r17
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	cd b7       	in	r28, 0x3d	; 61
 7bc:	de b7       	in	r29, 0x3e	; 62
 7be:	2c 97       	sbiw	r28, 0x0c	; 12
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	f8 94       	cli
 7c4:	de bf       	out	0x3e, r29	; 62
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	cd bf       	out	0x3d, r28	; 61
 7ca:	7c 01       	movw	r14, r24
 7cc:	6b 01       	movw	r12, r22
 7ce:	8a 01       	movw	r16, r20
 7d0:	fc 01       	movw	r30, r24
 7d2:	17 82       	std	Z+7, r1	; 0x07
 7d4:	16 82       	std	Z+6, r1	; 0x06
 7d6:	83 81       	ldd	r24, Z+3	; 0x03
 7d8:	81 ff       	sbrs	r24, 1
 7da:	b0 c1       	rjmp	.+864    	; 0xb3c <vfprintf+0x3a6>
 7dc:	ce 01       	movw	r24, r28
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	4c 01       	movw	r8, r24
 7e2:	f7 01       	movw	r30, r14
 7e4:	93 81       	ldd	r25, Z+3	; 0x03
 7e6:	f6 01       	movw	r30, r12
 7e8:	93 fd       	sbrc	r25, 3
 7ea:	85 91       	lpm	r24, Z+
 7ec:	93 ff       	sbrs	r25, 3
 7ee:	81 91       	ld	r24, Z+
 7f0:	6f 01       	movw	r12, r30
 7f2:	88 23       	and	r24, r24
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <vfprintf+0x62>
 7f6:	9e c1       	rjmp	.+828    	; 0xb34 <vfprintf+0x39e>
 7f8:	85 32       	cpi	r24, 0x25	; 37
 7fa:	39 f4       	brne	.+14     	; 0x80a <vfprintf+0x74>
 7fc:	93 fd       	sbrc	r25, 3
 7fe:	85 91       	lpm	r24, Z+
 800:	93 ff       	sbrs	r25, 3
 802:	81 91       	ld	r24, Z+
 804:	6f 01       	movw	r12, r30
 806:	85 32       	cpi	r24, 0x25	; 37
 808:	21 f4       	brne	.+8      	; 0x812 <vfprintf+0x7c>
 80a:	b7 01       	movw	r22, r14
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	e8 d1       	rcall	.+976    	; 0xbe0 <fputc>
 810:	e8 cf       	rjmp	.-48     	; 0x7e2 <vfprintf+0x4c>
 812:	51 2c       	mov	r5, r1
 814:	31 2c       	mov	r3, r1
 816:	20 e0       	ldi	r18, 0x00	; 0
 818:	20 32       	cpi	r18, 0x20	; 32
 81a:	a0 f4       	brcc	.+40     	; 0x844 <vfprintf+0xae>
 81c:	8b 32       	cpi	r24, 0x2B	; 43
 81e:	69 f0       	breq	.+26     	; 0x83a <vfprintf+0xa4>
 820:	30 f4       	brcc	.+12     	; 0x82e <vfprintf+0x98>
 822:	80 32       	cpi	r24, 0x20	; 32
 824:	59 f0       	breq	.+22     	; 0x83c <vfprintf+0xa6>
 826:	83 32       	cpi	r24, 0x23	; 35
 828:	69 f4       	brne	.+26     	; 0x844 <vfprintf+0xae>
 82a:	20 61       	ori	r18, 0x10	; 16
 82c:	2c c0       	rjmp	.+88     	; 0x886 <vfprintf+0xf0>
 82e:	8d 32       	cpi	r24, 0x2D	; 45
 830:	39 f0       	breq	.+14     	; 0x840 <vfprintf+0xaa>
 832:	80 33       	cpi	r24, 0x30	; 48
 834:	39 f4       	brne	.+14     	; 0x844 <vfprintf+0xae>
 836:	21 60       	ori	r18, 0x01	; 1
 838:	26 c0       	rjmp	.+76     	; 0x886 <vfprintf+0xf0>
 83a:	22 60       	ori	r18, 0x02	; 2
 83c:	24 60       	ori	r18, 0x04	; 4
 83e:	23 c0       	rjmp	.+70     	; 0x886 <vfprintf+0xf0>
 840:	28 60       	ori	r18, 0x08	; 8
 842:	21 c0       	rjmp	.+66     	; 0x886 <vfprintf+0xf0>
 844:	27 fd       	sbrc	r18, 7
 846:	27 c0       	rjmp	.+78     	; 0x896 <vfprintf+0x100>
 848:	30 ed       	ldi	r19, 0xD0	; 208
 84a:	38 0f       	add	r19, r24
 84c:	3a 30       	cpi	r19, 0x0A	; 10
 84e:	78 f4       	brcc	.+30     	; 0x86e <vfprintf+0xd8>
 850:	26 ff       	sbrs	r18, 6
 852:	06 c0       	rjmp	.+12     	; 0x860 <vfprintf+0xca>
 854:	fa e0       	ldi	r31, 0x0A	; 10
 856:	5f 9e       	mul	r5, r31
 858:	30 0d       	add	r19, r0
 85a:	11 24       	eor	r1, r1
 85c:	53 2e       	mov	r5, r19
 85e:	13 c0       	rjmp	.+38     	; 0x886 <vfprintf+0xf0>
 860:	8a e0       	ldi	r24, 0x0A	; 10
 862:	38 9e       	mul	r3, r24
 864:	30 0d       	add	r19, r0
 866:	11 24       	eor	r1, r1
 868:	33 2e       	mov	r3, r19
 86a:	20 62       	ori	r18, 0x20	; 32
 86c:	0c c0       	rjmp	.+24     	; 0x886 <vfprintf+0xf0>
 86e:	8e 32       	cpi	r24, 0x2E	; 46
 870:	21 f4       	brne	.+8      	; 0x87a <vfprintf+0xe4>
 872:	26 fd       	sbrc	r18, 6
 874:	5f c1       	rjmp	.+702    	; 0xb34 <vfprintf+0x39e>
 876:	20 64       	ori	r18, 0x40	; 64
 878:	06 c0       	rjmp	.+12     	; 0x886 <vfprintf+0xf0>
 87a:	8c 36       	cpi	r24, 0x6C	; 108
 87c:	11 f4       	brne	.+4      	; 0x882 <vfprintf+0xec>
 87e:	20 68       	ori	r18, 0x80	; 128
 880:	02 c0       	rjmp	.+4      	; 0x886 <vfprintf+0xf0>
 882:	88 36       	cpi	r24, 0x68	; 104
 884:	41 f4       	brne	.+16     	; 0x896 <vfprintf+0x100>
 886:	f6 01       	movw	r30, r12
 888:	93 fd       	sbrc	r25, 3
 88a:	85 91       	lpm	r24, Z+
 88c:	93 ff       	sbrs	r25, 3
 88e:	81 91       	ld	r24, Z+
 890:	6f 01       	movw	r12, r30
 892:	81 11       	cpse	r24, r1
 894:	c1 cf       	rjmp	.-126    	; 0x818 <vfprintf+0x82>
 896:	98 2f       	mov	r25, r24
 898:	9f 7d       	andi	r25, 0xDF	; 223
 89a:	95 54       	subi	r25, 0x45	; 69
 89c:	93 30       	cpi	r25, 0x03	; 3
 89e:	28 f4       	brcc	.+10     	; 0x8aa <vfprintf+0x114>
 8a0:	0c 5f       	subi	r16, 0xFC	; 252
 8a2:	1f 4f       	sbci	r17, 0xFF	; 255
 8a4:	ff e3       	ldi	r31, 0x3F	; 63
 8a6:	f9 83       	std	Y+1, r31	; 0x01
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <vfprintf+0x12e>
 8aa:	83 36       	cpi	r24, 0x63	; 99
 8ac:	31 f0       	breq	.+12     	; 0x8ba <vfprintf+0x124>
 8ae:	83 37       	cpi	r24, 0x73	; 115
 8b0:	71 f0       	breq	.+28     	; 0x8ce <vfprintf+0x138>
 8b2:	83 35       	cpi	r24, 0x53	; 83
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <vfprintf+0x122>
 8b6:	57 c0       	rjmp	.+174    	; 0x966 <vfprintf+0x1d0>
 8b8:	21 c0       	rjmp	.+66     	; 0x8fc <vfprintf+0x166>
 8ba:	f8 01       	movw	r30, r16
 8bc:	80 81       	ld	r24, Z
 8be:	89 83       	std	Y+1, r24	; 0x01
 8c0:	0e 5f       	subi	r16, 0xFE	; 254
 8c2:	1f 4f       	sbci	r17, 0xFF	; 255
 8c4:	44 24       	eor	r4, r4
 8c6:	43 94       	inc	r4
 8c8:	51 2c       	mov	r5, r1
 8ca:	54 01       	movw	r10, r8
 8cc:	14 c0       	rjmp	.+40     	; 0x8f6 <vfprintf+0x160>
 8ce:	38 01       	movw	r6, r16
 8d0:	f2 e0       	ldi	r31, 0x02	; 2
 8d2:	6f 0e       	add	r6, r31
 8d4:	71 1c       	adc	r7, r1
 8d6:	f8 01       	movw	r30, r16
 8d8:	a0 80       	ld	r10, Z
 8da:	b1 80       	ldd	r11, Z+1	; 0x01
 8dc:	26 ff       	sbrs	r18, 6
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <vfprintf+0x150>
 8e0:	65 2d       	mov	r22, r5
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x154>
 8e6:	6f ef       	ldi	r22, 0xFF	; 255
 8e8:	7f ef       	ldi	r23, 0xFF	; 255
 8ea:	c5 01       	movw	r24, r10
 8ec:	2c 87       	std	Y+12, r18	; 0x0c
 8ee:	6d d1       	rcall	.+730    	; 0xbca <strnlen>
 8f0:	2c 01       	movw	r4, r24
 8f2:	83 01       	movw	r16, r6
 8f4:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f6:	2f 77       	andi	r18, 0x7F	; 127
 8f8:	22 2e       	mov	r2, r18
 8fa:	16 c0       	rjmp	.+44     	; 0x928 <vfprintf+0x192>
 8fc:	38 01       	movw	r6, r16
 8fe:	f2 e0       	ldi	r31, 0x02	; 2
 900:	6f 0e       	add	r6, r31
 902:	71 1c       	adc	r7, r1
 904:	f8 01       	movw	r30, r16
 906:	a0 80       	ld	r10, Z
 908:	b1 80       	ldd	r11, Z+1	; 0x01
 90a:	26 ff       	sbrs	r18, 6
 90c:	03 c0       	rjmp	.+6      	; 0x914 <vfprintf+0x17e>
 90e:	65 2d       	mov	r22, r5
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	02 c0       	rjmp	.+4      	; 0x918 <vfprintf+0x182>
 914:	6f ef       	ldi	r22, 0xFF	; 255
 916:	7f ef       	ldi	r23, 0xFF	; 255
 918:	c5 01       	movw	r24, r10
 91a:	2c 87       	std	Y+12, r18	; 0x0c
 91c:	44 d1       	rcall	.+648    	; 0xba6 <strnlen_P>
 91e:	2c 01       	movw	r4, r24
 920:	2c 85       	ldd	r18, Y+12	; 0x0c
 922:	20 68       	ori	r18, 0x80	; 128
 924:	22 2e       	mov	r2, r18
 926:	83 01       	movw	r16, r6
 928:	23 fc       	sbrc	r2, 3
 92a:	19 c0       	rjmp	.+50     	; 0x95e <vfprintf+0x1c8>
 92c:	83 2d       	mov	r24, r3
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	48 16       	cp	r4, r24
 932:	59 06       	cpc	r5, r25
 934:	a0 f4       	brcc	.+40     	; 0x95e <vfprintf+0x1c8>
 936:	b7 01       	movw	r22, r14
 938:	80 e2       	ldi	r24, 0x20	; 32
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	51 d1       	rcall	.+674    	; 0xbe0 <fputc>
 93e:	3a 94       	dec	r3
 940:	f5 cf       	rjmp	.-22     	; 0x92c <vfprintf+0x196>
 942:	f5 01       	movw	r30, r10
 944:	27 fc       	sbrc	r2, 7
 946:	85 91       	lpm	r24, Z+
 948:	27 fe       	sbrs	r2, 7
 94a:	81 91       	ld	r24, Z+
 94c:	5f 01       	movw	r10, r30
 94e:	b7 01       	movw	r22, r14
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	46 d1       	rcall	.+652    	; 0xbe0 <fputc>
 954:	31 10       	cpse	r3, r1
 956:	3a 94       	dec	r3
 958:	f1 e0       	ldi	r31, 0x01	; 1
 95a:	4f 1a       	sub	r4, r31
 95c:	51 08       	sbc	r5, r1
 95e:	41 14       	cp	r4, r1
 960:	51 04       	cpc	r5, r1
 962:	79 f7       	brne	.-34     	; 0x942 <vfprintf+0x1ac>
 964:	de c0       	rjmp	.+444    	; 0xb22 <vfprintf+0x38c>
 966:	84 36       	cpi	r24, 0x64	; 100
 968:	11 f0       	breq	.+4      	; 0x96e <vfprintf+0x1d8>
 96a:	89 36       	cpi	r24, 0x69	; 105
 96c:	31 f5       	brne	.+76     	; 0x9ba <vfprintf+0x224>
 96e:	f8 01       	movw	r30, r16
 970:	27 ff       	sbrs	r18, 7
 972:	07 c0       	rjmp	.+14     	; 0x982 <vfprintf+0x1ec>
 974:	60 81       	ld	r22, Z
 976:	71 81       	ldd	r23, Z+1	; 0x01
 978:	82 81       	ldd	r24, Z+2	; 0x02
 97a:	93 81       	ldd	r25, Z+3	; 0x03
 97c:	0c 5f       	subi	r16, 0xFC	; 252
 97e:	1f 4f       	sbci	r17, 0xFF	; 255
 980:	08 c0       	rjmp	.+16     	; 0x992 <vfprintf+0x1fc>
 982:	60 81       	ld	r22, Z
 984:	71 81       	ldd	r23, Z+1	; 0x01
 986:	88 27       	eor	r24, r24
 988:	77 fd       	sbrc	r23, 7
 98a:	80 95       	com	r24
 98c:	98 2f       	mov	r25, r24
 98e:	0e 5f       	subi	r16, 0xFE	; 254
 990:	1f 4f       	sbci	r17, 0xFF	; 255
 992:	2f 76       	andi	r18, 0x6F	; 111
 994:	b2 2e       	mov	r11, r18
 996:	97 ff       	sbrs	r25, 7
 998:	09 c0       	rjmp	.+18     	; 0x9ac <vfprintf+0x216>
 99a:	90 95       	com	r25
 99c:	80 95       	com	r24
 99e:	70 95       	com	r23
 9a0:	61 95       	neg	r22
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	8f 4f       	sbci	r24, 0xFF	; 255
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	20 68       	ori	r18, 0x80	; 128
 9aa:	b2 2e       	mov	r11, r18
 9ac:	2a e0       	ldi	r18, 0x0A	; 10
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	a4 01       	movw	r20, r8
 9b2:	48 d1       	rcall	.+656    	; 0xc44 <__ultoa_invert>
 9b4:	a8 2e       	mov	r10, r24
 9b6:	a8 18       	sub	r10, r8
 9b8:	43 c0       	rjmp	.+134    	; 0xa40 <vfprintf+0x2aa>
 9ba:	85 37       	cpi	r24, 0x75	; 117
 9bc:	29 f4       	brne	.+10     	; 0x9c8 <vfprintf+0x232>
 9be:	2f 7e       	andi	r18, 0xEF	; 239
 9c0:	b2 2e       	mov	r11, r18
 9c2:	2a e0       	ldi	r18, 0x0A	; 10
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	25 c0       	rjmp	.+74     	; 0xa12 <vfprintf+0x27c>
 9c8:	f2 2f       	mov	r31, r18
 9ca:	f9 7f       	andi	r31, 0xF9	; 249
 9cc:	bf 2e       	mov	r11, r31
 9ce:	8f 36       	cpi	r24, 0x6F	; 111
 9d0:	c1 f0       	breq	.+48     	; 0xa02 <vfprintf+0x26c>
 9d2:	18 f4       	brcc	.+6      	; 0x9da <vfprintf+0x244>
 9d4:	88 35       	cpi	r24, 0x58	; 88
 9d6:	79 f0       	breq	.+30     	; 0x9f6 <vfprintf+0x260>
 9d8:	ad c0       	rjmp	.+346    	; 0xb34 <vfprintf+0x39e>
 9da:	80 37       	cpi	r24, 0x70	; 112
 9dc:	19 f0       	breq	.+6      	; 0x9e4 <vfprintf+0x24e>
 9de:	88 37       	cpi	r24, 0x78	; 120
 9e0:	21 f0       	breq	.+8      	; 0x9ea <vfprintf+0x254>
 9e2:	a8 c0       	rjmp	.+336    	; 0xb34 <vfprintf+0x39e>
 9e4:	2f 2f       	mov	r18, r31
 9e6:	20 61       	ori	r18, 0x10	; 16
 9e8:	b2 2e       	mov	r11, r18
 9ea:	b4 fe       	sbrs	r11, 4
 9ec:	0d c0       	rjmp	.+26     	; 0xa08 <vfprintf+0x272>
 9ee:	8b 2d       	mov	r24, r11
 9f0:	84 60       	ori	r24, 0x04	; 4
 9f2:	b8 2e       	mov	r11, r24
 9f4:	09 c0       	rjmp	.+18     	; 0xa08 <vfprintf+0x272>
 9f6:	24 ff       	sbrs	r18, 4
 9f8:	0a c0       	rjmp	.+20     	; 0xa0e <vfprintf+0x278>
 9fa:	9f 2f       	mov	r25, r31
 9fc:	96 60       	ori	r25, 0x06	; 6
 9fe:	b9 2e       	mov	r11, r25
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <vfprintf+0x278>
 a02:	28 e0       	ldi	r18, 0x08	; 8
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	05 c0       	rjmp	.+10     	; 0xa12 <vfprintf+0x27c>
 a08:	20 e1       	ldi	r18, 0x10	; 16
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <vfprintf+0x27c>
 a0e:	20 e1       	ldi	r18, 0x10	; 16
 a10:	32 e0       	ldi	r19, 0x02	; 2
 a12:	f8 01       	movw	r30, r16
 a14:	b7 fe       	sbrs	r11, 7
 a16:	07 c0       	rjmp	.+14     	; 0xa26 <vfprintf+0x290>
 a18:	60 81       	ld	r22, Z
 a1a:	71 81       	ldd	r23, Z+1	; 0x01
 a1c:	82 81       	ldd	r24, Z+2	; 0x02
 a1e:	93 81       	ldd	r25, Z+3	; 0x03
 a20:	0c 5f       	subi	r16, 0xFC	; 252
 a22:	1f 4f       	sbci	r17, 0xFF	; 255
 a24:	06 c0       	rjmp	.+12     	; 0xa32 <vfprintf+0x29c>
 a26:	60 81       	ld	r22, Z
 a28:	71 81       	ldd	r23, Z+1	; 0x01
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	0e 5f       	subi	r16, 0xFE	; 254
 a30:	1f 4f       	sbci	r17, 0xFF	; 255
 a32:	a4 01       	movw	r20, r8
 a34:	07 d1       	rcall	.+526    	; 0xc44 <__ultoa_invert>
 a36:	a8 2e       	mov	r10, r24
 a38:	a8 18       	sub	r10, r8
 a3a:	fb 2d       	mov	r31, r11
 a3c:	ff 77       	andi	r31, 0x7F	; 127
 a3e:	bf 2e       	mov	r11, r31
 a40:	b6 fe       	sbrs	r11, 6
 a42:	0b c0       	rjmp	.+22     	; 0xa5a <vfprintf+0x2c4>
 a44:	2b 2d       	mov	r18, r11
 a46:	2e 7f       	andi	r18, 0xFE	; 254
 a48:	a5 14       	cp	r10, r5
 a4a:	50 f4       	brcc	.+20     	; 0xa60 <vfprintf+0x2ca>
 a4c:	b4 fe       	sbrs	r11, 4
 a4e:	0a c0       	rjmp	.+20     	; 0xa64 <vfprintf+0x2ce>
 a50:	b2 fc       	sbrc	r11, 2
 a52:	08 c0       	rjmp	.+16     	; 0xa64 <vfprintf+0x2ce>
 a54:	2b 2d       	mov	r18, r11
 a56:	2e 7e       	andi	r18, 0xEE	; 238
 a58:	05 c0       	rjmp	.+10     	; 0xa64 <vfprintf+0x2ce>
 a5a:	7a 2c       	mov	r7, r10
 a5c:	2b 2d       	mov	r18, r11
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <vfprintf+0x2d0>
 a60:	7a 2c       	mov	r7, r10
 a62:	01 c0       	rjmp	.+2      	; 0xa66 <vfprintf+0x2d0>
 a64:	75 2c       	mov	r7, r5
 a66:	24 ff       	sbrs	r18, 4
 a68:	0d c0       	rjmp	.+26     	; 0xa84 <vfprintf+0x2ee>
 a6a:	fe 01       	movw	r30, r28
 a6c:	ea 0d       	add	r30, r10
 a6e:	f1 1d       	adc	r31, r1
 a70:	80 81       	ld	r24, Z
 a72:	80 33       	cpi	r24, 0x30	; 48
 a74:	11 f4       	brne	.+4      	; 0xa7a <vfprintf+0x2e4>
 a76:	29 7e       	andi	r18, 0xE9	; 233
 a78:	09 c0       	rjmp	.+18     	; 0xa8c <vfprintf+0x2f6>
 a7a:	22 ff       	sbrs	r18, 2
 a7c:	06 c0       	rjmp	.+12     	; 0xa8a <vfprintf+0x2f4>
 a7e:	73 94       	inc	r7
 a80:	73 94       	inc	r7
 a82:	04 c0       	rjmp	.+8      	; 0xa8c <vfprintf+0x2f6>
 a84:	82 2f       	mov	r24, r18
 a86:	86 78       	andi	r24, 0x86	; 134
 a88:	09 f0       	breq	.+2      	; 0xa8c <vfprintf+0x2f6>
 a8a:	73 94       	inc	r7
 a8c:	23 fd       	sbrc	r18, 3
 a8e:	12 c0       	rjmp	.+36     	; 0xab4 <vfprintf+0x31e>
 a90:	20 ff       	sbrs	r18, 0
 a92:	06 c0       	rjmp	.+12     	; 0xaa0 <vfprintf+0x30a>
 a94:	5a 2c       	mov	r5, r10
 a96:	73 14       	cp	r7, r3
 a98:	18 f4       	brcc	.+6      	; 0xaa0 <vfprintf+0x30a>
 a9a:	53 0c       	add	r5, r3
 a9c:	57 18       	sub	r5, r7
 a9e:	73 2c       	mov	r7, r3
 aa0:	73 14       	cp	r7, r3
 aa2:	60 f4       	brcc	.+24     	; 0xabc <vfprintf+0x326>
 aa4:	b7 01       	movw	r22, r14
 aa6:	80 e2       	ldi	r24, 0x20	; 32
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	2c 87       	std	Y+12, r18	; 0x0c
 aac:	99 d0       	rcall	.+306    	; 0xbe0 <fputc>
 aae:	73 94       	inc	r7
 ab0:	2c 85       	ldd	r18, Y+12	; 0x0c
 ab2:	f6 cf       	rjmp	.-20     	; 0xaa0 <vfprintf+0x30a>
 ab4:	73 14       	cp	r7, r3
 ab6:	10 f4       	brcc	.+4      	; 0xabc <vfprintf+0x326>
 ab8:	37 18       	sub	r3, r7
 aba:	01 c0       	rjmp	.+2      	; 0xabe <vfprintf+0x328>
 abc:	31 2c       	mov	r3, r1
 abe:	24 ff       	sbrs	r18, 4
 ac0:	11 c0       	rjmp	.+34     	; 0xae4 <vfprintf+0x34e>
 ac2:	b7 01       	movw	r22, r14
 ac4:	80 e3       	ldi	r24, 0x30	; 48
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	2c 87       	std	Y+12, r18	; 0x0c
 aca:	8a d0       	rcall	.+276    	; 0xbe0 <fputc>
 acc:	2c 85       	ldd	r18, Y+12	; 0x0c
 ace:	22 ff       	sbrs	r18, 2
 ad0:	16 c0       	rjmp	.+44     	; 0xafe <vfprintf+0x368>
 ad2:	21 ff       	sbrs	r18, 1
 ad4:	03 c0       	rjmp	.+6      	; 0xadc <vfprintf+0x346>
 ad6:	88 e5       	ldi	r24, 0x58	; 88
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <vfprintf+0x34a>
 adc:	88 e7       	ldi	r24, 0x78	; 120
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	b7 01       	movw	r22, r14
 ae2:	0c c0       	rjmp	.+24     	; 0xafc <vfprintf+0x366>
 ae4:	82 2f       	mov	r24, r18
 ae6:	86 78       	andi	r24, 0x86	; 134
 ae8:	51 f0       	breq	.+20     	; 0xafe <vfprintf+0x368>
 aea:	21 fd       	sbrc	r18, 1
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <vfprintf+0x35c>
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	01 c0       	rjmp	.+2      	; 0xaf4 <vfprintf+0x35e>
 af2:	8b e2       	ldi	r24, 0x2B	; 43
 af4:	27 fd       	sbrc	r18, 7
 af6:	8d e2       	ldi	r24, 0x2D	; 45
 af8:	b7 01       	movw	r22, r14
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	71 d0       	rcall	.+226    	; 0xbe0 <fputc>
 afe:	a5 14       	cp	r10, r5
 b00:	30 f4       	brcc	.+12     	; 0xb0e <vfprintf+0x378>
 b02:	b7 01       	movw	r22, r14
 b04:	80 e3       	ldi	r24, 0x30	; 48
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	6b d0       	rcall	.+214    	; 0xbe0 <fputc>
 b0a:	5a 94       	dec	r5
 b0c:	f8 cf       	rjmp	.-16     	; 0xafe <vfprintf+0x368>
 b0e:	aa 94       	dec	r10
 b10:	f4 01       	movw	r30, r8
 b12:	ea 0d       	add	r30, r10
 b14:	f1 1d       	adc	r31, r1
 b16:	80 81       	ld	r24, Z
 b18:	b7 01       	movw	r22, r14
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	61 d0       	rcall	.+194    	; 0xbe0 <fputc>
 b1e:	a1 10       	cpse	r10, r1
 b20:	f6 cf       	rjmp	.-20     	; 0xb0e <vfprintf+0x378>
 b22:	33 20       	and	r3, r3
 b24:	09 f4       	brne	.+2      	; 0xb28 <vfprintf+0x392>
 b26:	5d ce       	rjmp	.-838    	; 0x7e2 <vfprintf+0x4c>
 b28:	b7 01       	movw	r22, r14
 b2a:	80 e2       	ldi	r24, 0x20	; 32
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	58 d0       	rcall	.+176    	; 0xbe0 <fputc>
 b30:	3a 94       	dec	r3
 b32:	f7 cf       	rjmp	.-18     	; 0xb22 <vfprintf+0x38c>
 b34:	f7 01       	movw	r30, r14
 b36:	86 81       	ldd	r24, Z+6	; 0x06
 b38:	97 81       	ldd	r25, Z+7	; 0x07
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <vfprintf+0x3aa>
 b3c:	8f ef       	ldi	r24, 0xFF	; 255
 b3e:	9f ef       	ldi	r25, 0xFF	; 255
 b40:	2c 96       	adiw	r28, 0x0c	; 12
 b42:	0f b6       	in	r0, 0x3f	; 63
 b44:	f8 94       	cli
 b46:	de bf       	out	0x3e, r29	; 62
 b48:	0f be       	out	0x3f, r0	; 63
 b4a:	cd bf       	out	0x3d, r28	; 61
 b4c:	df 91       	pop	r29
 b4e:	cf 91       	pop	r28
 b50:	1f 91       	pop	r17
 b52:	0f 91       	pop	r16
 b54:	ff 90       	pop	r15
 b56:	ef 90       	pop	r14
 b58:	df 90       	pop	r13
 b5a:	cf 90       	pop	r12
 b5c:	bf 90       	pop	r11
 b5e:	af 90       	pop	r10
 b60:	9f 90       	pop	r9
 b62:	8f 90       	pop	r8
 b64:	7f 90       	pop	r7
 b66:	6f 90       	pop	r6
 b68:	5f 90       	pop	r5
 b6a:	4f 90       	pop	r4
 b6c:	3f 90       	pop	r3
 b6e:	2f 90       	pop	r2
 b70:	08 95       	ret

00000b72 <calloc>:
 b72:	0f 93       	push	r16
 b74:	1f 93       	push	r17
 b76:	cf 93       	push	r28
 b78:	df 93       	push	r29
 b7a:	86 9f       	mul	r24, r22
 b7c:	80 01       	movw	r16, r0
 b7e:	87 9f       	mul	r24, r23
 b80:	10 0d       	add	r17, r0
 b82:	96 9f       	mul	r25, r22
 b84:	10 0d       	add	r17, r0
 b86:	11 24       	eor	r1, r1
 b88:	c8 01       	movw	r24, r16
 b8a:	83 dc       	rcall	.-1786   	; 0x492 <malloc>
 b8c:	ec 01       	movw	r28, r24
 b8e:	00 97       	sbiw	r24, 0x00	; 0
 b90:	21 f0       	breq	.+8      	; 0xb9a <calloc+0x28>
 b92:	a8 01       	movw	r20, r16
 b94:	60 e0       	ldi	r22, 0x00	; 0
 b96:	70 e0       	ldi	r23, 0x00	; 0
 b98:	11 d0       	rcall	.+34     	; 0xbbc <memset>
 b9a:	ce 01       	movw	r24, r28
 b9c:	df 91       	pop	r29
 b9e:	cf 91       	pop	r28
 ba0:	1f 91       	pop	r17
 ba2:	0f 91       	pop	r16
 ba4:	08 95       	ret

00000ba6 <strnlen_P>:
 ba6:	fc 01       	movw	r30, r24
 ba8:	05 90       	lpm	r0, Z+
 baa:	61 50       	subi	r22, 0x01	; 1
 bac:	70 40       	sbci	r23, 0x00	; 0
 bae:	01 10       	cpse	r0, r1
 bb0:	d8 f7       	brcc	.-10     	; 0xba8 <strnlen_P+0x2>
 bb2:	80 95       	com	r24
 bb4:	90 95       	com	r25
 bb6:	8e 0f       	add	r24, r30
 bb8:	9f 1f       	adc	r25, r31
 bba:	08 95       	ret

00000bbc <memset>:
 bbc:	dc 01       	movw	r26, r24
 bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <memset+0x6>
 bc0:	6d 93       	st	X+, r22
 bc2:	41 50       	subi	r20, 0x01	; 1
 bc4:	50 40       	sbci	r21, 0x00	; 0
 bc6:	e0 f7       	brcc	.-8      	; 0xbc0 <memset+0x4>
 bc8:	08 95       	ret

00000bca <strnlen>:
 bca:	fc 01       	movw	r30, r24
 bcc:	61 50       	subi	r22, 0x01	; 1
 bce:	70 40       	sbci	r23, 0x00	; 0
 bd0:	01 90       	ld	r0, Z+
 bd2:	01 10       	cpse	r0, r1
 bd4:	d8 f7       	brcc	.-10     	; 0xbcc <strnlen+0x2>
 bd6:	80 95       	com	r24
 bd8:	90 95       	com	r25
 bda:	8e 0f       	add	r24, r30
 bdc:	9f 1f       	adc	r25, r31
 bde:	08 95       	ret

00000be0 <fputc>:
 be0:	0f 93       	push	r16
 be2:	1f 93       	push	r17
 be4:	cf 93       	push	r28
 be6:	df 93       	push	r29
 be8:	18 2f       	mov	r17, r24
 bea:	09 2f       	mov	r16, r25
 bec:	eb 01       	movw	r28, r22
 bee:	8b 81       	ldd	r24, Y+3	; 0x03
 bf0:	81 fd       	sbrc	r24, 1
 bf2:	03 c0       	rjmp	.+6      	; 0xbfa <fputc+0x1a>
 bf4:	8f ef       	ldi	r24, 0xFF	; 255
 bf6:	9f ef       	ldi	r25, 0xFF	; 255
 bf8:	20 c0       	rjmp	.+64     	; 0xc3a <fputc+0x5a>
 bfa:	82 ff       	sbrs	r24, 2
 bfc:	10 c0       	rjmp	.+32     	; 0xc1e <fputc+0x3e>
 bfe:	4e 81       	ldd	r20, Y+6	; 0x06
 c00:	5f 81       	ldd	r21, Y+7	; 0x07
 c02:	2c 81       	ldd	r18, Y+4	; 0x04
 c04:	3d 81       	ldd	r19, Y+5	; 0x05
 c06:	42 17       	cp	r20, r18
 c08:	53 07       	cpc	r21, r19
 c0a:	7c f4       	brge	.+30     	; 0xc2a <fputc+0x4a>
 c0c:	e8 81       	ld	r30, Y
 c0e:	f9 81       	ldd	r31, Y+1	; 0x01
 c10:	9f 01       	movw	r18, r30
 c12:	2f 5f       	subi	r18, 0xFF	; 255
 c14:	3f 4f       	sbci	r19, 0xFF	; 255
 c16:	39 83       	std	Y+1, r19	; 0x01
 c18:	28 83       	st	Y, r18
 c1a:	10 83       	st	Z, r17
 c1c:	06 c0       	rjmp	.+12     	; 0xc2a <fputc+0x4a>
 c1e:	e8 85       	ldd	r30, Y+8	; 0x08
 c20:	f9 85       	ldd	r31, Y+9	; 0x09
 c22:	81 2f       	mov	r24, r17
 c24:	19 95       	eicall
 c26:	89 2b       	or	r24, r25
 c28:	29 f7       	brne	.-54     	; 0xbf4 <fputc+0x14>
 c2a:	2e 81       	ldd	r18, Y+6	; 0x06
 c2c:	3f 81       	ldd	r19, Y+7	; 0x07
 c2e:	2f 5f       	subi	r18, 0xFF	; 255
 c30:	3f 4f       	sbci	r19, 0xFF	; 255
 c32:	3f 83       	std	Y+7, r19	; 0x07
 c34:	2e 83       	std	Y+6, r18	; 0x06
 c36:	81 2f       	mov	r24, r17
 c38:	90 2f       	mov	r25, r16
 c3a:	df 91       	pop	r29
 c3c:	cf 91       	pop	r28
 c3e:	1f 91       	pop	r17
 c40:	0f 91       	pop	r16
 c42:	08 95       	ret

00000c44 <__ultoa_invert>:
 c44:	fa 01       	movw	r30, r20
 c46:	aa 27       	eor	r26, r26
 c48:	28 30       	cpi	r18, 0x08	; 8
 c4a:	51 f1       	breq	.+84     	; 0xca0 <__ultoa_invert+0x5c>
 c4c:	20 31       	cpi	r18, 0x10	; 16
 c4e:	81 f1       	breq	.+96     	; 0xcb0 <__ultoa_invert+0x6c>
 c50:	e8 94       	clt
 c52:	6f 93       	push	r22
 c54:	6e 7f       	andi	r22, 0xFE	; 254
 c56:	6e 5f       	subi	r22, 0xFE	; 254
 c58:	7f 4f       	sbci	r23, 0xFF	; 255
 c5a:	8f 4f       	sbci	r24, 0xFF	; 255
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	af 4f       	sbci	r26, 0xFF	; 255
 c60:	b1 e0       	ldi	r27, 0x01	; 1
 c62:	3e d0       	rcall	.+124    	; 0xce0 <__ultoa_invert+0x9c>
 c64:	b4 e0       	ldi	r27, 0x04	; 4
 c66:	3c d0       	rcall	.+120    	; 0xce0 <__ultoa_invert+0x9c>
 c68:	67 0f       	add	r22, r23
 c6a:	78 1f       	adc	r23, r24
 c6c:	89 1f       	adc	r24, r25
 c6e:	9a 1f       	adc	r25, r26
 c70:	a1 1d       	adc	r26, r1
 c72:	68 0f       	add	r22, r24
 c74:	79 1f       	adc	r23, r25
 c76:	8a 1f       	adc	r24, r26
 c78:	91 1d       	adc	r25, r1
 c7a:	a1 1d       	adc	r26, r1
 c7c:	6a 0f       	add	r22, r26
 c7e:	71 1d       	adc	r23, r1
 c80:	81 1d       	adc	r24, r1
 c82:	91 1d       	adc	r25, r1
 c84:	a1 1d       	adc	r26, r1
 c86:	20 d0       	rcall	.+64     	; 0xcc8 <__ultoa_invert+0x84>
 c88:	09 f4       	brne	.+2      	; 0xc8c <__ultoa_invert+0x48>
 c8a:	68 94       	set
 c8c:	3f 91       	pop	r19
 c8e:	2a e0       	ldi	r18, 0x0A	; 10
 c90:	26 9f       	mul	r18, r22
 c92:	11 24       	eor	r1, r1
 c94:	30 19       	sub	r19, r0
 c96:	30 5d       	subi	r19, 0xD0	; 208
 c98:	31 93       	st	Z+, r19
 c9a:	de f6       	brtc	.-74     	; 0xc52 <__ultoa_invert+0xe>
 c9c:	cf 01       	movw	r24, r30
 c9e:	08 95       	ret
 ca0:	46 2f       	mov	r20, r22
 ca2:	47 70       	andi	r20, 0x07	; 7
 ca4:	40 5d       	subi	r20, 0xD0	; 208
 ca6:	41 93       	st	Z+, r20
 ca8:	b3 e0       	ldi	r27, 0x03	; 3
 caa:	0f d0       	rcall	.+30     	; 0xcca <__ultoa_invert+0x86>
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__ultoa_invert+0x5c>
 cae:	f6 cf       	rjmp	.-20     	; 0xc9c <__ultoa_invert+0x58>
 cb0:	46 2f       	mov	r20, r22
 cb2:	4f 70       	andi	r20, 0x0F	; 15
 cb4:	40 5d       	subi	r20, 0xD0	; 208
 cb6:	4a 33       	cpi	r20, 0x3A	; 58
 cb8:	18 f0       	brcs	.+6      	; 0xcc0 <__ultoa_invert+0x7c>
 cba:	49 5d       	subi	r20, 0xD9	; 217
 cbc:	31 fd       	sbrc	r19, 1
 cbe:	40 52       	subi	r20, 0x20	; 32
 cc0:	41 93       	st	Z+, r20
 cc2:	02 d0       	rcall	.+4      	; 0xcc8 <__ultoa_invert+0x84>
 cc4:	a9 f7       	brne	.-22     	; 0xcb0 <__ultoa_invert+0x6c>
 cc6:	ea cf       	rjmp	.-44     	; 0xc9c <__ultoa_invert+0x58>
 cc8:	b4 e0       	ldi	r27, 0x04	; 4
 cca:	a6 95       	lsr	r26
 ccc:	97 95       	ror	r25
 cce:	87 95       	ror	r24
 cd0:	77 95       	ror	r23
 cd2:	67 95       	ror	r22
 cd4:	ba 95       	dec	r27
 cd6:	c9 f7       	brne	.-14     	; 0xcca <__ultoa_invert+0x86>
 cd8:	00 97       	sbiw	r24, 0x00	; 0
 cda:	61 05       	cpc	r22, r1
 cdc:	71 05       	cpc	r23, r1
 cde:	08 95       	ret
 ce0:	9b 01       	movw	r18, r22
 ce2:	ac 01       	movw	r20, r24
 ce4:	0a 2e       	mov	r0, r26
 ce6:	06 94       	lsr	r0
 ce8:	57 95       	ror	r21
 cea:	47 95       	ror	r20
 cec:	37 95       	ror	r19
 cee:	27 95       	ror	r18
 cf0:	ba 95       	dec	r27
 cf2:	c9 f7       	brne	.-14     	; 0xce6 <__ultoa_invert+0xa2>
 cf4:	62 0f       	add	r22, r18
 cf6:	73 1f       	adc	r23, r19
 cf8:	84 1f       	adc	r24, r20
 cfa:	95 1f       	adc	r25, r21
 cfc:	a0 1d       	adc	r26, r0
 cfe:	08 95       	ret

00000d00 <_exit>:
 d00:	f8 94       	cli

00000d02 <__stop_program>:
 d02:	ff cf       	rjmp	.-2      	; 0xd02 <__stop_program>
