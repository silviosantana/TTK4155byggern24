
byggern24_node2_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800200  0000193c  000019d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000193c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  008002ac  008002ac  00001a7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002648  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012b5  00000000  00000000  00004410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a35  00000000  00000000  000056c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006a8  00000000  00000000  000070fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000968  00000000  00000000  000077a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012fc  00000000  00000000  0000810c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  00009408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c1       	rjmp	.+938    	; 0x3c0 <__vector_5>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	50 c5       	rjmp	.+2720   	; 0xb3e <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ea c3       	rjmp	.+2004   	; 0x87e <__vector_42>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ba 05       	cpc	r27, r10
      e6:	0c 06       	cpc	r0, r28
      e8:	0c 06       	cpc	r0, r28
      ea:	0c 06       	cpc	r0, r28
      ec:	0c 06       	cpc	r0, r28
      ee:	0c 06       	cpc	r0, r28
      f0:	0c 06       	cpc	r0, r28
      f2:	0c 06       	cpc	r0, r28
      f4:	ba 05       	cpc	r27, r10
      f6:	0c 06       	cpc	r0, r28
      f8:	0c 06       	cpc	r0, r28
      fa:	0c 06       	cpc	r0, r28
      fc:	0c 06       	cpc	r0, r28
      fe:	0c 06       	cpc	r0, r28
     100:	0c 06       	cpc	r0, r28
     102:	0c 06       	cpc	r0, r28
     104:	bc 05       	cpc	r27, r12
     106:	0c 06       	cpc	r0, r28
     108:	0c 06       	cpc	r0, r28
     10a:	0c 06       	cpc	r0, r28
     10c:	0c 06       	cpc	r0, r28
     10e:	0c 06       	cpc	r0, r28
     110:	0c 06       	cpc	r0, r28
     112:	0c 06       	cpc	r0, r28
     114:	0c 06       	cpc	r0, r28
     116:	0c 06       	cpc	r0, r28
     118:	0c 06       	cpc	r0, r28
     11a:	0c 06       	cpc	r0, r28
     11c:	0c 06       	cpc	r0, r28
     11e:	0c 06       	cpc	r0, r28
     120:	0c 06       	cpc	r0, r28
     122:	0c 06       	cpc	r0, r28
     124:	bc 05       	cpc	r27, r12
     126:	0c 06       	cpc	r0, r28
     128:	0c 06       	cpc	r0, r28
     12a:	0c 06       	cpc	r0, r28
     12c:	0c 06       	cpc	r0, r28
     12e:	0c 06       	cpc	r0, r28
     130:	0c 06       	cpc	r0, r28
     132:	0c 06       	cpc	r0, r28
     134:	0c 06       	cpc	r0, r28
     136:	0c 06       	cpc	r0, r28
     138:	0c 06       	cpc	r0, r28
     13a:	0c 06       	cpc	r0, r28
     13c:	0c 06       	cpc	r0, r28
     13e:	0c 06       	cpc	r0, r28
     140:	0c 06       	cpc	r0, r28
     142:	0c 06       	cpc	r0, r28
     144:	08 06       	cpc	r0, r24
     146:	0c 06       	cpc	r0, r28
     148:	0c 06       	cpc	r0, r28
     14a:	0c 06       	cpc	r0, r28
     14c:	0c 06       	cpc	r0, r28
     14e:	0c 06       	cpc	r0, r28
     150:	0c 06       	cpc	r0, r28
     152:	0c 06       	cpc	r0, r28
     154:	e5 05       	cpc	r30, r5
     156:	0c 06       	cpc	r0, r28
     158:	0c 06       	cpc	r0, r28
     15a:	0c 06       	cpc	r0, r28
     15c:	0c 06       	cpc	r0, r28
     15e:	0c 06       	cpc	r0, r28
     160:	0c 06       	cpc	r0, r28
     162:	0c 06       	cpc	r0, r28
     164:	0c 06       	cpc	r0, r28
     166:	0c 06       	cpc	r0, r28
     168:	0c 06       	cpc	r0, r28
     16a:	0c 06       	cpc	r0, r28
     16c:	0c 06       	cpc	r0, r28
     16e:	0c 06       	cpc	r0, r28
     170:	0c 06       	cpc	r0, r28
     172:	0c 06       	cpc	r0, r28
     174:	d9 05       	cpc	r29, r9
     176:	0c 06       	cpc	r0, r28
     178:	0c 06       	cpc	r0, r28
     17a:	0c 06       	cpc	r0, r28
     17c:	0c 06       	cpc	r0, r28
     17e:	0c 06       	cpc	r0, r28
     180:	0c 06       	cpc	r0, r28
     182:	0c 06       	cpc	r0, r28
     184:	f7 05       	cpc	r31, r7

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ec e3       	ldi	r30, 0x3C	; 60
     19e:	f9 e1       	ldi	r31, 0x19	; 25
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ac 3a       	cpi	r26, 0xAC	; 172
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	ac ea       	ldi	r26, 0xAC	; 172
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a1 3e       	cpi	r26, 0xE1	; 225
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	95 d1       	rcall	.+810    	; 0x4ec <main>
     1c2:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
#include "util.h"

void adc_init ()
{
	// AREF = AVcc

     1c8:	ec e7       	ldi	r30, 0x7C	; 124
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 64       	ori	r24, 0x40	; 64
     1d0:	80 83       	st	Z, r24
	set_bit(ADMUX, REFS0);
     1d2:	80 81       	ld	r24, Z
     1d4:	8f 77       	andi	r24, 0x7F	; 127
     1d6:	80 83       	st	Z, r24
	clear_bit(ADMUX, REFS1);
     1d8:	80 81       	ld	r24, Z
     1da:	8f 7d       	andi	r24, 0xDF	; 223
     1dc:	80 83       	st	Z, r24
	clear_bit(ADMUX, ADLAR);
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
     1de:	ea e7       	ldi	r30, 0x7A	; 122
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	87 68       	ori	r24, 0x87	; 135
     1e6:	80 83       	st	Z, r24
     1e8:	08 95       	ret

000001ea <adc_read>:
}

// read adc value
uint16_t adc_read(uint8_t ch)
{
	 ch &= 0b00000111;  // AND operation with 7
     1ea:	ec e7       	ldi	r30, 0x7C	; 124
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	90 81       	ld	r25, Z
	//ADMUX &= ~(1 << MUX4) & ~(1 << MUX3) & ~(1 << MUX2) & ~(1 << MUX1) & ~(1 << MUX0);     // clears the bottom 3 bits before ORing
}

// read adc value
uint16_t adc_read(uint8_t ch)
{
     1f0:	87 70       	andi	r24, 0x07	; 7
	 ch &= 0b00000111;  // AND operation with 7
     1f2:	98 7f       	andi	r25, 0xF8	; 248
     1f4:	98 2b       	or	r25, r24
     1f6:	90 83       	st	Z, r25
	 ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
	
	// start single conversion
	// write '1' to ADSC
     1f8:	ea e7       	ldi	r30, 0x7A	; 122
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 64       	ori	r24, 0x40	; 64
     200:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADSC);
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	//while(ADCSRA & (1<<ADSC));
     202:	80 81       	ld	r24, Z
     204:	86 fd       	sbrc	r24, 6
     206:	fd cf       	rjmp	.-6      	; 0x202 <adc_read+0x18>
	loop_until_bit_is_clear( ADCSRA, ADSC );
	
     208:	80 91 78 00 	lds	r24, 0x0078
     20c:	90 91 79 00 	lds	r25, 0x0079
	return (ADC);
     210:	08 95       	ret

00000212 <can_controller_reset>:
     212:	2f 98       	cbi	0x05, 7	; 5
     214:	80 ec       	ldi	r24, 0xC0	; 192
     216:	1d d4       	rcall	.+2106   	; 0xa52 <spi_send>
     218:	2f 9a       	sbi	0x05, 7	; 5
     21a:	8f e3       	ldi	r24, 0x3F	; 63
     21c:	9c e9       	ldi	r25, 0x9C	; 156
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <can_controller_reset+0xc>
     222:	00 c0       	rjmp	.+0      	; 0x224 <can_controller_reset+0x12>
     224:	00 00       	nop
     226:	08 95       	ret

00000228 <can_controller_read>:
     228:	cf 93       	push	r28
     22a:	c8 2f       	mov	r28, r24
     22c:	2f 98       	cbi	0x05, 7	; 5
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	10 d4       	rcall	.+2080   	; 0xa52 <spi_send>
     232:	8c 2f       	mov	r24, r28
     234:	0e d4       	rcall	.+2076   	; 0xa52 <spi_send>
     236:	0f d4       	rcall	.+2078   	; 0xa56 <spi_read>
     238:	2f 9a       	sbi	0x05, 7	; 5
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <can_controller_request_to_send>:
     23e:	2f 98       	cbi	0x05, 7	; 5
     240:	81 e8       	ldi	r24, 0x81	; 129
     242:	07 d4       	rcall	.+2062   	; 0xa52 <spi_send>
     244:	85 b1       	in	r24, 0x05	; 5
     246:	8f 67       	ori	r24, 0x7F	; 127
     248:	85 b9       	out	0x05, r24	; 5
     24a:	08 95       	ret

0000024c <can_controller_bit_modify>:
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	18 2f       	mov	r17, r24
     254:	d6 2f       	mov	r29, r22
     256:	c4 2f       	mov	r28, r20
     258:	2f 98       	cbi	0x05, 7	; 5
     25a:	85 e0       	ldi	r24, 0x05	; 5
     25c:	fa d3       	rcall	.+2036   	; 0xa52 <spi_send>
     25e:	81 2f       	mov	r24, r17
     260:	f8 d3       	rcall	.+2032   	; 0xa52 <spi_send>
     262:	8d 2f       	mov	r24, r29
     264:	f6 d3       	rcall	.+2028   	; 0xa52 <spi_send>
     266:	8c 2f       	mov	r24, r28
     268:	f4 d3       	rcall	.+2024   	; 0xa52 <spi_send>
     26a:	2f 9a       	sbi	0x05, 7	; 5
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	08 95       	ret

00000274 <can_controller_set_mode>:
     274:	48 2f       	mov	r20, r24
     276:	60 ee       	ldi	r22, 0xE0	; 224
     278:	8f e0       	ldi	r24, 0x0F	; 15
     27a:	e8 df       	rcall	.-48     	; 0x24c <can_controller_bit_modify>
     27c:	8e e0       	ldi	r24, 0x0E	; 14
     27e:	d4 df       	rcall	.-88     	; 0x228 <can_controller_read>
     280:	80 7e       	andi	r24, 0xE0	; 224
     282:	08 95       	ret

00000284 <can_controller_write>:
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	d8 2f       	mov	r29, r24
     28a:	c6 2f       	mov	r28, r22
     28c:	2f 98       	cbi	0x05, 7	; 5
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	e0 d3       	rcall	.+1984   	; 0xa52 <spi_send>
     292:	8d 2f       	mov	r24, r29
     294:	de d3       	rcall	.+1980   	; 0xa52 <spi_send>
     296:	8c 2f       	mov	r24, r28
     298:	dc d3       	rcall	.+1976   	; 0xa52 <spi_send>
     29a:	2f 9a       	sbi	0x05, 7	; 5
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <can_controller_init>:
     2a2:	b7 df       	rcall	.-146    	; 0x212 <can_controller_reset>
     2a4:	8e e0       	ldi	r24, 0x0E	; 14
     2a6:	c0 df       	rcall	.-128    	; 0x228 <can_controller_read>
     2a8:	98 2f       	mov	r25, r24
     2aa:	90 7e       	andi	r25, 0xE0	; 224
     2ac:	90 38       	cpi	r25, 0x80	; 128
     2ae:	71 f0       	breq	.+28     	; 0x2cc <can_controller_init+0x2a>
     2b0:	1f 92       	push	r1
     2b2:	8f 93       	push	r24
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	9f 93       	push	r25
     2ba:	8f 93       	push	r24
     2bc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <printf>
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	08 95       	ret
     2cc:	41 e0       	ldi	r20, 0x01	; 1
     2ce:	6f ef       	ldi	r22, 0xFF	; 255
     2d0:	8b e2       	ldi	r24, 0x2B	; 43
     2d2:	bc df       	rcall	.-136    	; 0x24c <can_controller_bit_modify>
     2d4:	44 e6       	ldi	r20, 0x64	; 100
     2d6:	64 e6       	ldi	r22, 0x64	; 100
     2d8:	80 e6       	ldi	r24, 0x60	; 96
     2da:	b8 df       	rcall	.-144    	; 0x24c <can_controller_bit_modify>
     2dc:	40 e6       	ldi	r20, 0x60	; 96
     2de:	60 e6       	ldi	r22, 0x60	; 96
     2e0:	80 e7       	ldi	r24, 0x70	; 112
     2e2:	b4 df       	rcall	.-152    	; 0x24c <can_controller_bit_modify>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	82 e3       	ldi	r24, 0x32	; 50
     2e8:	cd df       	rcall	.-102    	; 0x284 <can_controller_write>
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 95       	ret

000002ee <can_init>:
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	c1 df       	rcall	.-126    	; 0x274 <can_controller_set_mode>
     2f2:	88 23       	and	r24, r24
     2f4:	41 f0       	breq	.+16     	; 0x306 <can_init+0x18>
     2f6:	84 e5       	ldi	r24, 0x54	; 84
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	9f 93       	push	r25
     2fc:	8f 93       	push	r24
     2fe:	0e 94 d6 09 	call	0x13ac	; 0x13ac <printf>
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	ea e0       	ldi	r30, 0x0A	; 10
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	80 81       	ld	r24, Z
     30c:	81 60       	ori	r24, 0x01	; 1
     30e:	80 83       	st	Z, r24
     310:	ea e6       	ldi	r30, 0x6A	; 106
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	80 81       	ld	r24, Z
     316:	8e 7f       	andi	r24, 0xFE	; 254
     318:	80 83       	st	Z, r24
     31a:	80 81       	ld	r24, Z
     31c:	82 60       	ori	r24, 0x02	; 2
     31e:	80 83       	st	Z, r24
     320:	ec 9a       	sbi	0x1d, 4	; 29
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	8c e2       	ldi	r24, 0x2C	; 44
     326:	ae df       	rcall	.-164    	; 0x284 <can_controller_write>
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	8d e2       	ldi	r24, 0x2D	; 45
     32c:	ab cf       	rjmp	.-170    	; 0x284 <can_controller_write>
     32e:	08 95       	ret

00000330 <can_send_msg>:
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ec 01       	movw	r28, r24
     33a:	68 81       	ld	r22, Y
     33c:	81 e3       	ldi	r24, 0x31	; 49
     33e:	a2 df       	rcall	.-188    	; 0x284 <can_controller_write>
     340:	09 81       	ldd	r16, Y+1	; 0x01
     342:	60 2f       	mov	r22, r16
     344:	85 e3       	ldi	r24, 0x35	; 53
     346:	9e df       	rcall	.-196    	; 0x284 <can_controller_write>
     348:	22 96       	adiw	r28, 0x02	; 2
     34a:	00 23       	and	r16, r16
     34c:	41 f0       	breq	.+16     	; 0x35e <can_send_msg+0x2e>
     34e:	0a 5c       	subi	r16, 0xCA	; 202
     350:	16 e3       	ldi	r17, 0x36	; 54
     352:	69 91       	ld	r22, Y+
     354:	81 2f       	mov	r24, r17
     356:	96 df       	rcall	.-212    	; 0x284 <can_controller_write>
     358:	1f 5f       	subi	r17, 0xFF	; 255
     35a:	10 13       	cpse	r17, r16
     35c:	fa cf       	rjmp	.-12     	; 0x352 <can_send_msg+0x22>
     35e:	6f df       	rcall	.-290    	; 0x23e <can_controller_request_to_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     360:	2f ef       	ldi	r18, 0xFF	; 255
     362:	80 e7       	ldi	r24, 0x70	; 112
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	21 50       	subi	r18, 0x01	; 1
     368:	80 40       	sbci	r24, 0x00	; 0
     36a:	90 40       	sbci	r25, 0x00	; 0
     36c:	e1 f7       	brne	.-8      	; 0x366 <can_send_msg+0x36>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <can_send_msg+0x40>
     370:	00 00       	nop
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	08 95       	ret

0000037c <can_receive_msg>:
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	eb 01       	movw	r28, r22
     386:	18 2f       	mov	r17, r24
     388:	12 95       	swap	r17
     38a:	10 7f       	andi	r17, 0xF0	; 240
     38c:	81 e6       	ldi	r24, 0x61	; 97
     38e:	81 0f       	add	r24, r17
     390:	4b df       	rcall	.-362    	; 0x228 <can_controller_read>
     392:	85 e6       	ldi	r24, 0x65	; 101
     394:	81 0f       	add	r24, r17
     396:	48 df       	rcall	.-368    	; 0x228 <can_controller_read>
     398:	98 2f       	mov	r25, r24
     39a:	9f 70       	andi	r25, 0x0F	; 15
     39c:	99 83       	std	Y+1, r25	; 0x01
     39e:	88 23       	and	r24, r24
     3a0:	51 f0       	breq	.+20     	; 0x3b6 <can_receive_msg+0x3a>
     3a2:	1a 59       	subi	r17, 0x9A	; 154
     3a4:	22 96       	adiw	r28, 0x02	; 2
     3a6:	08 2f       	mov	r16, r24
     3a8:	01 0f       	add	r16, r17
     3aa:	81 2f       	mov	r24, r17
     3ac:	3d df       	rcall	.-390    	; 0x228 <can_controller_read>
     3ae:	89 93       	st	Y+, r24
     3b0:	1f 5f       	subi	r17, 0xFF	; 255
     3b2:	10 13       	cpse	r17, r16
     3b4:	fa cf       	rjmp	.-12     	; 0x3aa <can_receive_msg+0x2e>
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	08 95       	ret

000003c0 <__vector_5>:
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	0b b6       	in	r0, 0x3b	; 59
     3cc:	0f 92       	push	r0
     3ce:	2f 93       	push	r18
     3d0:	3f 93       	push	r19
     3d2:	4f 93       	push	r20
     3d4:	5f 93       	push	r21
     3d6:	6f 93       	push	r22
     3d8:	7f 93       	push	r23
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	af 93       	push	r26
     3e0:	bf 93       	push	r27
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ef 93       	push	r30
     3e8:	ff 93       	push	r31
     3ea:	f8 94       	cli
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	6c d6       	rcall	.+3288   	; 0x10ca <malloc>
     3f2:	ec 01       	movw	r28, r24
     3f4:	8c e2       	ldi	r24, 0x2C	; 44
     3f6:	18 df       	rcall	.-464    	; 0x228 <can_controller_read>
     3f8:	80 ff       	sbrs	r24, 0
     3fa:	14 c0       	rjmp	.+40     	; 0x424 <__vector_5+0x64>
     3fc:	be 01       	movw	r22, r28
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	bc df       	rcall	.-136    	; 0x37c <can_receive_msg>
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	57 d3       	rcall	.+1710   	; 0xab6 <timer_driver_set_duty_cycle>
     408:	8f 81       	ldd	r24, Y+7	; 0x07
     40a:	09 d3       	rcall	.+1554   	; 0xa1e <control_solenoid>
     40c:	4f d0       	rcall	.+158    	; 0x4ac <game_get_mode>
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	21 f4       	brne	.+8      	; 0x41a <__vector_5+0x5a>
     412:	8c 81       	ldd	r24, Y+4	; 0x04
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	2e d2       	rcall	.+1116   	; 0x874 <motor_controller_set_point>
     418:	0f c0       	rjmp	.+30     	; 0x438 <__vector_5+0x78>
     41a:	8e 81       	ldd	r24, Y+6	; 0x06
     41c:	6a 81       	ldd	r22, Y+2	; 0x02
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	bd d2       	rcall	.+1402   	; 0x99c <motor_move_joystick>
     422:	0a c0       	rjmp	.+20     	; 0x438 <__vector_5+0x78>
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	8c e2       	ldi	r24, 0x2C	; 44
     428:	2d df       	rcall	.-422    	; 0x284 <can_controller_write>
     42a:	ce 01       	movw	r24, r28
     42c:	e6 d6       	rcall	.+3532   	; 0x11fa <free>
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	8c e2       	ldi	r24, 0x2C	; 44
     432:	28 df       	rcall	.-432    	; 0x284 <can_controller_write>
     434:	78 94       	sei
     436:	09 c0       	rjmp	.+18     	; 0x44a <__vector_5+0x8a>
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	8c e2       	ldi	r24, 0x2C	; 44
     43c:	23 df       	rcall	.-442    	; 0x284 <can_controller_write>
     43e:	ce 01       	movw	r24, r28
     440:	dc d6       	rcall	.+3512   	; 0x11fa <free>
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8c e2       	ldi	r24, 0x2C	; 44
     446:	1e df       	rcall	.-452    	; 0x284 <can_controller_write>
     448:	78 94       	sei
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	bf 91       	pop	r27
     454:	af 91       	pop	r26
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	7f 91       	pop	r23
     45c:	6f 91       	pop	r22
     45e:	5f 91       	pop	r21
     460:	4f 91       	pop	r20
     462:	3f 91       	pop	r19
     464:	2f 91       	pop	r18
     466:	0f 90       	pop	r0
     468:	0b be       	out	0x3b, r0	; 59
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <dac_init>:
{
	//reset ADC and put it to normal mode
	//uint8_t cmd = 0b00010000;
	TWI_Master_Initialise();
	//sei();
	//set SCL and SDA as outputs
     474:	38 d3       	rcall	.+1648   	; 0xae6 <TWI_Master_Initialise>
 	set_bit(DDRD, PD0);
 	set_bit(DDRD, PD1);	
	//dac_driver_send(cmd, 0, 0);
     476:	50 9a       	sbi	0x0a, 0	; 10
}
     478:	51 9a       	sbi	0x0a, 1	; 10
     47a:	08 95       	ret

0000047c <dac_driver_send>:

void dac_driver_send(uint8_t data)
{
	//DAC address + rd/!wr 01010000;
	uint8_t addr = 0x50;
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	00 d0       	rcall	.+0      	; 0x482 <dac_driver_send+0x6>
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
	uint8_t msg[3];
	
	msg[0] = addr;
	msg[1] = 0x00;
	msg[2] = data;
     486:	90 e5       	ldi	r25, 0x50	; 80
     488:	99 83       	std	Y+1, r25	; 0x01
	
     48a:	1a 82       	std	Y+2, r1	; 0x02
	
     48c:	8b 83       	std	Y+3, r24	; 0x03
	TWI_Start_Transceiver_With_Data( msg, 3);
	
// 	if (has_data == 1)
     48e:	63 e0       	ldi	r22, 0x03	; 3
     490:	ce 01       	movw	r24, r28
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	32 d3       	rcall	.+1636   	; 0xafa <TWI_Start_Transceiver_With_Data>
// 		TWI_Start_Transceiver_With_Data( msg, 2);
// 	}

}

     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <game_init>:
		game_mode = 0;
		//printf("1 -> 0\n\r");
		//motor_controller_deactivate();
	}else
	{
		game_mode = 1;
     4a2:	10 92 b4 02 	sts	0x02B4, r1
     4a6:	10 92 b3 02 	sts	0x02B3, r1
     4aa:	08 95       	ret

000004ac <game_get_mode>:
}

int game_get_mode()
{
	return game_mode;
}
     4ac:	80 91 b3 02 	lds	r24, 0x02B3
     4b0:	90 91 b4 02 	lds	r25, 0x02B4
     4b4:	08 95       	ret

000004b6 <record_score>:

uint16_t record_score(uint16_t score)
{
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	ec 01       	movw	r28, r24
	uint16_t score_interval = 0;
	uint16_t adc = adc_read(0);
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	95 de       	rcall	.-726    	; 0x1ea <adc_read>
		
	if (adc < 300)
     4c0:	8c 32       	cpi	r24, 0x2C	; 44
     4c2:	91 40       	sbci	r25, 0x01	; 1
     4c4:	78 f4       	brcc	.+30     	; 0x4e4 <record_score+0x2e>
	{
		score += 1;
     4c6:	21 96       	adiw	r28, 0x01	; 1
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	93 ed       	ldi	r25, 0xD3	; 211
     4cc:	20 e3       	ldi	r18, 0x30	; 48
     4ce:	81 50       	subi	r24, 0x01	; 1
     4d0:	90 40       	sbci	r25, 0x00	; 0
     4d2:	20 40       	sbci	r18, 0x00	; 0
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <record_score+0x18>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <record_score+0x22>
     4d8:	00 00       	nop
	}
	
		
	while(score_interval == 1)
	{
		if (adc_read(0) > 300)
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	86 de       	rcall	.-756    	; 0x1ea <adc_read>
     4de:	8d 32       	cpi	r24, 0x2D	; 45
     4e0:	91 40       	sbci	r25, 0x01	; 1
     4e2:	d8 f3       	brcs	.-10     	; 0x4da <record_score+0x24>
			score_interval = 0;
			break;
		}
	}
	return score;
     4e4:	ce 01       	movw	r24, r28
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <main>:
#include "TWI_Master.h";
#include "motor_driver.h";
#include "motor_controller.h"

int main(void)
{
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	2a 97       	sbiw	r28, 0x0a	; 10
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
	// Initializations
	cli();
     500:	f8 94       	cli
	USART_Init(MYUBRR);
     502:	87 e6       	ldi	r24, 0x67	; 103
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	ae d3       	rcall	.+1884   	; 0xc64 <USART_Init>
	spi_init();
     508:	9d d2       	rcall	.+1338   	; 0xa44 <spi_init>
	timer_driver_init();
     50a:	a9 d2       	rcall	.+1362   	; 0xa5e <timer_driver_init>
	adc_init();
     50c:	5d de       	rcall	.-838    	; 0x1c8 <adc_init>
	dac_init();
     50e:	b2 df       	rcall	.-156    	; 0x474 <dac_init>
	motor_init();
     510:	ee d1       	rcall	.+988    	; 0x8ee <motor_init>
	can_controller_init();
     512:	c7 de       	rcall	.-626    	; 0x2a2 <can_controller_init>
	can_init();					// Establish comm between nodes
     514:	ec de       	rcall	.-552    	; 0x2ee <can_init>
	game_init();				// Establish comm between nodes
     516:	c5 df       	rcall	.-118    	; 0x4a2 <game_init>
	motor_controller_init();
     518:	68 d0       	rcall	.+208    	; 0x5ea <motor_controller_init>
	sei();
     51a:	78 94       	sei
	
	printf("Hello from node 2!\n\r");
     51c:	86 e9       	ldi	r24, 0x96	; 150
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	9f 93       	push	r25
     522:	8f 93       	push	r24
     524:	43 d7       	rcall	.+3718   	; 0x13ac <printf>
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
	
	uint16_t score = 0, prev_score = 0;
     52a:	e1 2c       	mov	r14, r1
     52c:	f1 2c       	mov	r15, r1
	{
		score = record_score(score);
		if (score != prev_score)
		{
			uint8_t score_msg = (uint8_t) score; 
			can_message score_can = {1, 1, score_msg};
     52e:	0f 2e       	mov	r0, r31
     530:	fa e0       	ldi	r31, 0x0A	; 10
     532:	af 2e       	mov	r10, r31
     534:	f0 2d       	mov	r31, r0
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	6c 01       	movw	r12, r24
     53c:	bb 24       	eor	r11, r11
     53e:	b3 94       	inc	r11
	uint16_t score = 0, prev_score = 0;
	//uint16_t value = 0;
	
	while (1)
	{
		score = record_score(score);
     540:	c7 01       	movw	r24, r14
     542:	b9 df       	rcall	.-142    	; 0x4b6 <record_score>
     544:	8c 01       	movw	r16, r24
		if (score != prev_score)
     546:	e8 16       	cp	r14, r24
     548:	f9 06       	cpc	r15, r25
     54a:	51 f0       	breq	.+20     	; 0x560 <main+0x74>
		{
			uint8_t score_msg = (uint8_t) score; 
			can_message score_can = {1, 1, score_msg};
     54c:	f6 01       	movw	r30, r12
     54e:	2a 2d       	mov	r18, r10
     550:	11 92       	st	Z+, r1
     552:	2a 95       	dec	r18
     554:	e9 f7       	brne	.-6      	; 0x550 <main+0x64>
     556:	b9 82       	std	Y+1, r11	; 0x01
     558:	ba 82       	std	Y+2, r11	; 0x02
	while (1)
	{
		score = record_score(score);
		if (score != prev_score)
		{
			uint8_t score_msg = (uint8_t) score; 
     55a:	8b 83       	std	Y+3, r24	; 0x03
			can_message score_can = {1, 1, score_msg};
			can_send_msg(&score_can);
     55c:	c6 01       	movw	r24, r12
     55e:	e8 de       	rcall	.-560    	; 0x330 <can_send_msg>
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	91 ee       	ldi	r25, 0xE1	; 225
     564:	e4 e0       	ldi	r30, 0x04	; 4
     566:	81 50       	subi	r24, 0x01	; 1
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	e0 40       	sbci	r30, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <main+0x7a>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x84>
     570:	00 00       	nop
	uint16_t score = 0, prev_score = 0;
	//uint16_t value = 0;
	
	while (1)
	{
		score = record_score(score);
     572:	78 01       	movw	r14, r16
     574:	e5 cf       	rjmp	.-54     	; 0x540 <main+0x54>

00000576 <motor_controller_calibration>:

void motor_controller_deactivate()
{
	//cli();
	// disable compare interrupt
	clear_bit(TIMSK4, OCIE4A);
     576:	64 e6       	ldi	r22, 0x64	; 100
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	39 d2       	rcall	.+1138   	; 0x9f0 <motor_move>
     57e:	2f ef       	ldi	r18, 0xFF	; 255
     580:	87 ea       	ldi	r24, 0xA7	; 167
     582:	91 e6       	ldi	r25, 0x61	; 97
     584:	21 50       	subi	r18, 0x01	; 1
     586:	80 40       	sbci	r24, 0x00	; 0
     588:	90 40       	sbci	r25, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <motor_controller_calibration+0xe>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <motor_controller_calibration+0x18>
     58e:	00 00       	nop
     590:	9f d1       	rcall	.+830    	; 0x8d0 <motor_reset_encoder>
     592:	64 e6       	ldi	r22, 0x64	; 100
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	2b d2       	rcall	.+1110   	; 0x9f0 <motor_move>
     59a:	2f ef       	ldi	r18, 0xFF	; 255
     59c:	87 ea       	ldi	r24, 0xA7	; 167
     59e:	91 e6       	ldi	r25, 0x61	; 97
     5a0:	21 50       	subi	r18, 0x01	; 1
     5a2:	80 40       	sbci	r24, 0x00	; 0
     5a4:	90 40       	sbci	r25, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <motor_controller_calibration+0x2a>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <motor_controller_calibration+0x34>
     5aa:	00 00       	nop
     5ac:	d2 d1       	rcall	.+932    	; 0x952 <motor_get_encoder>
     5ae:	8c 52       	subi	r24, 0x2C	; 44
     5b0:	91 40       	sbci	r25, 0x01	; 1
     5b2:	90 93 c6 02 	sts	0x02C6, r25
     5b6:	80 93 c5 02 	sts	0x02C5, r24
     5ba:	64 e6       	ldi	r22, 0x64	; 100
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	17 d2       	rcall	.+1070   	; 0x9f0 <motor_move>
     5c2:	2f ef       	ldi	r18, 0xFF	; 255
     5c4:	87 ea       	ldi	r24, 0xA7	; 167
     5c6:	91 e6       	ldi	r25, 0x61	; 97
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	80 40       	sbci	r24, 0x00	; 0
     5cc:	90 40       	sbci	r25, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <motor_controller_calibration+0x52>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <motor_controller_calibration+0x5c>
     5d2:	00 00       	nop
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0a d2       	rcall	.+1044   	; 0x9f0 <motor_move>
     5dc:	84 ef       	ldi	r24, 0xF4	; 244
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	90 93 ba 02 	sts	0x02BA, r25
     5e4:	80 93 b9 02 	sts	0x02B9, r24
     5e8:	08 95       	ret

000005ea <motor_controller_init>:
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	a0 e8       	ldi	r26, 0x80	; 128
     5f0:	bf e3       	ldi	r27, 0x3F	; 63
     5f2:	80 93 d3 02 	sts	0x02D3, r24
     5f6:	90 93 d4 02 	sts	0x02D4, r25
     5fa:	a0 93 d5 02 	sts	0x02D5, r26
     5fe:	b0 93 d6 02 	sts	0x02D6, r27
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	a8 e4       	ldi	r26, 0x48	; 72
     608:	b1 e4       	ldi	r27, 0x41	; 65
     60a:	80 93 bd 02 	sts	0x02BD, r24
     60e:	90 93 be 02 	sts	0x02BE, r25
     612:	a0 93 bf 02 	sts	0x02BF, r26
     616:	b0 93 c0 02 	sts	0x02C0, r27
     61a:	8d ec       	ldi	r24, 0xCD	; 205
     61c:	9c ec       	ldi	r25, 0xCC	; 204
     61e:	ac ec       	ldi	r26, 0xCC	; 204
     620:	bd e3       	ldi	r27, 0x3D	; 61
     622:	80 93 b5 02 	sts	0x02B5, r24
     626:	90 93 b6 02 	sts	0x02B6, r25
     62a:	a0 93 b7 02 	sts	0x02B7, r26
     62e:	b0 93 b8 02 	sts	0x02B8, r27
     632:	10 92 cf 02 	sts	0x02CF, r1
     636:	10 92 d0 02 	sts	0x02D0, r1
     63a:	10 92 d1 02 	sts	0x02D1, r1
     63e:	10 92 d2 02 	sts	0x02D2, r1
     642:	10 92 c1 02 	sts	0x02C1, r1
     646:	10 92 c2 02 	sts	0x02C2, r1
     64a:	10 92 c3 02 	sts	0x02C3, r1
     64e:	10 92 c4 02 	sts	0x02C4, r1
     652:	10 92 cb 02 	sts	0x02CB, r1
     656:	10 92 cc 02 	sts	0x02CC, r1
     65a:	10 92 cd 02 	sts	0x02CD, r1
     65e:	10 92 ce 02 	sts	0x02CE, r1
     662:	10 92 bc 02 	sts	0x02BC, r1
     666:	10 92 bb 02 	sts	0x02BB, r1
     66a:	8d ec       	ldi	r24, 0xCD	; 205
     66c:	9c ec       	ldi	r25, 0xCC	; 204
     66e:	ac e4       	ldi	r26, 0x4C	; 76
     670:	bd e3       	ldi	r27, 0x3D	; 61
     672:	80 93 c7 02 	sts	0x02C7, r24
     676:	90 93 c8 02 	sts	0x02C8, r25
     67a:	a0 93 c9 02 	sts	0x02C9, r26
     67e:	b0 93 ca 02 	sts	0x02CA, r27
     682:	79 df       	rcall	.-270    	; 0x576 <motor_controller_calibration>
     684:	e0 ea       	ldi	r30, 0xA0	; 160
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	80 81       	ld	r24, Z
     68a:	80 83       	st	Z, r24
     68c:	e1 ea       	ldi	r30, 0xA1	; 161
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	8b 60       	ori	r24, 0x0B	; 11
     694:	80 83       	st	Z, r24
     696:	10 92 a5 00 	sts	0x00A5, r1
     69a:	10 92 a4 00 	sts	0x00A4, r1
     69e:	83 ed       	ldi	r24, 0xD3	; 211
     6a0:	90 e3       	ldi	r25, 0x30	; 48
     6a2:	90 93 a9 00 	sts	0x00A9, r25
     6a6:	80 93 a8 00 	sts	0x00A8, r24
     6aa:	e2 e7       	ldi	r30, 0x72	; 114
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	82 60       	ori	r24, 0x02	; 2
     6b2:	80 83       	st	Z, r24
     6b4:	08 95       	ret

000006b6 <motor_controller>:
	//sei();
}

void motor_controller()
{
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
	if (game_get_mode() == 1)
     6ca:	f0 de       	rcall	.-544    	; 0x4ac <game_get_mode>
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <motor_controller+0x1c>
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <motor_controller+0x1a8>
	{
		enum direction target_dir;
		uint8_t speed;
		int motor_cur_pos = motor_get_encoder();
     6d2:	3f d1       	rcall	.+638    	; 0x952 <motor_get_encoder>
		double derivative;
		
		int curr_pos = (int) 100.0*((double)(motor_cur_pos - min_motor_pos))/((double)(max_motor_pos - min_motor_pos));
     6d4:	a0 90 b9 02 	lds	r10, 0x02B9
     6d8:	b0 90 ba 02 	lds	r11, 0x02BA
     6dc:	8a 19       	sub	r24, r10
     6de:	9b 09       	sbc	r25, r11
     6e0:	bc 01       	movw	r22, r24
     6e2:	88 27       	eor	r24, r24
     6e4:	77 fd       	sbrc	r23, 7
     6e6:	80 95       	com	r24
     6e8:	98 2f       	mov	r25, r24
     6ea:	d0 d3       	rcall	.+1952   	; 0xe8c <__floatsisf>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	48 ec       	ldi	r20, 0xC8	; 200
     6f2:	52 e4       	ldi	r21, 0x42	; 66
     6f4:	7b d4       	rcall	.+2294   	; 0xfec <__mulsf3>
     6f6:	6b 01       	movw	r12, r22
     6f8:	7c 01       	movw	r14, r24
     6fa:	60 91 c5 02 	lds	r22, 0x02C5
     6fe:	70 91 c6 02 	lds	r23, 0x02C6
     702:	6a 19       	sub	r22, r10
     704:	7b 09       	sbc	r23, r11
     706:	88 27       	eor	r24, r24
     708:	77 fd       	sbrc	r23, 7
     70a:	80 95       	com	r24
     70c:	98 2f       	mov	r25, r24
     70e:	be d3       	rcall	.+1916   	; 0xe8c <__floatsisf>
     710:	9b 01       	movw	r18, r22
     712:	ac 01       	movw	r20, r24
     714:	c7 01       	movw	r24, r14
     716:	b6 01       	movw	r22, r12
     718:	1e d3       	rcall	.+1596   	; 0xd56 <__divsf3>
     71a:	85 d3       	rcall	.+1802   	; 0xe26 <__fixsfsi>
		
		error = (double)(set_point - curr_pos);
     71c:	a0 90 bb 02 	lds	r10, 0x02BB
     720:	b0 90 bc 02 	lds	r11, 0x02BC
     724:	a6 1a       	sub	r10, r22
     726:	b7 0a       	sbc	r11, r23
     728:	b5 01       	movw	r22, r10
     72a:	88 27       	eor	r24, r24
     72c:	77 fd       	sbrc	r23, 7
     72e:	80 95       	com	r24
     730:	98 2f       	mov	r25, r24
     732:	ac d3       	rcall	.+1880   	; 0xe8c <__floatsisf>
     734:	6b 01       	movw	r12, r22
     736:	7c 01       	movw	r14, r24
     738:	60 93 c1 02 	sts	0x02C1, r22
     73c:	70 93 c2 02 	sts	0x02C2, r23
     740:	80 93 c3 02 	sts	0x02C3, r24
     744:	90 93 c4 02 	sts	0x02C4, r25
		
		if (error < 0)
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	a9 01       	movw	r20, r18
     74e:	ff d2       	rcall	.+1534   	; 0xd4e <__cmpsf2>
		{
			target_dir = RIGHT;
		}else
		{
			target_dir = LEFT;
     750:	c8 2f       	mov	r28, r24
     752:	cc 1f       	adc	r28, r28
     754:	cc 27       	eor	r28, r28
     756:	cc 1f       	adc	r28, r28
     758:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		integral = integral + error * dt;
     75a:	20 91 c7 02 	lds	r18, 0x02C7
     75e:	30 91 c8 02 	lds	r19, 0x02C8
     762:	40 91 c9 02 	lds	r20, 0x02C9
     766:	50 91 ca 02 	lds	r21, 0x02CA
     76a:	c7 01       	movw	r24, r14
     76c:	b6 01       	movw	r22, r12
     76e:	3e d4       	rcall	.+2172   	; 0xfec <__mulsf3>
     770:	9b 01       	movw	r18, r22
     772:	ac 01       	movw	r20, r24
     774:	60 91 cf 02 	lds	r22, 0x02CF
     778:	70 91 d0 02 	lds	r23, 0x02D0
     77c:	80 91 d1 02 	lds	r24, 0x02D1
     780:	90 91 d2 02 	lds	r25, 0x02D2
     784:	80 d2       	rcall	.+1280   	; 0xc86 <__addsf3>
     786:	60 93 cf 02 	sts	0x02CF, r22
     78a:	70 93 d0 02 	sts	0x02D0, r23
     78e:	80 93 d1 02 	sts	0x02D1, r24
     792:	90 93 d2 02 	sts	0x02D2, r25
		derivative = (error - prev_error)/dt;

		if (abs((int)error) < 6){
     796:	85 e0       	ldi	r24, 0x05	; 5
     798:	a8 0e       	add	r10, r24
     79a:	b1 1c       	adc	r11, r1
     79c:	8b e0       	ldi	r24, 0x0B	; 11
     79e:	a8 16       	cp	r10, r24
     7a0:	b1 04       	cpc	r11, r1
     7a2:	80 f4       	brcc	.+32     	; 0x7c4 <motor_controller+0x10e>
			error = 0;
     7a4:	10 92 c1 02 	sts	0x02C1, r1
     7a8:	10 92 c2 02 	sts	0x02C2, r1
     7ac:	10 92 c3 02 	sts	0x02C3, r1
     7b0:	10 92 c4 02 	sts	0x02C4, r1
			integral = 0;
     7b4:	10 92 cf 02 	sts	0x02CF, r1
     7b8:	10 92 d0 02 	sts	0x02D0, r1
     7bc:	10 92 d1 02 	sts	0x02D1, r1
     7c0:	10 92 d2 02 	sts	0x02D2, r1
		}

		//speed = abs((uint8_t) (kp*error + ki*integral + kd*derivative));
		speed = (uint8_t) abs((int)(kp*error + ki*integral));
     7c4:	c0 90 c1 02 	lds	r12, 0x02C1
     7c8:	d0 90 c2 02 	lds	r13, 0x02C2
     7cc:	e0 90 c3 02 	lds	r14, 0x02C3
     7d0:	f0 90 c4 02 	lds	r15, 0x02C4
     7d4:	20 91 d3 02 	lds	r18, 0x02D3
     7d8:	30 91 d4 02 	lds	r19, 0x02D4
     7dc:	40 91 d5 02 	lds	r20, 0x02D5
     7e0:	50 91 d6 02 	lds	r21, 0x02D6
     7e4:	c7 01       	movw	r24, r14
     7e6:	b6 01       	movw	r22, r12
     7e8:	01 d4       	rcall	.+2050   	; 0xfec <__mulsf3>
     7ea:	4b 01       	movw	r8, r22
     7ec:	5c 01       	movw	r10, r24
     7ee:	20 91 cf 02 	lds	r18, 0x02CF
     7f2:	30 91 d0 02 	lds	r19, 0x02D0
     7f6:	40 91 d1 02 	lds	r20, 0x02D1
     7fa:	50 91 d2 02 	lds	r21, 0x02D2
     7fe:	60 91 bd 02 	lds	r22, 0x02BD
     802:	70 91 be 02 	lds	r23, 0x02BE
     806:	80 91 bf 02 	lds	r24, 0x02BF
     80a:	90 91 c0 02 	lds	r25, 0x02C0
     80e:	ee d3       	rcall	.+2012   	; 0xfec <__mulsf3>
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	c5 01       	movw	r24, r10
     816:	b4 01       	movw	r22, r8
     818:	36 d2       	rcall	.+1132   	; 0xc86 <__addsf3>
     81a:	05 d3       	rcall	.+1546   	; 0xe26 <__fixsfsi>
     81c:	9b 01       	movw	r18, r22
     81e:	77 23       	and	r23, r23
     820:	24 f4       	brge	.+8      	; 0x82a <motor_controller+0x174>
     822:	22 27       	eor	r18, r18
     824:	33 27       	eor	r19, r19
     826:	26 1b       	sub	r18, r22
     828:	37 0b       	sbc	r19, r23
     82a:	d2 2f       	mov	r29, r18
		
		if (speed > 150)
     82c:	27 39       	cpi	r18, 0x97	; 151
     82e:	40 f4       	brcc	.+16     	; 0x840 <motor_controller+0x18a>
		{
			speed = 150;
		}
		
		else if (speed < 55 && abs(error) > 5)
     830:	27 33       	cpi	r18, 0x37	; 55
     832:	48 f4       	brcc	.+18     	; 0x846 <motor_controller+0x190>
     834:	c7 01       	movw	r24, r14
     836:	b6 01       	movw	r22, r12
     838:	42 d4       	rcall	.+2180   	; 0x10be <abs>
     83a:	06 97       	sbiw	r24, 0x06	; 6
     83c:	1c f4       	brge	.+6      	; 0x844 <motor_controller+0x18e>
     83e:	03 c0       	rjmp	.+6      	; 0x846 <motor_controller+0x190>
		//speed = abs((uint8_t) (kp*error + ki*integral + kd*derivative));
		speed = (uint8_t) abs((int)(kp*error + ki*integral));
		
		if (speed > 150)
		{
			speed = 150;
     840:	d6 e9       	ldi	r29, 0x96	; 150
     842:	01 c0       	rjmp	.+2      	; 0x846 <motor_controller+0x190>
		}
		
		else if (speed < 55 && abs(error) > 5)
		{
			speed = 55;
     844:	d7 e3       	ldi	r29, 0x37	; 55
		}
		//	printf("MAXP: %d | BCP: %d | CP: %d | SP: %d\n\r", max_motor_pos, motor_cur_pos, curr_pos, set_point );
		
		prev_error = error;
     846:	c0 92 cb 02 	sts	0x02CB, r12
     84a:	d0 92 cc 02 	sts	0x02CC, r13
     84e:	e0 92 cd 02 	sts	0x02CD, r14
     852:	f0 92 ce 02 	sts	0x02CE, r15
		
		motor_move(target_dir, speed);
     856:	6d 2f       	mov	r22, r29
     858:	8c 2f       	mov	r24, r28
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	c9 d0       	rcall	.+402    	; 0x9f0 <motor_move>
	}
	
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	9f 90       	pop	r9
     870:	8f 90       	pop	r8
     872:	08 95       	ret

00000874 <motor_controller_set_point>:

void motor_controller_set_point(uint16_t sp)
{
	set_point = sp;
     874:	90 93 bc 02 	sts	0x02BC, r25
     878:	80 93 bb 02 	sts	0x02BB, r24
     87c:	08 95       	ret

0000087e <__vector_42>:
}

ISR(TIMER4_COMPA_vect){
     87e:	1f 92       	push	r1
     880:	0f 92       	push	r0
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	0f 92       	push	r0
     886:	11 24       	eor	r1, r1
     888:	0b b6       	in	r0, 0x3b	; 59
     88a:	0f 92       	push	r0
     88c:	2f 93       	push	r18
     88e:	3f 93       	push	r19
     890:	4f 93       	push	r20
     892:	5f 93       	push	r21
     894:	6f 93       	push	r22
     896:	7f 93       	push	r23
     898:	8f 93       	push	r24
     89a:	9f 93       	push	r25
     89c:	af 93       	push	r26
     89e:	bf 93       	push	r27
     8a0:	ef 93       	push	r30
     8a2:	ff 93       	push	r31
	
	cli();
     8a4:	f8 94       	cli
	motor_controller();
     8a6:	07 df       	rcall	.-498    	; 0x6b6 <motor_controller>
	sei();
     8a8:	78 94       	sei
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <motor_reset_encoder>:


void motor_set_speed(uint8_t speed)
{
	//send speed through DAC/i2C
	dac_driver_send(speed);
     8d0:	e2 e0       	ldi	r30, 0x02	; 2
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	80 81       	ld	r24, Z
     8d6:	8f 7b       	andi	r24, 0xBF	; 191
     8d8:	80 83       	st	Z, r24
     8da:	87 ec       	ldi	r24, 0xC7	; 199
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <motor_reset_encoder+0xe>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <motor_reset_encoder+0x14>
     8e4:	00 00       	nop
     8e6:	80 81       	ld	r24, Z
     8e8:	80 64       	ori	r24, 0x40	; 64
     8ea:	80 83       	st	Z, r24
     8ec:	08 95       	ret

000008ee <motor_init>:
     8ee:	e1 e0       	ldi	r30, 0x01	; 1
     8f0:	f1 e0       	ldi	r31, 0x01	; 1
     8f2:	80 81       	ld	r24, Z
     8f4:	80 62       	ori	r24, 0x20	; 32
     8f6:	80 83       	st	Z, r24
     8f8:	80 81       	ld	r24, Z
     8fa:	88 60       	ori	r24, 0x08	; 8
     8fc:	80 83       	st	Z, r24
     8fe:	80 81       	ld	r24, Z
     900:	82 60       	ori	r24, 0x02	; 2
     902:	80 83       	st	Z, r24
     904:	80 81       	ld	r24, Z
     906:	80 64       	ori	r24, 0x40	; 64
     908:	80 83       	st	Z, r24
     90a:	80 81       	ld	r24, Z
     90c:	80 62       	ori	r24, 0x20	; 32
     90e:	80 83       	st	Z, r24
     910:	e7 e0       	ldi	r30, 0x07	; 7
     912:	f1 e0       	ldi	r31, 0x01	; 1
     914:	80 81       	ld	r24, Z
     916:	8e 7f       	andi	r24, 0xFE	; 254
     918:	80 83       	st	Z, r24
     91a:	80 81       	ld	r24, Z
     91c:	8d 7f       	andi	r24, 0xFD	; 253
     91e:	80 83       	st	Z, r24
     920:	80 81       	ld	r24, Z
     922:	8b 7f       	andi	r24, 0xFB	; 251
     924:	80 83       	st	Z, r24
     926:	80 81       	ld	r24, Z
     928:	87 7f       	andi	r24, 0xF7	; 247
     92a:	80 83       	st	Z, r24
     92c:	80 81       	ld	r24, Z
     92e:	8f 7e       	andi	r24, 0xEF	; 239
     930:	80 83       	st	Z, r24
     932:	80 81       	ld	r24, Z
     934:	8f 7d       	andi	r24, 0xDF	; 223
     936:	80 83       	st	Z, r24
     938:	80 81       	ld	r24, Z
     93a:	8f 7b       	andi	r24, 0xBF	; 191
     93c:	80 83       	st	Z, r24
     93e:	80 81       	ld	r24, Z
     940:	8f 77       	andi	r24, 0x7F	; 127
     942:	80 83       	st	Z, r24
     944:	e2 e0       	ldi	r30, 0x02	; 2
     946:	f1 e0       	ldi	r31, 0x01	; 1
     948:	80 81       	ld	r24, Z
     94a:	80 62       	ori	r24, 0x20	; 32
     94c:	80 83       	st	Z, r24
     94e:	c0 cf       	rjmp	.-128    	; 0x8d0 <motor_reset_encoder>
     950:	08 95       	ret

00000952 <motor_get_encoder>:
uint16_t motor_get_encoder()
{
	uint16_t encod_counter;
	uint8_t LSB_counter;
	
	clear_bit(PORTH, MJ1_OE);
     952:	e2 e0       	ldi	r30, 0x02	; 2
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	80 81       	ld	r24, Z
     958:	8f 7d       	andi	r24, 0xDF	; 223
     95a:	80 83       	st	Z, r24
	clear_bit(PORTH, MJ1_SEL);
     95c:	80 81       	ld	r24, Z
     95e:	87 7f       	andi	r24, 0xF7	; 247
     960:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     962:	2a e6       	ldi	r18, 0x6A	; 106
     964:	2a 95       	dec	r18
     966:	f1 f7       	brne	.-4      	; 0x964 <motor_get_encoder+0x12>
     968:	00 c0       	rjmp	.+0      	; 0x96a <motor_get_encoder+0x18>
	_delay_us(20);
	encod_counter = PINK;
     96a:	80 91 06 01 	lds	r24, 0x0106
     96e:	90 e0       	ldi	r25, 0x00	; 0
	
	set_bit(PORTH, MJ1_SEL);
     970:	20 81       	ld	r18, Z
     972:	28 60       	ori	r18, 0x08	; 8
     974:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     976:	3f ef       	ldi	r19, 0xFF	; 255
     978:	49 ef       	ldi	r20, 0xF9	; 249
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	31 50       	subi	r19, 0x01	; 1
     97e:	40 40       	sbci	r20, 0x00	; 0
     980:	20 40       	sbci	r18, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <motor_get_encoder+0x2a>
     984:	00 c0       	rjmp	.+0      	; 0x986 <motor_get_encoder+0x34>
     986:	00 00       	nop
	_delay_ms(20);
	LSB_counter = PINK;
     988:	20 91 06 01 	lds	r18, 0x0106
	
	set_bit(PORTH, MJ1_OE);
     98c:	30 81       	ld	r19, Z
     98e:	30 62       	ori	r19, 0x20	; 32
     990:	30 83       	st	Z, r19
	//motor_reset_encoder();
	
	//8-bit left shift
	encod_counter = encod_counter*256;
     992:	98 2f       	mov	r25, r24
     994:	88 27       	eor	r24, r24
	//add LSB
	encod_counter += LSB_counter;
	
	return encod_counter;
}
     996:	82 0f       	add	r24, r18
     998:	91 1d       	adc	r25, r1
     99a:	08 95       	ret

0000099c <motor_move_joystick>:
}

void motor_move_joystick(int dir, int8_t speed)
{
	//set motor EN to 1
	set_bit(PORTH, MJ1_EN);
     99c:	e2 e0       	ldi	r30, 0x02	; 2
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	20 81       	ld	r18, Z
     9a2:	20 62       	ori	r18, 0x20	; 32
     9a4:	20 83       	st	Z, r18
	
	//printf("SPEED: %d\n\r", speed);

	if (dir == RIGHT)
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	91 05       	cpc	r25, r1
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <motor_move_joystick+0x18>
	{
		//printf("LEFT:%d\n\r", speed);
		set_bit(PORTH, MJ1_DIR);
     9ac:	80 81       	ld	r24, Z
     9ae:	82 60       	ori	r24, 0x02	; 2
     9b0:	80 83       	st	Z, r24
     9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <motor_move_joystick+0x26>
	}else if (dir == LEFT)
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	29 f4       	brne	.+10     	; 0x9c2 <motor_move_joystick+0x26>
	{
		//printf("RIGHT\n\r");
		clear_bit(PORTH, MJ1_DIR);
     9b8:	e2 e0       	ldi	r30, 0x02	; 2
     9ba:	f1 e0       	ldi	r31, 0x01	; 1
     9bc:	80 81       	ld	r24, Z
     9be:	8d 7f       	andi	r24, 0xFD	; 253
     9c0:	80 83       	st	Z, r24
	}

	uint8_t speed_converted = (uint8_t) abs((int)(speed*1.3));
     9c2:	77 27       	eor	r23, r23
     9c4:	67 fd       	sbrc	r22, 7
     9c6:	70 95       	com	r23
     9c8:	87 2f       	mov	r24, r23
     9ca:	97 2f       	mov	r25, r23
     9cc:	5f d2       	rcall	.+1214   	; 0xe8c <__floatsisf>
     9ce:	26 e6       	ldi	r18, 0x66	; 102
     9d0:	36 e6       	ldi	r19, 0x66	; 102
     9d2:	46 ea       	ldi	r20, 0xA6	; 166
     9d4:	5f e3       	ldi	r21, 0x3F	; 63
     9d6:	0a d3       	rcall	.+1556   	; 0xfec <__mulsf3>
     9d8:	26 d2       	rcall	.+1100   	; 0xe26 <__fixsfsi>
     9da:	9b 01       	movw	r18, r22
     9dc:	77 23       	and	r23, r23
     9de:	24 f4       	brge	.+8      	; 0x9e8 <motor_move_joystick+0x4c>
     9e0:	22 27       	eor	r18, r18
     9e2:	33 27       	eor	r19, r19
     9e4:	26 1b       	sub	r18, r22
     9e6:	37 0b       	sbc	r19, r23


void motor_set_speed(uint8_t speed)
{
	//send speed through DAC/i2C
	dac_driver_send(speed);
     9e8:	c9 01       	movw	r24, r18
     9ea:	99 27       	eor	r25, r25
     9ec:	47 cd       	rjmp	.-1394   	; 0x47c <dac_driver_send>
     9ee:	08 95       	ret

000009f0 <motor_move>:
}

void motor_move(int dir, uint8_t speed)
{
	//set motor EN to 1
	set_bit(PORTH, MJ1_EN);
     9f0:	e2 e0       	ldi	r30, 0x02	; 2
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	20 81       	ld	r18, Z
     9f6:	20 62       	ori	r18, 0x20	; 32
     9f8:	20 83       	st	Z, r18
	
	//printf("SPEED: %d\n\r", speed);

	if (dir == RIGHT)
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	91 05       	cpc	r25, r1
     9fe:	21 f4       	brne	.+8      	; 0xa08 <motor_move+0x18>
	{
		//printf("LEFT:%d\n\r", speed);
		set_bit(PORTH, MJ1_DIR);
     a00:	80 81       	ld	r24, Z
     a02:	82 60       	ori	r24, 0x02	; 2
     a04:	80 83       	st	Z, r24
     a06:	07 c0       	rjmp	.+14     	; 0xa16 <motor_move+0x26>
	}else if (dir == LEFT)
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	29 f4       	brne	.+10     	; 0xa16 <motor_move+0x26>
	{
		//printf("RIGHT\n\r");
		clear_bit(PORTH, MJ1_DIR);
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	80 81       	ld	r24, Z
     a12:	8d 7f       	andi	r24, 0xFD	; 253
     a14:	80 83       	st	Z, r24


void motor_set_speed(uint8_t speed)
{
	//send speed through DAC/i2C
	dac_driver_send(speed);
     a16:	86 2f       	mov	r24, r22
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	30 cd       	rjmp	.-1440   	; 0x47c <dac_driver_send>
     a1c:	08 95       	ret

00000a1e <control_solenoid>:
	motor_set_speed(speed);
}

void control_solenoid(uint8_t push)
{
	if (push == 1)
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	31 f4       	brne	.+12     	; 0xa2e <control_solenoid+0x10>
	{
		clear_bit(PORTL, PL0);
     a22:	eb e0       	ldi	r30, 0x0B	; 11
     a24:	f1 e0       	ldi	r31, 0x01	; 1
     a26:	80 81       	ld	r24, Z
     a28:	8e 7f       	andi	r24, 0xFE	; 254
     a2a:	80 83       	st	Z, r24
     a2c:	08 95       	ret
	}
	else
	{
		set_bit(PORTL, PL0);
     a2e:	eb e0       	ldi	r30, 0x0B	; 11
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	80 81       	ld	r24, Z
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	80 83       	st	Z, r24
     a38:	08 95       	ret

00000a3a <SPI_MasterTransmit>:
//TODO - define for register bit (reusable code)

void SPI_MasterInit(void)
{
	/* Set MOSI, SCK and SS output all others input */
	DDRB |= (1<<PB2)|(1<<PB1)|(1<<PB7)|(1<<PB0);
     a3a:	8e bd       	out	0x2e, r24	; 46
	//Set MISO as input
	DDRB &= ~(1<<PB3);
     a3c:	0d b4       	in	r0, 0x2d	; 45
     a3e:	07 fe       	sbrs	r0, 7
     a40:	fd cf       	rjmp	.-6      	; 0xa3c <SPI_MasterTransmit+0x2>
	/* Enable SPI, Master, set clock rate fck/16 */
     a42:	08 95       	ret

00000a44 <spi_init>:
// }
//
// char SPI_SlaveReceive(void)
// {
//     /* Wait for reception complete */
//     while(!(SPSR & (1<<SPIF)))
     a44:	84 b1       	in	r24, 0x04	; 4
     a46:	87 68       	ori	r24, 0x87	; 135
     a48:	84 b9       	out	0x04, r24	; 4
//         ;
//     /* Return data register */
     a4a:	23 98       	cbi	0x04, 3	; 4
//     return SPDR;
// }
     a4c:	81 e5       	ldi	r24, 0x51	; 81
     a4e:	8c bd       	out	0x2c, r24	; 44
     a50:	08 95       	ret

00000a52 <spi_send>:


void spi_init()
{
	SPI_MasterInit();
     a52:	f3 cf       	rjmp	.-26     	; 0xa3a <SPI_MasterTransmit>
     a54:	08 95       	ret

00000a56 <spi_read>:
}

void spi_send(char data)
{
	SPI_MasterTransmit(data);
	
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	f0 df       	rcall	.-32     	; 0xa3a <SPI_MasterTransmit>
}
     a5a:	8e b5       	in	r24, 0x2e	; 46

     a5c:	08 95       	ret

00000a5e <timer_driver_init>:

void timer_driver_init()
{
	set_bit(DDRE, PE3);
	cli();
	//TOP = 16MHz/pre-scale/50Hz
     a5e:	6b 9a       	sbi	0x0d, 3	; 13
	ICR3 = 39999;
     a60:	f8 94       	cli
	
	//duty_cycle
     a62:	8f e3       	ldi	r24, 0x3F	; 63
     a64:	9c e9       	ldi	r25, 0x9C	; 156
     a66:	90 93 97 00 	sts	0x0097, r25
     a6a:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 3999;
	
	//Set pre-scale to 8
     a6e:	8f e9       	ldi	r24, 0x9F	; 159
     a70:	9f e0       	ldi	r25, 0x0F	; 15
     a72:	90 93 99 00 	sts	0x0099, r25
     a76:	80 93 98 00 	sts	0x0098, r24
	clear_bit(TCCR3B, CS30);
	set_bit(TCCR3B, CS31);
	clear_bit(TCCR3B, CS32);
     a7a:	a1 e9       	ldi	r26, 0x91	; 145
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	8c 91       	ld	r24, X
     a80:	8e 7f       	andi	r24, 0xFE	; 254
     a82:	8c 93       	st	X, r24
	
     a84:	8c 91       	ld	r24, X
     a86:	82 60       	ori	r24, 0x02	; 2
     a88:	8c 93       	st	X, r24
	//Set mode of operation to 14 (Fast PWM with ICRn)
     a8a:	8c 91       	ld	r24, X
     a8c:	8b 7f       	andi	r24, 0xFB	; 251
     a8e:	8c 93       	st	X, r24
	set_bit(TCCR3A, WGM31);
	clear_bit(TCCR3A, WGM30);
	TCCR3B |= (1 << WGM33) | (1 << WGM32);
     a90:	e0 e9       	ldi	r30, 0x90	; 144
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	82 60       	ori	r24, 0x02	; 2
     a98:	80 83       	st	Z, r24
	
     a9a:	80 81       	ld	r24, Z
     a9c:	8e 7f       	andi	r24, 0xFE	; 254
     a9e:	80 83       	st	Z, r24
	//Enable compare interruption on reg OCRnA
     aa0:	8c 91       	ld	r24, X
     aa2:	88 61       	ori	r24, 0x18	; 24
     aa4:	8c 93       	st	X, r24
	set_bit(TCCR3A, COM3A1);
	clear_bit(TCCR3A, COM3A0);

     aa6:	80 81       	ld	r24, Z
     aa8:	80 68       	ori	r24, 0x80	; 128
     aaa:	80 83       	st	Z, r24
	sei();
     aac:	80 81       	ld	r24, Z
     aae:	8f 7b       	andi	r24, 0xBF	; 191
     ab0:	80 83       	st	Z, r24
}

     ab2:	78 94       	sei
     ab4:	08 95       	ret

00000ab6 <timer_driver_set_duty_cycle>:
void timer_driver_set_duty_cycle(int8_t position)
{
	int duty_cycle = 20 * position + 1999;
	//int duty_cycle = 20 * (100 - position) + 1999;
	//printf("%d\n\r", duty_cycle);
     ab6:	24 e1       	ldi	r18, 0x14	; 20
     ab8:	82 02       	muls	r24, r18
     aba:	c0 01       	movw	r24, r0
     abc:	11 24       	eor	r1, r1
     abe:	81 53       	subi	r24, 0x31	; 49
     ac0:	98 4f       	sbci	r25, 0xF8	; 248
	
	if (duty_cycle < 1999)
		duty_cycle = 1999;
	else if (duty_cycle > 3999)
     ac2:	8f 3c       	cpi	r24, 0xCF	; 207
     ac4:	27 e0       	ldi	r18, 0x07	; 7
     ac6:	92 07       	cpc	r25, r18
     ac8:	3c f0       	brlt	.+14     	; 0xad8 <timer_driver_set_duty_cycle+0x22>
     aca:	80 3a       	cpi	r24, 0xA0	; 160
     acc:	2f e0       	ldi	r18, 0x0F	; 15
     ace:	92 07       	cpc	r25, r18
     ad0:	2c f0       	brlt	.+10     	; 0xadc <timer_driver_set_duty_cycle+0x26>
     ad2:	8f e9       	ldi	r24, 0x9F	; 159
     ad4:	9f e0       	ldi	r25, 0x0F	; 15
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <timer_driver_set_duty_cycle+0x26>
		duty_cycle = 3999;
     ad8:	8f ec       	ldi	r24, 0xCF	; 207
     ada:	97 e0       	ldi	r25, 0x07	; 7
	
	OCR3A = (uint16_t) duty_cycle;
     adc:	90 93 99 00 	sts	0x0099, r25
     ae0:	80 93 98 00 	sts	0x0098, r24
     ae4:	08 95       	ret

00000ae6 <TWI_Master_Initialise>:
     ae6:	8c e0       	ldi	r24, 0x0C	; 12
     ae8:	80 93 b8 00 	sts	0x00B8, r24
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	80 93 bb 00 	sts	0x00BB, r24
     af2:	84 e0       	ldi	r24, 0x04	; 4
     af4:	80 93 bc 00 	sts	0x00BC, r24
     af8:	08 95       	ret

00000afa <TWI_Start_Transceiver_With_Data>:
     afa:	ec eb       	ldi	r30, 0xBC	; 188
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	20 81       	ld	r18, Z
     b00:	20 fd       	sbrc	r18, 0
     b02:	fd cf       	rjmp	.-6      	; 0xafe <TWI_Start_Transceiver_With_Data+0x4>
     b04:	60 93 ae 02 	sts	0x02AE, r22
     b08:	fc 01       	movw	r30, r24
     b0a:	20 81       	ld	r18, Z
     b0c:	20 93 af 02 	sts	0x02AF, r18
     b10:	20 fd       	sbrc	r18, 0
     b12:	0c c0       	rjmp	.+24     	; 0xb2c <TWI_Start_Transceiver_With_Data+0x32>
     b14:	62 30       	cpi	r22, 0x02	; 2
     b16:	50 f0       	brcs	.+20     	; 0xb2c <TWI_Start_Transceiver_With_Data+0x32>
     b18:	dc 01       	movw	r26, r24
     b1a:	11 96       	adiw	r26, 0x01	; 1
     b1c:	e0 eb       	ldi	r30, 0xB0	; 176
     b1e:	f2 e0       	ldi	r31, 0x02	; 2
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	9d 91       	ld	r25, X+
     b24:	91 93       	st	Z+, r25
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	86 13       	cpse	r24, r22
     b2a:	fb cf       	rjmp	.-10     	; 0xb22 <TWI_Start_Transceiver_With_Data+0x28>
     b2c:	10 92 ad 02 	sts	0x02AD, r1
     b30:	88 ef       	ldi	r24, 0xF8	; 248
     b32:	80 93 06 02 	sts	0x0206, r24
     b36:	85 ea       	ldi	r24, 0xA5	; 165
     b38:	80 93 bc 00 	sts	0x00BC, r24
     b3c:	08 95       	ret

00000b3e <__vector_39>:
     b3e:	1f 92       	push	r1
     b40:	0f 92       	push	r0
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	0f 92       	push	r0
     b46:	11 24       	eor	r1, r1
     b48:	0b b6       	in	r0, 0x3b	; 59
     b4a:	0f 92       	push	r0
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	af 93       	push	r26
     b56:	bf 93       	push	r27
     b58:	ef 93       	push	r30
     b5a:	ff 93       	push	r31
     b5c:	80 91 b9 00 	lds	r24, 0x00B9
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	fc 01       	movw	r30, r24
     b64:	38 97       	sbiw	r30, 0x08	; 8
     b66:	e1 35       	cpi	r30, 0x51	; 81
     b68:	f1 05       	cpc	r31, r1
     b6a:	08 f0       	brcs	.+2      	; 0xb6e <__vector_39+0x30>
     b6c:	55 c0       	rjmp	.+170    	; 0xc18 <__vector_39+0xda>
     b6e:	ee 58       	subi	r30, 0x8E	; 142
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	9f c2       	rjmp	.+1342   	; 0x10b2 <__tablejump2__>
     b74:	10 92 ac 02 	sts	0x02AC, r1
     b78:	e0 91 ac 02 	lds	r30, 0x02AC
     b7c:	80 91 ae 02 	lds	r24, 0x02AE
     b80:	e8 17       	cp	r30, r24
     b82:	70 f4       	brcc	.+28     	; 0xba0 <__vector_39+0x62>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	8e 0f       	add	r24, r30
     b88:	80 93 ac 02 	sts	0x02AC, r24
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	e1 55       	subi	r30, 0x51	; 81
     b90:	fd 4f       	sbci	r31, 0xFD	; 253
     b92:	80 81       	ld	r24, Z
     b94:	80 93 bb 00 	sts	0x00BB, r24
     b98:	85 e8       	ldi	r24, 0x85	; 133
     b9a:	80 93 bc 00 	sts	0x00BC, r24
     b9e:	43 c0       	rjmp	.+134    	; 0xc26 <__vector_39+0xe8>
     ba0:	80 91 ad 02 	lds	r24, 0x02AD
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 93 ad 02 	sts	0x02AD, r24
     baa:	84 e9       	ldi	r24, 0x94	; 148
     bac:	80 93 bc 00 	sts	0x00BC, r24
     bb0:	3a c0       	rjmp	.+116    	; 0xc26 <__vector_39+0xe8>
     bb2:	e0 91 ac 02 	lds	r30, 0x02AC
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8e 0f       	add	r24, r30
     bba:	80 93 ac 02 	sts	0x02AC, r24
     bbe:	80 91 bb 00 	lds	r24, 0x00BB
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e1 55       	subi	r30, 0x51	; 81
     bc6:	fd 4f       	sbci	r31, 0xFD	; 253
     bc8:	80 83       	st	Z, r24
     bca:	20 91 ac 02 	lds	r18, 0x02AC
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	80 91 ae 02 	lds	r24, 0x02AE
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	28 17       	cp	r18, r24
     bda:	39 07       	cpc	r19, r25
     bdc:	24 f4       	brge	.+8      	; 0xbe6 <__vector_39+0xa8>
     bde:	85 ec       	ldi	r24, 0xC5	; 197
     be0:	80 93 bc 00 	sts	0x00BC, r24
     be4:	20 c0       	rjmp	.+64     	; 0xc26 <__vector_39+0xe8>
     be6:	85 e8       	ldi	r24, 0x85	; 133
     be8:	80 93 bc 00 	sts	0x00BC, r24
     bec:	1c c0       	rjmp	.+56     	; 0xc26 <__vector_39+0xe8>
     bee:	80 91 bb 00 	lds	r24, 0x00BB
     bf2:	e0 91 ac 02 	lds	r30, 0x02AC
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	e1 55       	subi	r30, 0x51	; 81
     bfa:	fd 4f       	sbci	r31, 0xFD	; 253
     bfc:	80 83       	st	Z, r24
     bfe:	80 91 ad 02 	lds	r24, 0x02AD
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	80 93 ad 02 	sts	0x02AD, r24
     c08:	84 e9       	ldi	r24, 0x94	; 148
     c0a:	80 93 bc 00 	sts	0x00BC, r24
     c0e:	0b c0       	rjmp	.+22     	; 0xc26 <__vector_39+0xe8>
     c10:	85 ea       	ldi	r24, 0xA5	; 165
     c12:	80 93 bc 00 	sts	0x00BC, r24
     c16:	07 c0       	rjmp	.+14     	; 0xc26 <__vector_39+0xe8>
     c18:	80 91 b9 00 	lds	r24, 0x00B9
     c1c:	80 93 06 02 	sts	0x0206, r24
     c20:	84 e0       	ldi	r24, 0x04	; 4
     c22:	80 93 bc 00 	sts	0x00BC, r24
     c26:	ff 91       	pop	r31
     c28:	ef 91       	pop	r30
     c2a:	bf 91       	pop	r27
     c2c:	af 91       	pop	r26
     c2e:	9f 91       	pop	r25
     c30:	8f 91       	pop	r24
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	0f 90       	pop	r0
     c38:	0b be       	out	0x3b, r0	; 59
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     c44:	e0 ec       	ldi	r30, 0xC0	; 192
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	90 81       	ld	r25, Z
     c4a:	95 ff       	sbrs	r25, 5
     c4c:	fd cf       	rjmp	.-6      	; 0xc48 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
     c4e:	80 93 c6 00 	sts	0x00C6, r24
     c52:	08 95       	ret

00000c54 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     c54:	e0 ec       	ldi	r30, 0xC0	; 192
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	88 23       	and	r24, r24
     c5c:	ec f7       	brge	.-6      	; 0xc58 <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
     c5e:	80 91 c6 00 	lds	r24, 0x00C6
}
     c62:	08 95       	ret

00000c64 <USART_Init>:
#include "avr/io.h"

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr >> 8);
     c64:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
     c68:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     c6c:	88 e1       	ldi	r24, 0x18	; 24
     c6e:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0)|(3 << UCSZ00);
     c72:	8e e0       	ldi	r24, 0x0E	; 14
     c74:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_Transmit, USART_Receive);
     c78:	6a e2       	ldi	r22, 0x2A	; 42
     c7a:	76 e0       	ldi	r23, 0x06	; 6
     c7c:	82 e2       	ldi	r24, 0x22	; 34
     c7e:	96 e0       	ldi	r25, 0x06	; 6
     c80:	4b c3       	rjmp	.+1686   	; 0x1318 <fdevopen>
     c82:	08 95       	ret

00000c84 <__subsf3>:
     c84:	50 58       	subi	r21, 0x80	; 128

00000c86 <__addsf3>:
     c86:	bb 27       	eor	r27, r27
     c88:	aa 27       	eor	r26, r26
     c8a:	0e d0       	rcall	.+28     	; 0xca8 <__addsf3x>
     c8c:	75 c1       	rjmp	.+746    	; 0xf78 <__fp_round>
     c8e:	66 d1       	rcall	.+716    	; 0xf5c <__fp_pscA>
     c90:	30 f0       	brcs	.+12     	; 0xc9e <__addsf3+0x18>
     c92:	6b d1       	rcall	.+726    	; 0xf6a <__fp_pscB>
     c94:	20 f0       	brcs	.+8      	; 0xc9e <__addsf3+0x18>
     c96:	31 f4       	brne	.+12     	; 0xca4 <__addsf3+0x1e>
     c98:	9f 3f       	cpi	r25, 0xFF	; 255
     c9a:	11 f4       	brne	.+4      	; 0xca0 <__addsf3+0x1a>
     c9c:	1e f4       	brtc	.+6      	; 0xca4 <__addsf3+0x1e>
     c9e:	5b c1       	rjmp	.+694    	; 0xf56 <__fp_nan>
     ca0:	0e f4       	brtc	.+2      	; 0xca4 <__addsf3+0x1e>
     ca2:	e0 95       	com	r30
     ca4:	e7 fb       	bst	r30, 7
     ca6:	51 c1       	rjmp	.+674    	; 0xf4a <__fp_inf>

00000ca8 <__addsf3x>:
     ca8:	e9 2f       	mov	r30, r25
     caa:	77 d1       	rcall	.+750    	; 0xf9a <__fp_split3>
     cac:	80 f3       	brcs	.-32     	; 0xc8e <__addsf3+0x8>
     cae:	ba 17       	cp	r27, r26
     cb0:	62 07       	cpc	r22, r18
     cb2:	73 07       	cpc	r23, r19
     cb4:	84 07       	cpc	r24, r20
     cb6:	95 07       	cpc	r25, r21
     cb8:	18 f0       	brcs	.+6      	; 0xcc0 <__addsf3x+0x18>
     cba:	71 f4       	brne	.+28     	; 0xcd8 <__addsf3x+0x30>
     cbc:	9e f5       	brtc	.+102    	; 0xd24 <__addsf3x+0x7c>
     cbe:	8f c1       	rjmp	.+798    	; 0xfde <__fp_zero>
     cc0:	0e f4       	brtc	.+2      	; 0xcc4 <__addsf3x+0x1c>
     cc2:	e0 95       	com	r30
     cc4:	0b 2e       	mov	r0, r27
     cc6:	ba 2f       	mov	r27, r26
     cc8:	a0 2d       	mov	r26, r0
     cca:	0b 01       	movw	r0, r22
     ccc:	b9 01       	movw	r22, r18
     cce:	90 01       	movw	r18, r0
     cd0:	0c 01       	movw	r0, r24
     cd2:	ca 01       	movw	r24, r20
     cd4:	a0 01       	movw	r20, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	ff 27       	eor	r31, r31
     cda:	59 1b       	sub	r21, r25
     cdc:	99 f0       	breq	.+38     	; 0xd04 <__addsf3x+0x5c>
     cde:	59 3f       	cpi	r21, 0xF9	; 249
     ce0:	50 f4       	brcc	.+20     	; 0xcf6 <__addsf3x+0x4e>
     ce2:	50 3e       	cpi	r21, 0xE0	; 224
     ce4:	68 f1       	brcs	.+90     	; 0xd40 <__addsf3x+0x98>
     ce6:	1a 16       	cp	r1, r26
     ce8:	f0 40       	sbci	r31, 0x00	; 0
     cea:	a2 2f       	mov	r26, r18
     cec:	23 2f       	mov	r18, r19
     cee:	34 2f       	mov	r19, r20
     cf0:	44 27       	eor	r20, r20
     cf2:	58 5f       	subi	r21, 0xF8	; 248
     cf4:	f3 cf       	rjmp	.-26     	; 0xcdc <__addsf3x+0x34>
     cf6:	46 95       	lsr	r20
     cf8:	37 95       	ror	r19
     cfa:	27 95       	ror	r18
     cfc:	a7 95       	ror	r26
     cfe:	f0 40       	sbci	r31, 0x00	; 0
     d00:	53 95       	inc	r21
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <__addsf3x+0x4e>
     d04:	7e f4       	brtc	.+30     	; 0xd24 <__addsf3x+0x7c>
     d06:	1f 16       	cp	r1, r31
     d08:	ba 0b       	sbc	r27, r26
     d0a:	62 0b       	sbc	r22, r18
     d0c:	73 0b       	sbc	r23, r19
     d0e:	84 0b       	sbc	r24, r20
     d10:	ba f0       	brmi	.+46     	; 0xd40 <__addsf3x+0x98>
     d12:	91 50       	subi	r25, 0x01	; 1
     d14:	a1 f0       	breq	.+40     	; 0xd3e <__addsf3x+0x96>
     d16:	ff 0f       	add	r31, r31
     d18:	bb 1f       	adc	r27, r27
     d1a:	66 1f       	adc	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	88 1f       	adc	r24, r24
     d20:	c2 f7       	brpl	.-16     	; 0xd12 <__addsf3x+0x6a>
     d22:	0e c0       	rjmp	.+28     	; 0xd40 <__addsf3x+0x98>
     d24:	ba 0f       	add	r27, r26
     d26:	62 1f       	adc	r22, r18
     d28:	73 1f       	adc	r23, r19
     d2a:	84 1f       	adc	r24, r20
     d2c:	48 f4       	brcc	.+18     	; 0xd40 <__addsf3x+0x98>
     d2e:	87 95       	ror	r24
     d30:	77 95       	ror	r23
     d32:	67 95       	ror	r22
     d34:	b7 95       	ror	r27
     d36:	f7 95       	ror	r31
     d38:	9e 3f       	cpi	r25, 0xFE	; 254
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <__addsf3x+0x96>
     d3c:	b3 cf       	rjmp	.-154    	; 0xca4 <__addsf3+0x1e>
     d3e:	93 95       	inc	r25
     d40:	88 0f       	add	r24, r24
     d42:	08 f0       	brcs	.+2      	; 0xd46 <__addsf3x+0x9e>
     d44:	99 27       	eor	r25, r25
     d46:	ee 0f       	add	r30, r30
     d48:	97 95       	ror	r25
     d4a:	87 95       	ror	r24
     d4c:	08 95       	ret

00000d4e <__cmpsf2>:
     d4e:	d9 d0       	rcall	.+434    	; 0xf02 <__fp_cmp>
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__cmpsf2+0x6>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	08 95       	ret

00000d56 <__divsf3>:
     d56:	0c d0       	rcall	.+24     	; 0xd70 <__divsf3x>
     d58:	0f c1       	rjmp	.+542    	; 0xf78 <__fp_round>
     d5a:	07 d1       	rcall	.+526    	; 0xf6a <__fp_pscB>
     d5c:	40 f0       	brcs	.+16     	; 0xd6e <__divsf3+0x18>
     d5e:	fe d0       	rcall	.+508    	; 0xf5c <__fp_pscA>
     d60:	30 f0       	brcs	.+12     	; 0xd6e <__divsf3+0x18>
     d62:	21 f4       	brne	.+8      	; 0xd6c <__divsf3+0x16>
     d64:	5f 3f       	cpi	r21, 0xFF	; 255
     d66:	19 f0       	breq	.+6      	; 0xd6e <__divsf3+0x18>
     d68:	f0 c0       	rjmp	.+480    	; 0xf4a <__fp_inf>
     d6a:	51 11       	cpse	r21, r1
     d6c:	39 c1       	rjmp	.+626    	; 0xfe0 <__fp_szero>
     d6e:	f3 c0       	rjmp	.+486    	; 0xf56 <__fp_nan>

00000d70 <__divsf3x>:
     d70:	14 d1       	rcall	.+552    	; 0xf9a <__fp_split3>
     d72:	98 f3       	brcs	.-26     	; 0xd5a <__divsf3+0x4>

00000d74 <__divsf3_pse>:
     d74:	99 23       	and	r25, r25
     d76:	c9 f3       	breq	.-14     	; 0xd6a <__divsf3+0x14>
     d78:	55 23       	and	r21, r21
     d7a:	b1 f3       	breq	.-20     	; 0xd68 <__divsf3+0x12>
     d7c:	95 1b       	sub	r25, r21
     d7e:	55 0b       	sbc	r21, r21
     d80:	bb 27       	eor	r27, r27
     d82:	aa 27       	eor	r26, r26
     d84:	62 17       	cp	r22, r18
     d86:	73 07       	cpc	r23, r19
     d88:	84 07       	cpc	r24, r20
     d8a:	38 f0       	brcs	.+14     	; 0xd9a <__divsf3_pse+0x26>
     d8c:	9f 5f       	subi	r25, 0xFF	; 255
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	44 1f       	adc	r20, r20
     d96:	aa 1f       	adc	r26, r26
     d98:	a9 f3       	breq	.-22     	; 0xd84 <__divsf3_pse+0x10>
     d9a:	33 d0       	rcall	.+102    	; 0xe02 <__divsf3_pse+0x8e>
     d9c:	0e 2e       	mov	r0, r30
     d9e:	3a f0       	brmi	.+14     	; 0xdae <__divsf3_pse+0x3a>
     da0:	e0 e8       	ldi	r30, 0x80	; 128
     da2:	30 d0       	rcall	.+96     	; 0xe04 <__divsf3_pse+0x90>
     da4:	91 50       	subi	r25, 0x01	; 1
     da6:	50 40       	sbci	r21, 0x00	; 0
     da8:	e6 95       	lsr	r30
     daa:	00 1c       	adc	r0, r0
     dac:	ca f7       	brpl	.-14     	; 0xda0 <__divsf3_pse+0x2c>
     dae:	29 d0       	rcall	.+82     	; 0xe02 <__divsf3_pse+0x8e>
     db0:	fe 2f       	mov	r31, r30
     db2:	27 d0       	rcall	.+78     	; 0xe02 <__divsf3_pse+0x8e>
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	88 1f       	adc	r24, r24
     dba:	bb 1f       	adc	r27, r27
     dbc:	26 17       	cp	r18, r22
     dbe:	37 07       	cpc	r19, r23
     dc0:	48 07       	cpc	r20, r24
     dc2:	ab 07       	cpc	r26, r27
     dc4:	b0 e8       	ldi	r27, 0x80	; 128
     dc6:	09 f0       	breq	.+2      	; 0xdca <__divsf3_pse+0x56>
     dc8:	bb 0b       	sbc	r27, r27
     dca:	80 2d       	mov	r24, r0
     dcc:	bf 01       	movw	r22, r30
     dce:	ff 27       	eor	r31, r31
     dd0:	93 58       	subi	r25, 0x83	; 131
     dd2:	5f 4f       	sbci	r21, 0xFF	; 255
     dd4:	2a f0       	brmi	.+10     	; 0xde0 <__divsf3_pse+0x6c>
     dd6:	9e 3f       	cpi	r25, 0xFE	; 254
     dd8:	51 05       	cpc	r21, r1
     dda:	68 f0       	brcs	.+26     	; 0xdf6 <__divsf3_pse+0x82>
     ddc:	b6 c0       	rjmp	.+364    	; 0xf4a <__fp_inf>
     dde:	00 c1       	rjmp	.+512    	; 0xfe0 <__fp_szero>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	ec f3       	brlt	.-6      	; 0xdde <__divsf3_pse+0x6a>
     de4:	98 3e       	cpi	r25, 0xE8	; 232
     de6:	dc f3       	brlt	.-10     	; 0xdde <__divsf3_pse+0x6a>
     de8:	86 95       	lsr	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f7 95       	ror	r31
     df2:	9f 5f       	subi	r25, 0xFF	; 255
     df4:	c9 f7       	brne	.-14     	; 0xde8 <__divsf3_pse+0x74>
     df6:	88 0f       	add	r24, r24
     df8:	91 1d       	adc	r25, r1
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	97 f9       	bld	r25, 7
     e00:	08 95       	ret
     e02:	e1 e0       	ldi	r30, 0x01	; 1
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	bb 1f       	adc	r27, r27
     e0c:	62 17       	cp	r22, r18
     e0e:	73 07       	cpc	r23, r19
     e10:	84 07       	cpc	r24, r20
     e12:	ba 07       	cpc	r27, r26
     e14:	20 f0       	brcs	.+8      	; 0xe1e <__divsf3_pse+0xaa>
     e16:	62 1b       	sub	r22, r18
     e18:	73 0b       	sbc	r23, r19
     e1a:	84 0b       	sbc	r24, r20
     e1c:	ba 0b       	sbc	r27, r26
     e1e:	ee 1f       	adc	r30, r30
     e20:	88 f7       	brcc	.-30     	; 0xe04 <__divsf3_pse+0x90>
     e22:	e0 95       	com	r30
     e24:	08 95       	ret

00000e26 <__fixsfsi>:
     e26:	04 d0       	rcall	.+8      	; 0xe30 <__fixunssfsi>
     e28:	68 94       	set
     e2a:	b1 11       	cpse	r27, r1
     e2c:	d9 c0       	rjmp	.+434    	; 0xfe0 <__fp_szero>
     e2e:	08 95       	ret

00000e30 <__fixunssfsi>:
     e30:	bc d0       	rcall	.+376    	; 0xfaa <__fp_splitA>
     e32:	88 f0       	brcs	.+34     	; 0xe56 <__fixunssfsi+0x26>
     e34:	9f 57       	subi	r25, 0x7F	; 127
     e36:	90 f0       	brcs	.+36     	; 0xe5c <__fixunssfsi+0x2c>
     e38:	b9 2f       	mov	r27, r25
     e3a:	99 27       	eor	r25, r25
     e3c:	b7 51       	subi	r27, 0x17	; 23
     e3e:	a0 f0       	brcs	.+40     	; 0xe68 <__fixunssfsi+0x38>
     e40:	d1 f0       	breq	.+52     	; 0xe76 <__fixunssfsi+0x46>
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	1a f0       	brmi	.+6      	; 0xe52 <__fixunssfsi+0x22>
     e4c:	ba 95       	dec	r27
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <__fixunssfsi+0x12>
     e50:	12 c0       	rjmp	.+36     	; 0xe76 <__fixunssfsi+0x46>
     e52:	b1 30       	cpi	r27, 0x01	; 1
     e54:	81 f0       	breq	.+32     	; 0xe76 <__fixunssfsi+0x46>
     e56:	c3 d0       	rcall	.+390    	; 0xfde <__fp_zero>
     e58:	b1 e0       	ldi	r27, 0x01	; 1
     e5a:	08 95       	ret
     e5c:	c0 c0       	rjmp	.+384    	; 0xfde <__fp_zero>
     e5e:	67 2f       	mov	r22, r23
     e60:	78 2f       	mov	r23, r24
     e62:	88 27       	eor	r24, r24
     e64:	b8 5f       	subi	r27, 0xF8	; 248
     e66:	39 f0       	breq	.+14     	; 0xe76 <__fixunssfsi+0x46>
     e68:	b9 3f       	cpi	r27, 0xF9	; 249
     e6a:	cc f3       	brlt	.-14     	; 0xe5e <__fixunssfsi+0x2e>
     e6c:	86 95       	lsr	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b3 95       	inc	r27
     e74:	d9 f7       	brne	.-10     	; 0xe6c <__fixunssfsi+0x3c>
     e76:	3e f4       	brtc	.+14     	; 0xe86 <__fixunssfsi+0x56>
     e78:	90 95       	com	r25
     e7a:	80 95       	com	r24
     e7c:	70 95       	com	r23
     e7e:	61 95       	neg	r22
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	8f 4f       	sbci	r24, 0xFF	; 255
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	08 95       	ret

00000e88 <__floatunsisf>:
     e88:	e8 94       	clt
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <__floatsisf+0x12>

00000e8c <__floatsisf>:
     e8c:	97 fb       	bst	r25, 7
     e8e:	3e f4       	brtc	.+14     	; 0xe9e <__floatsisf+0x12>
     e90:	90 95       	com	r25
     e92:	80 95       	com	r24
     e94:	70 95       	com	r23
     e96:	61 95       	neg	r22
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	8f 4f       	sbci	r24, 0xFF	; 255
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	99 23       	and	r25, r25
     ea0:	a9 f0       	breq	.+42     	; 0xecc <__floatsisf+0x40>
     ea2:	f9 2f       	mov	r31, r25
     ea4:	96 e9       	ldi	r25, 0x96	; 150
     ea6:	bb 27       	eor	r27, r27
     ea8:	93 95       	inc	r25
     eaa:	f6 95       	lsr	r31
     eac:	87 95       	ror	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f1 11       	cpse	r31, r1
     eb6:	f8 cf       	rjmp	.-16     	; 0xea8 <__floatsisf+0x1c>
     eb8:	fa f4       	brpl	.+62     	; 0xef8 <__floatsisf+0x6c>
     eba:	bb 0f       	add	r27, r27
     ebc:	11 f4       	brne	.+4      	; 0xec2 <__floatsisf+0x36>
     ebe:	60 ff       	sbrs	r22, 0
     ec0:	1b c0       	rjmp	.+54     	; 0xef8 <__floatsisf+0x6c>
     ec2:	6f 5f       	subi	r22, 0xFF	; 255
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	16 c0       	rjmp	.+44     	; 0xef8 <__floatsisf+0x6c>
     ecc:	88 23       	and	r24, r24
     ece:	11 f0       	breq	.+4      	; 0xed4 <__floatsisf+0x48>
     ed0:	96 e9       	ldi	r25, 0x96	; 150
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <__floatsisf+0x6a>
     ed4:	77 23       	and	r23, r23
     ed6:	21 f0       	breq	.+8      	; 0xee0 <__floatsisf+0x54>
     ed8:	9e e8       	ldi	r25, 0x8E	; 142
     eda:	87 2f       	mov	r24, r23
     edc:	76 2f       	mov	r23, r22
     ede:	05 c0       	rjmp	.+10     	; 0xeea <__floatsisf+0x5e>
     ee0:	66 23       	and	r22, r22
     ee2:	71 f0       	breq	.+28     	; 0xf00 <__floatsisf+0x74>
     ee4:	96 e8       	ldi	r25, 0x86	; 134
     ee6:	86 2f       	mov	r24, r22
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	2a f0       	brmi	.+10     	; 0xef8 <__floatsisf+0x6c>
     eee:	9a 95       	dec	r25
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	da f7       	brpl	.-10     	; 0xeee <__floatsisf+0x62>
     ef8:	88 0f       	add	r24, r24
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	97 f9       	bld	r25, 7
     f00:	08 95       	ret

00000f02 <__fp_cmp>:
     f02:	99 0f       	add	r25, r25
     f04:	00 08       	sbc	r0, r0
     f06:	55 0f       	add	r21, r21
     f08:	aa 0b       	sbc	r26, r26
     f0a:	e0 e8       	ldi	r30, 0x80	; 128
     f0c:	fe ef       	ldi	r31, 0xFE	; 254
     f0e:	16 16       	cp	r1, r22
     f10:	17 06       	cpc	r1, r23
     f12:	e8 07       	cpc	r30, r24
     f14:	f9 07       	cpc	r31, r25
     f16:	c0 f0       	brcs	.+48     	; 0xf48 <__fp_cmp+0x46>
     f18:	12 16       	cp	r1, r18
     f1a:	13 06       	cpc	r1, r19
     f1c:	e4 07       	cpc	r30, r20
     f1e:	f5 07       	cpc	r31, r21
     f20:	98 f0       	brcs	.+38     	; 0xf48 <__fp_cmp+0x46>
     f22:	62 1b       	sub	r22, r18
     f24:	73 0b       	sbc	r23, r19
     f26:	84 0b       	sbc	r24, r20
     f28:	95 0b       	sbc	r25, r21
     f2a:	39 f4       	brne	.+14     	; 0xf3a <__fp_cmp+0x38>
     f2c:	0a 26       	eor	r0, r26
     f2e:	61 f0       	breq	.+24     	; 0xf48 <__fp_cmp+0x46>
     f30:	23 2b       	or	r18, r19
     f32:	24 2b       	or	r18, r20
     f34:	25 2b       	or	r18, r21
     f36:	21 f4       	brne	.+8      	; 0xf40 <__fp_cmp+0x3e>
     f38:	08 95       	ret
     f3a:	0a 26       	eor	r0, r26
     f3c:	09 f4       	brne	.+2      	; 0xf40 <__fp_cmp+0x3e>
     f3e:	a1 40       	sbci	r26, 0x01	; 1
     f40:	a6 95       	lsr	r26
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	81 1d       	adc	r24, r1
     f46:	81 1d       	adc	r24, r1
     f48:	08 95       	ret

00000f4a <__fp_inf>:
     f4a:	97 f9       	bld	r25, 7
     f4c:	9f 67       	ori	r25, 0x7F	; 127
     f4e:	80 e8       	ldi	r24, 0x80	; 128
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	08 95       	ret

00000f56 <__fp_nan>:
     f56:	9f ef       	ldi	r25, 0xFF	; 255
     f58:	80 ec       	ldi	r24, 0xC0	; 192
     f5a:	08 95       	ret

00000f5c <__fp_pscA>:
     f5c:	00 24       	eor	r0, r0
     f5e:	0a 94       	dec	r0
     f60:	16 16       	cp	r1, r22
     f62:	17 06       	cpc	r1, r23
     f64:	18 06       	cpc	r1, r24
     f66:	09 06       	cpc	r0, r25
     f68:	08 95       	ret

00000f6a <__fp_pscB>:
     f6a:	00 24       	eor	r0, r0
     f6c:	0a 94       	dec	r0
     f6e:	12 16       	cp	r1, r18
     f70:	13 06       	cpc	r1, r19
     f72:	14 06       	cpc	r1, r20
     f74:	05 06       	cpc	r0, r21
     f76:	08 95       	ret

00000f78 <__fp_round>:
     f78:	09 2e       	mov	r0, r25
     f7a:	03 94       	inc	r0
     f7c:	00 0c       	add	r0, r0
     f7e:	11 f4       	brne	.+4      	; 0xf84 <__fp_round+0xc>
     f80:	88 23       	and	r24, r24
     f82:	52 f0       	brmi	.+20     	; 0xf98 <__fp_round+0x20>
     f84:	bb 0f       	add	r27, r27
     f86:	40 f4       	brcc	.+16     	; 0xf98 <__fp_round+0x20>
     f88:	bf 2b       	or	r27, r31
     f8a:	11 f4       	brne	.+4      	; 0xf90 <__fp_round+0x18>
     f8c:	60 ff       	sbrs	r22, 0
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <__fp_round+0x20>
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	08 95       	ret

00000f9a <__fp_split3>:
     f9a:	57 fd       	sbrc	r21, 7
     f9c:	90 58       	subi	r25, 0x80	; 128
     f9e:	44 0f       	add	r20, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	59 f0       	breq	.+22     	; 0xfba <__fp_splitA+0x10>
     fa4:	5f 3f       	cpi	r21, 0xFF	; 255
     fa6:	71 f0       	breq	.+28     	; 0xfc4 <__fp_splitA+0x1a>
     fa8:	47 95       	ror	r20

00000faa <__fp_splitA>:
     faa:	88 0f       	add	r24, r24
     fac:	97 fb       	bst	r25, 7
     fae:	99 1f       	adc	r25, r25
     fb0:	61 f0       	breq	.+24     	; 0xfca <__fp_splitA+0x20>
     fb2:	9f 3f       	cpi	r25, 0xFF	; 255
     fb4:	79 f0       	breq	.+30     	; 0xfd4 <__fp_splitA+0x2a>
     fb6:	87 95       	ror	r24
     fb8:	08 95       	ret
     fba:	12 16       	cp	r1, r18
     fbc:	13 06       	cpc	r1, r19
     fbe:	14 06       	cpc	r1, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	f2 cf       	rjmp	.-28     	; 0xfa8 <__fp_split3+0xe>
     fc4:	46 95       	lsr	r20
     fc6:	f1 df       	rcall	.-30     	; 0xfaa <__fp_splitA>
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <__fp_splitA+0x30>
     fca:	16 16       	cp	r1, r22
     fcc:	17 06       	cpc	r1, r23
     fce:	18 06       	cpc	r1, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	f1 cf       	rjmp	.-30     	; 0xfb6 <__fp_splitA+0xc>
     fd4:	86 95       	lsr	r24
     fd6:	71 05       	cpc	r23, r1
     fd8:	61 05       	cpc	r22, r1
     fda:	08 94       	sec
     fdc:	08 95       	ret

00000fde <__fp_zero>:
     fde:	e8 94       	clt

00000fe0 <__fp_szero>:
     fe0:	bb 27       	eor	r27, r27
     fe2:	66 27       	eor	r22, r22
     fe4:	77 27       	eor	r23, r23
     fe6:	cb 01       	movw	r24, r22
     fe8:	97 f9       	bld	r25, 7
     fea:	08 95       	ret

00000fec <__mulsf3>:
     fec:	0b d0       	rcall	.+22     	; 0x1004 <__mulsf3x>
     fee:	c4 cf       	rjmp	.-120    	; 0xf78 <__fp_round>
     ff0:	b5 df       	rcall	.-150    	; 0xf5c <__fp_pscA>
     ff2:	28 f0       	brcs	.+10     	; 0xffe <__mulsf3+0x12>
     ff4:	ba df       	rcall	.-140    	; 0xf6a <__fp_pscB>
     ff6:	18 f0       	brcs	.+6      	; 0xffe <__mulsf3+0x12>
     ff8:	95 23       	and	r25, r21
     ffa:	09 f0       	breq	.+2      	; 0xffe <__mulsf3+0x12>
     ffc:	a6 cf       	rjmp	.-180    	; 0xf4a <__fp_inf>
     ffe:	ab cf       	rjmp	.-170    	; 0xf56 <__fp_nan>
    1000:	11 24       	eor	r1, r1
    1002:	ee cf       	rjmp	.-36     	; 0xfe0 <__fp_szero>

00001004 <__mulsf3x>:
    1004:	ca df       	rcall	.-108    	; 0xf9a <__fp_split3>
    1006:	a0 f3       	brcs	.-24     	; 0xff0 <__mulsf3+0x4>

00001008 <__mulsf3_pse>:
    1008:	95 9f       	mul	r25, r21
    100a:	d1 f3       	breq	.-12     	; 0x1000 <__mulsf3+0x14>
    100c:	95 0f       	add	r25, r21
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	55 1f       	adc	r21, r21
    1012:	62 9f       	mul	r22, r18
    1014:	f0 01       	movw	r30, r0
    1016:	72 9f       	mul	r23, r18
    1018:	bb 27       	eor	r27, r27
    101a:	f0 0d       	add	r31, r0
    101c:	b1 1d       	adc	r27, r1
    101e:	63 9f       	mul	r22, r19
    1020:	aa 27       	eor	r26, r26
    1022:	f0 0d       	add	r31, r0
    1024:	b1 1d       	adc	r27, r1
    1026:	aa 1f       	adc	r26, r26
    1028:	64 9f       	mul	r22, r20
    102a:	66 27       	eor	r22, r22
    102c:	b0 0d       	add	r27, r0
    102e:	a1 1d       	adc	r26, r1
    1030:	66 1f       	adc	r22, r22
    1032:	82 9f       	mul	r24, r18
    1034:	22 27       	eor	r18, r18
    1036:	b0 0d       	add	r27, r0
    1038:	a1 1d       	adc	r26, r1
    103a:	62 1f       	adc	r22, r18
    103c:	73 9f       	mul	r23, r19
    103e:	b0 0d       	add	r27, r0
    1040:	a1 1d       	adc	r26, r1
    1042:	62 1f       	adc	r22, r18
    1044:	83 9f       	mul	r24, r19
    1046:	a0 0d       	add	r26, r0
    1048:	61 1d       	adc	r22, r1
    104a:	22 1f       	adc	r18, r18
    104c:	74 9f       	mul	r23, r20
    104e:	33 27       	eor	r19, r19
    1050:	a0 0d       	add	r26, r0
    1052:	61 1d       	adc	r22, r1
    1054:	23 1f       	adc	r18, r19
    1056:	84 9f       	mul	r24, r20
    1058:	60 0d       	add	r22, r0
    105a:	21 1d       	adc	r18, r1
    105c:	82 2f       	mov	r24, r18
    105e:	76 2f       	mov	r23, r22
    1060:	6a 2f       	mov	r22, r26
    1062:	11 24       	eor	r1, r1
    1064:	9f 57       	subi	r25, 0x7F	; 127
    1066:	50 40       	sbci	r21, 0x00	; 0
    1068:	8a f0       	brmi	.+34     	; 0x108c <__mulsf3_pse+0x84>
    106a:	e1 f0       	breq	.+56     	; 0x10a4 <__mulsf3_pse+0x9c>
    106c:	88 23       	and	r24, r24
    106e:	4a f0       	brmi	.+18     	; 0x1082 <__mulsf3_pse+0x7a>
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	bb 1f       	adc	r27, r27
    1076:	66 1f       	adc	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	91 50       	subi	r25, 0x01	; 1
    107e:	50 40       	sbci	r21, 0x00	; 0
    1080:	a9 f7       	brne	.-22     	; 0x106c <__mulsf3_pse+0x64>
    1082:	9e 3f       	cpi	r25, 0xFE	; 254
    1084:	51 05       	cpc	r21, r1
    1086:	70 f0       	brcs	.+28     	; 0x10a4 <__mulsf3_pse+0x9c>
    1088:	60 cf       	rjmp	.-320    	; 0xf4a <__fp_inf>
    108a:	aa cf       	rjmp	.-172    	; 0xfe0 <__fp_szero>
    108c:	5f 3f       	cpi	r21, 0xFF	; 255
    108e:	ec f3       	brlt	.-6      	; 0x108a <__mulsf3_pse+0x82>
    1090:	98 3e       	cpi	r25, 0xE8	; 232
    1092:	dc f3       	brlt	.-10     	; 0x108a <__mulsf3_pse+0x82>
    1094:	86 95       	lsr	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f7 95       	ror	r31
    109e:	e7 95       	ror	r30
    10a0:	9f 5f       	subi	r25, 0xFF	; 255
    10a2:	c1 f7       	brne	.-16     	; 0x1094 <__mulsf3_pse+0x8c>
    10a4:	fe 2b       	or	r31, r30
    10a6:	88 0f       	add	r24, r24
    10a8:	91 1d       	adc	r25, r1
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	97 f9       	bld	r25, 7
    10b0:	08 95       	ret

000010b2 <__tablejump2__>:
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31

000010b6 <__tablejump__>:
    10b6:	05 90       	lpm	r0, Z+
    10b8:	f4 91       	lpm	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	19 94       	eijmp

000010be <abs>:
    10be:	97 ff       	sbrs	r25, 7
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <abs+0xa>
    10c2:	91 95       	neg	r25
    10c4:	81 95       	neg	r24
    10c6:	91 09       	sbc	r25, r1
    10c8:	08 95       	ret

000010ca <malloc>:
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	91 05       	cpc	r25, r1
    10d2:	10 f4       	brcc	.+4      	; 0x10d8 <malloc+0xe>
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	e0 91 d9 02 	lds	r30, 0x02D9
    10dc:	f0 91 da 02 	lds	r31, 0x02DA
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	a0 e0       	ldi	r26, 0x00	; 0
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	30 97       	sbiw	r30, 0x00	; 0
    10ea:	39 f1       	breq	.+78     	; 0x113a <malloc+0x70>
    10ec:	40 81       	ld	r20, Z
    10ee:	51 81       	ldd	r21, Z+1	; 0x01
    10f0:	48 17       	cp	r20, r24
    10f2:	59 07       	cpc	r21, r25
    10f4:	b8 f0       	brcs	.+46     	; 0x1124 <malloc+0x5a>
    10f6:	48 17       	cp	r20, r24
    10f8:	59 07       	cpc	r21, r25
    10fa:	71 f4       	brne	.+28     	; 0x1118 <malloc+0x4e>
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	10 97       	sbiw	r26, 0x00	; 0
    1102:	29 f0       	breq	.+10     	; 0x110e <malloc+0x44>
    1104:	13 96       	adiw	r26, 0x03	; 3
    1106:	9c 93       	st	X, r25
    1108:	8e 93       	st	-X, r24
    110a:	12 97       	sbiw	r26, 0x02	; 2
    110c:	2c c0       	rjmp	.+88     	; 0x1166 <malloc+0x9c>
    110e:	90 93 da 02 	sts	0x02DA, r25
    1112:	80 93 d9 02 	sts	0x02D9, r24
    1116:	27 c0       	rjmp	.+78     	; 0x1166 <malloc+0x9c>
    1118:	21 15       	cp	r18, r1
    111a:	31 05       	cpc	r19, r1
    111c:	31 f0       	breq	.+12     	; 0x112a <malloc+0x60>
    111e:	42 17       	cp	r20, r18
    1120:	53 07       	cpc	r21, r19
    1122:	18 f0       	brcs	.+6      	; 0x112a <malloc+0x60>
    1124:	a9 01       	movw	r20, r18
    1126:	db 01       	movw	r26, r22
    1128:	01 c0       	rjmp	.+2      	; 0x112c <malloc+0x62>
    112a:	ef 01       	movw	r28, r30
    112c:	9a 01       	movw	r18, r20
    112e:	bd 01       	movw	r22, r26
    1130:	df 01       	movw	r26, r30
    1132:	02 80       	ldd	r0, Z+2	; 0x02
    1134:	f3 81       	ldd	r31, Z+3	; 0x03
    1136:	e0 2d       	mov	r30, r0
    1138:	d7 cf       	rjmp	.-82     	; 0x10e8 <malloc+0x1e>
    113a:	21 15       	cp	r18, r1
    113c:	31 05       	cpc	r19, r1
    113e:	f9 f0       	breq	.+62     	; 0x117e <malloc+0xb4>
    1140:	28 1b       	sub	r18, r24
    1142:	39 0b       	sbc	r19, r25
    1144:	24 30       	cpi	r18, 0x04	; 4
    1146:	31 05       	cpc	r19, r1
    1148:	80 f4       	brcc	.+32     	; 0x116a <malloc+0xa0>
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	61 15       	cp	r22, r1
    1150:	71 05       	cpc	r23, r1
    1152:	21 f0       	breq	.+8      	; 0x115c <malloc+0x92>
    1154:	fb 01       	movw	r30, r22
    1156:	93 83       	std	Z+3, r25	; 0x03
    1158:	82 83       	std	Z+2, r24	; 0x02
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <malloc+0x9a>
    115c:	90 93 da 02 	sts	0x02DA, r25
    1160:	80 93 d9 02 	sts	0x02D9, r24
    1164:	fe 01       	movw	r30, r28
    1166:	32 96       	adiw	r30, 0x02	; 2
    1168:	44 c0       	rjmp	.+136    	; 0x11f2 <malloc+0x128>
    116a:	fe 01       	movw	r30, r28
    116c:	e2 0f       	add	r30, r18
    116e:	f3 1f       	adc	r31, r19
    1170:	81 93       	st	Z+, r24
    1172:	91 93       	st	Z+, r25
    1174:	22 50       	subi	r18, 0x02	; 2
    1176:	31 09       	sbc	r19, r1
    1178:	39 83       	std	Y+1, r19	; 0x01
    117a:	28 83       	st	Y, r18
    117c:	3a c0       	rjmp	.+116    	; 0x11f2 <malloc+0x128>
    117e:	20 91 d7 02 	lds	r18, 0x02D7
    1182:	30 91 d8 02 	lds	r19, 0x02D8
    1186:	23 2b       	or	r18, r19
    1188:	41 f4       	brne	.+16     	; 0x119a <malloc+0xd0>
    118a:	20 91 02 02 	lds	r18, 0x0202
    118e:	30 91 03 02 	lds	r19, 0x0203
    1192:	30 93 d8 02 	sts	0x02D8, r19
    1196:	20 93 d7 02 	sts	0x02D7, r18
    119a:	20 91 00 02 	lds	r18, 0x0200
    119e:	30 91 01 02 	lds	r19, 0x0201
    11a2:	21 15       	cp	r18, r1
    11a4:	31 05       	cpc	r19, r1
    11a6:	41 f4       	brne	.+16     	; 0x11b8 <malloc+0xee>
    11a8:	2d b7       	in	r18, 0x3d	; 61
    11aa:	3e b7       	in	r19, 0x3e	; 62
    11ac:	40 91 04 02 	lds	r20, 0x0204
    11b0:	50 91 05 02 	lds	r21, 0x0205
    11b4:	24 1b       	sub	r18, r20
    11b6:	35 0b       	sbc	r19, r21
    11b8:	e0 91 d7 02 	lds	r30, 0x02D7
    11bc:	f0 91 d8 02 	lds	r31, 0x02D8
    11c0:	e2 17       	cp	r30, r18
    11c2:	f3 07       	cpc	r31, r19
    11c4:	a0 f4       	brcc	.+40     	; 0x11ee <malloc+0x124>
    11c6:	2e 1b       	sub	r18, r30
    11c8:	3f 0b       	sbc	r19, r31
    11ca:	28 17       	cp	r18, r24
    11cc:	39 07       	cpc	r19, r25
    11ce:	78 f0       	brcs	.+30     	; 0x11ee <malloc+0x124>
    11d0:	ac 01       	movw	r20, r24
    11d2:	4e 5f       	subi	r20, 0xFE	; 254
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255
    11d6:	24 17       	cp	r18, r20
    11d8:	35 07       	cpc	r19, r21
    11da:	48 f0       	brcs	.+18     	; 0x11ee <malloc+0x124>
    11dc:	4e 0f       	add	r20, r30
    11de:	5f 1f       	adc	r21, r31
    11e0:	50 93 d8 02 	sts	0x02D8, r21
    11e4:	40 93 d7 02 	sts	0x02D7, r20
    11e8:	81 93       	st	Z+, r24
    11ea:	91 93       	st	Z+, r25
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <malloc+0x128>
    11ee:	e0 e0       	ldi	r30, 0x00	; 0
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	cf 01       	movw	r24, r30
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <free>:
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	09 f4       	brne	.+2      	; 0x1204 <free+0xa>
    1202:	87 c0       	rjmp	.+270    	; 0x1312 <free+0x118>
    1204:	fc 01       	movw	r30, r24
    1206:	32 97       	sbiw	r30, 0x02	; 2
    1208:	13 82       	std	Z+3, r1	; 0x03
    120a:	12 82       	std	Z+2, r1	; 0x02
    120c:	c0 91 d9 02 	lds	r28, 0x02D9
    1210:	d0 91 da 02 	lds	r29, 0x02DA
    1214:	20 97       	sbiw	r28, 0x00	; 0
    1216:	81 f4       	brne	.+32     	; 0x1238 <free+0x3e>
    1218:	20 81       	ld	r18, Z
    121a:	31 81       	ldd	r19, Z+1	; 0x01
    121c:	28 0f       	add	r18, r24
    121e:	39 1f       	adc	r19, r25
    1220:	80 91 d7 02 	lds	r24, 0x02D7
    1224:	90 91 d8 02 	lds	r25, 0x02D8
    1228:	82 17       	cp	r24, r18
    122a:	93 07       	cpc	r25, r19
    122c:	79 f5       	brne	.+94     	; 0x128c <free+0x92>
    122e:	f0 93 d8 02 	sts	0x02D8, r31
    1232:	e0 93 d7 02 	sts	0x02D7, r30
    1236:	6d c0       	rjmp	.+218    	; 0x1312 <free+0x118>
    1238:	de 01       	movw	r26, r28
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	ae 17       	cp	r26, r30
    1240:	bf 07       	cpc	r27, r31
    1242:	50 f4       	brcc	.+20     	; 0x1258 <free+0x5e>
    1244:	12 96       	adiw	r26, 0x02	; 2
    1246:	4d 91       	ld	r20, X+
    1248:	5c 91       	ld	r21, X
    124a:	13 97       	sbiw	r26, 0x03	; 3
    124c:	9d 01       	movw	r18, r26
    124e:	41 15       	cp	r20, r1
    1250:	51 05       	cpc	r21, r1
    1252:	09 f1       	breq	.+66     	; 0x1296 <free+0x9c>
    1254:	da 01       	movw	r26, r20
    1256:	f3 cf       	rjmp	.-26     	; 0x123e <free+0x44>
    1258:	b3 83       	std	Z+3, r27	; 0x03
    125a:	a2 83       	std	Z+2, r26	; 0x02
    125c:	40 81       	ld	r20, Z
    125e:	51 81       	ldd	r21, Z+1	; 0x01
    1260:	84 0f       	add	r24, r20
    1262:	95 1f       	adc	r25, r21
    1264:	8a 17       	cp	r24, r26
    1266:	9b 07       	cpc	r25, r27
    1268:	71 f4       	brne	.+28     	; 0x1286 <free+0x8c>
    126a:	8d 91       	ld	r24, X+
    126c:	9c 91       	ld	r25, X
    126e:	11 97       	sbiw	r26, 0x01	; 1
    1270:	84 0f       	add	r24, r20
    1272:	95 1f       	adc	r25, r21
    1274:	02 96       	adiw	r24, 0x02	; 2
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	12 96       	adiw	r26, 0x02	; 2
    127c:	8d 91       	ld	r24, X+
    127e:	9c 91       	ld	r25, X
    1280:	13 97       	sbiw	r26, 0x03	; 3
    1282:	93 83       	std	Z+3, r25	; 0x03
    1284:	82 83       	std	Z+2, r24	; 0x02
    1286:	21 15       	cp	r18, r1
    1288:	31 05       	cpc	r19, r1
    128a:	29 f4       	brne	.+10     	; 0x1296 <free+0x9c>
    128c:	f0 93 da 02 	sts	0x02DA, r31
    1290:	e0 93 d9 02 	sts	0x02D9, r30
    1294:	3e c0       	rjmp	.+124    	; 0x1312 <free+0x118>
    1296:	d9 01       	movw	r26, r18
    1298:	13 96       	adiw	r26, 0x03	; 3
    129a:	fc 93       	st	X, r31
    129c:	ee 93       	st	-X, r30
    129e:	12 97       	sbiw	r26, 0x02	; 2
    12a0:	4d 91       	ld	r20, X+
    12a2:	5d 91       	ld	r21, X+
    12a4:	a4 0f       	add	r26, r20
    12a6:	b5 1f       	adc	r27, r21
    12a8:	ea 17       	cp	r30, r26
    12aa:	fb 07       	cpc	r31, r27
    12ac:	79 f4       	brne	.+30     	; 0x12cc <free+0xd2>
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	84 0f       	add	r24, r20
    12b4:	95 1f       	adc	r25, r21
    12b6:	02 96       	adiw	r24, 0x02	; 2
    12b8:	d9 01       	movw	r26, r18
    12ba:	11 96       	adiw	r26, 0x01	; 1
    12bc:	9c 93       	st	X, r25
    12be:	8e 93       	st	-X, r24
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	13 96       	adiw	r26, 0x03	; 3
    12c6:	9c 93       	st	X, r25
    12c8:	8e 93       	st	-X, r24
    12ca:	12 97       	sbiw	r26, 0x02	; 2
    12cc:	e0 e0       	ldi	r30, 0x00	; 0
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	9b 81       	ldd	r25, Y+3	; 0x03
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	19 f0       	breq	.+6      	; 0x12de <free+0xe4>
    12d8:	fe 01       	movw	r30, r28
    12da:	ec 01       	movw	r28, r24
    12dc:	f9 cf       	rjmp	.-14     	; 0x12d0 <free+0xd6>
    12de:	ce 01       	movw	r24, r28
    12e0:	02 96       	adiw	r24, 0x02	; 2
    12e2:	28 81       	ld	r18, Y
    12e4:	39 81       	ldd	r19, Y+1	; 0x01
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	20 91 d7 02 	lds	r18, 0x02D7
    12ee:	30 91 d8 02 	lds	r19, 0x02D8
    12f2:	28 17       	cp	r18, r24
    12f4:	39 07       	cpc	r19, r25
    12f6:	69 f4       	brne	.+26     	; 0x1312 <free+0x118>
    12f8:	30 97       	sbiw	r30, 0x00	; 0
    12fa:	29 f4       	brne	.+10     	; 0x1306 <free+0x10c>
    12fc:	10 92 da 02 	sts	0x02DA, r1
    1300:	10 92 d9 02 	sts	0x02D9, r1
    1304:	02 c0       	rjmp	.+4      	; 0x130a <free+0x110>
    1306:	13 82       	std	Z+3, r1	; 0x03
    1308:	12 82       	std	Z+2, r1	; 0x02
    130a:	d0 93 d8 02 	sts	0x02D8, r29
    130e:	c0 93 d7 02 	sts	0x02D7, r28
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <fdevopen>:
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    1322:	8b 01       	movw	r16, r22
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	31 f4       	brne	.+12     	; 0x1334 <fdevopen+0x1c>
    1328:	61 15       	cp	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	19 f4       	brne	.+6      	; 0x1334 <fdevopen+0x1c>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	37 c0       	rjmp	.+110    	; 0x13a2 <fdevopen+0x8a>
    1334:	6e e0       	ldi	r22, 0x0E	; 14
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	36 d2       	rcall	.+1132   	; 0x17aa <calloc>
    133e:	fc 01       	movw	r30, r24
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	a9 f3       	breq	.-22     	; 0x132e <fdevopen+0x16>
    1344:	80 e8       	ldi	r24, 0x80	; 128
    1346:	83 83       	std	Z+3, r24	; 0x03
    1348:	01 15       	cp	r16, r1
    134a:	11 05       	cpc	r17, r1
    134c:	71 f0       	breq	.+28     	; 0x136a <fdevopen+0x52>
    134e:	13 87       	std	Z+11, r17	; 0x0b
    1350:	02 87       	std	Z+10, r16	; 0x0a
    1352:	81 e8       	ldi	r24, 0x81	; 129
    1354:	83 83       	std	Z+3, r24	; 0x03
    1356:	80 91 db 02 	lds	r24, 0x02DB
    135a:	90 91 dc 02 	lds	r25, 0x02DC
    135e:	89 2b       	or	r24, r25
    1360:	21 f4       	brne	.+8      	; 0x136a <fdevopen+0x52>
    1362:	f0 93 dc 02 	sts	0x02DC, r31
    1366:	e0 93 db 02 	sts	0x02DB, r30
    136a:	20 97       	sbiw	r28, 0x00	; 0
    136c:	c9 f0       	breq	.+50     	; 0x13a0 <fdevopen+0x88>
    136e:	d1 87       	std	Z+9, r29	; 0x09
    1370:	c0 87       	std	Z+8, r28	; 0x08
    1372:	83 81       	ldd	r24, Z+3	; 0x03
    1374:	82 60       	ori	r24, 0x02	; 2
    1376:	83 83       	std	Z+3, r24	; 0x03
    1378:	80 91 dd 02 	lds	r24, 0x02DD
    137c:	90 91 de 02 	lds	r25, 0x02DE
    1380:	89 2b       	or	r24, r25
    1382:	71 f4       	brne	.+28     	; 0x13a0 <fdevopen+0x88>
    1384:	f0 93 de 02 	sts	0x02DE, r31
    1388:	e0 93 dd 02 	sts	0x02DD, r30
    138c:	80 91 df 02 	lds	r24, 0x02DF
    1390:	90 91 e0 02 	lds	r25, 0x02E0
    1394:	89 2b       	or	r24, r25
    1396:	21 f4       	brne	.+8      	; 0x13a0 <fdevopen+0x88>
    1398:	f0 93 e0 02 	sts	0x02E0, r31
    139c:	e0 93 df 02 	sts	0x02DF, r30
    13a0:	cf 01       	movw	r24, r30
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <printf>:
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	fe 01       	movw	r30, r28
    13b6:	36 96       	adiw	r30, 0x06	; 6
    13b8:	61 91       	ld	r22, Z+
    13ba:	71 91       	ld	r23, Z+
    13bc:	af 01       	movw	r20, r30
    13be:	80 91 dd 02 	lds	r24, 0x02DD
    13c2:	90 91 de 02 	lds	r25, 0x02DE
    13c6:	03 d0       	rcall	.+6      	; 0x13ce <vfprintf>
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <vfprintf>:
    13ce:	2f 92       	push	r2
    13d0:	3f 92       	push	r3
    13d2:	4f 92       	push	r4
    13d4:	5f 92       	push	r5
    13d6:	6f 92       	push	r6
    13d8:	7f 92       	push	r7
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	2c 97       	sbiw	r28, 0x0c	; 12
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	7c 01       	movw	r14, r24
    1404:	6b 01       	movw	r12, r22
    1406:	8a 01       	movw	r16, r20
    1408:	fc 01       	movw	r30, r24
    140a:	17 82       	std	Z+7, r1	; 0x07
    140c:	16 82       	std	Z+6, r1	; 0x06
    140e:	83 81       	ldd	r24, Z+3	; 0x03
    1410:	81 ff       	sbrs	r24, 1
    1412:	b0 c1       	rjmp	.+864    	; 0x1774 <vfprintf+0x3a6>
    1414:	ce 01       	movw	r24, r28
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	4c 01       	movw	r8, r24
    141a:	f7 01       	movw	r30, r14
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	f6 01       	movw	r30, r12
    1420:	93 fd       	sbrc	r25, 3
    1422:	85 91       	lpm	r24, Z+
    1424:	93 ff       	sbrs	r25, 3
    1426:	81 91       	ld	r24, Z+
    1428:	6f 01       	movw	r12, r30
    142a:	88 23       	and	r24, r24
    142c:	09 f4       	brne	.+2      	; 0x1430 <vfprintf+0x62>
    142e:	9e c1       	rjmp	.+828    	; 0x176c <vfprintf+0x39e>
    1430:	85 32       	cpi	r24, 0x25	; 37
    1432:	39 f4       	brne	.+14     	; 0x1442 <vfprintf+0x74>
    1434:	93 fd       	sbrc	r25, 3
    1436:	85 91       	lpm	r24, Z+
    1438:	93 ff       	sbrs	r25, 3
    143a:	81 91       	ld	r24, Z+
    143c:	6f 01       	movw	r12, r30
    143e:	85 32       	cpi	r24, 0x25	; 37
    1440:	21 f4       	brne	.+8      	; 0x144a <vfprintf+0x7c>
    1442:	b7 01       	movw	r22, r14
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	e8 d1       	rcall	.+976    	; 0x1818 <fputc>
    1448:	e8 cf       	rjmp	.-48     	; 0x141a <vfprintf+0x4c>
    144a:	51 2c       	mov	r5, r1
    144c:	31 2c       	mov	r3, r1
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	20 32       	cpi	r18, 0x20	; 32
    1452:	a0 f4       	brcc	.+40     	; 0x147c <vfprintf+0xae>
    1454:	8b 32       	cpi	r24, 0x2B	; 43
    1456:	69 f0       	breq	.+26     	; 0x1472 <vfprintf+0xa4>
    1458:	30 f4       	brcc	.+12     	; 0x1466 <vfprintf+0x98>
    145a:	80 32       	cpi	r24, 0x20	; 32
    145c:	59 f0       	breq	.+22     	; 0x1474 <vfprintf+0xa6>
    145e:	83 32       	cpi	r24, 0x23	; 35
    1460:	69 f4       	brne	.+26     	; 0x147c <vfprintf+0xae>
    1462:	20 61       	ori	r18, 0x10	; 16
    1464:	2c c0       	rjmp	.+88     	; 0x14be <vfprintf+0xf0>
    1466:	8d 32       	cpi	r24, 0x2D	; 45
    1468:	39 f0       	breq	.+14     	; 0x1478 <vfprintf+0xaa>
    146a:	80 33       	cpi	r24, 0x30	; 48
    146c:	39 f4       	brne	.+14     	; 0x147c <vfprintf+0xae>
    146e:	21 60       	ori	r18, 0x01	; 1
    1470:	26 c0       	rjmp	.+76     	; 0x14be <vfprintf+0xf0>
    1472:	22 60       	ori	r18, 0x02	; 2
    1474:	24 60       	ori	r18, 0x04	; 4
    1476:	23 c0       	rjmp	.+70     	; 0x14be <vfprintf+0xf0>
    1478:	28 60       	ori	r18, 0x08	; 8
    147a:	21 c0       	rjmp	.+66     	; 0x14be <vfprintf+0xf0>
    147c:	27 fd       	sbrc	r18, 7
    147e:	27 c0       	rjmp	.+78     	; 0x14ce <vfprintf+0x100>
    1480:	30 ed       	ldi	r19, 0xD0	; 208
    1482:	38 0f       	add	r19, r24
    1484:	3a 30       	cpi	r19, 0x0A	; 10
    1486:	78 f4       	brcc	.+30     	; 0x14a6 <vfprintf+0xd8>
    1488:	26 ff       	sbrs	r18, 6
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <vfprintf+0xca>
    148c:	fa e0       	ldi	r31, 0x0A	; 10
    148e:	5f 9e       	mul	r5, r31
    1490:	30 0d       	add	r19, r0
    1492:	11 24       	eor	r1, r1
    1494:	53 2e       	mov	r5, r19
    1496:	13 c0       	rjmp	.+38     	; 0x14be <vfprintf+0xf0>
    1498:	8a e0       	ldi	r24, 0x0A	; 10
    149a:	38 9e       	mul	r3, r24
    149c:	30 0d       	add	r19, r0
    149e:	11 24       	eor	r1, r1
    14a0:	33 2e       	mov	r3, r19
    14a2:	20 62       	ori	r18, 0x20	; 32
    14a4:	0c c0       	rjmp	.+24     	; 0x14be <vfprintf+0xf0>
    14a6:	8e 32       	cpi	r24, 0x2E	; 46
    14a8:	21 f4       	brne	.+8      	; 0x14b2 <vfprintf+0xe4>
    14aa:	26 fd       	sbrc	r18, 6
    14ac:	5f c1       	rjmp	.+702    	; 0x176c <vfprintf+0x39e>
    14ae:	20 64       	ori	r18, 0x40	; 64
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <vfprintf+0xf0>
    14b2:	8c 36       	cpi	r24, 0x6C	; 108
    14b4:	11 f4       	brne	.+4      	; 0x14ba <vfprintf+0xec>
    14b6:	20 68       	ori	r18, 0x80	; 128
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <vfprintf+0xf0>
    14ba:	88 36       	cpi	r24, 0x68	; 104
    14bc:	41 f4       	brne	.+16     	; 0x14ce <vfprintf+0x100>
    14be:	f6 01       	movw	r30, r12
    14c0:	93 fd       	sbrc	r25, 3
    14c2:	85 91       	lpm	r24, Z+
    14c4:	93 ff       	sbrs	r25, 3
    14c6:	81 91       	ld	r24, Z+
    14c8:	6f 01       	movw	r12, r30
    14ca:	81 11       	cpse	r24, r1
    14cc:	c1 cf       	rjmp	.-126    	; 0x1450 <vfprintf+0x82>
    14ce:	98 2f       	mov	r25, r24
    14d0:	9f 7d       	andi	r25, 0xDF	; 223
    14d2:	95 54       	subi	r25, 0x45	; 69
    14d4:	93 30       	cpi	r25, 0x03	; 3
    14d6:	28 f4       	brcc	.+10     	; 0x14e2 <vfprintf+0x114>
    14d8:	0c 5f       	subi	r16, 0xFC	; 252
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    14dc:	ff e3       	ldi	r31, 0x3F	; 63
    14de:	f9 83       	std	Y+1, r31	; 0x01
    14e0:	0d c0       	rjmp	.+26     	; 0x14fc <vfprintf+0x12e>
    14e2:	83 36       	cpi	r24, 0x63	; 99
    14e4:	31 f0       	breq	.+12     	; 0x14f2 <vfprintf+0x124>
    14e6:	83 37       	cpi	r24, 0x73	; 115
    14e8:	71 f0       	breq	.+28     	; 0x1506 <vfprintf+0x138>
    14ea:	83 35       	cpi	r24, 0x53	; 83
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <vfprintf+0x122>
    14ee:	57 c0       	rjmp	.+174    	; 0x159e <vfprintf+0x1d0>
    14f0:	21 c0       	rjmp	.+66     	; 0x1534 <vfprintf+0x166>
    14f2:	f8 01       	movw	r30, r16
    14f4:	80 81       	ld	r24, Z
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	0e 5f       	subi	r16, 0xFE	; 254
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    14fc:	44 24       	eor	r4, r4
    14fe:	43 94       	inc	r4
    1500:	51 2c       	mov	r5, r1
    1502:	54 01       	movw	r10, r8
    1504:	14 c0       	rjmp	.+40     	; 0x152e <vfprintf+0x160>
    1506:	38 01       	movw	r6, r16
    1508:	f2 e0       	ldi	r31, 0x02	; 2
    150a:	6f 0e       	add	r6, r31
    150c:	71 1c       	adc	r7, r1
    150e:	f8 01       	movw	r30, r16
    1510:	a0 80       	ld	r10, Z
    1512:	b1 80       	ldd	r11, Z+1	; 0x01
    1514:	26 ff       	sbrs	r18, 6
    1516:	03 c0       	rjmp	.+6      	; 0x151e <vfprintf+0x150>
    1518:	65 2d       	mov	r22, r5
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <vfprintf+0x154>
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	7f ef       	ldi	r23, 0xFF	; 255
    1522:	c5 01       	movw	r24, r10
    1524:	2c 87       	std	Y+12, r18	; 0x0c
    1526:	6d d1       	rcall	.+730    	; 0x1802 <strnlen>
    1528:	2c 01       	movw	r4, r24
    152a:	83 01       	movw	r16, r6
    152c:	2c 85       	ldd	r18, Y+12	; 0x0c
    152e:	2f 77       	andi	r18, 0x7F	; 127
    1530:	22 2e       	mov	r2, r18
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <vfprintf+0x192>
    1534:	38 01       	movw	r6, r16
    1536:	f2 e0       	ldi	r31, 0x02	; 2
    1538:	6f 0e       	add	r6, r31
    153a:	71 1c       	adc	r7, r1
    153c:	f8 01       	movw	r30, r16
    153e:	a0 80       	ld	r10, Z
    1540:	b1 80       	ldd	r11, Z+1	; 0x01
    1542:	26 ff       	sbrs	r18, 6
    1544:	03 c0       	rjmp	.+6      	; 0x154c <vfprintf+0x17e>
    1546:	65 2d       	mov	r22, r5
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0x182>
    154c:	6f ef       	ldi	r22, 0xFF	; 255
    154e:	7f ef       	ldi	r23, 0xFF	; 255
    1550:	c5 01       	movw	r24, r10
    1552:	2c 87       	std	Y+12, r18	; 0x0c
    1554:	44 d1       	rcall	.+648    	; 0x17de <strnlen_P>
    1556:	2c 01       	movw	r4, r24
    1558:	2c 85       	ldd	r18, Y+12	; 0x0c
    155a:	20 68       	ori	r18, 0x80	; 128
    155c:	22 2e       	mov	r2, r18
    155e:	83 01       	movw	r16, r6
    1560:	23 fc       	sbrc	r2, 3
    1562:	19 c0       	rjmp	.+50     	; 0x1596 <vfprintf+0x1c8>
    1564:	83 2d       	mov	r24, r3
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	48 16       	cp	r4, r24
    156a:	59 06       	cpc	r5, r25
    156c:	a0 f4       	brcc	.+40     	; 0x1596 <vfprintf+0x1c8>
    156e:	b7 01       	movw	r22, r14
    1570:	80 e2       	ldi	r24, 0x20	; 32
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	51 d1       	rcall	.+674    	; 0x1818 <fputc>
    1576:	3a 94       	dec	r3
    1578:	f5 cf       	rjmp	.-22     	; 0x1564 <vfprintf+0x196>
    157a:	f5 01       	movw	r30, r10
    157c:	27 fc       	sbrc	r2, 7
    157e:	85 91       	lpm	r24, Z+
    1580:	27 fe       	sbrs	r2, 7
    1582:	81 91       	ld	r24, Z+
    1584:	5f 01       	movw	r10, r30
    1586:	b7 01       	movw	r22, r14
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	46 d1       	rcall	.+652    	; 0x1818 <fputc>
    158c:	31 10       	cpse	r3, r1
    158e:	3a 94       	dec	r3
    1590:	f1 e0       	ldi	r31, 0x01	; 1
    1592:	4f 1a       	sub	r4, r31
    1594:	51 08       	sbc	r5, r1
    1596:	41 14       	cp	r4, r1
    1598:	51 04       	cpc	r5, r1
    159a:	79 f7       	brne	.-34     	; 0x157a <vfprintf+0x1ac>
    159c:	de c0       	rjmp	.+444    	; 0x175a <vfprintf+0x38c>
    159e:	84 36       	cpi	r24, 0x64	; 100
    15a0:	11 f0       	breq	.+4      	; 0x15a6 <vfprintf+0x1d8>
    15a2:	89 36       	cpi	r24, 0x69	; 105
    15a4:	31 f5       	brne	.+76     	; 0x15f2 <vfprintf+0x224>
    15a6:	f8 01       	movw	r30, r16
    15a8:	27 ff       	sbrs	r18, 7
    15aa:	07 c0       	rjmp	.+14     	; 0x15ba <vfprintf+0x1ec>
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	0c 5f       	subi	r16, 0xFC	; 252
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <vfprintf+0x1fc>
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	88 27       	eor	r24, r24
    15c0:	77 fd       	sbrc	r23, 7
    15c2:	80 95       	com	r24
    15c4:	98 2f       	mov	r25, r24
    15c6:	0e 5f       	subi	r16, 0xFE	; 254
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	2f 76       	andi	r18, 0x6F	; 111
    15cc:	b2 2e       	mov	r11, r18
    15ce:	97 ff       	sbrs	r25, 7
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <vfprintf+0x216>
    15d2:	90 95       	com	r25
    15d4:	80 95       	com	r24
    15d6:	70 95       	com	r23
    15d8:	61 95       	neg	r22
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	8f 4f       	sbci	r24, 0xFF	; 255
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	20 68       	ori	r18, 0x80	; 128
    15e2:	b2 2e       	mov	r11, r18
    15e4:	2a e0       	ldi	r18, 0x0A	; 10
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	a4 01       	movw	r20, r8
    15ea:	48 d1       	rcall	.+656    	; 0x187c <__ultoa_invert>
    15ec:	a8 2e       	mov	r10, r24
    15ee:	a8 18       	sub	r10, r8
    15f0:	43 c0       	rjmp	.+134    	; 0x1678 <vfprintf+0x2aa>
    15f2:	85 37       	cpi	r24, 0x75	; 117
    15f4:	29 f4       	brne	.+10     	; 0x1600 <vfprintf+0x232>
    15f6:	2f 7e       	andi	r18, 0xEF	; 239
    15f8:	b2 2e       	mov	r11, r18
    15fa:	2a e0       	ldi	r18, 0x0A	; 10
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	25 c0       	rjmp	.+74     	; 0x164a <vfprintf+0x27c>
    1600:	f2 2f       	mov	r31, r18
    1602:	f9 7f       	andi	r31, 0xF9	; 249
    1604:	bf 2e       	mov	r11, r31
    1606:	8f 36       	cpi	r24, 0x6F	; 111
    1608:	c1 f0       	breq	.+48     	; 0x163a <vfprintf+0x26c>
    160a:	18 f4       	brcc	.+6      	; 0x1612 <vfprintf+0x244>
    160c:	88 35       	cpi	r24, 0x58	; 88
    160e:	79 f0       	breq	.+30     	; 0x162e <vfprintf+0x260>
    1610:	ad c0       	rjmp	.+346    	; 0x176c <vfprintf+0x39e>
    1612:	80 37       	cpi	r24, 0x70	; 112
    1614:	19 f0       	breq	.+6      	; 0x161c <vfprintf+0x24e>
    1616:	88 37       	cpi	r24, 0x78	; 120
    1618:	21 f0       	breq	.+8      	; 0x1622 <vfprintf+0x254>
    161a:	a8 c0       	rjmp	.+336    	; 0x176c <vfprintf+0x39e>
    161c:	2f 2f       	mov	r18, r31
    161e:	20 61       	ori	r18, 0x10	; 16
    1620:	b2 2e       	mov	r11, r18
    1622:	b4 fe       	sbrs	r11, 4
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <vfprintf+0x272>
    1626:	8b 2d       	mov	r24, r11
    1628:	84 60       	ori	r24, 0x04	; 4
    162a:	b8 2e       	mov	r11, r24
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <vfprintf+0x272>
    162e:	24 ff       	sbrs	r18, 4
    1630:	0a c0       	rjmp	.+20     	; 0x1646 <vfprintf+0x278>
    1632:	9f 2f       	mov	r25, r31
    1634:	96 60       	ori	r25, 0x06	; 6
    1636:	b9 2e       	mov	r11, r25
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <vfprintf+0x278>
    163a:	28 e0       	ldi	r18, 0x08	; 8
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	05 c0       	rjmp	.+10     	; 0x164a <vfprintf+0x27c>
    1640:	20 e1       	ldi	r18, 0x10	; 16
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <vfprintf+0x27c>
    1646:	20 e1       	ldi	r18, 0x10	; 16
    1648:	32 e0       	ldi	r19, 0x02	; 2
    164a:	f8 01       	movw	r30, r16
    164c:	b7 fe       	sbrs	r11, 7
    164e:	07 c0       	rjmp	.+14     	; 0x165e <vfprintf+0x290>
    1650:	60 81       	ld	r22, Z
    1652:	71 81       	ldd	r23, Z+1	; 0x01
    1654:	82 81       	ldd	r24, Z+2	; 0x02
    1656:	93 81       	ldd	r25, Z+3	; 0x03
    1658:	0c 5f       	subi	r16, 0xFC	; 252
    165a:	1f 4f       	sbci	r17, 0xFF	; 255
    165c:	06 c0       	rjmp	.+12     	; 0x166a <vfprintf+0x29c>
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 5f       	subi	r16, 0xFE	; 254
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	a4 01       	movw	r20, r8
    166c:	07 d1       	rcall	.+526    	; 0x187c <__ultoa_invert>
    166e:	a8 2e       	mov	r10, r24
    1670:	a8 18       	sub	r10, r8
    1672:	fb 2d       	mov	r31, r11
    1674:	ff 77       	andi	r31, 0x7F	; 127
    1676:	bf 2e       	mov	r11, r31
    1678:	b6 fe       	sbrs	r11, 6
    167a:	0b c0       	rjmp	.+22     	; 0x1692 <vfprintf+0x2c4>
    167c:	2b 2d       	mov	r18, r11
    167e:	2e 7f       	andi	r18, 0xFE	; 254
    1680:	a5 14       	cp	r10, r5
    1682:	50 f4       	brcc	.+20     	; 0x1698 <vfprintf+0x2ca>
    1684:	b4 fe       	sbrs	r11, 4
    1686:	0a c0       	rjmp	.+20     	; 0x169c <vfprintf+0x2ce>
    1688:	b2 fc       	sbrc	r11, 2
    168a:	08 c0       	rjmp	.+16     	; 0x169c <vfprintf+0x2ce>
    168c:	2b 2d       	mov	r18, r11
    168e:	2e 7e       	andi	r18, 0xEE	; 238
    1690:	05 c0       	rjmp	.+10     	; 0x169c <vfprintf+0x2ce>
    1692:	7a 2c       	mov	r7, r10
    1694:	2b 2d       	mov	r18, r11
    1696:	03 c0       	rjmp	.+6      	; 0x169e <vfprintf+0x2d0>
    1698:	7a 2c       	mov	r7, r10
    169a:	01 c0       	rjmp	.+2      	; 0x169e <vfprintf+0x2d0>
    169c:	75 2c       	mov	r7, r5
    169e:	24 ff       	sbrs	r18, 4
    16a0:	0d c0       	rjmp	.+26     	; 0x16bc <vfprintf+0x2ee>
    16a2:	fe 01       	movw	r30, r28
    16a4:	ea 0d       	add	r30, r10
    16a6:	f1 1d       	adc	r31, r1
    16a8:	80 81       	ld	r24, Z
    16aa:	80 33       	cpi	r24, 0x30	; 48
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <vfprintf+0x2e4>
    16ae:	29 7e       	andi	r18, 0xE9	; 233
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <vfprintf+0x2f6>
    16b2:	22 ff       	sbrs	r18, 2
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <vfprintf+0x2f4>
    16b6:	73 94       	inc	r7
    16b8:	73 94       	inc	r7
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <vfprintf+0x2f6>
    16bc:	82 2f       	mov	r24, r18
    16be:	86 78       	andi	r24, 0x86	; 134
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <vfprintf+0x2f6>
    16c2:	73 94       	inc	r7
    16c4:	23 fd       	sbrc	r18, 3
    16c6:	12 c0       	rjmp	.+36     	; 0x16ec <vfprintf+0x31e>
    16c8:	20 ff       	sbrs	r18, 0
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <vfprintf+0x30a>
    16cc:	5a 2c       	mov	r5, r10
    16ce:	73 14       	cp	r7, r3
    16d0:	18 f4       	brcc	.+6      	; 0x16d8 <vfprintf+0x30a>
    16d2:	53 0c       	add	r5, r3
    16d4:	57 18       	sub	r5, r7
    16d6:	73 2c       	mov	r7, r3
    16d8:	73 14       	cp	r7, r3
    16da:	60 f4       	brcc	.+24     	; 0x16f4 <vfprintf+0x326>
    16dc:	b7 01       	movw	r22, r14
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	2c 87       	std	Y+12, r18	; 0x0c
    16e4:	99 d0       	rcall	.+306    	; 0x1818 <fputc>
    16e6:	73 94       	inc	r7
    16e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ea:	f6 cf       	rjmp	.-20     	; 0x16d8 <vfprintf+0x30a>
    16ec:	73 14       	cp	r7, r3
    16ee:	10 f4       	brcc	.+4      	; 0x16f4 <vfprintf+0x326>
    16f0:	37 18       	sub	r3, r7
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <vfprintf+0x328>
    16f4:	31 2c       	mov	r3, r1
    16f6:	24 ff       	sbrs	r18, 4
    16f8:	11 c0       	rjmp	.+34     	; 0x171c <vfprintf+0x34e>
    16fa:	b7 01       	movw	r22, r14
    16fc:	80 e3       	ldi	r24, 0x30	; 48
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	2c 87       	std	Y+12, r18	; 0x0c
    1702:	8a d0       	rcall	.+276    	; 0x1818 <fputc>
    1704:	2c 85       	ldd	r18, Y+12	; 0x0c
    1706:	22 ff       	sbrs	r18, 2
    1708:	16 c0       	rjmp	.+44     	; 0x1736 <vfprintf+0x368>
    170a:	21 ff       	sbrs	r18, 1
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <vfprintf+0x346>
    170e:	88 e5       	ldi	r24, 0x58	; 88
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x34a>
    1714:	88 e7       	ldi	r24, 0x78	; 120
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	b7 01       	movw	r22, r14
    171a:	0c c0       	rjmp	.+24     	; 0x1734 <vfprintf+0x366>
    171c:	82 2f       	mov	r24, r18
    171e:	86 78       	andi	r24, 0x86	; 134
    1720:	51 f0       	breq	.+20     	; 0x1736 <vfprintf+0x368>
    1722:	21 fd       	sbrc	r18, 1
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x35c>
    1726:	80 e2       	ldi	r24, 0x20	; 32
    1728:	01 c0       	rjmp	.+2      	; 0x172c <vfprintf+0x35e>
    172a:	8b e2       	ldi	r24, 0x2B	; 43
    172c:	27 fd       	sbrc	r18, 7
    172e:	8d e2       	ldi	r24, 0x2D	; 45
    1730:	b7 01       	movw	r22, r14
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	71 d0       	rcall	.+226    	; 0x1818 <fputc>
    1736:	a5 14       	cp	r10, r5
    1738:	30 f4       	brcc	.+12     	; 0x1746 <vfprintf+0x378>
    173a:	b7 01       	movw	r22, r14
    173c:	80 e3       	ldi	r24, 0x30	; 48
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	6b d0       	rcall	.+214    	; 0x1818 <fputc>
    1742:	5a 94       	dec	r5
    1744:	f8 cf       	rjmp	.-16     	; 0x1736 <vfprintf+0x368>
    1746:	aa 94       	dec	r10
    1748:	f4 01       	movw	r30, r8
    174a:	ea 0d       	add	r30, r10
    174c:	f1 1d       	adc	r31, r1
    174e:	80 81       	ld	r24, Z
    1750:	b7 01       	movw	r22, r14
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	61 d0       	rcall	.+194    	; 0x1818 <fputc>
    1756:	a1 10       	cpse	r10, r1
    1758:	f6 cf       	rjmp	.-20     	; 0x1746 <vfprintf+0x378>
    175a:	33 20       	and	r3, r3
    175c:	09 f4       	brne	.+2      	; 0x1760 <vfprintf+0x392>
    175e:	5d ce       	rjmp	.-838    	; 0x141a <vfprintf+0x4c>
    1760:	b7 01       	movw	r22, r14
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	58 d0       	rcall	.+176    	; 0x1818 <fputc>
    1768:	3a 94       	dec	r3
    176a:	f7 cf       	rjmp	.-18     	; 0x175a <vfprintf+0x38c>
    176c:	f7 01       	movw	r30, r14
    176e:	86 81       	ldd	r24, Z+6	; 0x06
    1770:	97 81       	ldd	r25, Z+7	; 0x07
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <vfprintf+0x3aa>
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	9f ef       	ldi	r25, 0xFF	; 255
    1778:	2c 96       	adiw	r28, 0x0c	; 12
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	cf 90       	pop	r12
    1794:	bf 90       	pop	r11
    1796:	af 90       	pop	r10
    1798:	9f 90       	pop	r9
    179a:	8f 90       	pop	r8
    179c:	7f 90       	pop	r7
    179e:	6f 90       	pop	r6
    17a0:	5f 90       	pop	r5
    17a2:	4f 90       	pop	r4
    17a4:	3f 90       	pop	r3
    17a6:	2f 90       	pop	r2
    17a8:	08 95       	ret

000017aa <calloc>:
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	86 9f       	mul	r24, r22
    17b4:	80 01       	movw	r16, r0
    17b6:	87 9f       	mul	r24, r23
    17b8:	10 0d       	add	r17, r0
    17ba:	96 9f       	mul	r25, r22
    17bc:	10 0d       	add	r17, r0
    17be:	11 24       	eor	r1, r1
    17c0:	c8 01       	movw	r24, r16
    17c2:	83 dc       	rcall	.-1786   	; 0x10ca <malloc>
    17c4:	ec 01       	movw	r28, r24
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	21 f0       	breq	.+8      	; 0x17d2 <calloc+0x28>
    17ca:	a8 01       	movw	r20, r16
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	11 d0       	rcall	.+34     	; 0x17f4 <memset>
    17d2:	ce 01       	movw	r24, r28
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	08 95       	ret

000017de <strnlen_P>:
    17de:	fc 01       	movw	r30, r24
    17e0:	05 90       	lpm	r0, Z+
    17e2:	61 50       	subi	r22, 0x01	; 1
    17e4:	70 40       	sbci	r23, 0x00	; 0
    17e6:	01 10       	cpse	r0, r1
    17e8:	d8 f7       	brcc	.-10     	; 0x17e0 <strnlen_P+0x2>
    17ea:	80 95       	com	r24
    17ec:	90 95       	com	r25
    17ee:	8e 0f       	add	r24, r30
    17f0:	9f 1f       	adc	r25, r31
    17f2:	08 95       	ret

000017f4 <memset>:
    17f4:	dc 01       	movw	r26, r24
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <memset+0x6>
    17f8:	6d 93       	st	X+, r22
    17fa:	41 50       	subi	r20, 0x01	; 1
    17fc:	50 40       	sbci	r21, 0x00	; 0
    17fe:	e0 f7       	brcc	.-8      	; 0x17f8 <memset+0x4>
    1800:	08 95       	ret

00001802 <strnlen>:
    1802:	fc 01       	movw	r30, r24
    1804:	61 50       	subi	r22, 0x01	; 1
    1806:	70 40       	sbci	r23, 0x00	; 0
    1808:	01 90       	ld	r0, Z+
    180a:	01 10       	cpse	r0, r1
    180c:	d8 f7       	brcc	.-10     	; 0x1804 <strnlen+0x2>
    180e:	80 95       	com	r24
    1810:	90 95       	com	r25
    1812:	8e 0f       	add	r24, r30
    1814:	9f 1f       	adc	r25, r31
    1816:	08 95       	ret

00001818 <fputc>:
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	18 2f       	mov	r17, r24
    1822:	09 2f       	mov	r16, r25
    1824:	eb 01       	movw	r28, r22
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	81 fd       	sbrc	r24, 1
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <fputc+0x1a>
    182c:	8f ef       	ldi	r24, 0xFF	; 255
    182e:	9f ef       	ldi	r25, 0xFF	; 255
    1830:	20 c0       	rjmp	.+64     	; 0x1872 <fputc+0x5a>
    1832:	82 ff       	sbrs	r24, 2
    1834:	10 c0       	rjmp	.+32     	; 0x1856 <fputc+0x3e>
    1836:	4e 81       	ldd	r20, Y+6	; 0x06
    1838:	5f 81       	ldd	r21, Y+7	; 0x07
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	42 17       	cp	r20, r18
    1840:	53 07       	cpc	r21, r19
    1842:	7c f4       	brge	.+30     	; 0x1862 <fputc+0x4a>
    1844:	e8 81       	ld	r30, Y
    1846:	f9 81       	ldd	r31, Y+1	; 0x01
    1848:	9f 01       	movw	r18, r30
    184a:	2f 5f       	subi	r18, 0xFF	; 255
    184c:	3f 4f       	sbci	r19, 0xFF	; 255
    184e:	39 83       	std	Y+1, r19	; 0x01
    1850:	28 83       	st	Y, r18
    1852:	10 83       	st	Z, r17
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <fputc+0x4a>
    1856:	e8 85       	ldd	r30, Y+8	; 0x08
    1858:	f9 85       	ldd	r31, Y+9	; 0x09
    185a:	81 2f       	mov	r24, r17
    185c:	19 95       	eicall
    185e:	89 2b       	or	r24, r25
    1860:	29 f7       	brne	.-54     	; 0x182c <fputc+0x14>
    1862:	2e 81       	ldd	r18, Y+6	; 0x06
    1864:	3f 81       	ldd	r19, Y+7	; 0x07
    1866:	2f 5f       	subi	r18, 0xFF	; 255
    1868:	3f 4f       	sbci	r19, 0xFF	; 255
    186a:	3f 83       	std	Y+7, r19	; 0x07
    186c:	2e 83       	std	Y+6, r18	; 0x06
    186e:	81 2f       	mov	r24, r17
    1870:	90 2f       	mov	r25, r16
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <__ultoa_invert>:
    187c:	fa 01       	movw	r30, r20
    187e:	aa 27       	eor	r26, r26
    1880:	28 30       	cpi	r18, 0x08	; 8
    1882:	51 f1       	breq	.+84     	; 0x18d8 <__ultoa_invert+0x5c>
    1884:	20 31       	cpi	r18, 0x10	; 16
    1886:	81 f1       	breq	.+96     	; 0x18e8 <__ultoa_invert+0x6c>
    1888:	e8 94       	clt
    188a:	6f 93       	push	r22
    188c:	6e 7f       	andi	r22, 0xFE	; 254
    188e:	6e 5f       	subi	r22, 0xFE	; 254
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	af 4f       	sbci	r26, 0xFF	; 255
    1898:	b1 e0       	ldi	r27, 0x01	; 1
    189a:	3e d0       	rcall	.+124    	; 0x1918 <__ultoa_invert+0x9c>
    189c:	b4 e0       	ldi	r27, 0x04	; 4
    189e:	3c d0       	rcall	.+120    	; 0x1918 <__ultoa_invert+0x9c>
    18a0:	67 0f       	add	r22, r23
    18a2:	78 1f       	adc	r23, r24
    18a4:	89 1f       	adc	r24, r25
    18a6:	9a 1f       	adc	r25, r26
    18a8:	a1 1d       	adc	r26, r1
    18aa:	68 0f       	add	r22, r24
    18ac:	79 1f       	adc	r23, r25
    18ae:	8a 1f       	adc	r24, r26
    18b0:	91 1d       	adc	r25, r1
    18b2:	a1 1d       	adc	r26, r1
    18b4:	6a 0f       	add	r22, r26
    18b6:	71 1d       	adc	r23, r1
    18b8:	81 1d       	adc	r24, r1
    18ba:	91 1d       	adc	r25, r1
    18bc:	a1 1d       	adc	r26, r1
    18be:	20 d0       	rcall	.+64     	; 0x1900 <__ultoa_invert+0x84>
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <__ultoa_invert+0x48>
    18c2:	68 94       	set
    18c4:	3f 91       	pop	r19
    18c6:	2a e0       	ldi	r18, 0x0A	; 10
    18c8:	26 9f       	mul	r18, r22
    18ca:	11 24       	eor	r1, r1
    18cc:	30 19       	sub	r19, r0
    18ce:	30 5d       	subi	r19, 0xD0	; 208
    18d0:	31 93       	st	Z+, r19
    18d2:	de f6       	brtc	.-74     	; 0x188a <__ultoa_invert+0xe>
    18d4:	cf 01       	movw	r24, r30
    18d6:	08 95       	ret
    18d8:	46 2f       	mov	r20, r22
    18da:	47 70       	andi	r20, 0x07	; 7
    18dc:	40 5d       	subi	r20, 0xD0	; 208
    18de:	41 93       	st	Z+, r20
    18e0:	b3 e0       	ldi	r27, 0x03	; 3
    18e2:	0f d0       	rcall	.+30     	; 0x1902 <__ultoa_invert+0x86>
    18e4:	c9 f7       	brne	.-14     	; 0x18d8 <__ultoa_invert+0x5c>
    18e6:	f6 cf       	rjmp	.-20     	; 0x18d4 <__ultoa_invert+0x58>
    18e8:	46 2f       	mov	r20, r22
    18ea:	4f 70       	andi	r20, 0x0F	; 15
    18ec:	40 5d       	subi	r20, 0xD0	; 208
    18ee:	4a 33       	cpi	r20, 0x3A	; 58
    18f0:	18 f0       	brcs	.+6      	; 0x18f8 <__ultoa_invert+0x7c>
    18f2:	49 5d       	subi	r20, 0xD9	; 217
    18f4:	31 fd       	sbrc	r19, 1
    18f6:	40 52       	subi	r20, 0x20	; 32
    18f8:	41 93       	st	Z+, r20
    18fa:	02 d0       	rcall	.+4      	; 0x1900 <__ultoa_invert+0x84>
    18fc:	a9 f7       	brne	.-22     	; 0x18e8 <__ultoa_invert+0x6c>
    18fe:	ea cf       	rjmp	.-44     	; 0x18d4 <__ultoa_invert+0x58>
    1900:	b4 e0       	ldi	r27, 0x04	; 4
    1902:	a6 95       	lsr	r26
    1904:	97 95       	ror	r25
    1906:	87 95       	ror	r24
    1908:	77 95       	ror	r23
    190a:	67 95       	ror	r22
    190c:	ba 95       	dec	r27
    190e:	c9 f7       	brne	.-14     	; 0x1902 <__ultoa_invert+0x86>
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	61 05       	cpc	r22, r1
    1914:	71 05       	cpc	r23, r1
    1916:	08 95       	ret
    1918:	9b 01       	movw	r18, r22
    191a:	ac 01       	movw	r20, r24
    191c:	0a 2e       	mov	r0, r26
    191e:	06 94       	lsr	r0
    1920:	57 95       	ror	r21
    1922:	47 95       	ror	r20
    1924:	37 95       	ror	r19
    1926:	27 95       	ror	r18
    1928:	ba 95       	dec	r27
    192a:	c9 f7       	brne	.-14     	; 0x191e <__ultoa_invert+0xa2>
    192c:	62 0f       	add	r22, r18
    192e:	73 1f       	adc	r23, r19
    1930:	84 1f       	adc	r24, r20
    1932:	95 1f       	adc	r25, r21
    1934:	a0 1d       	adc	r26, r0
    1936:	08 95       	ret

00001938 <_exit>:
    1938:	f8 94       	cli

0000193a <__stop_program>:
    193a:	ff cf       	rjmp	.-2      	; 0x193a <__stop_program>
