
byggern24_node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800200  000018a0  00001934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  008002b0  008002b0  000019e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000024db  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000127f  00000000  00000000  000041e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000197d  00000000  00000000  00005462  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000688  00000000  00000000  00006de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ae  00000000  00000000  00007468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012f3  00000000  00000000  00007d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  00009009  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c1       	rjmp	.+848    	; 0x366 <__vector_5>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	07 c5       	rjmp	.+2574   	; 0xaac <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c3       	rjmp	.+1920   	; 0x82a <__vector_42>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	71 05       	cpc	r23, r1
      e6:	c3 05       	cpc	r28, r3
      e8:	c3 05       	cpc	r28, r3
      ea:	c3 05       	cpc	r28, r3
      ec:	c3 05       	cpc	r28, r3
      ee:	c3 05       	cpc	r28, r3
      f0:	c3 05       	cpc	r28, r3
      f2:	c3 05       	cpc	r28, r3
      f4:	71 05       	cpc	r23, r1
      f6:	c3 05       	cpc	r28, r3
      f8:	c3 05       	cpc	r28, r3
      fa:	c3 05       	cpc	r28, r3
      fc:	c3 05       	cpc	r28, r3
      fe:	c3 05       	cpc	r28, r3
     100:	c3 05       	cpc	r28, r3
     102:	c3 05       	cpc	r28, r3
     104:	73 05       	cpc	r23, r3
     106:	c3 05       	cpc	r28, r3
     108:	c3 05       	cpc	r28, r3
     10a:	c3 05       	cpc	r28, r3
     10c:	c3 05       	cpc	r28, r3
     10e:	c3 05       	cpc	r28, r3
     110:	c3 05       	cpc	r28, r3
     112:	c3 05       	cpc	r28, r3
     114:	c3 05       	cpc	r28, r3
     116:	c3 05       	cpc	r28, r3
     118:	c3 05       	cpc	r28, r3
     11a:	c3 05       	cpc	r28, r3
     11c:	c3 05       	cpc	r28, r3
     11e:	c3 05       	cpc	r28, r3
     120:	c3 05       	cpc	r28, r3
     122:	c3 05       	cpc	r28, r3
     124:	73 05       	cpc	r23, r3
     126:	c3 05       	cpc	r28, r3
     128:	c3 05       	cpc	r28, r3
     12a:	c3 05       	cpc	r28, r3
     12c:	c3 05       	cpc	r28, r3
     12e:	c3 05       	cpc	r28, r3
     130:	c3 05       	cpc	r28, r3
     132:	c3 05       	cpc	r28, r3
     134:	c3 05       	cpc	r28, r3
     136:	c3 05       	cpc	r28, r3
     138:	c3 05       	cpc	r28, r3
     13a:	c3 05       	cpc	r28, r3
     13c:	c3 05       	cpc	r28, r3
     13e:	c3 05       	cpc	r28, r3
     140:	c3 05       	cpc	r28, r3
     142:	c3 05       	cpc	r28, r3
     144:	bf 05       	cpc	r27, r15
     146:	c3 05       	cpc	r28, r3
     148:	c3 05       	cpc	r28, r3
     14a:	c3 05       	cpc	r28, r3
     14c:	c3 05       	cpc	r28, r3
     14e:	c3 05       	cpc	r28, r3
     150:	c3 05       	cpc	r28, r3
     152:	c3 05       	cpc	r28, r3
     154:	9c 05       	cpc	r25, r12
     156:	c3 05       	cpc	r28, r3
     158:	c3 05       	cpc	r28, r3
     15a:	c3 05       	cpc	r28, r3
     15c:	c3 05       	cpc	r28, r3
     15e:	c3 05       	cpc	r28, r3
     160:	c3 05       	cpc	r28, r3
     162:	c3 05       	cpc	r28, r3
     164:	c3 05       	cpc	r28, r3
     166:	c3 05       	cpc	r28, r3
     168:	c3 05       	cpc	r28, r3
     16a:	c3 05       	cpc	r28, r3
     16c:	c3 05       	cpc	r28, r3
     16e:	c3 05       	cpc	r28, r3
     170:	c3 05       	cpc	r28, r3
     172:	c3 05       	cpc	r28, r3
     174:	90 05       	cpc	r25, r0
     176:	c3 05       	cpc	r28, r3
     178:	c3 05       	cpc	r28, r3
     17a:	c3 05       	cpc	r28, r3
     17c:	c3 05       	cpc	r28, r3
     17e:	c3 05       	cpc	r28, r3
     180:	c3 05       	cpc	r28, r3
     182:	c3 05       	cpc	r28, r3
     184:	ae 05       	cpc	r26, r14

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e0 ea       	ldi	r30, 0xA0	; 160
     19e:	f8 e1       	ldi	r31, 0x18	; 24
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a0 3b       	cpi	r26, 0xB0	; 176
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	a0 eb       	ldi	r26, 0xB0	; 176
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a3 3e       	cpi	r26, 0xE3	; 227
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	55 d1       	rcall	.+682    	; 0x46c <main>
     1c2:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:

void adc_init ()
{
	// AREF = AVcc

	set_bit(ADMUX, REFS0);
     1c8:	ec e7       	ldi	r30, 0x7C	; 124
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 64       	ori	r24, 0x40	; 64
     1d0:	80 83       	st	Z, r24
	clear_bit(ADMUX, REFS1);
     1d2:	80 81       	ld	r24, Z
     1d4:	8f 77       	andi	r24, 0x7F	; 127
     1d6:	80 83       	st	Z, r24
	clear_bit(ADMUX, ADLAR);
     1d8:	80 81       	ld	r24, Z
     1da:	8f 7d       	andi	r24, 0xDF	; 223
     1dc:	80 83       	st	Z, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1de:	ea e7       	ldi	r30, 0x7A	; 122
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	87 68       	ori	r24, 0x87	; 135
     1e6:	80 83       	st	Z, r24
     1e8:	08 95       	ret

000001ea <adc_read>:

// read adc value
uint16_t adc_read(uint8_t ch)
{
	 ch &= 0b00000111;  // AND operation with 7
	 ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     1ea:	ec e7       	ldi	r30, 0x7C	; 124
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	90 81       	ld	r25, Z
}

// read adc value
uint16_t adc_read(uint8_t ch)
{
	 ch &= 0b00000111;  // AND operation with 7
     1f0:	87 70       	andi	r24, 0x07	; 7
	 ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     1f2:	98 7f       	andi	r25, 0xF8	; 248
     1f4:	98 2b       	or	r25, r24
     1f6:	90 83       	st	Z, r25
	
	// start single conversion
	// write '1' to ADSC
	set_bit(ADCSRA, ADSC);
     1f8:	ea e7       	ldi	r30, 0x7A	; 122
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 64       	ori	r24, 0x40	; 64
     200:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	//while(ADCSRA & (1<<ADSC));
	loop_until_bit_is_clear( ADCSRA, ADSC );
     202:	80 81       	ld	r24, Z
     204:	86 fd       	sbrc	r24, 6
     206:	fd cf       	rjmp	.-6      	; 0x202 <adc_read+0x18>
	
	return (ADC);
     208:	80 91 78 00 	lds	r24, 0x0078
     20c:	90 91 79 00 	lds	r25, 0x0079
}
     210:	08 95       	ret

00000212 <can_controller_reset>:
	status = spi_read();

	PORTB |= ~(1<<CAN_CS);

	return status;
}
     212:	2f 98       	cbi	0x05, 7	; 5
     214:	80 ec       	ldi	r24, 0xC0	; 192
     216:	d4 d3       	rcall	.+1960   	; 0x9c0 <spi_send>
     218:	2f 9a       	sbi	0x05, 7	; 5
     21a:	8f e3       	ldi	r24, 0x3F	; 63
     21c:	9c e9       	ldi	r25, 0x9C	; 156
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <can_controller_reset+0xc>
     222:	00 c0       	rjmp	.+0      	; 0x224 <can_controller_reset+0x12>
     224:	00 00       	nop
     226:	08 95       	ret

00000228 <can_controller_read>:
     228:	cf 93       	push	r28
     22a:	c8 2f       	mov	r28, r24
     22c:	2f 98       	cbi	0x05, 7	; 5
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	c7 d3       	rcall	.+1934   	; 0x9c0 <spi_send>
     232:	8c 2f       	mov	r24, r28
     234:	c5 d3       	rcall	.+1930   	; 0x9c0 <spi_send>
     236:	c6 d3       	rcall	.+1932   	; 0x9c4 <spi_read>
     238:	2f 9a       	sbi	0x05, 7	; 5
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <can_controller_bit_modify>:
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	18 2f       	mov	r17, r24
     246:	d6 2f       	mov	r29, r22
     248:	c4 2f       	mov	r28, r20
     24a:	2f 98       	cbi	0x05, 7	; 5
     24c:	85 e0       	ldi	r24, 0x05	; 5
     24e:	b8 d3       	rcall	.+1904   	; 0x9c0 <spi_send>
     250:	81 2f       	mov	r24, r17
     252:	b6 d3       	rcall	.+1900   	; 0x9c0 <spi_send>
     254:	8d 2f       	mov	r24, r29
     256:	b4 d3       	rcall	.+1896   	; 0x9c0 <spi_send>
     258:	8c 2f       	mov	r24, r28
     25a:	b2 d3       	rcall	.+1892   	; 0x9c0 <spi_send>
     25c:	2f 9a       	sbi	0x05, 7	; 5
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	08 95       	ret

00000266 <can_controller_set_mode>:
     266:	48 2f       	mov	r20, r24
     268:	60 ee       	ldi	r22, 0xE0	; 224
     26a:	8f e0       	ldi	r24, 0x0F	; 15
     26c:	e8 df       	rcall	.-48     	; 0x23e <can_controller_bit_modify>
     26e:	8e e0       	ldi	r24, 0x0E	; 14
     270:	db df       	rcall	.-74     	; 0x228 <can_controller_read>
     272:	80 7e       	andi	r24, 0xE0	; 224
     274:	08 95       	ret

00000276 <can_controller_write>:

void can_controller_write(uint8_t address, uint8_t data)
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	d8 2f       	mov	r29, r24
     27c:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
     27e:	2f 98       	cbi	0x05, 7	; 5
	
	spi_send(MCP_WRITE);
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	9e d3       	rcall	.+1852   	; 0x9c0 <spi_send>
	spi_send(address);
     284:	8d 2f       	mov	r24, r29
     286:	9c d3       	rcall	.+1848   	; 0x9c0 <spi_send>
	spi_send(data);
     288:	8c 2f       	mov	r24, r28
     28a:	9a d3       	rcall	.+1844   	; 0x9c0 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
     28c:	2f 9a       	sbi	0x05, 7	; 5
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <can_controller_init>:
uint8_t can_controller_init()
{
	uint8_t value;

	//spi_init(); // Initialize SPI
	can_controller_reset(); // Send reset-command
     294:	be df       	rcall	.-132    	; 0x212 <can_controller_reset>
	

	// Self-test
	value = can_controller_read(MCP_CANSTAT);
     296:	8e e0       	ldi	r24, 0x0E	; 14
     298:	c7 df       	rcall	.-114    	; 0x228 <can_controller_read>
	if ((value & MODE_MASK)  != MODE_CONFIG)
     29a:	98 2f       	mov	r25, r24
     29c:	90 7e       	andi	r25, 0xE0	; 224
     29e:	90 38       	cpi	r25, 0x80	; 128
     2a0:	71 f0       	breq	.+28     	; 0x2be <can_controller_init+0x2a>
	{
		printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
     2a2:	1f 92       	push	r1
     2a4:	8f 93       	push	r24
     2a6:	87 e0       	ldi	r24, 0x07	; 7
     2a8:	92 e0       	ldi	r25, 0x02	; 2
     2aa:	9f 93       	push	r25
     2ac:	8f 93       	push	r24
     2ae:	0e 94 88 09 	call	0x1310	; 0x1310 <printf>
		return 1;
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	08 95       	ret
	}
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000001);
     2be:	41 e0       	ldi	r20, 0x01	; 1
     2c0:	6f ef       	ldi	r22, 0xFF	; 255
     2c2:	8b e2       	ldi	r24, 0x2B	; 43
     2c4:	bc df       	rcall	.-136    	; 0x23e <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100100, 0b01100100);
     2c6:	44 e6       	ldi	r20, 0x64	; 100
     2c8:	64 e6       	ldi	r22, 0x64	; 100
     2ca:	80 e6       	ldi	r24, 0x60	; 96
     2cc:	b8 df       	rcall	.-144    	; 0x23e <can_controller_bit_modify>
	//printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
     2ce:	40 e6       	ldi	r20, 0x60	; 96
     2d0:	60 e6       	ldi	r22, 0x60	; 96
     2d2:	80 e7       	ldi	r24, 0x70	; 112
     2d4:	b4 df       	rcall	.-152    	; 0x23e <can_controller_bit_modify>
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

	
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	82 e3       	ldi	r24, 0x32	; 50
     2da:	cd df       	rcall	.-102    	; 0x276 <can_controller_write>
	return 0;
     2dc:	80 e0       	ldi	r24, 0x00	; 0
}
     2de:	08 95       	ret

000002e0 <can_init>:
	// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE));
	// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF));
	// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
	// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	c1 df       	rcall	.-126    	; 0x266 <can_controller_set_mode>
     2e4:	88 23       	and	r24, r24
     2e6:	41 f0       	breq	.+16     	; 0x2f8 <can_init+0x18>
     2e8:	84 e5       	ldi	r24, 0x54	; 84
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	0e 94 88 09 	call	0x1310	; 0x1310 <printf>
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	ea e0       	ldi	r30, 0x0A	; 10
     2fa:	f1 e0       	ldi	r31, 0x01	; 1
     2fc:	80 81       	ld	r24, Z
     2fe:	81 60       	ori	r24, 0x01	; 1
     300:	80 83       	st	Z, r24
     302:	ea e6       	ldi	r30, 0x6A	; 106
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	8e 7f       	andi	r24, 0xFE	; 254
     30a:	80 83       	st	Z, r24
     30c:	80 81       	ld	r24, Z
     30e:	82 60       	ori	r24, 0x02	; 2
     310:	80 83       	st	Z, r24
     312:	ec 9a       	sbi	0x1d, 4	; 29
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	8c e2       	ldi	r24, 0x2C	; 44
     318:	ae df       	rcall	.-164    	; 0x276 <can_controller_write>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	8d e2       	ldi	r24, 0x2D	; 45
     31e:	ab cf       	rjmp	.-170    	; 0x276 <can_controller_write>
     320:	08 95       	ret

00000322 <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	eb 01       	movw	r28, r22

	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
     32c:	18 2f       	mov	r17, r24
     32e:	12 95       	swap	r17
     330:	10 7f       	andi	r17, 0xF0	; 240
     332:	81 e6       	ldi	r24, 0x61	; 97
     334:	81 0f       	add	r24, r17
     336:	78 df       	rcall	.-272    	; 0x228 <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
     338:	85 e6       	ldi	r24, 0x65	; 101
     33a:	81 0f       	add	r24, r17
     33c:	75 df       	rcall	.-278    	; 0x228 <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
     33e:	98 2f       	mov	r25, r24
     340:	9f 70       	andi	r25, 0x0F	; 15
     342:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
     344:	88 23       	and	r24, r24
     346:	51 f0       	breq	.+20     	; 0x35c <can_recieve_msg+0x3a>
     348:	1a 59       	subi	r17, 0x9A	; 154
     34a:	22 96       	adiw	r28, 0x02	; 2
     34c:	08 2f       	mov	r16, r24
     34e:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
     350:	81 2f       	mov	r24, r17
     352:	6a df       	rcall	.-300    	; 0x228 <can_controller_read>
     354:	89 93       	st	Y+, r24
     356:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
     358:	10 13       	cpse	r17, r16
     35a:	fa cf       	rjmp	.-12     	; 0x350 <can_recieve_msg+0x2e>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}
	//can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
// 	can_controller_write(MCP_CANINTF, 0x00);
// 	can_controller_write(MCP_EFLG, 0x00);
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <__vector_5>:
#include "motor_driver.h"
#include "motor_controller.h"


ISR(INT4_vect)
{
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	0b b6       	in	r0, 0x3b	; 59
     372:	0f 92       	push	r0
     374:	2f 93       	push	r18
     376:	3f 93       	push	r19
     378:	4f 93       	push	r20
     37a:	5f 93       	push	r21
     37c:	6f 93       	push	r22
     37e:	7f 93       	push	r23
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
     384:	af 93       	push	r26
     386:	bf 93       	push	r27
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
	cli();
     390:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
     392:	8a e0       	ldi	r24, 0x0A	; 10
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	4b d6       	rcall	.+3222   	; 0x102e <malloc>
     398:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	//printf("message INTERRUPTION recieved\n\r");
	//print(my_buf);
	uint8_t canInt = can_controller_read(MCP_CANINTF);
     39a:	8c e2       	ldi	r24, 0x2C	; 44
     39c:	45 df       	rcall	.-374    	; 0x228 <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
     39e:	80 ff       	sbrs	r24, 0
     3a0:	15 c0       	rjmp	.+42     	; 0x3cc <__vector_5+0x66>
	{
		can_recieve_msg(0, msg);
     3a2:	be 01       	movw	r22, r28
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	bd df       	rcall	.-134    	; 0x322 <can_recieve_msg>
		//for (uint8_t byte = 0; byte < msg->length; byte++) {
			//printf("%d \t", (int8_t) msg->data[byte]);
		//}
		
		// Control servo
		timer_driver_set_duty_cycle(msg->data[3]);
     3a8:	8d 81       	ldd	r24, Y+5	; 0x05
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	3b d3       	rcall	.+1654   	; 0xa24 <timer_driver_set_duty_cycle>
		
		// Control solenoid
		control_solenoid(msg->data[5]);
     3ae:	8f 81       	ldd	r24, Y+7	; 0x07
     3b0:	eb d2       	rcall	.+1494   	; 0x988 <control_solenoid>
		
		// Control Motor
		//control_motor(msg->data[4], msg->data[0]);
		motor_controller_set_point(msg->data[2]);
     3b2:	8c 81       	ldd	r24, Y+4	; 0x04
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	34 d2       	rcall	.+1128   	; 0x820 <motor_controller_set_point>
		can_controller_write(MCP_CANINTF, 0x00);
		sei();
		return;
	}
	//printf("before:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	can_controller_write(MCP_CANINTF, 0x00);
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	8c e2       	ldi	r24, 0x2C	; 44
     3bc:	5c df       	rcall	.-328    	; 0x276 <can_controller_write>
	//can_controller_write(MCP_EFLG, 0x00);
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
     3be:	ce 01       	movw	r24, r28
     3c0:	ce d6       	rcall	.+3484   	; 0x115e <free>
	can_controller_write(MCP_CANINTF, 0x00);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	8c e2       	ldi	r24, 0x2C	; 44
     3c6:	57 df       	rcall	.-338    	; 0x276 <can_controller_write>
	sei();
     3c8:	78 94       	sei
     3ca:	09 c0       	rjmp	.+18     	; 0x3de <__vector_5+0x78>
// 			printf("%d \n\r", msg->data[byte]);
// 		}
// 	}
	else
	{
		can_controller_write(MCP_CANINTF, 0x00);
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	8c e2       	ldi	r24, 0x2C	; 44
     3d0:	52 df       	rcall	.-348    	; 0x276 <can_controller_write>
		//can_controller_write(MCP_EFLG, 0x00);
		free(msg);
     3d2:	ce 01       	movw	r24, r28
     3d4:	c4 d6       	rcall	.+3464   	; 0x115e <free>
		can_controller_write(MCP_CANINTF, 0x00);
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	8c e2       	ldi	r24, 0x2C	; 44
     3da:	4d df       	rcall	.-358    	; 0x276 <can_controller_write>
		sei();
     3dc:	78 94       	sei
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
	can_controller_write(MCP_CANINTF, 0x00);
	sei();
}
     3de:	ff 91       	pop	r31
     3e0:	ef 91       	pop	r30
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	bf 91       	pop	r27
     3e8:	af 91       	pop	r26
     3ea:	9f 91       	pop	r25
     3ec:	8f 91       	pop	r24
     3ee:	7f 91       	pop	r23
     3f0:	6f 91       	pop	r22
     3f2:	5f 91       	pop	r21
     3f4:	4f 91       	pop	r20
     3f6:	3f 91       	pop	r19
     3f8:	2f 91       	pop	r18
     3fa:	0f 90       	pop	r0
     3fc:	0b be       	out	0x3b, r0	; 59
     3fe:	0f 90       	pop	r0
     400:	0f be       	out	0x3f, r0	; 63
     402:	0f 90       	pop	r0
     404:	1f 90       	pop	r1
     406:	18 95       	reti

00000408 <dac_init>:
     408:	25 d3       	rcall	.+1610   	; 0xa54 <TWI_Master_Initialise>
     40a:	50 9a       	sbi	0x0a, 0	; 10
     40c:	51 9a       	sbi	0x0a, 1	; 10
     40e:	08 95       	ret

00000410 <dac_driver_send>:
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	00 d0       	rcall	.+0      	; 0x416 <dac_driver_send+0x6>
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	90 e5       	ldi	r25, 0x50	; 80
     41c:	99 83       	std	Y+1, r25	; 0x01
     41e:	1a 82       	std	Y+2, r1	; 0x02
     420:	8b 83       	std	Y+3, r24	; 0x03
     422:	63 e0       	ldi	r22, 0x03	; 3
     424:	ce 01       	movw	r24, r28
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	1f d3       	rcall	.+1598   	; 0xa68 <TWI_Start_Transceiver_With_Data>
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <record_score>:

#include "util.h"
#include "adc_driver.h"

uint16_t record_score(uint16_t score)
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	ec 01       	movw	r28, r24
	uint16_t score_interval = 0;
	uint16_t adc = adc_read(0);
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	d5 de       	rcall	.-598    	; 0x1ea <adc_read>
		
	if (adc < 300)
     440:	8c 32       	cpi	r24, 0x2C	; 44
     442:	91 40       	sbci	r25, 0x01	; 1
     444:	78 f4       	brcc	.+30     	; 0x464 <record_score+0x2e>
	{
		score += 1;
     446:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	93 ed       	ldi	r25, 0xD3	; 211
     44c:	20 e3       	ldi	r18, 0x30	; 48
     44e:	81 50       	subi	r24, 0x01	; 1
     450:	90 40       	sbci	r25, 0x00	; 0
     452:	20 40       	sbci	r18, 0x00	; 0
     454:	e1 f7       	brne	.-8      	; 0x44e <record_score+0x18>
     456:	00 c0       	rjmp	.+0      	; 0x458 <record_score+0x22>
     458:	00 00       	nop
	}
	
		
	while(score_interval == 1)
	{
		if (adc_read(0) > 300)
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	c6 de       	rcall	.-628    	; 0x1ea <adc_read>
     45e:	8d 32       	cpi	r24, 0x2D	; 45
     460:	91 40       	sbci	r25, 0x01	; 1
     462:	d8 f3       	brcs	.-10     	; 0x45a <record_score+0x24>
			score_interval = 0;
			break;
		}
	}
	return score;
     464:	ce 01       	movw	r24, r28
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <main>:



int main(void)
{
	cli();
     46c:	f8 94       	cli
	USART_Init(MYUBRR);
     46e:	87 e6       	ldi	r24, 0x67	; 103
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	af d3       	rcall	.+1886   	; 0xbd2 <USART_Init>
	spi_init();
     474:	a3 d2       	rcall	.+1350   	; 0x9bc <spi_init>
	can_controller_init();
     476:	0e df       	rcall	.-484    	; 0x294 <can_controller_init>
	can_init();
     478:	33 df       	rcall	.-410    	; 0x2e0 <can_init>
	timer_driver_init();
     47a:	a8 d2       	rcall	.+1360   	; 0x9cc <timer_driver_init>
	adc_init();
     47c:	a5 de       	rcall	.-694    	; 0x1c8 <adc_init>
	dac_init();
     47e:	c4 df       	rcall	.-120    	; 0x408 <dac_init>
	motor_init();
     480:	0c d2       	rcall	.+1048   	; 0x89a <motor_init>
	motor_controller_init();
     482:	4f d0       	rcall	.+158    	; 0x522 <motor_controller_init>
	sei();
     484:	78 94       	sei
	
	printf("Hello from node 2!\n\r");
     486:	86 e9       	ldi	r24, 0x96	; 150
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	40 d7       	rcall	.+3712   	; 0x1310 <printf>
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
	
	uint16_t score = 0;
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
	//uint16_t value = 0;
	
	while (1)
	{
		//printf("inside while \n\r");
		score = record_score(score);
     498:	ce df       	rcall	.-100    	; 0x436 <record_score>
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	39 e6       	ldi	r19, 0x69	; 105
     49e:	48 e1       	ldi	r20, 0x18	; 24
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	30 40       	sbci	r19, 0x00	; 0
     4a4:	40 40       	sbci	r20, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <main+0x34>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <main+0x3e>
     4aa:	00 00       	nop
     4ac:	f5 cf       	rjmp	.-22     	; 0x498 <main+0x2c>

000004ae <motor_controller_calibration>:
uint16_t set_point;
uint16_t max_motor_pos, min_motor_pos;

void motor_controller_calibration()
{
	motor_move(RIGHT, 200);
     4ae:	68 ec       	ldi	r22, 0xC8	; 200
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	49 d2       	rcall	.+1170   	; 0x948 <motor_move>
     4b6:	2f ef       	ldi	r18, 0xFF	; 255
     4b8:	83 ed       	ldi	r24, 0xD3	; 211
     4ba:	90 e3       	ldi	r25, 0x30	; 48
     4bc:	21 50       	subi	r18, 0x01	; 1
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	90 40       	sbci	r25, 0x00	; 0
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <motor_controller_calibration+0xe>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <motor_controller_calibration+0x18>
     4c6:	00 00       	nop
	_delay_ms(1000);
	motor_reset_encoder();
     4c8:	d9 d1       	rcall	.+946    	; 0x87c <motor_reset_encoder>
	motor_move(LEFT, 200);
     4ca:	68 ec       	ldi	r22, 0xC8	; 200
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	3b d2       	rcall	.+1142   	; 0x948 <motor_move>
     4d2:	2f ef       	ldi	r18, 0xFF	; 255
     4d4:	83 ed       	ldi	r24, 0xD3	; 211
     4d6:	90 e3       	ldi	r25, 0x30	; 48
     4d8:	21 50       	subi	r18, 0x01	; 1
     4da:	80 40       	sbci	r24, 0x00	; 0
     4dc:	90 40       	sbci	r25, 0x00	; 0
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <motor_controller_calibration+0x2a>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <motor_controller_calibration+0x34>
     4e2:	00 00       	nop
	_delay_ms(1000);
	max_motor_pos = motor_get_encoder();
     4e4:	0c d2       	rcall	.+1048   	; 0x8fe <motor_get_encoder>
	max_motor_pos -= 300;
     4e6:	8c 52       	subi	r24, 0x2C	; 44
     4e8:	91 40       	sbci	r25, 0x01	; 1
     4ea:	90 93 c8 02 	sts	0x02C8, r25
     4ee:	80 93 c7 02 	sts	0x02C7, r24
	motor_move(RIGHT, 200);
     4f2:	68 ec       	ldi	r22, 0xC8	; 200
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	27 d2       	rcall	.+1102   	; 0x948 <motor_move>
     4fa:	2f ef       	ldi	r18, 0xFF	; 255
     4fc:	83 ed       	ldi	r24, 0xD3	; 211
     4fe:	90 e3       	ldi	r25, 0x30	; 48
     500:	21 50       	subi	r18, 0x01	; 1
     502:	80 40       	sbci	r24, 0x00	; 0
     504:	90 40       	sbci	r25, 0x00	; 0
     506:	e1 f7       	brne	.-8      	; 0x500 <motor_controller_calibration+0x52>
     508:	00 c0       	rjmp	.+0      	; 0x50a <motor_controller_calibration+0x5c>
     50a:	00 00       	nop
	_delay_ms(1000);
	motor_move(RIGHT, 0);
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	1a d2       	rcall	.+1076   	; 0x948 <motor_move>

// 	motor_move(RIGHT, 255);
// 	_delay_ms(500);
// 	motor_reset_encoder();
// 	max_motor_pos = 8800;
 	min_motor_pos = 100;
     514:	84 e6       	ldi	r24, 0x64	; 100
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	90 93 bc 02 	sts	0x02BC, r25
     51c:	80 93 bb 02 	sts	0x02BB, r24
     520:	08 95       	ret

00000522 <motor_controller_init>:

}

void motor_controller_init()
{
	kp = 1;
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 e8       	ldi	r26, 0x80	; 128
     528:	bf e3       	ldi	r27, 0x3F	; 63
     52a:	80 93 d5 02 	sts	0x02D5, r24
     52e:	90 93 d6 02 	sts	0x02D6, r25
     532:	a0 93 d7 02 	sts	0x02D7, r26
     536:	b0 93 d8 02 	sts	0x02D8, r27
	ki = 4;
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	a0 e8       	ldi	r26, 0x80	; 128
     540:	b0 e4       	ldi	r27, 0x40	; 64
     542:	80 93 bf 02 	sts	0x02BF, r24
     546:	90 93 c0 02 	sts	0x02C0, r25
     54a:	a0 93 c1 02 	sts	0x02C1, r26
     54e:	b0 93 c2 02 	sts	0x02C2, r27
	kd = -0.1;
     552:	8d ec       	ldi	r24, 0xCD	; 205
     554:	9c ec       	ldi	r25, 0xCC	; 204
     556:	ac ec       	ldi	r26, 0xCC	; 204
     558:	bd eb       	ldi	r27, 0xBD	; 189
     55a:	80 93 b7 02 	sts	0x02B7, r24
     55e:	90 93 b8 02 	sts	0x02B8, r25
     562:	a0 93 b9 02 	sts	0x02B9, r26
     566:	b0 93 ba 02 	sts	0x02BA, r27
	integral = 0;
     56a:	10 92 d1 02 	sts	0x02D1, r1
     56e:	10 92 d2 02 	sts	0x02D2, r1
     572:	10 92 d3 02 	sts	0x02D3, r1
     576:	10 92 d4 02 	sts	0x02D4, r1
	error = 0;
     57a:	10 92 c3 02 	sts	0x02C3, r1
     57e:	10 92 c4 02 	sts	0x02C4, r1
     582:	10 92 c5 02 	sts	0x02C5, r1
     586:	10 92 c6 02 	sts	0x02C6, r1
	prev_error = 0;
     58a:	10 92 cd 02 	sts	0x02CD, r1
     58e:	10 92 ce 02 	sts	0x02CE, r1
     592:	10 92 cf 02 	sts	0x02CF, r1
     596:	10 92 d0 02 	sts	0x02D0, r1
	set_point = 0;
     59a:	10 92 be 02 	sts	0x02BE, r1
     59e:	10 92 bd 02 	sts	0x02BD, r1
	dt = 0.05;
     5a2:	8d ec       	ldi	r24, 0xCD	; 205
     5a4:	9c ec       	ldi	r25, 0xCC	; 204
     5a6:	ac e4       	ldi	r26, 0x4C	; 76
     5a8:	bd e3       	ldi	r27, 0x3D	; 61
     5aa:	80 93 c9 02 	sts	0x02C9, r24
     5ae:	90 93 ca 02 	sts	0x02CA, r25
     5b2:	a0 93 cb 02 	sts	0x02CB, r26
     5b6:	b0 93 cc 02 	sts	0x02CC, r27
	
	motor_controller_calibration();
     5ba:	79 df       	rcall	.-270    	; 0x4ae <motor_controller_calibration>
	cli();
     5bc:	f8 94       	cli
	
	TCCR4A |= 0;
     5be:	e0 ea       	ldi	r30, 0xA0	; 160
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	80 83       	st	Z, r24
	// set up timer with prescaler = 64 and CTC mode
	TCCR4B |= (1 << WGM42)|(1 << CS41)|(1 << CS40);
     5c6:	e1 ea       	ldi	r30, 0xA1	; 161
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	8b 60       	ori	r24, 0x0B	; 11
     5ce:	80 83       	st	Z, r24
// 	TCCR4B &= ~(1 << CS40);
// 	TCCR4B |= (1 << WGM42)|(1 << CS41);
	// initialize counter
	TCNT4 = 0;
     5d0:	10 92 a5 00 	sts	0x00A5, r1
     5d4:	10 92 a4 00 	sts	0x00A4, r1
	// initialize compare value
	OCR4A = 12499;
     5d8:	83 ed       	ldi	r24, 0xD3	; 211
     5da:	90 e3       	ldi	r25, 0x30	; 48
     5dc:	90 93 a9 00 	sts	0x00A9, r25
     5e0:	80 93 a8 00 	sts	0x00A8, r24
	// enable compare interrupt
	TIMSK4 |= (1 << OCIE4A);
     5e4:	e2 e7       	ldi	r30, 0x72	; 114
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	82 60       	ori	r24, 0x02	; 2
     5ec:	80 83       	st	Z, r24
	sei();
     5ee:	78 94       	sei
     5f0:	08 95       	ret

000005f2 <motor_controller>:
}

void motor_controller()
{
     5f2:	4f 92       	push	r4
     5f4:	5f 92       	push	r5
     5f6:	6f 92       	push	r6
     5f8:	7f 92       	push	r7
     5fa:	8f 92       	push	r8
     5fc:	9f 92       	push	r9
     5fe:	af 92       	push	r10
     600:	bf 92       	push	r11
     602:	cf 92       	push	r12
     604:	df 92       	push	r13
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
	enum direction target_dir;
	uint8_t speed;
	uint16_t motor_cur_pos = motor_get_encoder();
     60e:	77 d1       	rcall	.+750    	; 0x8fe <motor_get_encoder>
     610:	5c 01       	movw	r10, r24
	float derivative;
	
	float refer = 100.0*((float)(motor_cur_pos - min_motor_pos))/((float)(max_motor_pos - min_motor_pos));
     612:	60 90 bb 02 	lds	r6, 0x02BB
     616:	70 90 bc 02 	lds	r7, 0x02BC
	
	error = (float)(set_point - refer);
     61a:	60 91 bd 02 	lds	r22, 0x02BD
     61e:	70 91 be 02 	lds	r23, 0x02BE
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	e2 d3       	rcall	.+1988   	; 0xdec <__floatunsisf>
     628:	6b 01       	movw	r12, r22
     62a:	7c 01       	movw	r14, r24
	enum direction target_dir;
	uint8_t speed;
	uint16_t motor_cur_pos = motor_get_encoder();
	float derivative;
	
	float refer = 100.0*((float)(motor_cur_pos - min_motor_pos))/((float)(max_motor_pos - min_motor_pos));
     62c:	b5 01       	movw	r22, r10
     62e:	66 19       	sub	r22, r6
     630:	77 09       	sbc	r23, r7
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	da d3       	rcall	.+1972   	; 0xdec <__floatunsisf>
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	48 ec       	ldi	r20, 0xC8	; 200
     63e:	52 e4       	ldi	r21, 0x42	; 66
     640:	87 d4       	rcall	.+2318   	; 0xf50 <__mulsf3>
     642:	4b 01       	movw	r8, r22
     644:	5c 01       	movw	r10, r24
     646:	60 91 c7 02 	lds	r22, 0x02C7
     64a:	70 91 c8 02 	lds	r23, 0x02C8
     64e:	66 19       	sub	r22, r6
     650:	77 09       	sbc	r23, r7
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	ca d3       	rcall	.+1940   	; 0xdec <__floatunsisf>
     658:	9b 01       	movw	r18, r22
     65a:	ac 01       	movw	r20, r24
     65c:	c5 01       	movw	r24, r10
     65e:	b4 01       	movw	r22, r8
     660:	31 d3       	rcall	.+1634   	; 0xcc4 <__divsf3>
     662:	9b 01       	movw	r18, r22
     664:	ac 01       	movw	r20, r24
	
	error = (float)(set_point - refer);
     666:	c7 01       	movw	r24, r14
     668:	b6 01       	movw	r22, r12
     66a:	c3 d2       	rcall	.+1414   	; 0xbf2 <__subsf3>
     66c:	6b 01       	movw	r12, r22
     66e:	7c 01       	movw	r14, r24
     670:	60 93 c3 02 	sts	0x02C3, r22
     674:	70 93 c4 02 	sts	0x02C4, r23
     678:	80 93 c5 02 	sts	0x02C5, r24
     67c:	90 93 c6 02 	sts	0x02C6, r25
	
	if (error < 0)
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	a9 01       	movw	r20, r18
     686:	1a d3       	rcall	.+1588   	; 0xcbc <__cmpsf2>
	{
		target_dir = RIGHT;
		//printf("Woohoo, goin' to tha left!");
	}else
	{
		target_dir = LEFT;
     688:	c8 2f       	mov	r28, r24
     68a:	cc 1f       	adc	r28, r28
     68c:	cc 27       	eor	r28, r28
     68e:	cc 1f       	adc	r28, r28
     690:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	integral = integral + error * dt;
     692:	80 90 c9 02 	lds	r8, 0x02C9
     696:	90 90 ca 02 	lds	r9, 0x02CA
     69a:	a0 90 cb 02 	lds	r10, 0x02CB
     69e:	b0 90 cc 02 	lds	r11, 0x02CC
     6a2:	a5 01       	movw	r20, r10
     6a4:	94 01       	movw	r18, r8
     6a6:	c7 01       	movw	r24, r14
     6a8:	b6 01       	movw	r22, r12
     6aa:	52 d4       	rcall	.+2212   	; 0xf50 <__mulsf3>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	60 91 d1 02 	lds	r22, 0x02D1
     6b4:	70 91 d2 02 	lds	r23, 0x02D2
     6b8:	80 91 d3 02 	lds	r24, 0x02D3
     6bc:	90 91 d4 02 	lds	r25, 0x02D4
     6c0:	99 d2       	rcall	.+1330   	; 0xbf4 <__addsf3>
     6c2:	60 93 d1 02 	sts	0x02D1, r22
     6c6:	70 93 d2 02 	sts	0x02D2, r23
     6ca:	80 93 d3 02 	sts	0x02D3, r24
     6ce:	90 93 d4 02 	sts	0x02D4, r25

	if (abs(error) < 3){
     6d2:	c7 01       	movw	r24, r14
     6d4:	b6 01       	movw	r22, r12
     6d6:	a5 d4       	rcall	.+2378   	; 0x1022 <abs>
     6d8:	03 97       	sbiw	r24, 0x03	; 3
     6da:	44 f4       	brge	.+16     	; 0x6ec <motor_controller+0xfa>
		error = 0;
     6dc:	10 92 c3 02 	sts	0x02C3, r1
     6e0:	10 92 c4 02 	sts	0x02C4, r1
     6e4:	10 92 c5 02 	sts	0x02C5, r1
     6e8:	10 92 c6 02 	sts	0x02C6, r1
	}
	if (abs(error) < 1)
     6ec:	c0 90 c3 02 	lds	r12, 0x02C3
     6f0:	d0 90 c4 02 	lds	r13, 0x02C4
     6f4:	e0 90 c5 02 	lds	r14, 0x02C5
     6f8:	f0 90 c6 02 	lds	r15, 0x02C6
     6fc:	c7 01       	movw	r24, r14
     6fe:	b6 01       	movw	r22, r12
     700:	90 d4       	rcall	.+2336   	; 0x1022 <abs>
     702:	18 16       	cp	r1, r24
     704:	19 06       	cpc	r1, r25
     706:	44 f0       	brlt	.+16     	; 0x718 <motor_controller+0x126>
	{
		integral = 0;
     708:	10 92 d1 02 	sts	0x02D1, r1
     70c:	10 92 d2 02 	sts	0x02D2, r1
     710:	10 92 d3 02 	sts	0x02D3, r1
     714:	10 92 d4 02 	sts	0x02D4, r1
	}
	derivative = (error - prev_error)/dt;
	speed = abs((uint8_t) (kp*error + ki*integral + kd*derivative));
     718:	20 91 d5 02 	lds	r18, 0x02D5
     71c:	30 91 d6 02 	lds	r19, 0x02D6
     720:	40 91 d7 02 	lds	r20, 0x02D7
     724:	50 91 d8 02 	lds	r21, 0x02D8
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	11 d4       	rcall	.+2082   	; 0xf50 <__mulsf3>
     72e:	2b 01       	movw	r4, r22
     730:	3c 01       	movw	r6, r24
     732:	20 91 d1 02 	lds	r18, 0x02D1
     736:	30 91 d2 02 	lds	r19, 0x02D2
     73a:	40 91 d3 02 	lds	r20, 0x02D3
     73e:	50 91 d4 02 	lds	r21, 0x02D4
     742:	60 91 bf 02 	lds	r22, 0x02BF
     746:	70 91 c0 02 	lds	r23, 0x02C0
     74a:	80 91 c1 02 	lds	r24, 0x02C1
     74e:	90 91 c2 02 	lds	r25, 0x02C2
     752:	fe d3       	rcall	.+2044   	; 0xf50 <__mulsf3>
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
     758:	c3 01       	movw	r24, r6
     75a:	b2 01       	movw	r22, r4
     75c:	4b d2       	rcall	.+1174   	; 0xbf4 <__addsf3>
     75e:	2b 01       	movw	r4, r22
     760:	3c 01       	movw	r6, r24
	}
	if (abs(error) < 1)
	{
		integral = 0;
	}
	derivative = (error - prev_error)/dt;
     762:	20 91 cd 02 	lds	r18, 0x02CD
     766:	30 91 ce 02 	lds	r19, 0x02CE
     76a:	40 91 cf 02 	lds	r20, 0x02CF
     76e:	50 91 d0 02 	lds	r21, 0x02D0
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	3d d2       	rcall	.+1146   	; 0xbf2 <__subsf3>
     778:	a5 01       	movw	r20, r10
     77a:	94 01       	movw	r18, r8
     77c:	a3 d2       	rcall	.+1350   	; 0xcc4 <__divsf3>
	speed = abs((uint8_t) (kp*error + ki*integral + kd*derivative));
     77e:	20 91 b7 02 	lds	r18, 0x02B7
     782:	30 91 b8 02 	lds	r19, 0x02B8
     786:	40 91 b9 02 	lds	r20, 0x02B9
     78a:	50 91 ba 02 	lds	r21, 0x02BA
     78e:	e0 d3       	rcall	.+1984   	; 0xf50 <__mulsf3>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	c3 01       	movw	r24, r6
     796:	b2 01       	movw	r22, r4
     798:	2d d2       	rcall	.+1114   	; 0xbf4 <__addsf3>
     79a:	fc d2       	rcall	.+1528   	; 0xd94 <__fixunssfsi>
     79c:	d6 2f       	mov	r29, r22
	printf("%d\n\r", speed);
     79e:	1f 92       	push	r1
     7a0:	6f 93       	push	r22
     7a2:	8b ea       	ldi	r24, 0xAB	; 171
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	9f 93       	push	r25
     7a8:	8f 93       	push	r24
     7aa:	b2 d5       	rcall	.+2916   	; 0x1310 <printf>
	if (speed > 200)
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	d9 3c       	cpi	r29, 0xC9	; 201
     7b6:	70 f4       	brcc	.+28     	; 0x7d4 <motor_controller+0x1e2>
	{
		speed = 200;
	}else if (speed < 55 && abs(error) > 15)
     7b8:	d7 33       	cpi	r29, 0x37	; 55
     7ba:	78 f4       	brcc	.+30     	; 0x7da <motor_controller+0x1e8>
     7bc:	60 91 c3 02 	lds	r22, 0x02C3
     7c0:	70 91 c4 02 	lds	r23, 0x02C4
     7c4:	80 91 c5 02 	lds	r24, 0x02C5
     7c8:	90 91 c6 02 	lds	r25, 0x02C6
     7cc:	2a d4       	rcall	.+2132   	; 0x1022 <abs>
     7ce:	40 97       	sbiw	r24, 0x10	; 16
     7d0:	1c f4       	brge	.+6      	; 0x7d8 <motor_controller+0x1e6>
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <motor_controller+0x1e8>
	derivative = (error - prev_error)/dt;
	speed = abs((uint8_t) (kp*error + ki*integral + kd*derivative));
	printf("%d\n\r", speed);
	if (speed > 200)
	{
		speed = 200;
     7d4:	d8 ec       	ldi	r29, 0xC8	; 200
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <motor_controller+0x1e8>
	}else if (speed < 55 && abs(error) > 15)
	{
		speed = 55;
     7d8:	d7 e3       	ldi	r29, 0x37	; 55
	}
	
	prev_error = error;
     7da:	40 91 c3 02 	lds	r20, 0x02C3
     7de:	50 91 c4 02 	lds	r21, 0x02C4
     7e2:	60 91 c5 02 	lds	r22, 0x02C5
     7e6:	70 91 c6 02 	lds	r23, 0x02C6
     7ea:	40 93 cd 02 	sts	0x02CD, r20
     7ee:	50 93 ce 02 	sts	0x02CE, r21
     7f2:	60 93 cf 02 	sts	0x02CF, r22
     7f6:	70 93 d0 02 	sts	0x02D0, r23
	
	motor_move(target_dir, speed);
     7fa:	6d 2f       	mov	r22, r29
     7fc:	8c 2f       	mov	r24, r28
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	a3 d0       	rcall	.+326    	; 0x948 <motor_move>
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	df 90       	pop	r13
     80c:	cf 90       	pop	r12
     80e:	bf 90       	pop	r11
     810:	af 90       	pop	r10
     812:	9f 90       	pop	r9
     814:	8f 90       	pop	r8
     816:	7f 90       	pop	r7
     818:	6f 90       	pop	r6
     81a:	5f 90       	pop	r5
     81c:	4f 90       	pop	r4
     81e:	08 95       	ret

00000820 <motor_controller_set_point>:

void motor_controller_set_point(uint16_t sp)
{
	set_point = sp;
     820:	90 93 be 02 	sts	0x02BE, r25
     824:	80 93 bd 02 	sts	0x02BD, r24
     828:	08 95       	ret

0000082a <__vector_42>:
	//set_point = (int)(((float)(max_motor_pos-min_motor_pos))*sp/100.0) + min_motor_pos;
	//printf("set point: %d \t sp: %d \n\r", set_point, sp);
}

ISR(TIMER4_COMPA_vect){
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
	
	cli();
     850:	f8 94       	cli
	motor_controller();
     852:	cf de       	rcall	.-610    	; 0x5f2 <motor_controller>
	sei();
     854:	78 94       	sei
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	7f 91       	pop	r23
     864:	6f 91       	pop	r22
     866:	5f 91       	pop	r21
     868:	4f 91       	pop	r20
     86a:	3f 91       	pop	r19
     86c:	2f 91       	pop	r18
     86e:	0f 90       	pop	r0
     870:	0b be       	out	0x3b, r0	; 59
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <motor_reset_encoder>:


void motor_set_speed(uint8_t speed)
{
	//send speed through DAC/i2C
	dac_driver_send(speed);
     87c:	e2 e0       	ldi	r30, 0x02	; 2
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	80 81       	ld	r24, Z
     882:	8f 7b       	andi	r24, 0xBF	; 191
     884:	80 83       	st	Z, r24
     886:	87 ec       	ldi	r24, 0xC7	; 199
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <motor_reset_encoder+0xe>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <motor_reset_encoder+0x14>
     890:	00 00       	nop
     892:	80 81       	ld	r24, Z
     894:	80 64       	ori	r24, 0x40	; 64
     896:	80 83       	st	Z, r24
     898:	08 95       	ret

0000089a <motor_init>:
     89a:	e1 e0       	ldi	r30, 0x01	; 1
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	80 81       	ld	r24, Z
     8a0:	80 62       	ori	r24, 0x20	; 32
     8a2:	80 83       	st	Z, r24
     8a4:	80 81       	ld	r24, Z
     8a6:	88 60       	ori	r24, 0x08	; 8
     8a8:	80 83       	st	Z, r24
     8aa:	80 81       	ld	r24, Z
     8ac:	82 60       	ori	r24, 0x02	; 2
     8ae:	80 83       	st	Z, r24
     8b0:	80 81       	ld	r24, Z
     8b2:	80 64       	ori	r24, 0x40	; 64
     8b4:	80 83       	st	Z, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	80 62       	ori	r24, 0x20	; 32
     8ba:	80 83       	st	Z, r24
     8bc:	e7 e0       	ldi	r30, 0x07	; 7
     8be:	f1 e0       	ldi	r31, 0x01	; 1
     8c0:	80 81       	ld	r24, Z
     8c2:	8e 7f       	andi	r24, 0xFE	; 254
     8c4:	80 83       	st	Z, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	8d 7f       	andi	r24, 0xFD	; 253
     8ca:	80 83       	st	Z, r24
     8cc:	80 81       	ld	r24, Z
     8ce:	8b 7f       	andi	r24, 0xFB	; 251
     8d0:	80 83       	st	Z, r24
     8d2:	80 81       	ld	r24, Z
     8d4:	87 7f       	andi	r24, 0xF7	; 247
     8d6:	80 83       	st	Z, r24
     8d8:	80 81       	ld	r24, Z
     8da:	8f 7e       	andi	r24, 0xEF	; 239
     8dc:	80 83       	st	Z, r24
     8de:	80 81       	ld	r24, Z
     8e0:	8f 7d       	andi	r24, 0xDF	; 223
     8e2:	80 83       	st	Z, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	8f 7b       	andi	r24, 0xBF	; 191
     8e8:	80 83       	st	Z, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 77       	andi	r24, 0x7F	; 127
     8ee:	80 83       	st	Z, r24
     8f0:	e2 e0       	ldi	r30, 0x02	; 2
     8f2:	f1 e0       	ldi	r31, 0x01	; 1
     8f4:	80 81       	ld	r24, Z
     8f6:	80 62       	ori	r24, 0x20	; 32
     8f8:	80 83       	st	Z, r24
     8fa:	c0 cf       	rjmp	.-128    	; 0x87c <motor_reset_encoder>
     8fc:	08 95       	ret

000008fe <motor_get_encoder>:
uint16_t motor_get_encoder()
{
	uint16_t encod_counter;
	uint8_t LSB_counter;
	
	clear_bit(PORTH, MJ1_OE);
     8fe:	e2 e0       	ldi	r30, 0x02	; 2
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	80 81       	ld	r24, Z
     904:	8f 7d       	andi	r24, 0xDF	; 223
     906:	80 83       	st	Z, r24
	clear_bit(PORTH, MJ1_SEL);
     908:	80 81       	ld	r24, Z
     90a:	87 7f       	andi	r24, 0xF7	; 247
     90c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     90e:	2a e6       	ldi	r18, 0x6A	; 106
     910:	2a 95       	dec	r18
     912:	f1 f7       	brne	.-4      	; 0x910 <motor_get_encoder+0x12>
     914:	00 c0       	rjmp	.+0      	; 0x916 <motor_get_encoder+0x18>
	_delay_us(20);
	encod_counter = PINK;
     916:	80 91 06 01 	lds	r24, 0x0106
     91a:	90 e0       	ldi	r25, 0x00	; 0
	
	set_bit(PORTH, MJ1_SEL);
     91c:	20 81       	ld	r18, Z
     91e:	28 60       	ori	r18, 0x08	; 8
     920:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     922:	3f ef       	ldi	r19, 0xFF	; 255
     924:	49 ef       	ldi	r20, 0xF9	; 249
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	31 50       	subi	r19, 0x01	; 1
     92a:	40 40       	sbci	r20, 0x00	; 0
     92c:	20 40       	sbci	r18, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <motor_get_encoder+0x2a>
     930:	00 c0       	rjmp	.+0      	; 0x932 <motor_get_encoder+0x34>
     932:	00 00       	nop
	_delay_ms(20);
	LSB_counter = PINK;
     934:	20 91 06 01 	lds	r18, 0x0106
	
	set_bit(PORTH, MJ1_OE);
     938:	30 81       	ld	r19, Z
     93a:	30 62       	ori	r19, 0x20	; 32
     93c:	30 83       	st	Z, r19
	//motor_reset_encoder();
	
	//8-bit left shift
	encod_counter = encod_counter*256;
     93e:	98 2f       	mov	r25, r24
     940:	88 27       	eor	r24, r24
	//add LSB
	encod_counter += LSB_counter;
	
	return encod_counter;
}
     942:	82 0f       	add	r24, r18
     944:	91 1d       	adc	r25, r1
     946:	08 95       	ret

00000948 <motor_move>:
	printf("MOTOR COUNTER: %d \n\r", encoder_motor);
}


void motor_move(int dir, uint8_t speed)
{
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	ec 01       	movw	r28, r24
     950:	16 2f       	mov	r17, r22
	uint16_t encoder_motor;
	
	encoder_motor = motor_get_encoder();
     952:	d5 df       	rcall	.-86     	; 0x8fe <motor_get_encoder>
	//printf("MOTOR COUNTER: %d \n\r", encoder_motor);
	
	//set motor EN to 1
	set_bit(PORTH, MJ1_EN);
     954:	e2 e0       	ldi	r30, 0x02	; 2
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	80 81       	ld	r24, Z
     95a:	80 62       	ori	r24, 0x20	; 32
     95c:	80 83       	st	Z, r24
	
	//printf("SPEED: %d\n\r", speed);

	if (dir == RIGHT)
     95e:	c2 30       	cpi	r28, 0x02	; 2
     960:	d1 05       	cpc	r29, r1
     962:	21 f4       	brne	.+8      	; 0x96c <motor_move+0x24>
	{
		//printf("LEFT:%d\n\r", speed);
		set_bit(PORTH, MJ1_DIR);
     964:	80 81       	ld	r24, Z
     966:	82 60       	ori	r24, 0x02	; 2
     968:	80 83       	st	Z, r24
     96a:	07 c0       	rjmp	.+14     	; 0x97a <motor_move+0x32>
	}else if (dir == LEFT)
     96c:	21 97       	sbiw	r28, 0x01	; 1
     96e:	29 f4       	brne	.+10     	; 0x97a <motor_move+0x32>
	{
		//printf("RIGHT\n\r");
		clear_bit(PORTH, MJ1_DIR);
     970:	e2 e0       	ldi	r30, 0x02	; 2
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	80 81       	ld	r24, Z
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	80 83       	st	Z, r24


void motor_set_speed(uint8_t speed)
{
	//send speed through DAC/i2C
	dac_driver_send(speed);
     97a:	81 2f       	mov	r24, r17
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	48 dd       	rcall	.-1392   	; 0x410 <dac_driver_send>
		clear_bit(PORTH, MJ1_DIR);
	}

	//set speed
	motor_set_speed(speed);
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	08 95       	ret

00000988 <control_solenoid>:

void control_solenoid(uint8_t push)
{
	if (push == 1)
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	31 f4       	brne	.+12     	; 0x998 <control_solenoid+0x10>
	{
		clear_bit(PORTL, PL0);
     98c:	eb e0       	ldi	r30, 0x0B	; 11
     98e:	f1 e0       	ldi	r31, 0x01	; 1
     990:	80 81       	ld	r24, Z
     992:	8e 7f       	andi	r24, 0xFE	; 254
     994:	80 83       	st	Z, r24
     996:	08 95       	ret
	}
	else
	{
		set_bit(PORTL, PL0);
     998:	eb e0       	ldi	r30, 0x0B	; 11
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	80 81       	ld	r24, Z
     99e:	81 60       	ori	r24, 0x01	; 1
     9a0:	80 83       	st	Z, r24
     9a2:	08 95       	ret

000009a4 <SPI_MasterInit>:
//TODO - define for register bit (reusable code)

void SPI_MasterInit(void)
{
	/* Set MOSI, SCK and SS output all others input */
	DDRB |= (1<<PB2)|(1<<PB1)|(1<<PB7)|(1<<PB0);
     9a4:	84 b1       	in	r24, 0x04	; 4
     9a6:	87 68       	ori	r24, 0x87	; 135
     9a8:	84 b9       	out	0x04, r24	; 4
	//Set MISO as input
	DDRB &= ~(1<<PB3);
     9aa:	23 98       	cbi	0x04, 3	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     9ac:	81 e5       	ldi	r24, 0x51	; 81
     9ae:	8c bd       	out	0x2c, r24	; 44
     9b0:	08 95       	ret

000009b2 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     9b2:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     9b4:	0d b4       	in	r0, 0x2d	; 45
     9b6:	07 fe       	sbrs	r0, 7
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <SPI_MasterTransmit+0x2>
}
     9ba:	08 95       	ret

000009bc <spi_init>:
// }


void spi_init()
{
	SPI_MasterInit();
     9bc:	f3 cf       	rjmp	.-26     	; 0x9a4 <SPI_MasterInit>
     9be:	08 95       	ret

000009c0 <spi_send>:
}

void spi_send(char data)
{
	SPI_MasterTransmit(data);
     9c0:	f8 cf       	rjmp	.-16     	; 0x9b2 <SPI_MasterTransmit>
     9c2:	08 95       	ret

000009c4 <spi_read>:
	
}

char spi_read()
{
	SPI_MasterTransmit(0x00);
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	f5 df       	rcall	.-22     	; 0x9b2 <SPI_MasterTransmit>
	return SPDR;
     9c8:	8e b5       	in	r24, 0x2e	; 46
}
     9ca:	08 95       	ret

000009cc <timer_driver_init>:
#include <avr/io.h>
#include "avr/interrupt.h"

void timer_driver_init()
{
	set_bit(DDRE, PE3);
     9cc:	6b 9a       	sbi	0x0d, 3	; 13
	cli();
     9ce:	f8 94       	cli
	//TOP = 16MHz/pre-scale/50Hz
	ICR3 = 39999;
     9d0:	8f e3       	ldi	r24, 0x3F	; 63
     9d2:	9c e9       	ldi	r25, 0x9C	; 156
     9d4:	90 93 97 00 	sts	0x0097, r25
     9d8:	80 93 96 00 	sts	0x0096, r24
	
	//duty_cycle
	OCR3A = 3999;
     9dc:	8f e9       	ldi	r24, 0x9F	; 159
     9de:	9f e0       	ldi	r25, 0x0F	; 15
     9e0:	90 93 99 00 	sts	0x0099, r25
     9e4:	80 93 98 00 	sts	0x0098, r24
	
	//Set pre-scale to 8
	clear_bit(TCCR3B, CS30);
     9e8:	a1 e9       	ldi	r26, 0x91	; 145
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	8c 91       	ld	r24, X
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	8c 93       	st	X, r24
	set_bit(TCCR3B, CS31);
     9f2:	8c 91       	ld	r24, X
     9f4:	82 60       	ori	r24, 0x02	; 2
     9f6:	8c 93       	st	X, r24
	clear_bit(TCCR3B, CS32);
     9f8:	8c 91       	ld	r24, X
     9fa:	8b 7f       	andi	r24, 0xFB	; 251
     9fc:	8c 93       	st	X, r24
	
	//Set mode of operation to 14 (Fast PWM with ICRn)
	set_bit(TCCR3A, WGM31);
     9fe:	e0 e9       	ldi	r30, 0x90	; 144
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	82 60       	ori	r24, 0x02	; 2
     a06:	80 83       	st	Z, r24
	clear_bit(TCCR3A, WGM30);
     a08:	80 81       	ld	r24, Z
     a0a:	8e 7f       	andi	r24, 0xFE	; 254
     a0c:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM33) | (1 << WGM32);
     a0e:	8c 91       	ld	r24, X
     a10:	88 61       	ori	r24, 0x18	; 24
     a12:	8c 93       	st	X, r24
	
	//Enable compare interruption on reg OCRnA
	set_bit(TCCR3A, COM3A1);
     a14:	80 81       	ld	r24, Z
     a16:	80 68       	ori	r24, 0x80	; 128
     a18:	80 83       	st	Z, r24
	clear_bit(TCCR3A, COM3A0);
     a1a:	80 81       	ld	r24, Z
     a1c:	8f 7b       	andi	r24, 0xBF	; 191
     a1e:	80 83       	st	Z, r24

	sei();
     a20:	78 94       	sei
     a22:	08 95       	ret

00000a24 <timer_driver_set_duty_cycle>:
}

void timer_driver_set_duty_cycle(int8_t position)
{
	int duty_cycle = 20 * position + 1999;
     a24:	24 e1       	ldi	r18, 0x14	; 20
     a26:	82 02       	muls	r24, r18
     a28:	c0 01       	movw	r24, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	81 53       	subi	r24, 0x31	; 49
     a2e:	98 4f       	sbci	r25, 0xF8	; 248
	//int duty_cycle = 20 * (100 - position) + 1999;
	//printf("%d\n\r", duty_cycle);
	
	if (duty_cycle < 1999)
     a30:	8f 3c       	cpi	r24, 0xCF	; 207
     a32:	27 e0       	ldi	r18, 0x07	; 7
     a34:	92 07       	cpc	r25, r18
     a36:	3c f0       	brlt	.+14     	; 0xa46 <timer_driver_set_duty_cycle+0x22>
     a38:	80 3a       	cpi	r24, 0xA0	; 160
     a3a:	2f e0       	ldi	r18, 0x0F	; 15
     a3c:	92 07       	cpc	r25, r18
     a3e:	2c f0       	brlt	.+10     	; 0xa4a <timer_driver_set_duty_cycle+0x26>
     a40:	8f e9       	ldi	r24, 0x9F	; 159
     a42:	9f e0       	ldi	r25, 0x0F	; 15
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <timer_driver_set_duty_cycle+0x26>
		duty_cycle = 1999;
     a46:	8f ec       	ldi	r24, 0xCF	; 207
     a48:	97 e0       	ldi	r25, 0x07	; 7
	else if (duty_cycle > 3999)
		duty_cycle = 3999;
	
	OCR3A = (uint16_t) duty_cycle;
     a4a:	90 93 99 00 	sts	0x0099, r25
     a4e:	80 93 98 00 	sts	0x0098, r24
     a52:	08 95       	ret

00000a54 <TWI_Master_Initialise>:
     a54:	8c e0       	ldi	r24, 0x0C	; 12
     a56:	80 93 b8 00 	sts	0x00B8, r24
     a5a:	8f ef       	ldi	r24, 0xFF	; 255
     a5c:	80 93 bb 00 	sts	0x00BB, r24
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	80 93 bc 00 	sts	0x00BC, r24
     a66:	08 95       	ret

00000a68 <TWI_Start_Transceiver_With_Data>:
     a68:	ec eb       	ldi	r30, 0xBC	; 188
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	20 81       	ld	r18, Z
     a6e:	20 fd       	sbrc	r18, 0
     a70:	fd cf       	rjmp	.-6      	; 0xa6c <TWI_Start_Transceiver_With_Data+0x4>
     a72:	60 93 b2 02 	sts	0x02B2, r22
     a76:	fc 01       	movw	r30, r24
     a78:	20 81       	ld	r18, Z
     a7a:	20 93 b3 02 	sts	0x02B3, r18
     a7e:	20 fd       	sbrc	r18, 0
     a80:	0c c0       	rjmp	.+24     	; 0xa9a <TWI_Start_Transceiver_With_Data+0x32>
     a82:	62 30       	cpi	r22, 0x02	; 2
     a84:	50 f0       	brcs	.+20     	; 0xa9a <TWI_Start_Transceiver_With_Data+0x32>
     a86:	dc 01       	movw	r26, r24
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	e4 eb       	ldi	r30, 0xB4	; 180
     a8c:	f2 e0       	ldi	r31, 0x02	; 2
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	9d 91       	ld	r25, X+
     a92:	91 93       	st	Z+, r25
     a94:	8f 5f       	subi	r24, 0xFF	; 255
     a96:	86 13       	cpse	r24, r22
     a98:	fb cf       	rjmp	.-10     	; 0xa90 <TWI_Start_Transceiver_With_Data+0x28>
     a9a:	10 92 b1 02 	sts	0x02B1, r1
     a9e:	88 ef       	ldi	r24, 0xF8	; 248
     aa0:	80 93 06 02 	sts	0x0206, r24
     aa4:	85 ea       	ldi	r24, 0xA5	; 165
     aa6:	80 93 bc 00 	sts	0x00BC, r24
     aaa:	08 95       	ret

00000aac <__vector_39>:
     aac:	1f 92       	push	r1
     aae:	0f 92       	push	r0
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	0f 92       	push	r0
     ab4:	11 24       	eor	r1, r1
     ab6:	0b b6       	in	r0, 0x3b	; 59
     ab8:	0f 92       	push	r0
     aba:	2f 93       	push	r18
     abc:	3f 93       	push	r19
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	af 93       	push	r26
     ac4:	bf 93       	push	r27
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
     aca:	80 91 b9 00 	lds	r24, 0x00B9
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	fc 01       	movw	r30, r24
     ad2:	38 97       	sbiw	r30, 0x08	; 8
     ad4:	e1 35       	cpi	r30, 0x51	; 81
     ad6:	f1 05       	cpc	r31, r1
     ad8:	08 f0       	brcs	.+2      	; 0xadc <__vector_39+0x30>
     ada:	55 c0       	rjmp	.+170    	; 0xb86 <__vector_39+0xda>
     adc:	ee 58       	subi	r30, 0x8E	; 142
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	9a c2       	rjmp	.+1332   	; 0x1016 <__tablejump2__>
     ae2:	10 92 b0 02 	sts	0x02B0, r1
     ae6:	e0 91 b0 02 	lds	r30, 0x02B0
     aea:	80 91 b2 02 	lds	r24, 0x02B2
     aee:	e8 17       	cp	r30, r24
     af0:	70 f4       	brcc	.+28     	; 0xb0e <__vector_39+0x62>
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	8e 0f       	add	r24, r30
     af6:	80 93 b0 02 	sts	0x02B0, r24
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	ed 54       	subi	r30, 0x4D	; 77
     afe:	fd 4f       	sbci	r31, 0xFD	; 253
     b00:	80 81       	ld	r24, Z
     b02:	80 93 bb 00 	sts	0x00BB, r24
     b06:	85 e8       	ldi	r24, 0x85	; 133
     b08:	80 93 bc 00 	sts	0x00BC, r24
     b0c:	43 c0       	rjmp	.+134    	; 0xb94 <__vector_39+0xe8>
     b0e:	80 91 b1 02 	lds	r24, 0x02B1
     b12:	81 60       	ori	r24, 0x01	; 1
     b14:	80 93 b1 02 	sts	0x02B1, r24
     b18:	84 e9       	ldi	r24, 0x94	; 148
     b1a:	80 93 bc 00 	sts	0x00BC, r24
     b1e:	3a c0       	rjmp	.+116    	; 0xb94 <__vector_39+0xe8>
     b20:	e0 91 b0 02 	lds	r30, 0x02B0
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	8e 0f       	add	r24, r30
     b28:	80 93 b0 02 	sts	0x02B0, r24
     b2c:	80 91 bb 00 	lds	r24, 0x00BB
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	ed 54       	subi	r30, 0x4D	; 77
     b34:	fd 4f       	sbci	r31, 0xFD	; 253
     b36:	80 83       	st	Z, r24
     b38:	20 91 b0 02 	lds	r18, 0x02B0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	80 91 b2 02 	lds	r24, 0x02B2
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	24 f4       	brge	.+8      	; 0xb54 <__vector_39+0xa8>
     b4c:	85 ec       	ldi	r24, 0xC5	; 197
     b4e:	80 93 bc 00 	sts	0x00BC, r24
     b52:	20 c0       	rjmp	.+64     	; 0xb94 <__vector_39+0xe8>
     b54:	85 e8       	ldi	r24, 0x85	; 133
     b56:	80 93 bc 00 	sts	0x00BC, r24
     b5a:	1c c0       	rjmp	.+56     	; 0xb94 <__vector_39+0xe8>
     b5c:	80 91 bb 00 	lds	r24, 0x00BB
     b60:	e0 91 b0 02 	lds	r30, 0x02B0
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	ed 54       	subi	r30, 0x4D	; 77
     b68:	fd 4f       	sbci	r31, 0xFD	; 253
     b6a:	80 83       	st	Z, r24
     b6c:	80 91 b1 02 	lds	r24, 0x02B1
     b70:	81 60       	ori	r24, 0x01	; 1
     b72:	80 93 b1 02 	sts	0x02B1, r24
     b76:	84 e9       	ldi	r24, 0x94	; 148
     b78:	80 93 bc 00 	sts	0x00BC, r24
     b7c:	0b c0       	rjmp	.+22     	; 0xb94 <__vector_39+0xe8>
     b7e:	85 ea       	ldi	r24, 0xA5	; 165
     b80:	80 93 bc 00 	sts	0x00BC, r24
     b84:	07 c0       	rjmp	.+14     	; 0xb94 <__vector_39+0xe8>
     b86:	80 91 b9 00 	lds	r24, 0x00B9
     b8a:	80 93 06 02 	sts	0x0206, r24
     b8e:	84 e0       	ldi	r24, 0x04	; 4
     b90:	80 93 bc 00 	sts	0x00BC, r24
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0b be       	out	0x3b, r0	; 59
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	0f 90       	pop	r0
     bae:	1f 90       	pop	r1
     bb0:	18 95       	reti

00000bb2 <USART_Transmit>:
     bb2:	e0 ec       	ldi	r30, 0xC0	; 192
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	90 81       	ld	r25, Z
     bb8:	95 ff       	sbrs	r25, 5
     bba:	fd cf       	rjmp	.-6      	; 0xbb6 <USART_Transmit+0x4>
     bbc:	80 93 c6 00 	sts	0x00C6, r24
     bc0:	08 95       	ret

00000bc2 <USART_Receive>:
     bc2:	e0 ec       	ldi	r30, 0xC0	; 192
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 23       	and	r24, r24
     bca:	ec f7       	brge	.-6      	; 0xbc6 <USART_Receive+0x4>
     bcc:	80 91 c6 00 	lds	r24, 0x00C6
     bd0:	08 95       	ret

00000bd2 <USART_Init>:
     bd2:	90 93 c5 00 	sts	0x00C5, r25
     bd6:	80 93 c4 00 	sts	0x00C4, r24
     bda:	88 e1       	ldi	r24, 0x18	; 24
     bdc:	80 93 c1 00 	sts	0x00C1, r24
     be0:	8e e0       	ldi	r24, 0x0E	; 14
     be2:	80 93 c2 00 	sts	0x00C2, r24
     be6:	61 ee       	ldi	r22, 0xE1	; 225
     be8:	75 e0       	ldi	r23, 0x05	; 5
     bea:	89 ed       	ldi	r24, 0xD9	; 217
     bec:	95 e0       	ldi	r25, 0x05	; 5
     bee:	46 c3       	rjmp	.+1676   	; 0x127c <fdevopen>
     bf0:	08 95       	ret

00000bf2 <__subsf3>:
     bf2:	50 58       	subi	r21, 0x80	; 128

00000bf4 <__addsf3>:
     bf4:	bb 27       	eor	r27, r27
     bf6:	aa 27       	eor	r26, r26
     bf8:	0e d0       	rcall	.+28     	; 0xc16 <__addsf3x>
     bfa:	70 c1       	rjmp	.+736    	; 0xedc <__fp_round>
     bfc:	61 d1       	rcall	.+706    	; 0xec0 <__fp_pscA>
     bfe:	30 f0       	brcs	.+12     	; 0xc0c <__addsf3+0x18>
     c00:	66 d1       	rcall	.+716    	; 0xece <__fp_pscB>
     c02:	20 f0       	brcs	.+8      	; 0xc0c <__addsf3+0x18>
     c04:	31 f4       	brne	.+12     	; 0xc12 <__addsf3+0x1e>
     c06:	9f 3f       	cpi	r25, 0xFF	; 255
     c08:	11 f4       	brne	.+4      	; 0xc0e <__addsf3+0x1a>
     c0a:	1e f4       	brtc	.+6      	; 0xc12 <__addsf3+0x1e>
     c0c:	56 c1       	rjmp	.+684    	; 0xeba <__fp_nan>
     c0e:	0e f4       	brtc	.+2      	; 0xc12 <__addsf3+0x1e>
     c10:	e0 95       	com	r30
     c12:	e7 fb       	bst	r30, 7
     c14:	4c c1       	rjmp	.+664    	; 0xeae <__fp_inf>

00000c16 <__addsf3x>:
     c16:	e9 2f       	mov	r30, r25
     c18:	72 d1       	rcall	.+740    	; 0xefe <__fp_split3>
     c1a:	80 f3       	brcs	.-32     	; 0xbfc <__addsf3+0x8>
     c1c:	ba 17       	cp	r27, r26
     c1e:	62 07       	cpc	r22, r18
     c20:	73 07       	cpc	r23, r19
     c22:	84 07       	cpc	r24, r20
     c24:	95 07       	cpc	r25, r21
     c26:	18 f0       	brcs	.+6      	; 0xc2e <__addsf3x+0x18>
     c28:	71 f4       	brne	.+28     	; 0xc46 <__addsf3x+0x30>
     c2a:	9e f5       	brtc	.+102    	; 0xc92 <__addsf3x+0x7c>
     c2c:	8a c1       	rjmp	.+788    	; 0xf42 <__fp_zero>
     c2e:	0e f4       	brtc	.+2      	; 0xc32 <__addsf3x+0x1c>
     c30:	e0 95       	com	r30
     c32:	0b 2e       	mov	r0, r27
     c34:	ba 2f       	mov	r27, r26
     c36:	a0 2d       	mov	r26, r0
     c38:	0b 01       	movw	r0, r22
     c3a:	b9 01       	movw	r22, r18
     c3c:	90 01       	movw	r18, r0
     c3e:	0c 01       	movw	r0, r24
     c40:	ca 01       	movw	r24, r20
     c42:	a0 01       	movw	r20, r0
     c44:	11 24       	eor	r1, r1
     c46:	ff 27       	eor	r31, r31
     c48:	59 1b       	sub	r21, r25
     c4a:	99 f0       	breq	.+38     	; 0xc72 <__addsf3x+0x5c>
     c4c:	59 3f       	cpi	r21, 0xF9	; 249
     c4e:	50 f4       	brcc	.+20     	; 0xc64 <__addsf3x+0x4e>
     c50:	50 3e       	cpi	r21, 0xE0	; 224
     c52:	68 f1       	brcs	.+90     	; 0xcae <__addsf3x+0x98>
     c54:	1a 16       	cp	r1, r26
     c56:	f0 40       	sbci	r31, 0x00	; 0
     c58:	a2 2f       	mov	r26, r18
     c5a:	23 2f       	mov	r18, r19
     c5c:	34 2f       	mov	r19, r20
     c5e:	44 27       	eor	r20, r20
     c60:	58 5f       	subi	r21, 0xF8	; 248
     c62:	f3 cf       	rjmp	.-26     	; 0xc4a <__addsf3x+0x34>
     c64:	46 95       	lsr	r20
     c66:	37 95       	ror	r19
     c68:	27 95       	ror	r18
     c6a:	a7 95       	ror	r26
     c6c:	f0 40       	sbci	r31, 0x00	; 0
     c6e:	53 95       	inc	r21
     c70:	c9 f7       	brne	.-14     	; 0xc64 <__addsf3x+0x4e>
     c72:	7e f4       	brtc	.+30     	; 0xc92 <__addsf3x+0x7c>
     c74:	1f 16       	cp	r1, r31
     c76:	ba 0b       	sbc	r27, r26
     c78:	62 0b       	sbc	r22, r18
     c7a:	73 0b       	sbc	r23, r19
     c7c:	84 0b       	sbc	r24, r20
     c7e:	ba f0       	brmi	.+46     	; 0xcae <__addsf3x+0x98>
     c80:	91 50       	subi	r25, 0x01	; 1
     c82:	a1 f0       	breq	.+40     	; 0xcac <__addsf3x+0x96>
     c84:	ff 0f       	add	r31, r31
     c86:	bb 1f       	adc	r27, r27
     c88:	66 1f       	adc	r22, r22
     c8a:	77 1f       	adc	r23, r23
     c8c:	88 1f       	adc	r24, r24
     c8e:	c2 f7       	brpl	.-16     	; 0xc80 <__addsf3x+0x6a>
     c90:	0e c0       	rjmp	.+28     	; 0xcae <__addsf3x+0x98>
     c92:	ba 0f       	add	r27, r26
     c94:	62 1f       	adc	r22, r18
     c96:	73 1f       	adc	r23, r19
     c98:	84 1f       	adc	r24, r20
     c9a:	48 f4       	brcc	.+18     	; 0xcae <__addsf3x+0x98>
     c9c:	87 95       	ror	r24
     c9e:	77 95       	ror	r23
     ca0:	67 95       	ror	r22
     ca2:	b7 95       	ror	r27
     ca4:	f7 95       	ror	r31
     ca6:	9e 3f       	cpi	r25, 0xFE	; 254
     ca8:	08 f0       	brcs	.+2      	; 0xcac <__addsf3x+0x96>
     caa:	b3 cf       	rjmp	.-154    	; 0xc12 <__addsf3+0x1e>
     cac:	93 95       	inc	r25
     cae:	88 0f       	add	r24, r24
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <__addsf3x+0x9e>
     cb2:	99 27       	eor	r25, r25
     cb4:	ee 0f       	add	r30, r30
     cb6:	97 95       	ror	r25
     cb8:	87 95       	ror	r24
     cba:	08 95       	ret

00000cbc <__cmpsf2>:
     cbc:	d4 d0       	rcall	.+424    	; 0xe66 <__fp_cmp>
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <__cmpsf2+0x6>
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	08 95       	ret

00000cc4 <__divsf3>:
     cc4:	0c d0       	rcall	.+24     	; 0xcde <__divsf3x>
     cc6:	0a c1       	rjmp	.+532    	; 0xedc <__fp_round>
     cc8:	02 d1       	rcall	.+516    	; 0xece <__fp_pscB>
     cca:	40 f0       	brcs	.+16     	; 0xcdc <__divsf3+0x18>
     ccc:	f9 d0       	rcall	.+498    	; 0xec0 <__fp_pscA>
     cce:	30 f0       	brcs	.+12     	; 0xcdc <__divsf3+0x18>
     cd0:	21 f4       	brne	.+8      	; 0xcda <__divsf3+0x16>
     cd2:	5f 3f       	cpi	r21, 0xFF	; 255
     cd4:	19 f0       	breq	.+6      	; 0xcdc <__divsf3+0x18>
     cd6:	eb c0       	rjmp	.+470    	; 0xeae <__fp_inf>
     cd8:	51 11       	cpse	r21, r1
     cda:	34 c1       	rjmp	.+616    	; 0xf44 <__fp_szero>
     cdc:	ee c0       	rjmp	.+476    	; 0xeba <__fp_nan>

00000cde <__divsf3x>:
     cde:	0f d1       	rcall	.+542    	; 0xefe <__fp_split3>
     ce0:	98 f3       	brcs	.-26     	; 0xcc8 <__divsf3+0x4>

00000ce2 <__divsf3_pse>:
     ce2:	99 23       	and	r25, r25
     ce4:	c9 f3       	breq	.-14     	; 0xcd8 <__divsf3+0x14>
     ce6:	55 23       	and	r21, r21
     ce8:	b1 f3       	breq	.-20     	; 0xcd6 <__divsf3+0x12>
     cea:	95 1b       	sub	r25, r21
     cec:	55 0b       	sbc	r21, r21
     cee:	bb 27       	eor	r27, r27
     cf0:	aa 27       	eor	r26, r26
     cf2:	62 17       	cp	r22, r18
     cf4:	73 07       	cpc	r23, r19
     cf6:	84 07       	cpc	r24, r20
     cf8:	38 f0       	brcs	.+14     	; 0xd08 <__divsf3_pse+0x26>
     cfa:	9f 5f       	subi	r25, 0xFF	; 255
     cfc:	5f 4f       	sbci	r21, 0xFF	; 255
     cfe:	22 0f       	add	r18, r18
     d00:	33 1f       	adc	r19, r19
     d02:	44 1f       	adc	r20, r20
     d04:	aa 1f       	adc	r26, r26
     d06:	a9 f3       	breq	.-22     	; 0xcf2 <__divsf3_pse+0x10>
     d08:	33 d0       	rcall	.+102    	; 0xd70 <__divsf3_pse+0x8e>
     d0a:	0e 2e       	mov	r0, r30
     d0c:	3a f0       	brmi	.+14     	; 0xd1c <__divsf3_pse+0x3a>
     d0e:	e0 e8       	ldi	r30, 0x80	; 128
     d10:	30 d0       	rcall	.+96     	; 0xd72 <__divsf3_pse+0x90>
     d12:	91 50       	subi	r25, 0x01	; 1
     d14:	50 40       	sbci	r21, 0x00	; 0
     d16:	e6 95       	lsr	r30
     d18:	00 1c       	adc	r0, r0
     d1a:	ca f7       	brpl	.-14     	; 0xd0e <__divsf3_pse+0x2c>
     d1c:	29 d0       	rcall	.+82     	; 0xd70 <__divsf3_pse+0x8e>
     d1e:	fe 2f       	mov	r31, r30
     d20:	27 d0       	rcall	.+78     	; 0xd70 <__divsf3_pse+0x8e>
     d22:	66 0f       	add	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	88 1f       	adc	r24, r24
     d28:	bb 1f       	adc	r27, r27
     d2a:	26 17       	cp	r18, r22
     d2c:	37 07       	cpc	r19, r23
     d2e:	48 07       	cpc	r20, r24
     d30:	ab 07       	cpc	r26, r27
     d32:	b0 e8       	ldi	r27, 0x80	; 128
     d34:	09 f0       	breq	.+2      	; 0xd38 <__divsf3_pse+0x56>
     d36:	bb 0b       	sbc	r27, r27
     d38:	80 2d       	mov	r24, r0
     d3a:	bf 01       	movw	r22, r30
     d3c:	ff 27       	eor	r31, r31
     d3e:	93 58       	subi	r25, 0x83	; 131
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	2a f0       	brmi	.+10     	; 0xd4e <__divsf3_pse+0x6c>
     d44:	9e 3f       	cpi	r25, 0xFE	; 254
     d46:	51 05       	cpc	r21, r1
     d48:	68 f0       	brcs	.+26     	; 0xd64 <__divsf3_pse+0x82>
     d4a:	b1 c0       	rjmp	.+354    	; 0xeae <__fp_inf>
     d4c:	fb c0       	rjmp	.+502    	; 0xf44 <__fp_szero>
     d4e:	5f 3f       	cpi	r21, 0xFF	; 255
     d50:	ec f3       	brlt	.-6      	; 0xd4c <__divsf3_pse+0x6a>
     d52:	98 3e       	cpi	r25, 0xE8	; 232
     d54:	dc f3       	brlt	.-10     	; 0xd4c <__divsf3_pse+0x6a>
     d56:	86 95       	lsr	r24
     d58:	77 95       	ror	r23
     d5a:	67 95       	ror	r22
     d5c:	b7 95       	ror	r27
     d5e:	f7 95       	ror	r31
     d60:	9f 5f       	subi	r25, 0xFF	; 255
     d62:	c9 f7       	brne	.-14     	; 0xd56 <__divsf3_pse+0x74>
     d64:	88 0f       	add	r24, r24
     d66:	91 1d       	adc	r25, r1
     d68:	96 95       	lsr	r25
     d6a:	87 95       	ror	r24
     d6c:	97 f9       	bld	r25, 7
     d6e:	08 95       	ret
     d70:	e1 e0       	ldi	r30, 0x01	; 1
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	88 1f       	adc	r24, r24
     d78:	bb 1f       	adc	r27, r27
     d7a:	62 17       	cp	r22, r18
     d7c:	73 07       	cpc	r23, r19
     d7e:	84 07       	cpc	r24, r20
     d80:	ba 07       	cpc	r27, r26
     d82:	20 f0       	brcs	.+8      	; 0xd8c <__divsf3_pse+0xaa>
     d84:	62 1b       	sub	r22, r18
     d86:	73 0b       	sbc	r23, r19
     d88:	84 0b       	sbc	r24, r20
     d8a:	ba 0b       	sbc	r27, r26
     d8c:	ee 1f       	adc	r30, r30
     d8e:	88 f7       	brcc	.-30     	; 0xd72 <__divsf3_pse+0x90>
     d90:	e0 95       	com	r30
     d92:	08 95       	ret

00000d94 <__fixunssfsi>:
     d94:	bc d0       	rcall	.+376    	; 0xf0e <__fp_splitA>
     d96:	88 f0       	brcs	.+34     	; 0xdba <__fixunssfsi+0x26>
     d98:	9f 57       	subi	r25, 0x7F	; 127
     d9a:	90 f0       	brcs	.+36     	; 0xdc0 <__fixunssfsi+0x2c>
     d9c:	b9 2f       	mov	r27, r25
     d9e:	99 27       	eor	r25, r25
     da0:	b7 51       	subi	r27, 0x17	; 23
     da2:	a0 f0       	brcs	.+40     	; 0xdcc <__fixunssfsi+0x38>
     da4:	d1 f0       	breq	.+52     	; 0xdda <__fixunssfsi+0x46>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	1a f0       	brmi	.+6      	; 0xdb6 <__fixunssfsi+0x22>
     db0:	ba 95       	dec	r27
     db2:	c9 f7       	brne	.-14     	; 0xda6 <__fixunssfsi+0x12>
     db4:	12 c0       	rjmp	.+36     	; 0xdda <__fixunssfsi+0x46>
     db6:	b1 30       	cpi	r27, 0x01	; 1
     db8:	81 f0       	breq	.+32     	; 0xdda <__fixunssfsi+0x46>
     dba:	c3 d0       	rcall	.+390    	; 0xf42 <__fp_zero>
     dbc:	b1 e0       	ldi	r27, 0x01	; 1
     dbe:	08 95       	ret
     dc0:	c0 c0       	rjmp	.+384    	; 0xf42 <__fp_zero>
     dc2:	67 2f       	mov	r22, r23
     dc4:	78 2f       	mov	r23, r24
     dc6:	88 27       	eor	r24, r24
     dc8:	b8 5f       	subi	r27, 0xF8	; 248
     dca:	39 f0       	breq	.+14     	; 0xdda <__fixunssfsi+0x46>
     dcc:	b9 3f       	cpi	r27, 0xF9	; 249
     dce:	cc f3       	brlt	.-14     	; 0xdc2 <__fixunssfsi+0x2e>
     dd0:	86 95       	lsr	r24
     dd2:	77 95       	ror	r23
     dd4:	67 95       	ror	r22
     dd6:	b3 95       	inc	r27
     dd8:	d9 f7       	brne	.-10     	; 0xdd0 <__fixunssfsi+0x3c>
     dda:	3e f4       	brtc	.+14     	; 0xdea <__fixunssfsi+0x56>
     ddc:	90 95       	com	r25
     dde:	80 95       	com	r24
     de0:	70 95       	com	r23
     de2:	61 95       	neg	r22
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	8f 4f       	sbci	r24, 0xFF	; 255
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	08 95       	ret

00000dec <__floatunsisf>:
     dec:	e8 94       	clt
     dee:	09 c0       	rjmp	.+18     	; 0xe02 <__floatsisf+0x12>

00000df0 <__floatsisf>:
     df0:	97 fb       	bst	r25, 7
     df2:	3e f4       	brtc	.+14     	; 0xe02 <__floatsisf+0x12>
     df4:	90 95       	com	r25
     df6:	80 95       	com	r24
     df8:	70 95       	com	r23
     dfa:	61 95       	neg	r22
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	8f 4f       	sbci	r24, 0xFF	; 255
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	99 23       	and	r25, r25
     e04:	a9 f0       	breq	.+42     	; 0xe30 <__floatsisf+0x40>
     e06:	f9 2f       	mov	r31, r25
     e08:	96 e9       	ldi	r25, 0x96	; 150
     e0a:	bb 27       	eor	r27, r27
     e0c:	93 95       	inc	r25
     e0e:	f6 95       	lsr	r31
     e10:	87 95       	ror	r24
     e12:	77 95       	ror	r23
     e14:	67 95       	ror	r22
     e16:	b7 95       	ror	r27
     e18:	f1 11       	cpse	r31, r1
     e1a:	f8 cf       	rjmp	.-16     	; 0xe0c <__floatsisf+0x1c>
     e1c:	fa f4       	brpl	.+62     	; 0xe5c <__floatsisf+0x6c>
     e1e:	bb 0f       	add	r27, r27
     e20:	11 f4       	brne	.+4      	; 0xe26 <__floatsisf+0x36>
     e22:	60 ff       	sbrs	r22, 0
     e24:	1b c0       	rjmp	.+54     	; 0xe5c <__floatsisf+0x6c>
     e26:	6f 5f       	subi	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	8f 4f       	sbci	r24, 0xFF	; 255
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	16 c0       	rjmp	.+44     	; 0xe5c <__floatsisf+0x6c>
     e30:	88 23       	and	r24, r24
     e32:	11 f0       	breq	.+4      	; 0xe38 <__floatsisf+0x48>
     e34:	96 e9       	ldi	r25, 0x96	; 150
     e36:	11 c0       	rjmp	.+34     	; 0xe5a <__floatsisf+0x6a>
     e38:	77 23       	and	r23, r23
     e3a:	21 f0       	breq	.+8      	; 0xe44 <__floatsisf+0x54>
     e3c:	9e e8       	ldi	r25, 0x8E	; 142
     e3e:	87 2f       	mov	r24, r23
     e40:	76 2f       	mov	r23, r22
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <__floatsisf+0x5e>
     e44:	66 23       	and	r22, r22
     e46:	71 f0       	breq	.+28     	; 0xe64 <__floatsisf+0x74>
     e48:	96 e8       	ldi	r25, 0x86	; 134
     e4a:	86 2f       	mov	r24, r22
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	2a f0       	brmi	.+10     	; 0xe5c <__floatsisf+0x6c>
     e52:	9a 95       	dec	r25
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	da f7       	brpl	.-10     	; 0xe52 <__floatsisf+0x62>
     e5c:	88 0f       	add	r24, r24
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	97 f9       	bld	r25, 7
     e64:	08 95       	ret

00000e66 <__fp_cmp>:
     e66:	99 0f       	add	r25, r25
     e68:	00 08       	sbc	r0, r0
     e6a:	55 0f       	add	r21, r21
     e6c:	aa 0b       	sbc	r26, r26
     e6e:	e0 e8       	ldi	r30, 0x80	; 128
     e70:	fe ef       	ldi	r31, 0xFE	; 254
     e72:	16 16       	cp	r1, r22
     e74:	17 06       	cpc	r1, r23
     e76:	e8 07       	cpc	r30, r24
     e78:	f9 07       	cpc	r31, r25
     e7a:	c0 f0       	brcs	.+48     	; 0xeac <__fp_cmp+0x46>
     e7c:	12 16       	cp	r1, r18
     e7e:	13 06       	cpc	r1, r19
     e80:	e4 07       	cpc	r30, r20
     e82:	f5 07       	cpc	r31, r21
     e84:	98 f0       	brcs	.+38     	; 0xeac <__fp_cmp+0x46>
     e86:	62 1b       	sub	r22, r18
     e88:	73 0b       	sbc	r23, r19
     e8a:	84 0b       	sbc	r24, r20
     e8c:	95 0b       	sbc	r25, r21
     e8e:	39 f4       	brne	.+14     	; 0xe9e <__fp_cmp+0x38>
     e90:	0a 26       	eor	r0, r26
     e92:	61 f0       	breq	.+24     	; 0xeac <__fp_cmp+0x46>
     e94:	23 2b       	or	r18, r19
     e96:	24 2b       	or	r18, r20
     e98:	25 2b       	or	r18, r21
     e9a:	21 f4       	brne	.+8      	; 0xea4 <__fp_cmp+0x3e>
     e9c:	08 95       	ret
     e9e:	0a 26       	eor	r0, r26
     ea0:	09 f4       	brne	.+2      	; 0xea4 <__fp_cmp+0x3e>
     ea2:	a1 40       	sbci	r26, 0x01	; 1
     ea4:	a6 95       	lsr	r26
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	81 1d       	adc	r24, r1
     eaa:	81 1d       	adc	r24, r1
     eac:	08 95       	ret

00000eae <__fp_inf>:
     eae:	97 f9       	bld	r25, 7
     eb0:	9f 67       	ori	r25, 0x7F	; 127
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	08 95       	ret

00000eba <__fp_nan>:
     eba:	9f ef       	ldi	r25, 0xFF	; 255
     ebc:	80 ec       	ldi	r24, 0xC0	; 192
     ebe:	08 95       	ret

00000ec0 <__fp_pscA>:
     ec0:	00 24       	eor	r0, r0
     ec2:	0a 94       	dec	r0
     ec4:	16 16       	cp	r1, r22
     ec6:	17 06       	cpc	r1, r23
     ec8:	18 06       	cpc	r1, r24
     eca:	09 06       	cpc	r0, r25
     ecc:	08 95       	ret

00000ece <__fp_pscB>:
     ece:	00 24       	eor	r0, r0
     ed0:	0a 94       	dec	r0
     ed2:	12 16       	cp	r1, r18
     ed4:	13 06       	cpc	r1, r19
     ed6:	14 06       	cpc	r1, r20
     ed8:	05 06       	cpc	r0, r21
     eda:	08 95       	ret

00000edc <__fp_round>:
     edc:	09 2e       	mov	r0, r25
     ede:	03 94       	inc	r0
     ee0:	00 0c       	add	r0, r0
     ee2:	11 f4       	brne	.+4      	; 0xee8 <__fp_round+0xc>
     ee4:	88 23       	and	r24, r24
     ee6:	52 f0       	brmi	.+20     	; 0xefc <__fp_round+0x20>
     ee8:	bb 0f       	add	r27, r27
     eea:	40 f4       	brcc	.+16     	; 0xefc <__fp_round+0x20>
     eec:	bf 2b       	or	r27, r31
     eee:	11 f4       	brne	.+4      	; 0xef4 <__fp_round+0x18>
     ef0:	60 ff       	sbrs	r22, 0
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__fp_round+0x20>
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	08 95       	ret

00000efe <__fp_split3>:
     efe:	57 fd       	sbrc	r21, 7
     f00:	90 58       	subi	r25, 0x80	; 128
     f02:	44 0f       	add	r20, r20
     f04:	55 1f       	adc	r21, r21
     f06:	59 f0       	breq	.+22     	; 0xf1e <__fp_splitA+0x10>
     f08:	5f 3f       	cpi	r21, 0xFF	; 255
     f0a:	71 f0       	breq	.+28     	; 0xf28 <__fp_splitA+0x1a>
     f0c:	47 95       	ror	r20

00000f0e <__fp_splitA>:
     f0e:	88 0f       	add	r24, r24
     f10:	97 fb       	bst	r25, 7
     f12:	99 1f       	adc	r25, r25
     f14:	61 f0       	breq	.+24     	; 0xf2e <__fp_splitA+0x20>
     f16:	9f 3f       	cpi	r25, 0xFF	; 255
     f18:	79 f0       	breq	.+30     	; 0xf38 <__fp_splitA+0x2a>
     f1a:	87 95       	ror	r24
     f1c:	08 95       	ret
     f1e:	12 16       	cp	r1, r18
     f20:	13 06       	cpc	r1, r19
     f22:	14 06       	cpc	r1, r20
     f24:	55 1f       	adc	r21, r21
     f26:	f2 cf       	rjmp	.-28     	; 0xf0c <__fp_split3+0xe>
     f28:	46 95       	lsr	r20
     f2a:	f1 df       	rcall	.-30     	; 0xf0e <__fp_splitA>
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <__fp_splitA+0x30>
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	18 06       	cpc	r1, r24
     f34:	99 1f       	adc	r25, r25
     f36:	f1 cf       	rjmp	.-30     	; 0xf1a <__fp_splitA+0xc>
     f38:	86 95       	lsr	r24
     f3a:	71 05       	cpc	r23, r1
     f3c:	61 05       	cpc	r22, r1
     f3e:	08 94       	sec
     f40:	08 95       	ret

00000f42 <__fp_zero>:
     f42:	e8 94       	clt

00000f44 <__fp_szero>:
     f44:	bb 27       	eor	r27, r27
     f46:	66 27       	eor	r22, r22
     f48:	77 27       	eor	r23, r23
     f4a:	cb 01       	movw	r24, r22
     f4c:	97 f9       	bld	r25, 7
     f4e:	08 95       	ret

00000f50 <__mulsf3>:
     f50:	0b d0       	rcall	.+22     	; 0xf68 <__mulsf3x>
     f52:	c4 cf       	rjmp	.-120    	; 0xedc <__fp_round>
     f54:	b5 df       	rcall	.-150    	; 0xec0 <__fp_pscA>
     f56:	28 f0       	brcs	.+10     	; 0xf62 <__mulsf3+0x12>
     f58:	ba df       	rcall	.-140    	; 0xece <__fp_pscB>
     f5a:	18 f0       	brcs	.+6      	; 0xf62 <__mulsf3+0x12>
     f5c:	95 23       	and	r25, r21
     f5e:	09 f0       	breq	.+2      	; 0xf62 <__mulsf3+0x12>
     f60:	a6 cf       	rjmp	.-180    	; 0xeae <__fp_inf>
     f62:	ab cf       	rjmp	.-170    	; 0xeba <__fp_nan>
     f64:	11 24       	eor	r1, r1
     f66:	ee cf       	rjmp	.-36     	; 0xf44 <__fp_szero>

00000f68 <__mulsf3x>:
     f68:	ca df       	rcall	.-108    	; 0xefe <__fp_split3>
     f6a:	a0 f3       	brcs	.-24     	; 0xf54 <__mulsf3+0x4>

00000f6c <__mulsf3_pse>:
     f6c:	95 9f       	mul	r25, r21
     f6e:	d1 f3       	breq	.-12     	; 0xf64 <__mulsf3+0x14>
     f70:	95 0f       	add	r25, r21
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	55 1f       	adc	r21, r21
     f76:	62 9f       	mul	r22, r18
     f78:	f0 01       	movw	r30, r0
     f7a:	72 9f       	mul	r23, r18
     f7c:	bb 27       	eor	r27, r27
     f7e:	f0 0d       	add	r31, r0
     f80:	b1 1d       	adc	r27, r1
     f82:	63 9f       	mul	r22, r19
     f84:	aa 27       	eor	r26, r26
     f86:	f0 0d       	add	r31, r0
     f88:	b1 1d       	adc	r27, r1
     f8a:	aa 1f       	adc	r26, r26
     f8c:	64 9f       	mul	r22, r20
     f8e:	66 27       	eor	r22, r22
     f90:	b0 0d       	add	r27, r0
     f92:	a1 1d       	adc	r26, r1
     f94:	66 1f       	adc	r22, r22
     f96:	82 9f       	mul	r24, r18
     f98:	22 27       	eor	r18, r18
     f9a:	b0 0d       	add	r27, r0
     f9c:	a1 1d       	adc	r26, r1
     f9e:	62 1f       	adc	r22, r18
     fa0:	73 9f       	mul	r23, r19
     fa2:	b0 0d       	add	r27, r0
     fa4:	a1 1d       	adc	r26, r1
     fa6:	62 1f       	adc	r22, r18
     fa8:	83 9f       	mul	r24, r19
     faa:	a0 0d       	add	r26, r0
     fac:	61 1d       	adc	r22, r1
     fae:	22 1f       	adc	r18, r18
     fb0:	74 9f       	mul	r23, r20
     fb2:	33 27       	eor	r19, r19
     fb4:	a0 0d       	add	r26, r0
     fb6:	61 1d       	adc	r22, r1
     fb8:	23 1f       	adc	r18, r19
     fba:	84 9f       	mul	r24, r20
     fbc:	60 0d       	add	r22, r0
     fbe:	21 1d       	adc	r18, r1
     fc0:	82 2f       	mov	r24, r18
     fc2:	76 2f       	mov	r23, r22
     fc4:	6a 2f       	mov	r22, r26
     fc6:	11 24       	eor	r1, r1
     fc8:	9f 57       	subi	r25, 0x7F	; 127
     fca:	50 40       	sbci	r21, 0x00	; 0
     fcc:	8a f0       	brmi	.+34     	; 0xff0 <__mulsf3_pse+0x84>
     fce:	e1 f0       	breq	.+56     	; 0x1008 <__mulsf3_pse+0x9c>
     fd0:	88 23       	and	r24, r24
     fd2:	4a f0       	brmi	.+18     	; 0xfe6 <__mulsf3_pse+0x7a>
     fd4:	ee 0f       	add	r30, r30
     fd6:	ff 1f       	adc	r31, r31
     fd8:	bb 1f       	adc	r27, r27
     fda:	66 1f       	adc	r22, r22
     fdc:	77 1f       	adc	r23, r23
     fde:	88 1f       	adc	r24, r24
     fe0:	91 50       	subi	r25, 0x01	; 1
     fe2:	50 40       	sbci	r21, 0x00	; 0
     fe4:	a9 f7       	brne	.-22     	; 0xfd0 <__mulsf3_pse+0x64>
     fe6:	9e 3f       	cpi	r25, 0xFE	; 254
     fe8:	51 05       	cpc	r21, r1
     fea:	70 f0       	brcs	.+28     	; 0x1008 <__mulsf3_pse+0x9c>
     fec:	60 cf       	rjmp	.-320    	; 0xeae <__fp_inf>
     fee:	aa cf       	rjmp	.-172    	; 0xf44 <__fp_szero>
     ff0:	5f 3f       	cpi	r21, 0xFF	; 255
     ff2:	ec f3       	brlt	.-6      	; 0xfee <__mulsf3_pse+0x82>
     ff4:	98 3e       	cpi	r25, 0xE8	; 232
     ff6:	dc f3       	brlt	.-10     	; 0xfee <__mulsf3_pse+0x82>
     ff8:	86 95       	lsr	r24
     ffa:	77 95       	ror	r23
     ffc:	67 95       	ror	r22
     ffe:	b7 95       	ror	r27
    1000:	f7 95       	ror	r31
    1002:	e7 95       	ror	r30
    1004:	9f 5f       	subi	r25, 0xFF	; 255
    1006:	c1 f7       	brne	.-16     	; 0xff8 <__mulsf3_pse+0x8c>
    1008:	fe 2b       	or	r31, r30
    100a:	88 0f       	add	r24, r24
    100c:	91 1d       	adc	r25, r1
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret

00001016 <__tablejump2__>:
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31

0000101a <__tablejump__>:
    101a:	05 90       	lpm	r0, Z+
    101c:	f4 91       	lpm	r31, Z
    101e:	e0 2d       	mov	r30, r0
    1020:	19 94       	eijmp

00001022 <abs>:
    1022:	97 ff       	sbrs	r25, 7
    1024:	03 c0       	rjmp	.+6      	; 0x102c <abs+0xa>
    1026:	91 95       	neg	r25
    1028:	81 95       	neg	r24
    102a:	91 09       	sbc	r25, r1
    102c:	08 95       	ret

0000102e <malloc>:
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	91 05       	cpc	r25, r1
    1036:	10 f4       	brcc	.+4      	; 0x103c <malloc+0xe>
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	e0 91 db 02 	lds	r30, 0x02DB
    1040:	f0 91 dc 02 	lds	r31, 0x02DC
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	30 97       	sbiw	r30, 0x00	; 0
    104e:	39 f1       	breq	.+78     	; 0x109e <malloc+0x70>
    1050:	40 81       	ld	r20, Z
    1052:	51 81       	ldd	r21, Z+1	; 0x01
    1054:	48 17       	cp	r20, r24
    1056:	59 07       	cpc	r21, r25
    1058:	b8 f0       	brcs	.+46     	; 0x1088 <malloc+0x5a>
    105a:	48 17       	cp	r20, r24
    105c:	59 07       	cpc	r21, r25
    105e:	71 f4       	brne	.+28     	; 0x107c <malloc+0x4e>
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	10 97       	sbiw	r26, 0x00	; 0
    1066:	29 f0       	breq	.+10     	; 0x1072 <malloc+0x44>
    1068:	13 96       	adiw	r26, 0x03	; 3
    106a:	9c 93       	st	X, r25
    106c:	8e 93       	st	-X, r24
    106e:	12 97       	sbiw	r26, 0x02	; 2
    1070:	2c c0       	rjmp	.+88     	; 0x10ca <malloc+0x9c>
    1072:	90 93 dc 02 	sts	0x02DC, r25
    1076:	80 93 db 02 	sts	0x02DB, r24
    107a:	27 c0       	rjmp	.+78     	; 0x10ca <malloc+0x9c>
    107c:	21 15       	cp	r18, r1
    107e:	31 05       	cpc	r19, r1
    1080:	31 f0       	breq	.+12     	; 0x108e <malloc+0x60>
    1082:	42 17       	cp	r20, r18
    1084:	53 07       	cpc	r21, r19
    1086:	18 f0       	brcs	.+6      	; 0x108e <malloc+0x60>
    1088:	a9 01       	movw	r20, r18
    108a:	db 01       	movw	r26, r22
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <malloc+0x62>
    108e:	ef 01       	movw	r28, r30
    1090:	9a 01       	movw	r18, r20
    1092:	bd 01       	movw	r22, r26
    1094:	df 01       	movw	r26, r30
    1096:	02 80       	ldd	r0, Z+2	; 0x02
    1098:	f3 81       	ldd	r31, Z+3	; 0x03
    109a:	e0 2d       	mov	r30, r0
    109c:	d7 cf       	rjmp	.-82     	; 0x104c <malloc+0x1e>
    109e:	21 15       	cp	r18, r1
    10a0:	31 05       	cpc	r19, r1
    10a2:	f9 f0       	breq	.+62     	; 0x10e2 <malloc+0xb4>
    10a4:	28 1b       	sub	r18, r24
    10a6:	39 0b       	sbc	r19, r25
    10a8:	24 30       	cpi	r18, 0x04	; 4
    10aa:	31 05       	cpc	r19, r1
    10ac:	80 f4       	brcc	.+32     	; 0x10ce <malloc+0xa0>
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	61 15       	cp	r22, r1
    10b4:	71 05       	cpc	r23, r1
    10b6:	21 f0       	breq	.+8      	; 0x10c0 <malloc+0x92>
    10b8:	fb 01       	movw	r30, r22
    10ba:	93 83       	std	Z+3, r25	; 0x03
    10bc:	82 83       	std	Z+2, r24	; 0x02
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <malloc+0x9a>
    10c0:	90 93 dc 02 	sts	0x02DC, r25
    10c4:	80 93 db 02 	sts	0x02DB, r24
    10c8:	fe 01       	movw	r30, r28
    10ca:	32 96       	adiw	r30, 0x02	; 2
    10cc:	44 c0       	rjmp	.+136    	; 0x1156 <malloc+0x128>
    10ce:	fe 01       	movw	r30, r28
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	81 93       	st	Z+, r24
    10d6:	91 93       	st	Z+, r25
    10d8:	22 50       	subi	r18, 0x02	; 2
    10da:	31 09       	sbc	r19, r1
    10dc:	39 83       	std	Y+1, r19	; 0x01
    10de:	28 83       	st	Y, r18
    10e0:	3a c0       	rjmp	.+116    	; 0x1156 <malloc+0x128>
    10e2:	20 91 d9 02 	lds	r18, 0x02D9
    10e6:	30 91 da 02 	lds	r19, 0x02DA
    10ea:	23 2b       	or	r18, r19
    10ec:	41 f4       	brne	.+16     	; 0x10fe <malloc+0xd0>
    10ee:	20 91 02 02 	lds	r18, 0x0202
    10f2:	30 91 03 02 	lds	r19, 0x0203
    10f6:	30 93 da 02 	sts	0x02DA, r19
    10fa:	20 93 d9 02 	sts	0x02D9, r18
    10fe:	20 91 00 02 	lds	r18, 0x0200
    1102:	30 91 01 02 	lds	r19, 0x0201
    1106:	21 15       	cp	r18, r1
    1108:	31 05       	cpc	r19, r1
    110a:	41 f4       	brne	.+16     	; 0x111c <malloc+0xee>
    110c:	2d b7       	in	r18, 0x3d	; 61
    110e:	3e b7       	in	r19, 0x3e	; 62
    1110:	40 91 04 02 	lds	r20, 0x0204
    1114:	50 91 05 02 	lds	r21, 0x0205
    1118:	24 1b       	sub	r18, r20
    111a:	35 0b       	sbc	r19, r21
    111c:	e0 91 d9 02 	lds	r30, 0x02D9
    1120:	f0 91 da 02 	lds	r31, 0x02DA
    1124:	e2 17       	cp	r30, r18
    1126:	f3 07       	cpc	r31, r19
    1128:	a0 f4       	brcc	.+40     	; 0x1152 <malloc+0x124>
    112a:	2e 1b       	sub	r18, r30
    112c:	3f 0b       	sbc	r19, r31
    112e:	28 17       	cp	r18, r24
    1130:	39 07       	cpc	r19, r25
    1132:	78 f0       	brcs	.+30     	; 0x1152 <malloc+0x124>
    1134:	ac 01       	movw	r20, r24
    1136:	4e 5f       	subi	r20, 0xFE	; 254
    1138:	5f 4f       	sbci	r21, 0xFF	; 255
    113a:	24 17       	cp	r18, r20
    113c:	35 07       	cpc	r19, r21
    113e:	48 f0       	brcs	.+18     	; 0x1152 <malloc+0x124>
    1140:	4e 0f       	add	r20, r30
    1142:	5f 1f       	adc	r21, r31
    1144:	50 93 da 02 	sts	0x02DA, r21
    1148:	40 93 d9 02 	sts	0x02D9, r20
    114c:	81 93       	st	Z+, r24
    114e:	91 93       	st	Z+, r25
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <malloc+0x128>
    1152:	e0 e0       	ldi	r30, 0x00	; 0
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	cf 01       	movw	r24, r30
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	08 95       	ret

0000115e <free>:
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	09 f4       	brne	.+2      	; 0x1168 <free+0xa>
    1166:	87 c0       	rjmp	.+270    	; 0x1276 <free+0x118>
    1168:	fc 01       	movw	r30, r24
    116a:	32 97       	sbiw	r30, 0x02	; 2
    116c:	13 82       	std	Z+3, r1	; 0x03
    116e:	12 82       	std	Z+2, r1	; 0x02
    1170:	c0 91 db 02 	lds	r28, 0x02DB
    1174:	d0 91 dc 02 	lds	r29, 0x02DC
    1178:	20 97       	sbiw	r28, 0x00	; 0
    117a:	81 f4       	brne	.+32     	; 0x119c <free+0x3e>
    117c:	20 81       	ld	r18, Z
    117e:	31 81       	ldd	r19, Z+1	; 0x01
    1180:	28 0f       	add	r18, r24
    1182:	39 1f       	adc	r19, r25
    1184:	80 91 d9 02 	lds	r24, 0x02D9
    1188:	90 91 da 02 	lds	r25, 0x02DA
    118c:	82 17       	cp	r24, r18
    118e:	93 07       	cpc	r25, r19
    1190:	79 f5       	brne	.+94     	; 0x11f0 <free+0x92>
    1192:	f0 93 da 02 	sts	0x02DA, r31
    1196:	e0 93 d9 02 	sts	0x02D9, r30
    119a:	6d c0       	rjmp	.+218    	; 0x1276 <free+0x118>
    119c:	de 01       	movw	r26, r28
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	ae 17       	cp	r26, r30
    11a4:	bf 07       	cpc	r27, r31
    11a6:	50 f4       	brcc	.+20     	; 0x11bc <free+0x5e>
    11a8:	12 96       	adiw	r26, 0x02	; 2
    11aa:	4d 91       	ld	r20, X+
    11ac:	5c 91       	ld	r21, X
    11ae:	13 97       	sbiw	r26, 0x03	; 3
    11b0:	9d 01       	movw	r18, r26
    11b2:	41 15       	cp	r20, r1
    11b4:	51 05       	cpc	r21, r1
    11b6:	09 f1       	breq	.+66     	; 0x11fa <free+0x9c>
    11b8:	da 01       	movw	r26, r20
    11ba:	f3 cf       	rjmp	.-26     	; 0x11a2 <free+0x44>
    11bc:	b3 83       	std	Z+3, r27	; 0x03
    11be:	a2 83       	std	Z+2, r26	; 0x02
    11c0:	40 81       	ld	r20, Z
    11c2:	51 81       	ldd	r21, Z+1	; 0x01
    11c4:	84 0f       	add	r24, r20
    11c6:	95 1f       	adc	r25, r21
    11c8:	8a 17       	cp	r24, r26
    11ca:	9b 07       	cpc	r25, r27
    11cc:	71 f4       	brne	.+28     	; 0x11ea <free+0x8c>
    11ce:	8d 91       	ld	r24, X+
    11d0:	9c 91       	ld	r25, X
    11d2:	11 97       	sbiw	r26, 0x01	; 1
    11d4:	84 0f       	add	r24, r20
    11d6:	95 1f       	adc	r25, r21
    11d8:	02 96       	adiw	r24, 0x02	; 2
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	8d 91       	ld	r24, X+
    11e2:	9c 91       	ld	r25, X
    11e4:	13 97       	sbiw	r26, 0x03	; 3
    11e6:	93 83       	std	Z+3, r25	; 0x03
    11e8:	82 83       	std	Z+2, r24	; 0x02
    11ea:	21 15       	cp	r18, r1
    11ec:	31 05       	cpc	r19, r1
    11ee:	29 f4       	brne	.+10     	; 0x11fa <free+0x9c>
    11f0:	f0 93 dc 02 	sts	0x02DC, r31
    11f4:	e0 93 db 02 	sts	0x02DB, r30
    11f8:	3e c0       	rjmp	.+124    	; 0x1276 <free+0x118>
    11fa:	d9 01       	movw	r26, r18
    11fc:	13 96       	adiw	r26, 0x03	; 3
    11fe:	fc 93       	st	X, r31
    1200:	ee 93       	st	-X, r30
    1202:	12 97       	sbiw	r26, 0x02	; 2
    1204:	4d 91       	ld	r20, X+
    1206:	5d 91       	ld	r21, X+
    1208:	a4 0f       	add	r26, r20
    120a:	b5 1f       	adc	r27, r21
    120c:	ea 17       	cp	r30, r26
    120e:	fb 07       	cpc	r31, r27
    1210:	79 f4       	brne	.+30     	; 0x1230 <free+0xd2>
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	84 0f       	add	r24, r20
    1218:	95 1f       	adc	r25, r21
    121a:	02 96       	adiw	r24, 0x02	; 2
    121c:	d9 01       	movw	r26, r18
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	13 96       	adiw	r26, 0x03	; 3
    122a:	9c 93       	st	X, r25
    122c:	8e 93       	st	-X, r24
    122e:	12 97       	sbiw	r26, 0x02	; 2
    1230:	e0 e0       	ldi	r30, 0x00	; 0
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	9b 81       	ldd	r25, Y+3	; 0x03
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	19 f0       	breq	.+6      	; 0x1242 <free+0xe4>
    123c:	fe 01       	movw	r30, r28
    123e:	ec 01       	movw	r28, r24
    1240:	f9 cf       	rjmp	.-14     	; 0x1234 <free+0xd6>
    1242:	ce 01       	movw	r24, r28
    1244:	02 96       	adiw	r24, 0x02	; 2
    1246:	28 81       	ld	r18, Y
    1248:	39 81       	ldd	r19, Y+1	; 0x01
    124a:	82 0f       	add	r24, r18
    124c:	93 1f       	adc	r25, r19
    124e:	20 91 d9 02 	lds	r18, 0x02D9
    1252:	30 91 da 02 	lds	r19, 0x02DA
    1256:	28 17       	cp	r18, r24
    1258:	39 07       	cpc	r19, r25
    125a:	69 f4       	brne	.+26     	; 0x1276 <free+0x118>
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	29 f4       	brne	.+10     	; 0x126a <free+0x10c>
    1260:	10 92 dc 02 	sts	0x02DC, r1
    1264:	10 92 db 02 	sts	0x02DB, r1
    1268:	02 c0       	rjmp	.+4      	; 0x126e <free+0x110>
    126a:	13 82       	std	Z+3, r1	; 0x03
    126c:	12 82       	std	Z+2, r1	; 0x02
    126e:	d0 93 da 02 	sts	0x02DA, r29
    1272:	c0 93 d9 02 	sts	0x02D9, r28
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <fdevopen>:
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
    1286:	8b 01       	movw	r16, r22
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	31 f4       	brne	.+12     	; 0x1298 <fdevopen+0x1c>
    128c:	61 15       	cp	r22, r1
    128e:	71 05       	cpc	r23, r1
    1290:	19 f4       	brne	.+6      	; 0x1298 <fdevopen+0x1c>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	37 c0       	rjmp	.+110    	; 0x1306 <fdevopen+0x8a>
    1298:	6e e0       	ldi	r22, 0x0E	; 14
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	36 d2       	rcall	.+1132   	; 0x170e <calloc>
    12a2:	fc 01       	movw	r30, r24
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	a9 f3       	breq	.-22     	; 0x1292 <fdevopen+0x16>
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	83 83       	std	Z+3, r24	; 0x03
    12ac:	01 15       	cp	r16, r1
    12ae:	11 05       	cpc	r17, r1
    12b0:	71 f0       	breq	.+28     	; 0x12ce <fdevopen+0x52>
    12b2:	13 87       	std	Z+11, r17	; 0x0b
    12b4:	02 87       	std	Z+10, r16	; 0x0a
    12b6:	81 e8       	ldi	r24, 0x81	; 129
    12b8:	83 83       	std	Z+3, r24	; 0x03
    12ba:	80 91 dd 02 	lds	r24, 0x02DD
    12be:	90 91 de 02 	lds	r25, 0x02DE
    12c2:	89 2b       	or	r24, r25
    12c4:	21 f4       	brne	.+8      	; 0x12ce <fdevopen+0x52>
    12c6:	f0 93 de 02 	sts	0x02DE, r31
    12ca:	e0 93 dd 02 	sts	0x02DD, r30
    12ce:	20 97       	sbiw	r28, 0x00	; 0
    12d0:	c9 f0       	breq	.+50     	; 0x1304 <fdevopen+0x88>
    12d2:	d1 87       	std	Z+9, r29	; 0x09
    12d4:	c0 87       	std	Z+8, r28	; 0x08
    12d6:	83 81       	ldd	r24, Z+3	; 0x03
    12d8:	82 60       	ori	r24, 0x02	; 2
    12da:	83 83       	std	Z+3, r24	; 0x03
    12dc:	80 91 df 02 	lds	r24, 0x02DF
    12e0:	90 91 e0 02 	lds	r25, 0x02E0
    12e4:	89 2b       	or	r24, r25
    12e6:	71 f4       	brne	.+28     	; 0x1304 <fdevopen+0x88>
    12e8:	f0 93 e0 02 	sts	0x02E0, r31
    12ec:	e0 93 df 02 	sts	0x02DF, r30
    12f0:	80 91 e1 02 	lds	r24, 0x02E1
    12f4:	90 91 e2 02 	lds	r25, 0x02E2
    12f8:	89 2b       	or	r24, r25
    12fa:	21 f4       	brne	.+8      	; 0x1304 <fdevopen+0x88>
    12fc:	f0 93 e2 02 	sts	0x02E2, r31
    1300:	e0 93 e1 02 	sts	0x02E1, r30
    1304:	cf 01       	movw	r24, r30
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	08 95       	ret

00001310 <printf>:
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	fe 01       	movw	r30, r28
    131a:	36 96       	adiw	r30, 0x06	; 6
    131c:	61 91       	ld	r22, Z+
    131e:	71 91       	ld	r23, Z+
    1320:	af 01       	movw	r20, r30
    1322:	80 91 df 02 	lds	r24, 0x02DF
    1326:	90 91 e0 02 	lds	r25, 0x02E0
    132a:	03 d0       	rcall	.+6      	; 0x1332 <vfprintf>
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <vfprintf>:
    1332:	2f 92       	push	r2
    1334:	3f 92       	push	r3
    1336:	4f 92       	push	r4
    1338:	5f 92       	push	r5
    133a:	6f 92       	push	r6
    133c:	7f 92       	push	r7
    133e:	8f 92       	push	r8
    1340:	9f 92       	push	r9
    1342:	af 92       	push	r10
    1344:	bf 92       	push	r11
    1346:	cf 92       	push	r12
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	2c 97       	sbiw	r28, 0x0c	; 12
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	7c 01       	movw	r14, r24
    1368:	6b 01       	movw	r12, r22
    136a:	8a 01       	movw	r16, r20
    136c:	fc 01       	movw	r30, r24
    136e:	17 82       	std	Z+7, r1	; 0x07
    1370:	16 82       	std	Z+6, r1	; 0x06
    1372:	83 81       	ldd	r24, Z+3	; 0x03
    1374:	81 ff       	sbrs	r24, 1
    1376:	b0 c1       	rjmp	.+864    	; 0x16d8 <vfprintf+0x3a6>
    1378:	ce 01       	movw	r24, r28
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	4c 01       	movw	r8, r24
    137e:	f7 01       	movw	r30, r14
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	f6 01       	movw	r30, r12
    1384:	93 fd       	sbrc	r25, 3
    1386:	85 91       	lpm	r24, Z+
    1388:	93 ff       	sbrs	r25, 3
    138a:	81 91       	ld	r24, Z+
    138c:	6f 01       	movw	r12, r30
    138e:	88 23       	and	r24, r24
    1390:	09 f4       	brne	.+2      	; 0x1394 <vfprintf+0x62>
    1392:	9e c1       	rjmp	.+828    	; 0x16d0 <vfprintf+0x39e>
    1394:	85 32       	cpi	r24, 0x25	; 37
    1396:	39 f4       	brne	.+14     	; 0x13a6 <vfprintf+0x74>
    1398:	93 fd       	sbrc	r25, 3
    139a:	85 91       	lpm	r24, Z+
    139c:	93 ff       	sbrs	r25, 3
    139e:	81 91       	ld	r24, Z+
    13a0:	6f 01       	movw	r12, r30
    13a2:	85 32       	cpi	r24, 0x25	; 37
    13a4:	21 f4       	brne	.+8      	; 0x13ae <vfprintf+0x7c>
    13a6:	b7 01       	movw	r22, r14
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	e8 d1       	rcall	.+976    	; 0x177c <fputc>
    13ac:	e8 cf       	rjmp	.-48     	; 0x137e <vfprintf+0x4c>
    13ae:	51 2c       	mov	r5, r1
    13b0:	31 2c       	mov	r3, r1
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	20 32       	cpi	r18, 0x20	; 32
    13b6:	a0 f4       	brcc	.+40     	; 0x13e0 <vfprintf+0xae>
    13b8:	8b 32       	cpi	r24, 0x2B	; 43
    13ba:	69 f0       	breq	.+26     	; 0x13d6 <vfprintf+0xa4>
    13bc:	30 f4       	brcc	.+12     	; 0x13ca <vfprintf+0x98>
    13be:	80 32       	cpi	r24, 0x20	; 32
    13c0:	59 f0       	breq	.+22     	; 0x13d8 <vfprintf+0xa6>
    13c2:	83 32       	cpi	r24, 0x23	; 35
    13c4:	69 f4       	brne	.+26     	; 0x13e0 <vfprintf+0xae>
    13c6:	20 61       	ori	r18, 0x10	; 16
    13c8:	2c c0       	rjmp	.+88     	; 0x1422 <vfprintf+0xf0>
    13ca:	8d 32       	cpi	r24, 0x2D	; 45
    13cc:	39 f0       	breq	.+14     	; 0x13dc <vfprintf+0xaa>
    13ce:	80 33       	cpi	r24, 0x30	; 48
    13d0:	39 f4       	brne	.+14     	; 0x13e0 <vfprintf+0xae>
    13d2:	21 60       	ori	r18, 0x01	; 1
    13d4:	26 c0       	rjmp	.+76     	; 0x1422 <vfprintf+0xf0>
    13d6:	22 60       	ori	r18, 0x02	; 2
    13d8:	24 60       	ori	r18, 0x04	; 4
    13da:	23 c0       	rjmp	.+70     	; 0x1422 <vfprintf+0xf0>
    13dc:	28 60       	ori	r18, 0x08	; 8
    13de:	21 c0       	rjmp	.+66     	; 0x1422 <vfprintf+0xf0>
    13e0:	27 fd       	sbrc	r18, 7
    13e2:	27 c0       	rjmp	.+78     	; 0x1432 <vfprintf+0x100>
    13e4:	30 ed       	ldi	r19, 0xD0	; 208
    13e6:	38 0f       	add	r19, r24
    13e8:	3a 30       	cpi	r19, 0x0A	; 10
    13ea:	78 f4       	brcc	.+30     	; 0x140a <vfprintf+0xd8>
    13ec:	26 ff       	sbrs	r18, 6
    13ee:	06 c0       	rjmp	.+12     	; 0x13fc <vfprintf+0xca>
    13f0:	fa e0       	ldi	r31, 0x0A	; 10
    13f2:	5f 9e       	mul	r5, r31
    13f4:	30 0d       	add	r19, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	53 2e       	mov	r5, r19
    13fa:	13 c0       	rjmp	.+38     	; 0x1422 <vfprintf+0xf0>
    13fc:	8a e0       	ldi	r24, 0x0A	; 10
    13fe:	38 9e       	mul	r3, r24
    1400:	30 0d       	add	r19, r0
    1402:	11 24       	eor	r1, r1
    1404:	33 2e       	mov	r3, r19
    1406:	20 62       	ori	r18, 0x20	; 32
    1408:	0c c0       	rjmp	.+24     	; 0x1422 <vfprintf+0xf0>
    140a:	8e 32       	cpi	r24, 0x2E	; 46
    140c:	21 f4       	brne	.+8      	; 0x1416 <vfprintf+0xe4>
    140e:	26 fd       	sbrc	r18, 6
    1410:	5f c1       	rjmp	.+702    	; 0x16d0 <vfprintf+0x39e>
    1412:	20 64       	ori	r18, 0x40	; 64
    1414:	06 c0       	rjmp	.+12     	; 0x1422 <vfprintf+0xf0>
    1416:	8c 36       	cpi	r24, 0x6C	; 108
    1418:	11 f4       	brne	.+4      	; 0x141e <vfprintf+0xec>
    141a:	20 68       	ori	r18, 0x80	; 128
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <vfprintf+0xf0>
    141e:	88 36       	cpi	r24, 0x68	; 104
    1420:	41 f4       	brne	.+16     	; 0x1432 <vfprintf+0x100>
    1422:	f6 01       	movw	r30, r12
    1424:	93 fd       	sbrc	r25, 3
    1426:	85 91       	lpm	r24, Z+
    1428:	93 ff       	sbrs	r25, 3
    142a:	81 91       	ld	r24, Z+
    142c:	6f 01       	movw	r12, r30
    142e:	81 11       	cpse	r24, r1
    1430:	c1 cf       	rjmp	.-126    	; 0x13b4 <vfprintf+0x82>
    1432:	98 2f       	mov	r25, r24
    1434:	9f 7d       	andi	r25, 0xDF	; 223
    1436:	95 54       	subi	r25, 0x45	; 69
    1438:	93 30       	cpi	r25, 0x03	; 3
    143a:	28 f4       	brcc	.+10     	; 0x1446 <vfprintf+0x114>
    143c:	0c 5f       	subi	r16, 0xFC	; 252
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
    1440:	ff e3       	ldi	r31, 0x3F	; 63
    1442:	f9 83       	std	Y+1, r31	; 0x01
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <vfprintf+0x12e>
    1446:	83 36       	cpi	r24, 0x63	; 99
    1448:	31 f0       	breq	.+12     	; 0x1456 <vfprintf+0x124>
    144a:	83 37       	cpi	r24, 0x73	; 115
    144c:	71 f0       	breq	.+28     	; 0x146a <vfprintf+0x138>
    144e:	83 35       	cpi	r24, 0x53	; 83
    1450:	09 f0       	breq	.+2      	; 0x1454 <vfprintf+0x122>
    1452:	57 c0       	rjmp	.+174    	; 0x1502 <vfprintf+0x1d0>
    1454:	21 c0       	rjmp	.+66     	; 0x1498 <vfprintf+0x166>
    1456:	f8 01       	movw	r30, r16
    1458:	80 81       	ld	r24, Z
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	0e 5f       	subi	r16, 0xFE	; 254
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	44 24       	eor	r4, r4
    1462:	43 94       	inc	r4
    1464:	51 2c       	mov	r5, r1
    1466:	54 01       	movw	r10, r8
    1468:	14 c0       	rjmp	.+40     	; 0x1492 <vfprintf+0x160>
    146a:	38 01       	movw	r6, r16
    146c:	f2 e0       	ldi	r31, 0x02	; 2
    146e:	6f 0e       	add	r6, r31
    1470:	71 1c       	adc	r7, r1
    1472:	f8 01       	movw	r30, r16
    1474:	a0 80       	ld	r10, Z
    1476:	b1 80       	ldd	r11, Z+1	; 0x01
    1478:	26 ff       	sbrs	r18, 6
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <vfprintf+0x150>
    147c:	65 2d       	mov	r22, r5
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <vfprintf+0x154>
    1482:	6f ef       	ldi	r22, 0xFF	; 255
    1484:	7f ef       	ldi	r23, 0xFF	; 255
    1486:	c5 01       	movw	r24, r10
    1488:	2c 87       	std	Y+12, r18	; 0x0c
    148a:	6d d1       	rcall	.+730    	; 0x1766 <strnlen>
    148c:	2c 01       	movw	r4, r24
    148e:	83 01       	movw	r16, r6
    1490:	2c 85       	ldd	r18, Y+12	; 0x0c
    1492:	2f 77       	andi	r18, 0x7F	; 127
    1494:	22 2e       	mov	r2, r18
    1496:	16 c0       	rjmp	.+44     	; 0x14c4 <vfprintf+0x192>
    1498:	38 01       	movw	r6, r16
    149a:	f2 e0       	ldi	r31, 0x02	; 2
    149c:	6f 0e       	add	r6, r31
    149e:	71 1c       	adc	r7, r1
    14a0:	f8 01       	movw	r30, r16
    14a2:	a0 80       	ld	r10, Z
    14a4:	b1 80       	ldd	r11, Z+1	; 0x01
    14a6:	26 ff       	sbrs	r18, 6
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <vfprintf+0x17e>
    14aa:	65 2d       	mov	r22, r5
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <vfprintf+0x182>
    14b0:	6f ef       	ldi	r22, 0xFF	; 255
    14b2:	7f ef       	ldi	r23, 0xFF	; 255
    14b4:	c5 01       	movw	r24, r10
    14b6:	2c 87       	std	Y+12, r18	; 0x0c
    14b8:	44 d1       	rcall	.+648    	; 0x1742 <strnlen_P>
    14ba:	2c 01       	movw	r4, r24
    14bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    14be:	20 68       	ori	r18, 0x80	; 128
    14c0:	22 2e       	mov	r2, r18
    14c2:	83 01       	movw	r16, r6
    14c4:	23 fc       	sbrc	r2, 3
    14c6:	19 c0       	rjmp	.+50     	; 0x14fa <vfprintf+0x1c8>
    14c8:	83 2d       	mov	r24, r3
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	48 16       	cp	r4, r24
    14ce:	59 06       	cpc	r5, r25
    14d0:	a0 f4       	brcc	.+40     	; 0x14fa <vfprintf+0x1c8>
    14d2:	b7 01       	movw	r22, r14
    14d4:	80 e2       	ldi	r24, 0x20	; 32
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	51 d1       	rcall	.+674    	; 0x177c <fputc>
    14da:	3a 94       	dec	r3
    14dc:	f5 cf       	rjmp	.-22     	; 0x14c8 <vfprintf+0x196>
    14de:	f5 01       	movw	r30, r10
    14e0:	27 fc       	sbrc	r2, 7
    14e2:	85 91       	lpm	r24, Z+
    14e4:	27 fe       	sbrs	r2, 7
    14e6:	81 91       	ld	r24, Z+
    14e8:	5f 01       	movw	r10, r30
    14ea:	b7 01       	movw	r22, r14
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	46 d1       	rcall	.+652    	; 0x177c <fputc>
    14f0:	31 10       	cpse	r3, r1
    14f2:	3a 94       	dec	r3
    14f4:	f1 e0       	ldi	r31, 0x01	; 1
    14f6:	4f 1a       	sub	r4, r31
    14f8:	51 08       	sbc	r5, r1
    14fa:	41 14       	cp	r4, r1
    14fc:	51 04       	cpc	r5, r1
    14fe:	79 f7       	brne	.-34     	; 0x14de <vfprintf+0x1ac>
    1500:	de c0       	rjmp	.+444    	; 0x16be <vfprintf+0x38c>
    1502:	84 36       	cpi	r24, 0x64	; 100
    1504:	11 f0       	breq	.+4      	; 0x150a <vfprintf+0x1d8>
    1506:	89 36       	cpi	r24, 0x69	; 105
    1508:	31 f5       	brne	.+76     	; 0x1556 <vfprintf+0x224>
    150a:	f8 01       	movw	r30, r16
    150c:	27 ff       	sbrs	r18, 7
    150e:	07 c0       	rjmp	.+14     	; 0x151e <vfprintf+0x1ec>
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	82 81       	ldd	r24, Z+2	; 0x02
    1516:	93 81       	ldd	r25, Z+3	; 0x03
    1518:	0c 5f       	subi	r16, 0xFC	; 252
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
    151c:	08 c0       	rjmp	.+16     	; 0x152e <vfprintf+0x1fc>
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	88 27       	eor	r24, r24
    1524:	77 fd       	sbrc	r23, 7
    1526:	80 95       	com	r24
    1528:	98 2f       	mov	r25, r24
    152a:	0e 5f       	subi	r16, 0xFE	; 254
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	2f 76       	andi	r18, 0x6F	; 111
    1530:	b2 2e       	mov	r11, r18
    1532:	97 ff       	sbrs	r25, 7
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <vfprintf+0x216>
    1536:	90 95       	com	r25
    1538:	80 95       	com	r24
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	20 68       	ori	r18, 0x80	; 128
    1546:	b2 2e       	mov	r11, r18
    1548:	2a e0       	ldi	r18, 0x0A	; 10
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	a4 01       	movw	r20, r8
    154e:	48 d1       	rcall	.+656    	; 0x17e0 <__ultoa_invert>
    1550:	a8 2e       	mov	r10, r24
    1552:	a8 18       	sub	r10, r8
    1554:	43 c0       	rjmp	.+134    	; 0x15dc <vfprintf+0x2aa>
    1556:	85 37       	cpi	r24, 0x75	; 117
    1558:	29 f4       	brne	.+10     	; 0x1564 <vfprintf+0x232>
    155a:	2f 7e       	andi	r18, 0xEF	; 239
    155c:	b2 2e       	mov	r11, r18
    155e:	2a e0       	ldi	r18, 0x0A	; 10
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	25 c0       	rjmp	.+74     	; 0x15ae <vfprintf+0x27c>
    1564:	f2 2f       	mov	r31, r18
    1566:	f9 7f       	andi	r31, 0xF9	; 249
    1568:	bf 2e       	mov	r11, r31
    156a:	8f 36       	cpi	r24, 0x6F	; 111
    156c:	c1 f0       	breq	.+48     	; 0x159e <vfprintf+0x26c>
    156e:	18 f4       	brcc	.+6      	; 0x1576 <vfprintf+0x244>
    1570:	88 35       	cpi	r24, 0x58	; 88
    1572:	79 f0       	breq	.+30     	; 0x1592 <vfprintf+0x260>
    1574:	ad c0       	rjmp	.+346    	; 0x16d0 <vfprintf+0x39e>
    1576:	80 37       	cpi	r24, 0x70	; 112
    1578:	19 f0       	breq	.+6      	; 0x1580 <vfprintf+0x24e>
    157a:	88 37       	cpi	r24, 0x78	; 120
    157c:	21 f0       	breq	.+8      	; 0x1586 <vfprintf+0x254>
    157e:	a8 c0       	rjmp	.+336    	; 0x16d0 <vfprintf+0x39e>
    1580:	2f 2f       	mov	r18, r31
    1582:	20 61       	ori	r18, 0x10	; 16
    1584:	b2 2e       	mov	r11, r18
    1586:	b4 fe       	sbrs	r11, 4
    1588:	0d c0       	rjmp	.+26     	; 0x15a4 <vfprintf+0x272>
    158a:	8b 2d       	mov	r24, r11
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	b8 2e       	mov	r11, r24
    1590:	09 c0       	rjmp	.+18     	; 0x15a4 <vfprintf+0x272>
    1592:	24 ff       	sbrs	r18, 4
    1594:	0a c0       	rjmp	.+20     	; 0x15aa <vfprintf+0x278>
    1596:	9f 2f       	mov	r25, r31
    1598:	96 60       	ori	r25, 0x06	; 6
    159a:	b9 2e       	mov	r11, r25
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <vfprintf+0x278>
    159e:	28 e0       	ldi	r18, 0x08	; 8
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <vfprintf+0x27c>
    15a4:	20 e1       	ldi	r18, 0x10	; 16
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <vfprintf+0x27c>
    15aa:	20 e1       	ldi	r18, 0x10	; 16
    15ac:	32 e0       	ldi	r19, 0x02	; 2
    15ae:	f8 01       	movw	r30, r16
    15b0:	b7 fe       	sbrs	r11, 7
    15b2:	07 c0       	rjmp	.+14     	; 0x15c2 <vfprintf+0x290>
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	0c 5f       	subi	r16, 0xFC	; 252
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x29c>
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 5f       	subi	r16, 0xFE	; 254
    15cc:	1f 4f       	sbci	r17, 0xFF	; 255
    15ce:	a4 01       	movw	r20, r8
    15d0:	07 d1       	rcall	.+526    	; 0x17e0 <__ultoa_invert>
    15d2:	a8 2e       	mov	r10, r24
    15d4:	a8 18       	sub	r10, r8
    15d6:	fb 2d       	mov	r31, r11
    15d8:	ff 77       	andi	r31, 0x7F	; 127
    15da:	bf 2e       	mov	r11, r31
    15dc:	b6 fe       	sbrs	r11, 6
    15de:	0b c0       	rjmp	.+22     	; 0x15f6 <vfprintf+0x2c4>
    15e0:	2b 2d       	mov	r18, r11
    15e2:	2e 7f       	andi	r18, 0xFE	; 254
    15e4:	a5 14       	cp	r10, r5
    15e6:	50 f4       	brcc	.+20     	; 0x15fc <vfprintf+0x2ca>
    15e8:	b4 fe       	sbrs	r11, 4
    15ea:	0a c0       	rjmp	.+20     	; 0x1600 <vfprintf+0x2ce>
    15ec:	b2 fc       	sbrc	r11, 2
    15ee:	08 c0       	rjmp	.+16     	; 0x1600 <vfprintf+0x2ce>
    15f0:	2b 2d       	mov	r18, r11
    15f2:	2e 7e       	andi	r18, 0xEE	; 238
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <vfprintf+0x2ce>
    15f6:	7a 2c       	mov	r7, r10
    15f8:	2b 2d       	mov	r18, r11
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <vfprintf+0x2d0>
    15fc:	7a 2c       	mov	r7, r10
    15fe:	01 c0       	rjmp	.+2      	; 0x1602 <vfprintf+0x2d0>
    1600:	75 2c       	mov	r7, r5
    1602:	24 ff       	sbrs	r18, 4
    1604:	0d c0       	rjmp	.+26     	; 0x1620 <vfprintf+0x2ee>
    1606:	fe 01       	movw	r30, r28
    1608:	ea 0d       	add	r30, r10
    160a:	f1 1d       	adc	r31, r1
    160c:	80 81       	ld	r24, Z
    160e:	80 33       	cpi	r24, 0x30	; 48
    1610:	11 f4       	brne	.+4      	; 0x1616 <vfprintf+0x2e4>
    1612:	29 7e       	andi	r18, 0xE9	; 233
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <vfprintf+0x2f6>
    1616:	22 ff       	sbrs	r18, 2
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <vfprintf+0x2f4>
    161a:	73 94       	inc	r7
    161c:	73 94       	inc	r7
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <vfprintf+0x2f6>
    1620:	82 2f       	mov	r24, r18
    1622:	86 78       	andi	r24, 0x86	; 134
    1624:	09 f0       	breq	.+2      	; 0x1628 <vfprintf+0x2f6>
    1626:	73 94       	inc	r7
    1628:	23 fd       	sbrc	r18, 3
    162a:	12 c0       	rjmp	.+36     	; 0x1650 <vfprintf+0x31e>
    162c:	20 ff       	sbrs	r18, 0
    162e:	06 c0       	rjmp	.+12     	; 0x163c <vfprintf+0x30a>
    1630:	5a 2c       	mov	r5, r10
    1632:	73 14       	cp	r7, r3
    1634:	18 f4       	brcc	.+6      	; 0x163c <vfprintf+0x30a>
    1636:	53 0c       	add	r5, r3
    1638:	57 18       	sub	r5, r7
    163a:	73 2c       	mov	r7, r3
    163c:	73 14       	cp	r7, r3
    163e:	60 f4       	brcc	.+24     	; 0x1658 <vfprintf+0x326>
    1640:	b7 01       	movw	r22, r14
    1642:	80 e2       	ldi	r24, 0x20	; 32
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	2c 87       	std	Y+12, r18	; 0x0c
    1648:	99 d0       	rcall	.+306    	; 0x177c <fputc>
    164a:	73 94       	inc	r7
    164c:	2c 85       	ldd	r18, Y+12	; 0x0c
    164e:	f6 cf       	rjmp	.-20     	; 0x163c <vfprintf+0x30a>
    1650:	73 14       	cp	r7, r3
    1652:	10 f4       	brcc	.+4      	; 0x1658 <vfprintf+0x326>
    1654:	37 18       	sub	r3, r7
    1656:	01 c0       	rjmp	.+2      	; 0x165a <vfprintf+0x328>
    1658:	31 2c       	mov	r3, r1
    165a:	24 ff       	sbrs	r18, 4
    165c:	11 c0       	rjmp	.+34     	; 0x1680 <vfprintf+0x34e>
    165e:	b7 01       	movw	r22, r14
    1660:	80 e3       	ldi	r24, 0x30	; 48
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	2c 87       	std	Y+12, r18	; 0x0c
    1666:	8a d0       	rcall	.+276    	; 0x177c <fputc>
    1668:	2c 85       	ldd	r18, Y+12	; 0x0c
    166a:	22 ff       	sbrs	r18, 2
    166c:	16 c0       	rjmp	.+44     	; 0x169a <vfprintf+0x368>
    166e:	21 ff       	sbrs	r18, 1
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <vfprintf+0x346>
    1672:	88 e5       	ldi	r24, 0x58	; 88
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <vfprintf+0x34a>
    1678:	88 e7       	ldi	r24, 0x78	; 120
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	b7 01       	movw	r22, r14
    167e:	0c c0       	rjmp	.+24     	; 0x1698 <vfprintf+0x366>
    1680:	82 2f       	mov	r24, r18
    1682:	86 78       	andi	r24, 0x86	; 134
    1684:	51 f0       	breq	.+20     	; 0x169a <vfprintf+0x368>
    1686:	21 fd       	sbrc	r18, 1
    1688:	02 c0       	rjmp	.+4      	; 0x168e <vfprintf+0x35c>
    168a:	80 e2       	ldi	r24, 0x20	; 32
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <vfprintf+0x35e>
    168e:	8b e2       	ldi	r24, 0x2B	; 43
    1690:	27 fd       	sbrc	r18, 7
    1692:	8d e2       	ldi	r24, 0x2D	; 45
    1694:	b7 01       	movw	r22, r14
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	71 d0       	rcall	.+226    	; 0x177c <fputc>
    169a:	a5 14       	cp	r10, r5
    169c:	30 f4       	brcc	.+12     	; 0x16aa <vfprintf+0x378>
    169e:	b7 01       	movw	r22, r14
    16a0:	80 e3       	ldi	r24, 0x30	; 48
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	6b d0       	rcall	.+214    	; 0x177c <fputc>
    16a6:	5a 94       	dec	r5
    16a8:	f8 cf       	rjmp	.-16     	; 0x169a <vfprintf+0x368>
    16aa:	aa 94       	dec	r10
    16ac:	f4 01       	movw	r30, r8
    16ae:	ea 0d       	add	r30, r10
    16b0:	f1 1d       	adc	r31, r1
    16b2:	80 81       	ld	r24, Z
    16b4:	b7 01       	movw	r22, r14
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	61 d0       	rcall	.+194    	; 0x177c <fputc>
    16ba:	a1 10       	cpse	r10, r1
    16bc:	f6 cf       	rjmp	.-20     	; 0x16aa <vfprintf+0x378>
    16be:	33 20       	and	r3, r3
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <vfprintf+0x392>
    16c2:	5d ce       	rjmp	.-838    	; 0x137e <vfprintf+0x4c>
    16c4:	b7 01       	movw	r22, r14
    16c6:	80 e2       	ldi	r24, 0x20	; 32
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	58 d0       	rcall	.+176    	; 0x177c <fputc>
    16cc:	3a 94       	dec	r3
    16ce:	f7 cf       	rjmp	.-18     	; 0x16be <vfprintf+0x38c>
    16d0:	f7 01       	movw	r30, r14
    16d2:	86 81       	ldd	r24, Z+6	; 0x06
    16d4:	97 81       	ldd	r25, Z+7	; 0x07
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <vfprintf+0x3aa>
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	9f ef       	ldi	r25, 0xFF	; 255
    16dc:	2c 96       	adiw	r28, 0x0c	; 12
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	df 90       	pop	r13
    16f6:	cf 90       	pop	r12
    16f8:	bf 90       	pop	r11
    16fa:	af 90       	pop	r10
    16fc:	9f 90       	pop	r9
    16fe:	8f 90       	pop	r8
    1700:	7f 90       	pop	r7
    1702:	6f 90       	pop	r6
    1704:	5f 90       	pop	r5
    1706:	4f 90       	pop	r4
    1708:	3f 90       	pop	r3
    170a:	2f 90       	pop	r2
    170c:	08 95       	ret

0000170e <calloc>:
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	86 9f       	mul	r24, r22
    1718:	80 01       	movw	r16, r0
    171a:	87 9f       	mul	r24, r23
    171c:	10 0d       	add	r17, r0
    171e:	96 9f       	mul	r25, r22
    1720:	10 0d       	add	r17, r0
    1722:	11 24       	eor	r1, r1
    1724:	c8 01       	movw	r24, r16
    1726:	83 dc       	rcall	.-1786   	; 0x102e <malloc>
    1728:	ec 01       	movw	r28, r24
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	21 f0       	breq	.+8      	; 0x1736 <calloc+0x28>
    172e:	a8 01       	movw	r20, r16
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	11 d0       	rcall	.+34     	; 0x1758 <memset>
    1736:	ce 01       	movw	r24, r28
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <strnlen_P>:
    1742:	fc 01       	movw	r30, r24
    1744:	05 90       	lpm	r0, Z+
    1746:	61 50       	subi	r22, 0x01	; 1
    1748:	70 40       	sbci	r23, 0x00	; 0
    174a:	01 10       	cpse	r0, r1
    174c:	d8 f7       	brcc	.-10     	; 0x1744 <strnlen_P+0x2>
    174e:	80 95       	com	r24
    1750:	90 95       	com	r25
    1752:	8e 0f       	add	r24, r30
    1754:	9f 1f       	adc	r25, r31
    1756:	08 95       	ret

00001758 <memset>:
    1758:	dc 01       	movw	r26, r24
    175a:	01 c0       	rjmp	.+2      	; 0x175e <memset+0x6>
    175c:	6d 93       	st	X+, r22
    175e:	41 50       	subi	r20, 0x01	; 1
    1760:	50 40       	sbci	r21, 0x00	; 0
    1762:	e0 f7       	brcc	.-8      	; 0x175c <memset+0x4>
    1764:	08 95       	ret

00001766 <strnlen>:
    1766:	fc 01       	movw	r30, r24
    1768:	61 50       	subi	r22, 0x01	; 1
    176a:	70 40       	sbci	r23, 0x00	; 0
    176c:	01 90       	ld	r0, Z+
    176e:	01 10       	cpse	r0, r1
    1770:	d8 f7       	brcc	.-10     	; 0x1768 <strnlen+0x2>
    1772:	80 95       	com	r24
    1774:	90 95       	com	r25
    1776:	8e 0f       	add	r24, r30
    1778:	9f 1f       	adc	r25, r31
    177a:	08 95       	ret

0000177c <fputc>:
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	18 2f       	mov	r17, r24
    1786:	09 2f       	mov	r16, r25
    1788:	eb 01       	movw	r28, r22
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	81 fd       	sbrc	r24, 1
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <fputc+0x1a>
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	9f ef       	ldi	r25, 0xFF	; 255
    1794:	20 c0       	rjmp	.+64     	; 0x17d6 <fputc+0x5a>
    1796:	82 ff       	sbrs	r24, 2
    1798:	10 c0       	rjmp	.+32     	; 0x17ba <fputc+0x3e>
    179a:	4e 81       	ldd	r20, Y+6	; 0x06
    179c:	5f 81       	ldd	r21, Y+7	; 0x07
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	42 17       	cp	r20, r18
    17a4:	53 07       	cpc	r21, r19
    17a6:	7c f4       	brge	.+30     	; 0x17c6 <fputc+0x4a>
    17a8:	e8 81       	ld	r30, Y
    17aa:	f9 81       	ldd	r31, Y+1	; 0x01
    17ac:	9f 01       	movw	r18, r30
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	39 83       	std	Y+1, r19	; 0x01
    17b4:	28 83       	st	Y, r18
    17b6:	10 83       	st	Z, r17
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <fputc+0x4a>
    17ba:	e8 85       	ldd	r30, Y+8	; 0x08
    17bc:	f9 85       	ldd	r31, Y+9	; 0x09
    17be:	81 2f       	mov	r24, r17
    17c0:	19 95       	eicall
    17c2:	89 2b       	or	r24, r25
    17c4:	29 f7       	brne	.-54     	; 0x1790 <fputc+0x14>
    17c6:	2e 81       	ldd	r18, Y+6	; 0x06
    17c8:	3f 81       	ldd	r19, Y+7	; 0x07
    17ca:	2f 5f       	subi	r18, 0xFF	; 255
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	3f 83       	std	Y+7, r19	; 0x07
    17d0:	2e 83       	std	Y+6, r18	; 0x06
    17d2:	81 2f       	mov	r24, r17
    17d4:	90 2f       	mov	r25, r16
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <__ultoa_invert>:
    17e0:	fa 01       	movw	r30, r20
    17e2:	aa 27       	eor	r26, r26
    17e4:	28 30       	cpi	r18, 0x08	; 8
    17e6:	51 f1       	breq	.+84     	; 0x183c <__ultoa_invert+0x5c>
    17e8:	20 31       	cpi	r18, 0x10	; 16
    17ea:	81 f1       	breq	.+96     	; 0x184c <__ultoa_invert+0x6c>
    17ec:	e8 94       	clt
    17ee:	6f 93       	push	r22
    17f0:	6e 7f       	andi	r22, 0xFE	; 254
    17f2:	6e 5f       	subi	r22, 0xFE	; 254
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	8f 4f       	sbci	r24, 0xFF	; 255
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	af 4f       	sbci	r26, 0xFF	; 255
    17fc:	b1 e0       	ldi	r27, 0x01	; 1
    17fe:	3e d0       	rcall	.+124    	; 0x187c <__ultoa_invert+0x9c>
    1800:	b4 e0       	ldi	r27, 0x04	; 4
    1802:	3c d0       	rcall	.+120    	; 0x187c <__ultoa_invert+0x9c>
    1804:	67 0f       	add	r22, r23
    1806:	78 1f       	adc	r23, r24
    1808:	89 1f       	adc	r24, r25
    180a:	9a 1f       	adc	r25, r26
    180c:	a1 1d       	adc	r26, r1
    180e:	68 0f       	add	r22, r24
    1810:	79 1f       	adc	r23, r25
    1812:	8a 1f       	adc	r24, r26
    1814:	91 1d       	adc	r25, r1
    1816:	a1 1d       	adc	r26, r1
    1818:	6a 0f       	add	r22, r26
    181a:	71 1d       	adc	r23, r1
    181c:	81 1d       	adc	r24, r1
    181e:	91 1d       	adc	r25, r1
    1820:	a1 1d       	adc	r26, r1
    1822:	20 d0       	rcall	.+64     	; 0x1864 <__ultoa_invert+0x84>
    1824:	09 f4       	brne	.+2      	; 0x1828 <__ultoa_invert+0x48>
    1826:	68 94       	set
    1828:	3f 91       	pop	r19
    182a:	2a e0       	ldi	r18, 0x0A	; 10
    182c:	26 9f       	mul	r18, r22
    182e:	11 24       	eor	r1, r1
    1830:	30 19       	sub	r19, r0
    1832:	30 5d       	subi	r19, 0xD0	; 208
    1834:	31 93       	st	Z+, r19
    1836:	de f6       	brtc	.-74     	; 0x17ee <__ultoa_invert+0xe>
    1838:	cf 01       	movw	r24, r30
    183a:	08 95       	ret
    183c:	46 2f       	mov	r20, r22
    183e:	47 70       	andi	r20, 0x07	; 7
    1840:	40 5d       	subi	r20, 0xD0	; 208
    1842:	41 93       	st	Z+, r20
    1844:	b3 e0       	ldi	r27, 0x03	; 3
    1846:	0f d0       	rcall	.+30     	; 0x1866 <__ultoa_invert+0x86>
    1848:	c9 f7       	brne	.-14     	; 0x183c <__ultoa_invert+0x5c>
    184a:	f6 cf       	rjmp	.-20     	; 0x1838 <__ultoa_invert+0x58>
    184c:	46 2f       	mov	r20, r22
    184e:	4f 70       	andi	r20, 0x0F	; 15
    1850:	40 5d       	subi	r20, 0xD0	; 208
    1852:	4a 33       	cpi	r20, 0x3A	; 58
    1854:	18 f0       	brcs	.+6      	; 0x185c <__ultoa_invert+0x7c>
    1856:	49 5d       	subi	r20, 0xD9	; 217
    1858:	31 fd       	sbrc	r19, 1
    185a:	40 52       	subi	r20, 0x20	; 32
    185c:	41 93       	st	Z+, r20
    185e:	02 d0       	rcall	.+4      	; 0x1864 <__ultoa_invert+0x84>
    1860:	a9 f7       	brne	.-22     	; 0x184c <__ultoa_invert+0x6c>
    1862:	ea cf       	rjmp	.-44     	; 0x1838 <__ultoa_invert+0x58>
    1864:	b4 e0       	ldi	r27, 0x04	; 4
    1866:	a6 95       	lsr	r26
    1868:	97 95       	ror	r25
    186a:	87 95       	ror	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	ba 95       	dec	r27
    1872:	c9 f7       	brne	.-14     	; 0x1866 <__ultoa_invert+0x86>
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	61 05       	cpc	r22, r1
    1878:	71 05       	cpc	r23, r1
    187a:	08 95       	ret
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	0a 2e       	mov	r0, r26
    1882:	06 94       	lsr	r0
    1884:	57 95       	ror	r21
    1886:	47 95       	ror	r20
    1888:	37 95       	ror	r19
    188a:	27 95       	ror	r18
    188c:	ba 95       	dec	r27
    188e:	c9 f7       	brne	.-14     	; 0x1882 <__ultoa_invert+0xa2>
    1890:	62 0f       	add	r22, r18
    1892:	73 1f       	adc	r23, r19
    1894:	84 1f       	adc	r24, r20
    1896:	95 1f       	adc	r25, r21
    1898:	a0 1d       	adc	r26, r0
    189a:	08 95       	ret

0000189c <_exit>:
    189c:	f8 94       	cli

0000189e <__stop_program>:
    189e:	ff cf       	rjmp	.-2      	; 0x189e <__stop_program>
