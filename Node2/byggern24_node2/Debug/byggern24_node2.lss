
byggern24_node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800200  00000d26  00000dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002d0  008002d0  00000e8a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a8  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f4  00000000  00000000  000021d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab3  00000000  00000000  000029ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000338  00000000  00000000  00003480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b8  00000000  00000000  000037b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a65  00000000  00000000  00003c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000046d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	61 c1       	rjmp	.+706    	; 0x2c8 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e2       	ldi	r30, 0x26	; 38
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3d       	cpi	r26, 0xD0	; 208
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 ed       	ldi	r26, 0xD0	; 208
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3d       	cpi	r26, 0xDA	; 218
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	87 d1       	rcall	.+782    	; 0x42e <main>
 120:	00 c6       	rjmp	.+3072   	; 0xd22 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_controller_reset>:
	status = spi_read();

	PORTB |= ~(1<<CAN_CS);

	return status;
}
 124:	2f 98       	cbi	0x05, 7	; 5
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	9f d1       	rcall	.+830    	; 0x468 <spi_send>
 12a:	2f 9a       	sbi	0x05, 7	; 5
 12c:	8f e3       	ldi	r24, 0x3F	; 63
 12e:	9c e9       	ldi	r25, 0x9C	; 156
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <can_controller_reset+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <can_controller_reset+0x12>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <can_controller_read>:
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
 13e:	2f 98       	cbi	0x05, 7	; 5
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	92 d1       	rcall	.+804    	; 0x468 <spi_send>
 144:	8c 2f       	mov	r24, r28
 146:	90 d1       	rcall	.+800    	; 0x468 <spi_send>
 148:	91 d1       	rcall	.+802    	; 0x46c <spi_read>
 14a:	2f 9a       	sbi	0x05, 7	; 5
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <can_controller_request_to_send>:
 150:	2f 98       	cbi	0x05, 7	; 5
 152:	81 e8       	ldi	r24, 0x81	; 129
 154:	89 d1       	rcall	.+786    	; 0x468 <spi_send>
 156:	85 b1       	in	r24, 0x05	; 5
 158:	8f 67       	ori	r24, 0x7F	; 127
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	08 95       	ret

0000015e <can_controller_bit_modify>:
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	18 2f       	mov	r17, r24
 166:	d6 2f       	mov	r29, r22
 168:	c4 2f       	mov	r28, r20
 16a:	2f 98       	cbi	0x05, 7	; 5
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	7c d1       	rcall	.+760    	; 0x468 <spi_send>
 170:	81 2f       	mov	r24, r17
 172:	7a d1       	rcall	.+756    	; 0x468 <spi_send>
 174:	8d 2f       	mov	r24, r29
 176:	78 d1       	rcall	.+752    	; 0x468 <spi_send>
 178:	8c 2f       	mov	r24, r28
 17a:	76 d1       	rcall	.+748    	; 0x468 <spi_send>
 17c:	2f 9a       	sbi	0x05, 7	; 5
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	08 95       	ret

00000186 <can_controller_set_mode>:
 186:	48 2f       	mov	r20, r24
 188:	60 ee       	ldi	r22, 0xE0	; 224
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	e8 df       	rcall	.-48     	; 0x15e <can_controller_bit_modify>
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	d4 df       	rcall	.-88     	; 0x13a <can_controller_read>
 192:	80 7e       	andi	r24, 0xE0	; 224
 194:	08 95       	ret

00000196 <can_controller_write>:

void can_controller_write(uint8_t address, uint8_t data)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	d8 2f       	mov	r29, r24
 19c:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
 19e:	2f 98       	cbi	0x05, 7	; 5
	
	spi_send(MCP_WRITE);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	62 d1       	rcall	.+708    	; 0x468 <spi_send>
	spi_send(address);
 1a4:	8d 2f       	mov	r24, r29
 1a6:	60 d1       	rcall	.+704    	; 0x468 <spi_send>
	spi_send(data);
 1a8:	8c 2f       	mov	r24, r28
 1aa:	5e d1       	rcall	.+700    	; 0x468 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
 1ac:	2f 9a       	sbi	0x05, 7	; 5
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <can_controller_init>:
uint8_t can_controller_init()
{
	uint8_t value;

	//spi_init(); // Initialize SPI
	can_controller_reset(); // Send reset-command
 1b4:	b7 df       	rcall	.-146    	; 0x124 <can_controller_reset>
	

	// Self-test
	value = can_controller_read(MCP_CANSTAT);
 1b6:	8e e0       	ldi	r24, 0x0E	; 14
 1b8:	c0 df       	rcall	.-128    	; 0x13a <can_controller_read>
	if ((value & MODE_MASK)  != MODE_CONFIG)
 1ba:	98 2f       	mov	r25, r24
 1bc:	90 7e       	andi	r25, 0xE0	; 224
 1be:	90 38       	cpi	r25, 0x80	; 128
 1c0:	69 f0       	breq	.+26     	; 0x1dc <can_controller_init+0x28>
	{
		printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
 1c2:	1f 92       	push	r1
 1c4:	8f 93       	push	r24
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	9f 93       	push	r25
 1cc:	8f 93       	push	r24
 1ce:	e3 d2       	rcall	.+1478   	; 0x796 <printf>
		return 1;
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
	}
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000001);
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	6f ef       	ldi	r22, 0xFF	; 255
 1e0:	8b e2       	ldi	r24, 0x2B	; 43
 1e2:	bd df       	rcall	.-134    	; 0x15e <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100100, 0b01100100);
 1e4:	44 e6       	ldi	r20, 0x64	; 100
 1e6:	64 e6       	ldi	r22, 0x64	; 100
 1e8:	80 e6       	ldi	r24, 0x60	; 96
 1ea:	b9 df       	rcall	.-142    	; 0x15e <can_controller_bit_modify>
	//printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
 1ec:	40 e6       	ldi	r20, 0x60	; 96
 1ee:	60 e6       	ldi	r22, 0x60	; 96
 1f0:	80 e7       	ldi	r24, 0x70	; 112
 1f2:	b5 df       	rcall	.-150    	; 0x15e <can_controller_bit_modify>
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

	
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	82 e3       	ldi	r24, 0x32	; 50
 1f8:	ce df       	rcall	.-100    	; 0x196 <can_controller_write>
	return 0;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
}
 1fc:	08 95       	ret

000001fe <can_init>:
// }

void can_init ()
{
	//set loopback mode
	uint8_t mode = can_controller_set_mode(MODE_NORMAL);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	c2 df       	rcall	.-124    	; 0x186 <can_controller_set_mode>
	if (mode != MODE_NORMAL)
 202:	88 23       	and	r24, r24
 204:	39 f0       	breq	.+14     	; 0x214 <can_init+0x16>
	{
		printf("Could not set normal mode! I am sorry!\n\r");
 206:	83 e5       	ldi	r24, 0x53	; 83
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	9f 93       	push	r25
 20c:	8f 93       	push	r24
 20e:	c3 d2       	rcall	.+1414   	; 0x796 <printf>
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
	//can_controller_bit_modify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
	//can_controller_write(MCP_CANINTE, MCP_RX_INT);
	
	// SET UP INTERRUPTION TO RECIEVE MESSAGE
	//DDRD &= ~(1<<PD0);
	cli();
 214:	f8 94       	cli
	EICRA &= ~(1 << ISC00);
 216:	e9 e6       	ldi	r30, 0x69	; 105
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	80 83       	st	Z, r24
	EICRA |= (1 << ISC01);	//interrupt on the falling edge
 220:	80 81       	ld	r24, Z
 222:	82 60       	ori	r24, 0x02	; 2
 224:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT0);						//enable external interrupt INT0
 226:	e8 9a       	sbi	0x1d, 0	; 29
	can_controller_write(MCP_CANINTF, 0x00);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	8c e2       	ldi	r24, 0x2C	; 44
 22c:	b4 df       	rcall	.-152    	; 0x196 <can_controller_write>
	can_controller_write(MCP_EFLG, 0x00);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	8d e2       	ldi	r24, 0x2D	; 45
 232:	b1 df       	rcall	.-158    	; 0x196 <can_controller_write>
	sei();									//enable Global Interrupt
 234:	78 94       	sei
 236:	08 95       	ret

00000238 <can_send_msg>:
}

uint8_t can_send_msg(can_message* msg)
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
	//writhe higher id
	can_controller_write(MCP_TXB0SIDH, msg->id);
 242:	68 81       	ld	r22, Y
 244:	81 e3       	ldi	r24, 0x31	; 49
 246:	a7 df       	rcall	.-178    	; 0x196 <can_controller_write>
	
	// Define data length of message
	uint8_t data_length = msg->length;
 248:	09 81       	ldd	r16, Y+1	; 0x01
	can_controller_write(MCP_TXB0DLC, msg->length);
 24a:	60 2f       	mov	r22, r16
 24c:	85 e3       	ldi	r24, 0x35	; 53
 24e:	a3 df       	rcall	.-186    	; 0x196 <can_controller_write>
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
 250:	22 96       	adiw	r28, 0x02	; 2
	for (uint8_t byte = 0; byte < data_length; byte++) {
 252:	00 23       	and	r16, r16
 254:	41 f0       	breq	.+16     	; 0x266 <can_send_msg+0x2e>
 256:	0a 5c       	subi	r16, 0xCA	; 202
 258:	16 e3       	ldi	r17, 0x36	; 54
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
 25a:	69 91       	ld	r22, Y+
 25c:	81 2f       	mov	r24, r17
 25e:	9b df       	rcall	.-202    	; 0x196 <can_controller_write>
 260:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = msg->length;
	can_controller_write(MCP_TXB0DLC, msg->length);
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
 262:	10 13       	cpse	r17, r16
 264:	fa cf       	rjmp	.-12     	; 0x25a <can_send_msg+0x22>
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
	}

	// Request to send message, send if successful
	can_controller_request_to_send();
 266:	74 df       	rcall	.-280    	; 0x150 <can_controller_request_to_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	80 e7       	ldi	r24, 0x70	; 112
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <can_send_msg+0x36>
 276:	00 c0       	rjmp	.+0      	; 0x278 <can_send_msg+0x40>
 278:	00 00       	nop
	// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE));
	// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF));
	// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
	// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	eb 01       	movw	r28, r22

	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
 28e:	18 2f       	mov	r17, r24
 290:	12 95       	swap	r17
 292:	10 7f       	andi	r17, 0xF0	; 240
 294:	81 e6       	ldi	r24, 0x61	; 97
 296:	81 0f       	add	r24, r17
 298:	50 df       	rcall	.-352    	; 0x13a <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
 29a:	85 e6       	ldi	r24, 0x65	; 101
 29c:	81 0f       	add	r24, r17
 29e:	4d df       	rcall	.-358    	; 0x13a <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
 2a0:	98 2f       	mov	r25, r24
 2a2:	9f 70       	andi	r25, 0x0F	; 15
 2a4:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 2a6:	88 23       	and	r24, r24
 2a8:	51 f0       	breq	.+20     	; 0x2be <can_recieve_msg+0x3a>
 2aa:	1a 59       	subi	r17, 0x9A	; 154
 2ac:	22 96       	adiw	r28, 0x02	; 2
 2ae:	08 2f       	mov	r16, r24
 2b0:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
 2b2:	81 2f       	mov	r24, r17
 2b4:	42 df       	rcall	.-380    	; 0x13a <can_controller_read>
 2b6:	89 93       	st	Y+, r24
 2b8:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 2ba:	10 13       	cpse	r17, r16
 2bc:	fa cf       	rjmp	.-12     	; 0x2b2 <can_recieve_msg+0x2e>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}
	//can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
// 	can_controller_write(MCP_CANINTF, 0x00);
// 	can_controller_write(MCP_EFLG, 0x00);
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	08 95       	ret

000002c8 <__vector_1>:
#include "can_controller_driver.h"
#include "usart_driver.h"


ISR(INT0_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	0b b6       	in	r0, 0x3b	; 59
 2d4:	0f 92       	push	r0
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
	cli();
 2f8:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 2fa:	8a e0       	ldi	r24, 0x0A	; 10
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	da d0       	rcall	.+436    	; 0x4b4 <malloc>
 300:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	//printf("message INTERRUPTION recieved\n\r");
	//print(my_buf);
	uint8_t canInt = can_controller_read(MCP_CANINTF);
 302:	8c e2       	ldi	r24, 0x2C	; 44
 304:	1a df       	rcall	.-460    	; 0x13a <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
 306:	80 ff       	sbrs	r24, 0
 308:	36 c0       	rjmp	.+108    	; 0x376 <__vector_1+0xae>
	{
		can_recieve_msg(0, msg);
 30a:	be 01       	movw	r22, r28
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	ba df       	rcall	.-140    	; 0x284 <can_recieve_msg>
		
		printf("X:\tY:\tLeft:\tRight:\tDirection:\n\r");
 310:	8c e7       	ldi	r24, 0x7C	; 124
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	3e d2       	rcall	.+1148   	; 0x796 <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	88 23       	and	r24, r24
 322:	c1 f0       	breq	.+48     	; 0x354 <__vector_1+0x8c>
 324:	f1 2c       	mov	r15, r1
			printf("%d \t", (int8_t) msg->data[byte]);
 326:	0c e9       	ldi	r16, 0x9C	; 156
 328:	12 e0       	ldi	r17, 0x02	; 2
 32a:	fe 01       	movw	r30, r28
 32c:	ef 0d       	add	r30, r15
 32e:	f1 1d       	adc	r31, r1
 330:	22 81       	ldd	r18, Z+2	; 0x02
 332:	82 2f       	mov	r24, r18
 334:	99 27       	eor	r25, r25
 336:	87 fd       	sbrc	r24, 7
 338:	90 95       	com	r25
 33a:	9f 93       	push	r25
 33c:	2f 93       	push	r18
 33e:	1f 93       	push	r17
 340:	0f 93       	push	r16
 342:	29 d2       	rcall	.+1106   	; 0x796 <printf>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
	{
		can_recieve_msg(0, msg);
		
		printf("X:\tY:\tLeft:\tRight:\tDirection:\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 344:	f3 94       	inc	r15
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	f8 16       	cp	r15, r24
 352:	58 f3       	brcs	.-42     	; 0x32a <__vector_1+0x62>
			printf("%d \t", (int8_t) msg->data[byte]);
		}
		printf("\n\r");
 354:	87 eb       	ldi	r24, 0xB7	; 183
 356:	92 e0       	ldi	r25, 0x02	; 2
 358:	9f 93       	push	r25
 35a:	8f 93       	push	r24
 35c:	1c d2       	rcall	.+1080   	; 0x796 <printf>
		can_controller_write(MCP_CANINTF, 0x00);
		sei();
		return;
	}
	//printf("before:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	can_controller_write(MCP_CANINTF, 0x00);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	8c e2       	ldi	r24, 0x2C	; 44
 362:	19 df       	rcall	.-462    	; 0x196 <can_controller_write>
	//can_controller_write(MCP_EFLG, 0x00);
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
 364:	ce 01       	movw	r24, r28
 366:	3e d1       	rcall	.+636    	; 0x5e4 <free>
	can_controller_write(MCP_CANINTF, 0x00);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	8c e2       	ldi	r24, 0x2C	; 44
 36c:	14 df       	rcall	.-472    	; 0x196 <can_controller_write>
	sei();
 36e:	78 94       	sei
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	09 c0       	rjmp	.+18     	; 0x388 <__vector_1+0xc0>
// 			printf("%d \n\r", msg->data[byte]);
// 		}
// 	}
	else
	{
		can_controller_write(MCP_CANINTF, 0x00);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	8c e2       	ldi	r24, 0x2C	; 44
 37a:	0d df       	rcall	.-486    	; 0x196 <can_controller_write>
		//can_controller_write(MCP_EFLG, 0x00);
		free(msg);
 37c:	ce 01       	movw	r24, r28
 37e:	32 d1       	rcall	.+612    	; 0x5e4 <free>
		can_controller_write(MCP_CANINTF, 0x00);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	8c e2       	ldi	r24, 0x2C	; 44
 384:	08 df       	rcall	.-496    	; 0x196 <can_controller_write>
		sei();
 386:	78 94       	sei
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
	can_controller_write(MCP_CANINTF, 0x00);
	sei();
}
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	0f 90       	pop	r0
 3ac:	0b be       	out	0x3b, r0	; 59
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <can_driver_test>:
// 	can_controller_write(MCP_CANINTF, 0x00);
// 	can_controller_write(MCP_EFLG, 0x00);
}

void can_driver_test()
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	2a 97       	sbiw	r28, 0x0a	; 10
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	printf("enter can driver test \n\r");
 3cc:	81 ea       	ldi	r24, 0xA1	; 161
 3ce:	92 e0       	ldi	r25, 0x02	; 2
 3d0:	9f 93       	push	r25
 3d2:	8f 93       	push	r24
 3d4:	e0 d1       	rcall	.+960    	; 0x796 <printf>
	msg.id = 1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	89 83       	std	Y+1, r24	; 0x01
	msg.data[0] = 25;
 3da:	89 e1       	ldi	r24, 0x19	; 25
 3dc:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[1] = 38;
 3de:	86 e2       	ldi	r24, 0x26	; 38
 3e0:	8c 83       	std	Y+4, r24	; 0x04
	msg.data[2] = 95;
 3e2:	8f e5       	ldi	r24, 0x5F	; 95
 3e4:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 3;
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	8a 83       	std	Y+2, r24	; 0x02
	can_send_msg(&msg);
 3ea:	ce 01       	movw	r24, r28
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	24 df       	rcall	.-440    	; 0x238 <can_send_msg>
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	81 ee       	ldi	r24, 0xE1	; 225
 3f4:	94 e0       	ldi	r25, 0x04	; 4
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <can_driver_test+0x3e>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <can_driver_test+0x48>
 400:	00 00       	nop
	
	_delay_ms(100);
	
	msg.id = 5;
 402:	85 e0       	ldi	r24, 0x05	; 5
 404:	89 83       	std	Y+1, r24	; 0x01
	msg.data[0] = 72;
 406:	88 e4       	ldi	r24, 0x48	; 72
 408:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[1] = 58;
 40a:	8a e3       	ldi	r24, 0x3A	; 58
 40c:	8c 83       	std	Y+4, r24	; 0x04

	msg.length = 2;
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	8a 83       	std	Y+2, r24	; 0x02
	can_send_msg(&msg);
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	10 df       	rcall	.-480    	; 0x238 <can_send_msg>
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
// 		can_send_msg(&msg);
// 	
// 		_delay_ms(3000);
// 	}

}
 41c:	2a 96       	adiw	r28, 0x0a	; 10
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <main>:
#include "can_controller_driver.h"
#include "can_driver.h"

int main(void)
{
	USART_Init(MYUBRR);
 42e:	87 e6       	ldi	r24, 0x67	; 103
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	30 d0       	rcall	.+96     	; 0x494 <USART_Init>
	spi_init();
 434:	17 d0       	rcall	.+46     	; 0x464 <spi_init>
	can_controller_init();
 436:	be de       	rcall	.-644    	; 0x1b4 <can_controller_init>
	can_init();
 438:	e2 de       	rcall	.-572    	; 0x1fe <can_init>
	
	printf("Hello from node 2!\n\r");
 43a:	8a eb       	ldi	r24, 0xBA	; 186
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	9f 93       	push	r25
 440:	8f 93       	push	r24
 442:	a9 d1       	rcall	.+850    	; 0x796 <printf>

	can_driver_test();
 444:	b9 df       	rcall	.-142    	; 0x3b8 <can_driver_test>
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	ff cf       	rjmp	.-2      	; 0x44a <main+0x1c>

0000044c <SPI_MasterInit>:
 44c:	84 b1       	in	r24, 0x04	; 4
 44e:	87 68       	ori	r24, 0x87	; 135
 450:	84 b9       	out	0x04, r24	; 4
 452:	23 98       	cbi	0x04, 3	; 4
 454:	81 e5       	ldi	r24, 0x51	; 81
 456:	8c bd       	out	0x2c, r24	; 44
 458:	08 95       	ret

0000045a <SPI_MasterTransmit>:
 45a:	8e bd       	out	0x2e, r24	; 46
 45c:	0d b4       	in	r0, 0x2d	; 45
 45e:	07 fe       	sbrs	r0, 7
 460:	fd cf       	rjmp	.-6      	; 0x45c <SPI_MasterTransmit+0x2>
 462:	08 95       	ret

00000464 <spi_init>:
 464:	f3 cf       	rjmp	.-26     	; 0x44c <SPI_MasterInit>
 466:	08 95       	ret

00000468 <spi_send>:
 468:	f8 cf       	rjmp	.-16     	; 0x45a <SPI_MasterTransmit>
 46a:	08 95       	ret

0000046c <spi_read>:
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	f5 df       	rcall	.-22     	; 0x45a <SPI_MasterTransmit>
 470:	8e b5       	in	r24, 0x2e	; 46
 472:	08 95       	ret

00000474 <USART_Transmit>:
 474:	e0 ec       	ldi	r30, 0xC0	; 192
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	90 81       	ld	r25, Z
 47a:	95 ff       	sbrs	r25, 5
 47c:	fd cf       	rjmp	.-6      	; 0x478 <USART_Transmit+0x4>
 47e:	80 93 c6 00 	sts	0x00C6, r24
 482:	08 95       	ret

00000484 <USART_Receive>:
 484:	e0 ec       	ldi	r30, 0xC0	; 192
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	88 23       	and	r24, r24
 48c:	ec f7       	brge	.-6      	; 0x488 <USART_Receive+0x4>
 48e:	80 91 c6 00 	lds	r24, 0x00C6
 492:	08 95       	ret

00000494 <USART_Init>:
 494:	90 93 c5 00 	sts	0x00C5, r25
 498:	80 93 c4 00 	sts	0x00C4, r24
 49c:	88 e1       	ldi	r24, 0x18	; 24
 49e:	80 93 c1 00 	sts	0x00C1, r24
 4a2:	8e e0       	ldi	r24, 0x0E	; 14
 4a4:	80 93 c2 00 	sts	0x00C2, r24
 4a8:	62 e4       	ldi	r22, 0x42	; 66
 4aa:	72 e0       	ldi	r23, 0x02	; 2
 4ac:	8a e3       	ldi	r24, 0x3A	; 58
 4ae:	92 e0       	ldi	r25, 0x02	; 2
 4b0:	28 c1       	rjmp	.+592    	; 0x702 <fdevopen>
 4b2:	08 95       	ret

000004b4 <malloc>:
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	91 05       	cpc	r25, r1
 4bc:	10 f4       	brcc	.+4      	; 0x4c2 <malloc+0xe>
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	e0 91 d2 02 	lds	r30, 0x02D2
 4c6:	f0 91 d3 02 	lds	r31, 0x02D3
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	a0 e0       	ldi	r26, 0x00	; 0
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	30 97       	sbiw	r30, 0x00	; 0
 4d4:	39 f1       	breq	.+78     	; 0x524 <malloc+0x70>
 4d6:	40 81       	ld	r20, Z
 4d8:	51 81       	ldd	r21, Z+1	; 0x01
 4da:	48 17       	cp	r20, r24
 4dc:	59 07       	cpc	r21, r25
 4de:	b8 f0       	brcs	.+46     	; 0x50e <malloc+0x5a>
 4e0:	48 17       	cp	r20, r24
 4e2:	59 07       	cpc	r21, r25
 4e4:	71 f4       	brne	.+28     	; 0x502 <malloc+0x4e>
 4e6:	82 81       	ldd	r24, Z+2	; 0x02
 4e8:	93 81       	ldd	r25, Z+3	; 0x03
 4ea:	10 97       	sbiw	r26, 0x00	; 0
 4ec:	29 f0       	breq	.+10     	; 0x4f8 <malloc+0x44>
 4ee:	13 96       	adiw	r26, 0x03	; 3
 4f0:	9c 93       	st	X, r25
 4f2:	8e 93       	st	-X, r24
 4f4:	12 97       	sbiw	r26, 0x02	; 2
 4f6:	2c c0       	rjmp	.+88     	; 0x550 <malloc+0x9c>
 4f8:	90 93 d3 02 	sts	0x02D3, r25
 4fc:	80 93 d2 02 	sts	0x02D2, r24
 500:	27 c0       	rjmp	.+78     	; 0x550 <malloc+0x9c>
 502:	21 15       	cp	r18, r1
 504:	31 05       	cpc	r19, r1
 506:	31 f0       	breq	.+12     	; 0x514 <malloc+0x60>
 508:	42 17       	cp	r20, r18
 50a:	53 07       	cpc	r21, r19
 50c:	18 f0       	brcs	.+6      	; 0x514 <malloc+0x60>
 50e:	a9 01       	movw	r20, r18
 510:	db 01       	movw	r26, r22
 512:	01 c0       	rjmp	.+2      	; 0x516 <malloc+0x62>
 514:	ef 01       	movw	r28, r30
 516:	9a 01       	movw	r18, r20
 518:	bd 01       	movw	r22, r26
 51a:	df 01       	movw	r26, r30
 51c:	02 80       	ldd	r0, Z+2	; 0x02
 51e:	f3 81       	ldd	r31, Z+3	; 0x03
 520:	e0 2d       	mov	r30, r0
 522:	d7 cf       	rjmp	.-82     	; 0x4d2 <malloc+0x1e>
 524:	21 15       	cp	r18, r1
 526:	31 05       	cpc	r19, r1
 528:	f9 f0       	breq	.+62     	; 0x568 <malloc+0xb4>
 52a:	28 1b       	sub	r18, r24
 52c:	39 0b       	sbc	r19, r25
 52e:	24 30       	cpi	r18, 0x04	; 4
 530:	31 05       	cpc	r19, r1
 532:	80 f4       	brcc	.+32     	; 0x554 <malloc+0xa0>
 534:	8a 81       	ldd	r24, Y+2	; 0x02
 536:	9b 81       	ldd	r25, Y+3	; 0x03
 538:	61 15       	cp	r22, r1
 53a:	71 05       	cpc	r23, r1
 53c:	21 f0       	breq	.+8      	; 0x546 <malloc+0x92>
 53e:	fb 01       	movw	r30, r22
 540:	93 83       	std	Z+3, r25	; 0x03
 542:	82 83       	std	Z+2, r24	; 0x02
 544:	04 c0       	rjmp	.+8      	; 0x54e <malloc+0x9a>
 546:	90 93 d3 02 	sts	0x02D3, r25
 54a:	80 93 d2 02 	sts	0x02D2, r24
 54e:	fe 01       	movw	r30, r28
 550:	32 96       	adiw	r30, 0x02	; 2
 552:	44 c0       	rjmp	.+136    	; 0x5dc <malloc+0x128>
 554:	fe 01       	movw	r30, r28
 556:	e2 0f       	add	r30, r18
 558:	f3 1f       	adc	r31, r19
 55a:	81 93       	st	Z+, r24
 55c:	91 93       	st	Z+, r25
 55e:	22 50       	subi	r18, 0x02	; 2
 560:	31 09       	sbc	r19, r1
 562:	39 83       	std	Y+1, r19	; 0x01
 564:	28 83       	st	Y, r18
 566:	3a c0       	rjmp	.+116    	; 0x5dc <malloc+0x128>
 568:	20 91 d0 02 	lds	r18, 0x02D0
 56c:	30 91 d1 02 	lds	r19, 0x02D1
 570:	23 2b       	or	r18, r19
 572:	41 f4       	brne	.+16     	; 0x584 <malloc+0xd0>
 574:	20 91 02 02 	lds	r18, 0x0202
 578:	30 91 03 02 	lds	r19, 0x0203
 57c:	30 93 d1 02 	sts	0x02D1, r19
 580:	20 93 d0 02 	sts	0x02D0, r18
 584:	20 91 00 02 	lds	r18, 0x0200
 588:	30 91 01 02 	lds	r19, 0x0201
 58c:	21 15       	cp	r18, r1
 58e:	31 05       	cpc	r19, r1
 590:	41 f4       	brne	.+16     	; 0x5a2 <malloc+0xee>
 592:	2d b7       	in	r18, 0x3d	; 61
 594:	3e b7       	in	r19, 0x3e	; 62
 596:	40 91 04 02 	lds	r20, 0x0204
 59a:	50 91 05 02 	lds	r21, 0x0205
 59e:	24 1b       	sub	r18, r20
 5a0:	35 0b       	sbc	r19, r21
 5a2:	e0 91 d0 02 	lds	r30, 0x02D0
 5a6:	f0 91 d1 02 	lds	r31, 0x02D1
 5aa:	e2 17       	cp	r30, r18
 5ac:	f3 07       	cpc	r31, r19
 5ae:	a0 f4       	brcc	.+40     	; 0x5d8 <malloc+0x124>
 5b0:	2e 1b       	sub	r18, r30
 5b2:	3f 0b       	sbc	r19, r31
 5b4:	28 17       	cp	r18, r24
 5b6:	39 07       	cpc	r19, r25
 5b8:	78 f0       	brcs	.+30     	; 0x5d8 <malloc+0x124>
 5ba:	ac 01       	movw	r20, r24
 5bc:	4e 5f       	subi	r20, 0xFE	; 254
 5be:	5f 4f       	sbci	r21, 0xFF	; 255
 5c0:	24 17       	cp	r18, r20
 5c2:	35 07       	cpc	r19, r21
 5c4:	48 f0       	brcs	.+18     	; 0x5d8 <malloc+0x124>
 5c6:	4e 0f       	add	r20, r30
 5c8:	5f 1f       	adc	r21, r31
 5ca:	50 93 d1 02 	sts	0x02D1, r21
 5ce:	40 93 d0 02 	sts	0x02D0, r20
 5d2:	81 93       	st	Z+, r24
 5d4:	91 93       	st	Z+, r25
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <malloc+0x128>
 5d8:	e0 e0       	ldi	r30, 0x00	; 0
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	cf 01       	movw	r24, r30
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <free>:
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	00 97       	sbiw	r24, 0x00	; 0
 5ea:	09 f4       	brne	.+2      	; 0x5ee <free+0xa>
 5ec:	87 c0       	rjmp	.+270    	; 0x6fc <free+0x118>
 5ee:	fc 01       	movw	r30, r24
 5f0:	32 97       	sbiw	r30, 0x02	; 2
 5f2:	13 82       	std	Z+3, r1	; 0x03
 5f4:	12 82       	std	Z+2, r1	; 0x02
 5f6:	c0 91 d2 02 	lds	r28, 0x02D2
 5fa:	d0 91 d3 02 	lds	r29, 0x02D3
 5fe:	20 97       	sbiw	r28, 0x00	; 0
 600:	81 f4       	brne	.+32     	; 0x622 <free+0x3e>
 602:	20 81       	ld	r18, Z
 604:	31 81       	ldd	r19, Z+1	; 0x01
 606:	28 0f       	add	r18, r24
 608:	39 1f       	adc	r19, r25
 60a:	80 91 d0 02 	lds	r24, 0x02D0
 60e:	90 91 d1 02 	lds	r25, 0x02D1
 612:	82 17       	cp	r24, r18
 614:	93 07       	cpc	r25, r19
 616:	79 f5       	brne	.+94     	; 0x676 <free+0x92>
 618:	f0 93 d1 02 	sts	0x02D1, r31
 61c:	e0 93 d0 02 	sts	0x02D0, r30
 620:	6d c0       	rjmp	.+218    	; 0x6fc <free+0x118>
 622:	de 01       	movw	r26, r28
 624:	20 e0       	ldi	r18, 0x00	; 0
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	ae 17       	cp	r26, r30
 62a:	bf 07       	cpc	r27, r31
 62c:	50 f4       	brcc	.+20     	; 0x642 <free+0x5e>
 62e:	12 96       	adiw	r26, 0x02	; 2
 630:	4d 91       	ld	r20, X+
 632:	5c 91       	ld	r21, X
 634:	13 97       	sbiw	r26, 0x03	; 3
 636:	9d 01       	movw	r18, r26
 638:	41 15       	cp	r20, r1
 63a:	51 05       	cpc	r21, r1
 63c:	09 f1       	breq	.+66     	; 0x680 <free+0x9c>
 63e:	da 01       	movw	r26, r20
 640:	f3 cf       	rjmp	.-26     	; 0x628 <free+0x44>
 642:	b3 83       	std	Z+3, r27	; 0x03
 644:	a2 83       	std	Z+2, r26	; 0x02
 646:	40 81       	ld	r20, Z
 648:	51 81       	ldd	r21, Z+1	; 0x01
 64a:	84 0f       	add	r24, r20
 64c:	95 1f       	adc	r25, r21
 64e:	8a 17       	cp	r24, r26
 650:	9b 07       	cpc	r25, r27
 652:	71 f4       	brne	.+28     	; 0x670 <free+0x8c>
 654:	8d 91       	ld	r24, X+
 656:	9c 91       	ld	r25, X
 658:	11 97       	sbiw	r26, 0x01	; 1
 65a:	84 0f       	add	r24, r20
 65c:	95 1f       	adc	r25, r21
 65e:	02 96       	adiw	r24, 0x02	; 2
 660:	91 83       	std	Z+1, r25	; 0x01
 662:	80 83       	st	Z, r24
 664:	12 96       	adiw	r26, 0x02	; 2
 666:	8d 91       	ld	r24, X+
 668:	9c 91       	ld	r25, X
 66a:	13 97       	sbiw	r26, 0x03	; 3
 66c:	93 83       	std	Z+3, r25	; 0x03
 66e:	82 83       	std	Z+2, r24	; 0x02
 670:	21 15       	cp	r18, r1
 672:	31 05       	cpc	r19, r1
 674:	29 f4       	brne	.+10     	; 0x680 <free+0x9c>
 676:	f0 93 d3 02 	sts	0x02D3, r31
 67a:	e0 93 d2 02 	sts	0x02D2, r30
 67e:	3e c0       	rjmp	.+124    	; 0x6fc <free+0x118>
 680:	d9 01       	movw	r26, r18
 682:	13 96       	adiw	r26, 0x03	; 3
 684:	fc 93       	st	X, r31
 686:	ee 93       	st	-X, r30
 688:	12 97       	sbiw	r26, 0x02	; 2
 68a:	4d 91       	ld	r20, X+
 68c:	5d 91       	ld	r21, X+
 68e:	a4 0f       	add	r26, r20
 690:	b5 1f       	adc	r27, r21
 692:	ea 17       	cp	r30, r26
 694:	fb 07       	cpc	r31, r27
 696:	79 f4       	brne	.+30     	; 0x6b6 <free+0xd2>
 698:	80 81       	ld	r24, Z
 69a:	91 81       	ldd	r25, Z+1	; 0x01
 69c:	84 0f       	add	r24, r20
 69e:	95 1f       	adc	r25, r21
 6a0:	02 96       	adiw	r24, 0x02	; 2
 6a2:	d9 01       	movw	r26, r18
 6a4:	11 96       	adiw	r26, 0x01	; 1
 6a6:	9c 93       	st	X, r25
 6a8:	8e 93       	st	-X, r24
 6aa:	82 81       	ldd	r24, Z+2	; 0x02
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	13 96       	adiw	r26, 0x03	; 3
 6b0:	9c 93       	st	X, r25
 6b2:	8e 93       	st	-X, r24
 6b4:	12 97       	sbiw	r26, 0x02	; 2
 6b6:	e0 e0       	ldi	r30, 0x00	; 0
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	8a 81       	ldd	r24, Y+2	; 0x02
 6bc:	9b 81       	ldd	r25, Y+3	; 0x03
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <free+0xe4>
 6c2:	fe 01       	movw	r30, r28
 6c4:	ec 01       	movw	r28, r24
 6c6:	f9 cf       	rjmp	.-14     	; 0x6ba <free+0xd6>
 6c8:	ce 01       	movw	r24, r28
 6ca:	02 96       	adiw	r24, 0x02	; 2
 6cc:	28 81       	ld	r18, Y
 6ce:	39 81       	ldd	r19, Y+1	; 0x01
 6d0:	82 0f       	add	r24, r18
 6d2:	93 1f       	adc	r25, r19
 6d4:	20 91 d0 02 	lds	r18, 0x02D0
 6d8:	30 91 d1 02 	lds	r19, 0x02D1
 6dc:	28 17       	cp	r18, r24
 6de:	39 07       	cpc	r19, r25
 6e0:	69 f4       	brne	.+26     	; 0x6fc <free+0x118>
 6e2:	30 97       	sbiw	r30, 0x00	; 0
 6e4:	29 f4       	brne	.+10     	; 0x6f0 <free+0x10c>
 6e6:	10 92 d3 02 	sts	0x02D3, r1
 6ea:	10 92 d2 02 	sts	0x02D2, r1
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <free+0x110>
 6f0:	13 82       	std	Z+3, r1	; 0x03
 6f2:	12 82       	std	Z+2, r1	; 0x02
 6f4:	d0 93 d1 02 	sts	0x02D1, r29
 6f8:	c0 93 d0 02 	sts	0x02D0, r28
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <fdevopen>:
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	ec 01       	movw	r28, r24
 70c:	8b 01       	movw	r16, r22
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	31 f4       	brne	.+12     	; 0x71e <fdevopen+0x1c>
 712:	61 15       	cp	r22, r1
 714:	71 05       	cpc	r23, r1
 716:	19 f4       	brne	.+6      	; 0x71e <fdevopen+0x1c>
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	37 c0       	rjmp	.+110    	; 0x78c <fdevopen+0x8a>
 71e:	6e e0       	ldi	r22, 0x0E	; 14
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	36 d2       	rcall	.+1132   	; 0xb94 <calloc>
 728:	fc 01       	movw	r30, r24
 72a:	00 97       	sbiw	r24, 0x00	; 0
 72c:	a9 f3       	breq	.-22     	; 0x718 <fdevopen+0x16>
 72e:	80 e8       	ldi	r24, 0x80	; 128
 730:	83 83       	std	Z+3, r24	; 0x03
 732:	01 15       	cp	r16, r1
 734:	11 05       	cpc	r17, r1
 736:	71 f0       	breq	.+28     	; 0x754 <fdevopen+0x52>
 738:	13 87       	std	Z+11, r17	; 0x0b
 73a:	02 87       	std	Z+10, r16	; 0x0a
 73c:	81 e8       	ldi	r24, 0x81	; 129
 73e:	83 83       	std	Z+3, r24	; 0x03
 740:	80 91 d4 02 	lds	r24, 0x02D4
 744:	90 91 d5 02 	lds	r25, 0x02D5
 748:	89 2b       	or	r24, r25
 74a:	21 f4       	brne	.+8      	; 0x754 <fdevopen+0x52>
 74c:	f0 93 d5 02 	sts	0x02D5, r31
 750:	e0 93 d4 02 	sts	0x02D4, r30
 754:	20 97       	sbiw	r28, 0x00	; 0
 756:	c9 f0       	breq	.+50     	; 0x78a <fdevopen+0x88>
 758:	d1 87       	std	Z+9, r29	; 0x09
 75a:	c0 87       	std	Z+8, r28	; 0x08
 75c:	83 81       	ldd	r24, Z+3	; 0x03
 75e:	82 60       	ori	r24, 0x02	; 2
 760:	83 83       	std	Z+3, r24	; 0x03
 762:	80 91 d6 02 	lds	r24, 0x02D6
 766:	90 91 d7 02 	lds	r25, 0x02D7
 76a:	89 2b       	or	r24, r25
 76c:	71 f4       	brne	.+28     	; 0x78a <fdevopen+0x88>
 76e:	f0 93 d7 02 	sts	0x02D7, r31
 772:	e0 93 d6 02 	sts	0x02D6, r30
 776:	80 91 d8 02 	lds	r24, 0x02D8
 77a:	90 91 d9 02 	lds	r25, 0x02D9
 77e:	89 2b       	or	r24, r25
 780:	21 f4       	brne	.+8      	; 0x78a <fdevopen+0x88>
 782:	f0 93 d9 02 	sts	0x02D9, r31
 786:	e0 93 d8 02 	sts	0x02D8, r30
 78a:	cf 01       	movw	r24, r30
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	08 95       	ret

00000796 <printf>:
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	fe 01       	movw	r30, r28
 7a0:	36 96       	adiw	r30, 0x06	; 6
 7a2:	61 91       	ld	r22, Z+
 7a4:	71 91       	ld	r23, Z+
 7a6:	af 01       	movw	r20, r30
 7a8:	80 91 d6 02 	lds	r24, 0x02D6
 7ac:	90 91 d7 02 	lds	r25, 0x02D7
 7b0:	03 d0       	rcall	.+6      	; 0x7b8 <vfprintf>
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <vfprintf>:
 7b8:	2f 92       	push	r2
 7ba:	3f 92       	push	r3
 7bc:	4f 92       	push	r4
 7be:	5f 92       	push	r5
 7c0:	6f 92       	push	r6
 7c2:	7f 92       	push	r7
 7c4:	8f 92       	push	r8
 7c6:	9f 92       	push	r9
 7c8:	af 92       	push	r10
 7ca:	bf 92       	push	r11
 7cc:	cf 92       	push	r12
 7ce:	df 92       	push	r13
 7d0:	ef 92       	push	r14
 7d2:	ff 92       	push	r15
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62
 7e0:	2c 97       	sbiw	r28, 0x0c	; 12
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	7c 01       	movw	r14, r24
 7ee:	6b 01       	movw	r12, r22
 7f0:	8a 01       	movw	r16, r20
 7f2:	fc 01       	movw	r30, r24
 7f4:	17 82       	std	Z+7, r1	; 0x07
 7f6:	16 82       	std	Z+6, r1	; 0x06
 7f8:	83 81       	ldd	r24, Z+3	; 0x03
 7fa:	81 ff       	sbrs	r24, 1
 7fc:	b0 c1       	rjmp	.+864    	; 0xb5e <vfprintf+0x3a6>
 7fe:	ce 01       	movw	r24, r28
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	4c 01       	movw	r8, r24
 804:	f7 01       	movw	r30, r14
 806:	93 81       	ldd	r25, Z+3	; 0x03
 808:	f6 01       	movw	r30, r12
 80a:	93 fd       	sbrc	r25, 3
 80c:	85 91       	lpm	r24, Z+
 80e:	93 ff       	sbrs	r25, 3
 810:	81 91       	ld	r24, Z+
 812:	6f 01       	movw	r12, r30
 814:	88 23       	and	r24, r24
 816:	09 f4       	brne	.+2      	; 0x81a <vfprintf+0x62>
 818:	9e c1       	rjmp	.+828    	; 0xb56 <vfprintf+0x39e>
 81a:	85 32       	cpi	r24, 0x25	; 37
 81c:	39 f4       	brne	.+14     	; 0x82c <vfprintf+0x74>
 81e:	93 fd       	sbrc	r25, 3
 820:	85 91       	lpm	r24, Z+
 822:	93 ff       	sbrs	r25, 3
 824:	81 91       	ld	r24, Z+
 826:	6f 01       	movw	r12, r30
 828:	85 32       	cpi	r24, 0x25	; 37
 82a:	21 f4       	brne	.+8      	; 0x834 <vfprintf+0x7c>
 82c:	b7 01       	movw	r22, r14
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	e8 d1       	rcall	.+976    	; 0xc02 <fputc>
 832:	e8 cf       	rjmp	.-48     	; 0x804 <vfprintf+0x4c>
 834:	51 2c       	mov	r5, r1
 836:	31 2c       	mov	r3, r1
 838:	20 e0       	ldi	r18, 0x00	; 0
 83a:	20 32       	cpi	r18, 0x20	; 32
 83c:	a0 f4       	brcc	.+40     	; 0x866 <vfprintf+0xae>
 83e:	8b 32       	cpi	r24, 0x2B	; 43
 840:	69 f0       	breq	.+26     	; 0x85c <vfprintf+0xa4>
 842:	30 f4       	brcc	.+12     	; 0x850 <vfprintf+0x98>
 844:	80 32       	cpi	r24, 0x20	; 32
 846:	59 f0       	breq	.+22     	; 0x85e <vfprintf+0xa6>
 848:	83 32       	cpi	r24, 0x23	; 35
 84a:	69 f4       	brne	.+26     	; 0x866 <vfprintf+0xae>
 84c:	20 61       	ori	r18, 0x10	; 16
 84e:	2c c0       	rjmp	.+88     	; 0x8a8 <vfprintf+0xf0>
 850:	8d 32       	cpi	r24, 0x2D	; 45
 852:	39 f0       	breq	.+14     	; 0x862 <vfprintf+0xaa>
 854:	80 33       	cpi	r24, 0x30	; 48
 856:	39 f4       	brne	.+14     	; 0x866 <vfprintf+0xae>
 858:	21 60       	ori	r18, 0x01	; 1
 85a:	26 c0       	rjmp	.+76     	; 0x8a8 <vfprintf+0xf0>
 85c:	22 60       	ori	r18, 0x02	; 2
 85e:	24 60       	ori	r18, 0x04	; 4
 860:	23 c0       	rjmp	.+70     	; 0x8a8 <vfprintf+0xf0>
 862:	28 60       	ori	r18, 0x08	; 8
 864:	21 c0       	rjmp	.+66     	; 0x8a8 <vfprintf+0xf0>
 866:	27 fd       	sbrc	r18, 7
 868:	27 c0       	rjmp	.+78     	; 0x8b8 <vfprintf+0x100>
 86a:	30 ed       	ldi	r19, 0xD0	; 208
 86c:	38 0f       	add	r19, r24
 86e:	3a 30       	cpi	r19, 0x0A	; 10
 870:	78 f4       	brcc	.+30     	; 0x890 <vfprintf+0xd8>
 872:	26 ff       	sbrs	r18, 6
 874:	06 c0       	rjmp	.+12     	; 0x882 <vfprintf+0xca>
 876:	fa e0       	ldi	r31, 0x0A	; 10
 878:	5f 9e       	mul	r5, r31
 87a:	30 0d       	add	r19, r0
 87c:	11 24       	eor	r1, r1
 87e:	53 2e       	mov	r5, r19
 880:	13 c0       	rjmp	.+38     	; 0x8a8 <vfprintf+0xf0>
 882:	8a e0       	ldi	r24, 0x0A	; 10
 884:	38 9e       	mul	r3, r24
 886:	30 0d       	add	r19, r0
 888:	11 24       	eor	r1, r1
 88a:	33 2e       	mov	r3, r19
 88c:	20 62       	ori	r18, 0x20	; 32
 88e:	0c c0       	rjmp	.+24     	; 0x8a8 <vfprintf+0xf0>
 890:	8e 32       	cpi	r24, 0x2E	; 46
 892:	21 f4       	brne	.+8      	; 0x89c <vfprintf+0xe4>
 894:	26 fd       	sbrc	r18, 6
 896:	5f c1       	rjmp	.+702    	; 0xb56 <vfprintf+0x39e>
 898:	20 64       	ori	r18, 0x40	; 64
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <vfprintf+0xf0>
 89c:	8c 36       	cpi	r24, 0x6C	; 108
 89e:	11 f4       	brne	.+4      	; 0x8a4 <vfprintf+0xec>
 8a0:	20 68       	ori	r18, 0x80	; 128
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0xf0>
 8a4:	88 36       	cpi	r24, 0x68	; 104
 8a6:	41 f4       	brne	.+16     	; 0x8b8 <vfprintf+0x100>
 8a8:	f6 01       	movw	r30, r12
 8aa:	93 fd       	sbrc	r25, 3
 8ac:	85 91       	lpm	r24, Z+
 8ae:	93 ff       	sbrs	r25, 3
 8b0:	81 91       	ld	r24, Z+
 8b2:	6f 01       	movw	r12, r30
 8b4:	81 11       	cpse	r24, r1
 8b6:	c1 cf       	rjmp	.-126    	; 0x83a <vfprintf+0x82>
 8b8:	98 2f       	mov	r25, r24
 8ba:	9f 7d       	andi	r25, 0xDF	; 223
 8bc:	95 54       	subi	r25, 0x45	; 69
 8be:	93 30       	cpi	r25, 0x03	; 3
 8c0:	28 f4       	brcc	.+10     	; 0x8cc <vfprintf+0x114>
 8c2:	0c 5f       	subi	r16, 0xFC	; 252
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	ff e3       	ldi	r31, 0x3F	; 63
 8c8:	f9 83       	std	Y+1, r31	; 0x01
 8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <vfprintf+0x12e>
 8cc:	83 36       	cpi	r24, 0x63	; 99
 8ce:	31 f0       	breq	.+12     	; 0x8dc <vfprintf+0x124>
 8d0:	83 37       	cpi	r24, 0x73	; 115
 8d2:	71 f0       	breq	.+28     	; 0x8f0 <vfprintf+0x138>
 8d4:	83 35       	cpi	r24, 0x53	; 83
 8d6:	09 f0       	breq	.+2      	; 0x8da <vfprintf+0x122>
 8d8:	57 c0       	rjmp	.+174    	; 0x988 <vfprintf+0x1d0>
 8da:	21 c0       	rjmp	.+66     	; 0x91e <vfprintf+0x166>
 8dc:	f8 01       	movw	r30, r16
 8de:	80 81       	ld	r24, Z
 8e0:	89 83       	std	Y+1, r24	; 0x01
 8e2:	0e 5f       	subi	r16, 0xFE	; 254
 8e4:	1f 4f       	sbci	r17, 0xFF	; 255
 8e6:	44 24       	eor	r4, r4
 8e8:	43 94       	inc	r4
 8ea:	51 2c       	mov	r5, r1
 8ec:	54 01       	movw	r10, r8
 8ee:	14 c0       	rjmp	.+40     	; 0x918 <vfprintf+0x160>
 8f0:	38 01       	movw	r6, r16
 8f2:	f2 e0       	ldi	r31, 0x02	; 2
 8f4:	6f 0e       	add	r6, r31
 8f6:	71 1c       	adc	r7, r1
 8f8:	f8 01       	movw	r30, r16
 8fa:	a0 80       	ld	r10, Z
 8fc:	b1 80       	ldd	r11, Z+1	; 0x01
 8fe:	26 ff       	sbrs	r18, 6
 900:	03 c0       	rjmp	.+6      	; 0x908 <vfprintf+0x150>
 902:	65 2d       	mov	r22, r5
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <vfprintf+0x154>
 908:	6f ef       	ldi	r22, 0xFF	; 255
 90a:	7f ef       	ldi	r23, 0xFF	; 255
 90c:	c5 01       	movw	r24, r10
 90e:	2c 87       	std	Y+12, r18	; 0x0c
 910:	6d d1       	rcall	.+730    	; 0xbec <strnlen>
 912:	2c 01       	movw	r4, r24
 914:	83 01       	movw	r16, r6
 916:	2c 85       	ldd	r18, Y+12	; 0x0c
 918:	2f 77       	andi	r18, 0x7F	; 127
 91a:	22 2e       	mov	r2, r18
 91c:	16 c0       	rjmp	.+44     	; 0x94a <vfprintf+0x192>
 91e:	38 01       	movw	r6, r16
 920:	f2 e0       	ldi	r31, 0x02	; 2
 922:	6f 0e       	add	r6, r31
 924:	71 1c       	adc	r7, r1
 926:	f8 01       	movw	r30, r16
 928:	a0 80       	ld	r10, Z
 92a:	b1 80       	ldd	r11, Z+1	; 0x01
 92c:	26 ff       	sbrs	r18, 6
 92e:	03 c0       	rjmp	.+6      	; 0x936 <vfprintf+0x17e>
 930:	65 2d       	mov	r22, r5
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	02 c0       	rjmp	.+4      	; 0x93a <vfprintf+0x182>
 936:	6f ef       	ldi	r22, 0xFF	; 255
 938:	7f ef       	ldi	r23, 0xFF	; 255
 93a:	c5 01       	movw	r24, r10
 93c:	2c 87       	std	Y+12, r18	; 0x0c
 93e:	44 d1       	rcall	.+648    	; 0xbc8 <strnlen_P>
 940:	2c 01       	movw	r4, r24
 942:	2c 85       	ldd	r18, Y+12	; 0x0c
 944:	20 68       	ori	r18, 0x80	; 128
 946:	22 2e       	mov	r2, r18
 948:	83 01       	movw	r16, r6
 94a:	23 fc       	sbrc	r2, 3
 94c:	19 c0       	rjmp	.+50     	; 0x980 <vfprintf+0x1c8>
 94e:	83 2d       	mov	r24, r3
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	48 16       	cp	r4, r24
 954:	59 06       	cpc	r5, r25
 956:	a0 f4       	brcc	.+40     	; 0x980 <vfprintf+0x1c8>
 958:	b7 01       	movw	r22, r14
 95a:	80 e2       	ldi	r24, 0x20	; 32
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	51 d1       	rcall	.+674    	; 0xc02 <fputc>
 960:	3a 94       	dec	r3
 962:	f5 cf       	rjmp	.-22     	; 0x94e <vfprintf+0x196>
 964:	f5 01       	movw	r30, r10
 966:	27 fc       	sbrc	r2, 7
 968:	85 91       	lpm	r24, Z+
 96a:	27 fe       	sbrs	r2, 7
 96c:	81 91       	ld	r24, Z+
 96e:	5f 01       	movw	r10, r30
 970:	b7 01       	movw	r22, r14
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	46 d1       	rcall	.+652    	; 0xc02 <fputc>
 976:	31 10       	cpse	r3, r1
 978:	3a 94       	dec	r3
 97a:	f1 e0       	ldi	r31, 0x01	; 1
 97c:	4f 1a       	sub	r4, r31
 97e:	51 08       	sbc	r5, r1
 980:	41 14       	cp	r4, r1
 982:	51 04       	cpc	r5, r1
 984:	79 f7       	brne	.-34     	; 0x964 <vfprintf+0x1ac>
 986:	de c0       	rjmp	.+444    	; 0xb44 <vfprintf+0x38c>
 988:	84 36       	cpi	r24, 0x64	; 100
 98a:	11 f0       	breq	.+4      	; 0x990 <vfprintf+0x1d8>
 98c:	89 36       	cpi	r24, 0x69	; 105
 98e:	31 f5       	brne	.+76     	; 0x9dc <vfprintf+0x224>
 990:	f8 01       	movw	r30, r16
 992:	27 ff       	sbrs	r18, 7
 994:	07 c0       	rjmp	.+14     	; 0x9a4 <vfprintf+0x1ec>
 996:	60 81       	ld	r22, Z
 998:	71 81       	ldd	r23, Z+1	; 0x01
 99a:	82 81       	ldd	r24, Z+2	; 0x02
 99c:	93 81       	ldd	r25, Z+3	; 0x03
 99e:	0c 5f       	subi	r16, 0xFC	; 252
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
 9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <vfprintf+0x1fc>
 9a4:	60 81       	ld	r22, Z
 9a6:	71 81       	ldd	r23, Z+1	; 0x01
 9a8:	88 27       	eor	r24, r24
 9aa:	77 fd       	sbrc	r23, 7
 9ac:	80 95       	com	r24
 9ae:	98 2f       	mov	r25, r24
 9b0:	0e 5f       	subi	r16, 0xFE	; 254
 9b2:	1f 4f       	sbci	r17, 0xFF	; 255
 9b4:	2f 76       	andi	r18, 0x6F	; 111
 9b6:	b2 2e       	mov	r11, r18
 9b8:	97 ff       	sbrs	r25, 7
 9ba:	09 c0       	rjmp	.+18     	; 0x9ce <vfprintf+0x216>
 9bc:	90 95       	com	r25
 9be:	80 95       	com	r24
 9c0:	70 95       	com	r23
 9c2:	61 95       	neg	r22
 9c4:	7f 4f       	sbci	r23, 0xFF	; 255
 9c6:	8f 4f       	sbci	r24, 0xFF	; 255
 9c8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ca:	20 68       	ori	r18, 0x80	; 128
 9cc:	b2 2e       	mov	r11, r18
 9ce:	2a e0       	ldi	r18, 0x0A	; 10
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	a4 01       	movw	r20, r8
 9d4:	48 d1       	rcall	.+656    	; 0xc66 <__ultoa_invert>
 9d6:	a8 2e       	mov	r10, r24
 9d8:	a8 18       	sub	r10, r8
 9da:	43 c0       	rjmp	.+134    	; 0xa62 <vfprintf+0x2aa>
 9dc:	85 37       	cpi	r24, 0x75	; 117
 9de:	29 f4       	brne	.+10     	; 0x9ea <vfprintf+0x232>
 9e0:	2f 7e       	andi	r18, 0xEF	; 239
 9e2:	b2 2e       	mov	r11, r18
 9e4:	2a e0       	ldi	r18, 0x0A	; 10
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	25 c0       	rjmp	.+74     	; 0xa34 <vfprintf+0x27c>
 9ea:	f2 2f       	mov	r31, r18
 9ec:	f9 7f       	andi	r31, 0xF9	; 249
 9ee:	bf 2e       	mov	r11, r31
 9f0:	8f 36       	cpi	r24, 0x6F	; 111
 9f2:	c1 f0       	breq	.+48     	; 0xa24 <vfprintf+0x26c>
 9f4:	18 f4       	brcc	.+6      	; 0x9fc <vfprintf+0x244>
 9f6:	88 35       	cpi	r24, 0x58	; 88
 9f8:	79 f0       	breq	.+30     	; 0xa18 <vfprintf+0x260>
 9fa:	ad c0       	rjmp	.+346    	; 0xb56 <vfprintf+0x39e>
 9fc:	80 37       	cpi	r24, 0x70	; 112
 9fe:	19 f0       	breq	.+6      	; 0xa06 <vfprintf+0x24e>
 a00:	88 37       	cpi	r24, 0x78	; 120
 a02:	21 f0       	breq	.+8      	; 0xa0c <vfprintf+0x254>
 a04:	a8 c0       	rjmp	.+336    	; 0xb56 <vfprintf+0x39e>
 a06:	2f 2f       	mov	r18, r31
 a08:	20 61       	ori	r18, 0x10	; 16
 a0a:	b2 2e       	mov	r11, r18
 a0c:	b4 fe       	sbrs	r11, 4
 a0e:	0d c0       	rjmp	.+26     	; 0xa2a <vfprintf+0x272>
 a10:	8b 2d       	mov	r24, r11
 a12:	84 60       	ori	r24, 0x04	; 4
 a14:	b8 2e       	mov	r11, r24
 a16:	09 c0       	rjmp	.+18     	; 0xa2a <vfprintf+0x272>
 a18:	24 ff       	sbrs	r18, 4
 a1a:	0a c0       	rjmp	.+20     	; 0xa30 <vfprintf+0x278>
 a1c:	9f 2f       	mov	r25, r31
 a1e:	96 60       	ori	r25, 0x06	; 6
 a20:	b9 2e       	mov	r11, r25
 a22:	06 c0       	rjmp	.+12     	; 0xa30 <vfprintf+0x278>
 a24:	28 e0       	ldi	r18, 0x08	; 8
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	05 c0       	rjmp	.+10     	; 0xa34 <vfprintf+0x27c>
 a2a:	20 e1       	ldi	r18, 0x10	; 16
 a2c:	30 e0       	ldi	r19, 0x00	; 0
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <vfprintf+0x27c>
 a30:	20 e1       	ldi	r18, 0x10	; 16
 a32:	32 e0       	ldi	r19, 0x02	; 2
 a34:	f8 01       	movw	r30, r16
 a36:	b7 fe       	sbrs	r11, 7
 a38:	07 c0       	rjmp	.+14     	; 0xa48 <vfprintf+0x290>
 a3a:	60 81       	ld	r22, Z
 a3c:	71 81       	ldd	r23, Z+1	; 0x01
 a3e:	82 81       	ldd	r24, Z+2	; 0x02
 a40:	93 81       	ldd	r25, Z+3	; 0x03
 a42:	0c 5f       	subi	r16, 0xFC	; 252
 a44:	1f 4f       	sbci	r17, 0xFF	; 255
 a46:	06 c0       	rjmp	.+12     	; 0xa54 <vfprintf+0x29c>
 a48:	60 81       	ld	r22, Z
 a4a:	71 81       	ldd	r23, Z+1	; 0x01
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 5f       	subi	r16, 0xFE	; 254
 a52:	1f 4f       	sbci	r17, 0xFF	; 255
 a54:	a4 01       	movw	r20, r8
 a56:	07 d1       	rcall	.+526    	; 0xc66 <__ultoa_invert>
 a58:	a8 2e       	mov	r10, r24
 a5a:	a8 18       	sub	r10, r8
 a5c:	fb 2d       	mov	r31, r11
 a5e:	ff 77       	andi	r31, 0x7F	; 127
 a60:	bf 2e       	mov	r11, r31
 a62:	b6 fe       	sbrs	r11, 6
 a64:	0b c0       	rjmp	.+22     	; 0xa7c <vfprintf+0x2c4>
 a66:	2b 2d       	mov	r18, r11
 a68:	2e 7f       	andi	r18, 0xFE	; 254
 a6a:	a5 14       	cp	r10, r5
 a6c:	50 f4       	brcc	.+20     	; 0xa82 <vfprintf+0x2ca>
 a6e:	b4 fe       	sbrs	r11, 4
 a70:	0a c0       	rjmp	.+20     	; 0xa86 <vfprintf+0x2ce>
 a72:	b2 fc       	sbrc	r11, 2
 a74:	08 c0       	rjmp	.+16     	; 0xa86 <vfprintf+0x2ce>
 a76:	2b 2d       	mov	r18, r11
 a78:	2e 7e       	andi	r18, 0xEE	; 238
 a7a:	05 c0       	rjmp	.+10     	; 0xa86 <vfprintf+0x2ce>
 a7c:	7a 2c       	mov	r7, r10
 a7e:	2b 2d       	mov	r18, r11
 a80:	03 c0       	rjmp	.+6      	; 0xa88 <vfprintf+0x2d0>
 a82:	7a 2c       	mov	r7, r10
 a84:	01 c0       	rjmp	.+2      	; 0xa88 <vfprintf+0x2d0>
 a86:	75 2c       	mov	r7, r5
 a88:	24 ff       	sbrs	r18, 4
 a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <vfprintf+0x2ee>
 a8c:	fe 01       	movw	r30, r28
 a8e:	ea 0d       	add	r30, r10
 a90:	f1 1d       	adc	r31, r1
 a92:	80 81       	ld	r24, Z
 a94:	80 33       	cpi	r24, 0x30	; 48
 a96:	11 f4       	brne	.+4      	; 0xa9c <vfprintf+0x2e4>
 a98:	29 7e       	andi	r18, 0xE9	; 233
 a9a:	09 c0       	rjmp	.+18     	; 0xaae <vfprintf+0x2f6>
 a9c:	22 ff       	sbrs	r18, 2
 a9e:	06 c0       	rjmp	.+12     	; 0xaac <vfprintf+0x2f4>
 aa0:	73 94       	inc	r7
 aa2:	73 94       	inc	r7
 aa4:	04 c0       	rjmp	.+8      	; 0xaae <vfprintf+0x2f6>
 aa6:	82 2f       	mov	r24, r18
 aa8:	86 78       	andi	r24, 0x86	; 134
 aaa:	09 f0       	breq	.+2      	; 0xaae <vfprintf+0x2f6>
 aac:	73 94       	inc	r7
 aae:	23 fd       	sbrc	r18, 3
 ab0:	12 c0       	rjmp	.+36     	; 0xad6 <vfprintf+0x31e>
 ab2:	20 ff       	sbrs	r18, 0
 ab4:	06 c0       	rjmp	.+12     	; 0xac2 <vfprintf+0x30a>
 ab6:	5a 2c       	mov	r5, r10
 ab8:	73 14       	cp	r7, r3
 aba:	18 f4       	brcc	.+6      	; 0xac2 <vfprintf+0x30a>
 abc:	53 0c       	add	r5, r3
 abe:	57 18       	sub	r5, r7
 ac0:	73 2c       	mov	r7, r3
 ac2:	73 14       	cp	r7, r3
 ac4:	60 f4       	brcc	.+24     	; 0xade <vfprintf+0x326>
 ac6:	b7 01       	movw	r22, r14
 ac8:	80 e2       	ldi	r24, 0x20	; 32
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	2c 87       	std	Y+12, r18	; 0x0c
 ace:	99 d0       	rcall	.+306    	; 0xc02 <fputc>
 ad0:	73 94       	inc	r7
 ad2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ad4:	f6 cf       	rjmp	.-20     	; 0xac2 <vfprintf+0x30a>
 ad6:	73 14       	cp	r7, r3
 ad8:	10 f4       	brcc	.+4      	; 0xade <vfprintf+0x326>
 ada:	37 18       	sub	r3, r7
 adc:	01 c0       	rjmp	.+2      	; 0xae0 <vfprintf+0x328>
 ade:	31 2c       	mov	r3, r1
 ae0:	24 ff       	sbrs	r18, 4
 ae2:	11 c0       	rjmp	.+34     	; 0xb06 <vfprintf+0x34e>
 ae4:	b7 01       	movw	r22, r14
 ae6:	80 e3       	ldi	r24, 0x30	; 48
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	2c 87       	std	Y+12, r18	; 0x0c
 aec:	8a d0       	rcall	.+276    	; 0xc02 <fputc>
 aee:	2c 85       	ldd	r18, Y+12	; 0x0c
 af0:	22 ff       	sbrs	r18, 2
 af2:	16 c0       	rjmp	.+44     	; 0xb20 <vfprintf+0x368>
 af4:	21 ff       	sbrs	r18, 1
 af6:	03 c0       	rjmp	.+6      	; 0xafe <vfprintf+0x346>
 af8:	88 e5       	ldi	r24, 0x58	; 88
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <vfprintf+0x34a>
 afe:	88 e7       	ldi	r24, 0x78	; 120
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	b7 01       	movw	r22, r14
 b04:	0c c0       	rjmp	.+24     	; 0xb1e <vfprintf+0x366>
 b06:	82 2f       	mov	r24, r18
 b08:	86 78       	andi	r24, 0x86	; 134
 b0a:	51 f0       	breq	.+20     	; 0xb20 <vfprintf+0x368>
 b0c:	21 fd       	sbrc	r18, 1
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <vfprintf+0x35c>
 b10:	80 e2       	ldi	r24, 0x20	; 32
 b12:	01 c0       	rjmp	.+2      	; 0xb16 <vfprintf+0x35e>
 b14:	8b e2       	ldi	r24, 0x2B	; 43
 b16:	27 fd       	sbrc	r18, 7
 b18:	8d e2       	ldi	r24, 0x2D	; 45
 b1a:	b7 01       	movw	r22, r14
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	71 d0       	rcall	.+226    	; 0xc02 <fputc>
 b20:	a5 14       	cp	r10, r5
 b22:	30 f4       	brcc	.+12     	; 0xb30 <vfprintf+0x378>
 b24:	b7 01       	movw	r22, r14
 b26:	80 e3       	ldi	r24, 0x30	; 48
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	6b d0       	rcall	.+214    	; 0xc02 <fputc>
 b2c:	5a 94       	dec	r5
 b2e:	f8 cf       	rjmp	.-16     	; 0xb20 <vfprintf+0x368>
 b30:	aa 94       	dec	r10
 b32:	f4 01       	movw	r30, r8
 b34:	ea 0d       	add	r30, r10
 b36:	f1 1d       	adc	r31, r1
 b38:	80 81       	ld	r24, Z
 b3a:	b7 01       	movw	r22, r14
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	61 d0       	rcall	.+194    	; 0xc02 <fputc>
 b40:	a1 10       	cpse	r10, r1
 b42:	f6 cf       	rjmp	.-20     	; 0xb30 <vfprintf+0x378>
 b44:	33 20       	and	r3, r3
 b46:	09 f4       	brne	.+2      	; 0xb4a <vfprintf+0x392>
 b48:	5d ce       	rjmp	.-838    	; 0x804 <vfprintf+0x4c>
 b4a:	b7 01       	movw	r22, r14
 b4c:	80 e2       	ldi	r24, 0x20	; 32
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	58 d0       	rcall	.+176    	; 0xc02 <fputc>
 b52:	3a 94       	dec	r3
 b54:	f7 cf       	rjmp	.-18     	; 0xb44 <vfprintf+0x38c>
 b56:	f7 01       	movw	r30, r14
 b58:	86 81       	ldd	r24, Z+6	; 0x06
 b5a:	97 81       	ldd	r25, Z+7	; 0x07
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vfprintf+0x3aa>
 b5e:	8f ef       	ldi	r24, 0xFF	; 255
 b60:	9f ef       	ldi	r25, 0xFF	; 255
 b62:	2c 96       	adiw	r28, 0x0c	; 12
 b64:	0f b6       	in	r0, 0x3f	; 63
 b66:	f8 94       	cli
 b68:	de bf       	out	0x3e, r29	; 62
 b6a:	0f be       	out	0x3f, r0	; 63
 b6c:	cd bf       	out	0x3d, r28	; 61
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	0f 91       	pop	r16
 b76:	ff 90       	pop	r15
 b78:	ef 90       	pop	r14
 b7a:	df 90       	pop	r13
 b7c:	cf 90       	pop	r12
 b7e:	bf 90       	pop	r11
 b80:	af 90       	pop	r10
 b82:	9f 90       	pop	r9
 b84:	8f 90       	pop	r8
 b86:	7f 90       	pop	r7
 b88:	6f 90       	pop	r6
 b8a:	5f 90       	pop	r5
 b8c:	4f 90       	pop	r4
 b8e:	3f 90       	pop	r3
 b90:	2f 90       	pop	r2
 b92:	08 95       	ret

00000b94 <calloc>:
 b94:	0f 93       	push	r16
 b96:	1f 93       	push	r17
 b98:	cf 93       	push	r28
 b9a:	df 93       	push	r29
 b9c:	86 9f       	mul	r24, r22
 b9e:	80 01       	movw	r16, r0
 ba0:	87 9f       	mul	r24, r23
 ba2:	10 0d       	add	r17, r0
 ba4:	96 9f       	mul	r25, r22
 ba6:	10 0d       	add	r17, r0
 ba8:	11 24       	eor	r1, r1
 baa:	c8 01       	movw	r24, r16
 bac:	83 dc       	rcall	.-1786   	; 0x4b4 <malloc>
 bae:	ec 01       	movw	r28, r24
 bb0:	00 97       	sbiw	r24, 0x00	; 0
 bb2:	21 f0       	breq	.+8      	; 0xbbc <calloc+0x28>
 bb4:	a8 01       	movw	r20, r16
 bb6:	60 e0       	ldi	r22, 0x00	; 0
 bb8:	70 e0       	ldi	r23, 0x00	; 0
 bba:	11 d0       	rcall	.+34     	; 0xbde <memset>
 bbc:	ce 01       	movw	r24, r28
 bbe:	df 91       	pop	r29
 bc0:	cf 91       	pop	r28
 bc2:	1f 91       	pop	r17
 bc4:	0f 91       	pop	r16
 bc6:	08 95       	ret

00000bc8 <strnlen_P>:
 bc8:	fc 01       	movw	r30, r24
 bca:	05 90       	lpm	r0, Z+
 bcc:	61 50       	subi	r22, 0x01	; 1
 bce:	70 40       	sbci	r23, 0x00	; 0
 bd0:	01 10       	cpse	r0, r1
 bd2:	d8 f7       	brcc	.-10     	; 0xbca <strnlen_P+0x2>
 bd4:	80 95       	com	r24
 bd6:	90 95       	com	r25
 bd8:	8e 0f       	add	r24, r30
 bda:	9f 1f       	adc	r25, r31
 bdc:	08 95       	ret

00000bde <memset>:
 bde:	dc 01       	movw	r26, r24
 be0:	01 c0       	rjmp	.+2      	; 0xbe4 <memset+0x6>
 be2:	6d 93       	st	X+, r22
 be4:	41 50       	subi	r20, 0x01	; 1
 be6:	50 40       	sbci	r21, 0x00	; 0
 be8:	e0 f7       	brcc	.-8      	; 0xbe2 <memset+0x4>
 bea:	08 95       	ret

00000bec <strnlen>:
 bec:	fc 01       	movw	r30, r24
 bee:	61 50       	subi	r22, 0x01	; 1
 bf0:	70 40       	sbci	r23, 0x00	; 0
 bf2:	01 90       	ld	r0, Z+
 bf4:	01 10       	cpse	r0, r1
 bf6:	d8 f7       	brcc	.-10     	; 0xbee <strnlen+0x2>
 bf8:	80 95       	com	r24
 bfa:	90 95       	com	r25
 bfc:	8e 0f       	add	r24, r30
 bfe:	9f 1f       	adc	r25, r31
 c00:	08 95       	ret

00000c02 <fputc>:
 c02:	0f 93       	push	r16
 c04:	1f 93       	push	r17
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	18 2f       	mov	r17, r24
 c0c:	09 2f       	mov	r16, r25
 c0e:	eb 01       	movw	r28, r22
 c10:	8b 81       	ldd	r24, Y+3	; 0x03
 c12:	81 fd       	sbrc	r24, 1
 c14:	03 c0       	rjmp	.+6      	; 0xc1c <fputc+0x1a>
 c16:	8f ef       	ldi	r24, 0xFF	; 255
 c18:	9f ef       	ldi	r25, 0xFF	; 255
 c1a:	20 c0       	rjmp	.+64     	; 0xc5c <fputc+0x5a>
 c1c:	82 ff       	sbrs	r24, 2
 c1e:	10 c0       	rjmp	.+32     	; 0xc40 <fputc+0x3e>
 c20:	4e 81       	ldd	r20, Y+6	; 0x06
 c22:	5f 81       	ldd	r21, Y+7	; 0x07
 c24:	2c 81       	ldd	r18, Y+4	; 0x04
 c26:	3d 81       	ldd	r19, Y+5	; 0x05
 c28:	42 17       	cp	r20, r18
 c2a:	53 07       	cpc	r21, r19
 c2c:	7c f4       	brge	.+30     	; 0xc4c <fputc+0x4a>
 c2e:	e8 81       	ld	r30, Y
 c30:	f9 81       	ldd	r31, Y+1	; 0x01
 c32:	9f 01       	movw	r18, r30
 c34:	2f 5f       	subi	r18, 0xFF	; 255
 c36:	3f 4f       	sbci	r19, 0xFF	; 255
 c38:	39 83       	std	Y+1, r19	; 0x01
 c3a:	28 83       	st	Y, r18
 c3c:	10 83       	st	Z, r17
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <fputc+0x4a>
 c40:	e8 85       	ldd	r30, Y+8	; 0x08
 c42:	f9 85       	ldd	r31, Y+9	; 0x09
 c44:	81 2f       	mov	r24, r17
 c46:	19 95       	eicall
 c48:	89 2b       	or	r24, r25
 c4a:	29 f7       	brne	.-54     	; 0xc16 <fputc+0x14>
 c4c:	2e 81       	ldd	r18, Y+6	; 0x06
 c4e:	3f 81       	ldd	r19, Y+7	; 0x07
 c50:	2f 5f       	subi	r18, 0xFF	; 255
 c52:	3f 4f       	sbci	r19, 0xFF	; 255
 c54:	3f 83       	std	Y+7, r19	; 0x07
 c56:	2e 83       	std	Y+6, r18	; 0x06
 c58:	81 2f       	mov	r24, r17
 c5a:	90 2f       	mov	r25, r16
 c5c:	df 91       	pop	r29
 c5e:	cf 91       	pop	r28
 c60:	1f 91       	pop	r17
 c62:	0f 91       	pop	r16
 c64:	08 95       	ret

00000c66 <__ultoa_invert>:
 c66:	fa 01       	movw	r30, r20
 c68:	aa 27       	eor	r26, r26
 c6a:	28 30       	cpi	r18, 0x08	; 8
 c6c:	51 f1       	breq	.+84     	; 0xcc2 <__ultoa_invert+0x5c>
 c6e:	20 31       	cpi	r18, 0x10	; 16
 c70:	81 f1       	breq	.+96     	; 0xcd2 <__ultoa_invert+0x6c>
 c72:	e8 94       	clt
 c74:	6f 93       	push	r22
 c76:	6e 7f       	andi	r22, 0xFE	; 254
 c78:	6e 5f       	subi	r22, 0xFE	; 254
 c7a:	7f 4f       	sbci	r23, 0xFF	; 255
 c7c:	8f 4f       	sbci	r24, 0xFF	; 255
 c7e:	9f 4f       	sbci	r25, 0xFF	; 255
 c80:	af 4f       	sbci	r26, 0xFF	; 255
 c82:	b1 e0       	ldi	r27, 0x01	; 1
 c84:	3e d0       	rcall	.+124    	; 0xd02 <__ultoa_invert+0x9c>
 c86:	b4 e0       	ldi	r27, 0x04	; 4
 c88:	3c d0       	rcall	.+120    	; 0xd02 <__ultoa_invert+0x9c>
 c8a:	67 0f       	add	r22, r23
 c8c:	78 1f       	adc	r23, r24
 c8e:	89 1f       	adc	r24, r25
 c90:	9a 1f       	adc	r25, r26
 c92:	a1 1d       	adc	r26, r1
 c94:	68 0f       	add	r22, r24
 c96:	79 1f       	adc	r23, r25
 c98:	8a 1f       	adc	r24, r26
 c9a:	91 1d       	adc	r25, r1
 c9c:	a1 1d       	adc	r26, r1
 c9e:	6a 0f       	add	r22, r26
 ca0:	71 1d       	adc	r23, r1
 ca2:	81 1d       	adc	r24, r1
 ca4:	91 1d       	adc	r25, r1
 ca6:	a1 1d       	adc	r26, r1
 ca8:	20 d0       	rcall	.+64     	; 0xcea <__ultoa_invert+0x84>
 caa:	09 f4       	brne	.+2      	; 0xcae <__ultoa_invert+0x48>
 cac:	68 94       	set
 cae:	3f 91       	pop	r19
 cb0:	2a e0       	ldi	r18, 0x0A	; 10
 cb2:	26 9f       	mul	r18, r22
 cb4:	11 24       	eor	r1, r1
 cb6:	30 19       	sub	r19, r0
 cb8:	30 5d       	subi	r19, 0xD0	; 208
 cba:	31 93       	st	Z+, r19
 cbc:	de f6       	brtc	.-74     	; 0xc74 <__ultoa_invert+0xe>
 cbe:	cf 01       	movw	r24, r30
 cc0:	08 95       	ret
 cc2:	46 2f       	mov	r20, r22
 cc4:	47 70       	andi	r20, 0x07	; 7
 cc6:	40 5d       	subi	r20, 0xD0	; 208
 cc8:	41 93       	st	Z+, r20
 cca:	b3 e0       	ldi	r27, 0x03	; 3
 ccc:	0f d0       	rcall	.+30     	; 0xcec <__ultoa_invert+0x86>
 cce:	c9 f7       	brne	.-14     	; 0xcc2 <__ultoa_invert+0x5c>
 cd0:	f6 cf       	rjmp	.-20     	; 0xcbe <__ultoa_invert+0x58>
 cd2:	46 2f       	mov	r20, r22
 cd4:	4f 70       	andi	r20, 0x0F	; 15
 cd6:	40 5d       	subi	r20, 0xD0	; 208
 cd8:	4a 33       	cpi	r20, 0x3A	; 58
 cda:	18 f0       	brcs	.+6      	; 0xce2 <__ultoa_invert+0x7c>
 cdc:	49 5d       	subi	r20, 0xD9	; 217
 cde:	31 fd       	sbrc	r19, 1
 ce0:	40 52       	subi	r20, 0x20	; 32
 ce2:	41 93       	st	Z+, r20
 ce4:	02 d0       	rcall	.+4      	; 0xcea <__ultoa_invert+0x84>
 ce6:	a9 f7       	brne	.-22     	; 0xcd2 <__ultoa_invert+0x6c>
 ce8:	ea cf       	rjmp	.-44     	; 0xcbe <__ultoa_invert+0x58>
 cea:	b4 e0       	ldi	r27, 0x04	; 4
 cec:	a6 95       	lsr	r26
 cee:	97 95       	ror	r25
 cf0:	87 95       	ror	r24
 cf2:	77 95       	ror	r23
 cf4:	67 95       	ror	r22
 cf6:	ba 95       	dec	r27
 cf8:	c9 f7       	brne	.-14     	; 0xcec <__ultoa_invert+0x86>
 cfa:	00 97       	sbiw	r24, 0x00	; 0
 cfc:	61 05       	cpc	r22, r1
 cfe:	71 05       	cpc	r23, r1
 d00:	08 95       	ret
 d02:	9b 01       	movw	r18, r22
 d04:	ac 01       	movw	r20, r24
 d06:	0a 2e       	mov	r0, r26
 d08:	06 94       	lsr	r0
 d0a:	57 95       	ror	r21
 d0c:	47 95       	ror	r20
 d0e:	37 95       	ror	r19
 d10:	27 95       	ror	r18
 d12:	ba 95       	dec	r27
 d14:	c9 f7       	brne	.-14     	; 0xd08 <__ultoa_invert+0xa2>
 d16:	62 0f       	add	r22, r18
 d18:	73 1f       	adc	r23, r19
 d1a:	84 1f       	adc	r24, r20
 d1c:	95 1f       	adc	r25, r21
 d1e:	a0 1d       	adc	r26, r0
 d20:	08 95       	ret

00000d22 <_exit>:
 d22:	f8 94       	cli

00000d24 <__stop_program>:
 d24:	ff cf       	rjmp	.-2      	; 0xd24 <__stop_program>
