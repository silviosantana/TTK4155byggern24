
byggern24_node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800200  000018d0  00001964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  008002ac  008002ac  00001a10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002605  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012e2  00000000  00000000  00004369  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a35  00000000  00000000  0000564b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b4  00000000  00000000  00007080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000093e  00000000  00000000  00007734  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012aa  00000000  00000000  00008072  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  0000931c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c1       	rjmp	.+848    	; 0x366 <__vector_5>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1a c5       	rjmp	.+2612   	; 0xad2 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c3       	rjmp	.+1892   	; 0x80e <__vector_42>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	84 05       	cpc	r24, r4
      e6:	d6 05       	cpc	r29, r6
      e8:	d6 05       	cpc	r29, r6
      ea:	d6 05       	cpc	r29, r6
      ec:	d6 05       	cpc	r29, r6
      ee:	d6 05       	cpc	r29, r6
      f0:	d6 05       	cpc	r29, r6
      f2:	d6 05       	cpc	r29, r6
      f4:	84 05       	cpc	r24, r4
      f6:	d6 05       	cpc	r29, r6
      f8:	d6 05       	cpc	r29, r6
      fa:	d6 05       	cpc	r29, r6
      fc:	d6 05       	cpc	r29, r6
      fe:	d6 05       	cpc	r29, r6
     100:	d6 05       	cpc	r29, r6
     102:	d6 05       	cpc	r29, r6
     104:	86 05       	cpc	r24, r6
     106:	d6 05       	cpc	r29, r6
     108:	d6 05       	cpc	r29, r6
     10a:	d6 05       	cpc	r29, r6
     10c:	d6 05       	cpc	r29, r6
     10e:	d6 05       	cpc	r29, r6
     110:	d6 05       	cpc	r29, r6
     112:	d6 05       	cpc	r29, r6
     114:	d6 05       	cpc	r29, r6
     116:	d6 05       	cpc	r29, r6
     118:	d6 05       	cpc	r29, r6
     11a:	d6 05       	cpc	r29, r6
     11c:	d6 05       	cpc	r29, r6
     11e:	d6 05       	cpc	r29, r6
     120:	d6 05       	cpc	r29, r6
     122:	d6 05       	cpc	r29, r6
     124:	86 05       	cpc	r24, r6
     126:	d6 05       	cpc	r29, r6
     128:	d6 05       	cpc	r29, r6
     12a:	d6 05       	cpc	r29, r6
     12c:	d6 05       	cpc	r29, r6
     12e:	d6 05       	cpc	r29, r6
     130:	d6 05       	cpc	r29, r6
     132:	d6 05       	cpc	r29, r6
     134:	d6 05       	cpc	r29, r6
     136:	d6 05       	cpc	r29, r6
     138:	d6 05       	cpc	r29, r6
     13a:	d6 05       	cpc	r29, r6
     13c:	d6 05       	cpc	r29, r6
     13e:	d6 05       	cpc	r29, r6
     140:	d6 05       	cpc	r29, r6
     142:	d6 05       	cpc	r29, r6
     144:	d2 05       	cpc	r29, r2
     146:	d6 05       	cpc	r29, r6
     148:	d6 05       	cpc	r29, r6
     14a:	d6 05       	cpc	r29, r6
     14c:	d6 05       	cpc	r29, r6
     14e:	d6 05       	cpc	r29, r6
     150:	d6 05       	cpc	r29, r6
     152:	d6 05       	cpc	r29, r6
     154:	af 05       	cpc	r26, r15
     156:	d6 05       	cpc	r29, r6
     158:	d6 05       	cpc	r29, r6
     15a:	d6 05       	cpc	r29, r6
     15c:	d6 05       	cpc	r29, r6
     15e:	d6 05       	cpc	r29, r6
     160:	d6 05       	cpc	r29, r6
     162:	d6 05       	cpc	r29, r6
     164:	d6 05       	cpc	r29, r6
     166:	d6 05       	cpc	r29, r6
     168:	d6 05       	cpc	r29, r6
     16a:	d6 05       	cpc	r29, r6
     16c:	d6 05       	cpc	r29, r6
     16e:	d6 05       	cpc	r29, r6
     170:	d6 05       	cpc	r29, r6
     172:	d6 05       	cpc	r29, r6
     174:	a3 05       	cpc	r26, r3
     176:	d6 05       	cpc	r29, r6
     178:	d6 05       	cpc	r29, r6
     17a:	d6 05       	cpc	r29, r6
     17c:	d6 05       	cpc	r29, r6
     17e:	d6 05       	cpc	r29, r6
     180:	d6 05       	cpc	r29, r6
     182:	d6 05       	cpc	r29, r6
     184:	c1 05       	cpc	r28, r1

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e0 ed       	ldi	r30, 0xD0	; 208
     19e:	f8 e1       	ldi	r31, 0x18	; 24
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ac 3a       	cpi	r26, 0xAC	; 172
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	ac ea       	ldi	r26, 0xAC	; 172
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a1 3e       	cpi	r26, 0xE1	; 225
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	80 d1       	rcall	.+768    	; 0x4c2 <main>
     1c2:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:

void adc_init ()
{
	// AREF = AVcc

	set_bit(ADMUX, REFS0);
     1c8:	ec e7       	ldi	r30, 0x7C	; 124
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 64       	ori	r24, 0x40	; 64
     1d0:	80 83       	st	Z, r24
	clear_bit(ADMUX, REFS1);
     1d2:	80 81       	ld	r24, Z
     1d4:	8f 77       	andi	r24, 0x7F	; 127
     1d6:	80 83       	st	Z, r24
	clear_bit(ADMUX, ADLAR);
     1d8:	80 81       	ld	r24, Z
     1da:	8f 7d       	andi	r24, 0xDF	; 223
     1dc:	80 83       	st	Z, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1de:	ea e7       	ldi	r30, 0x7A	; 122
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	87 68       	ori	r24, 0x87	; 135
     1e6:	80 83       	st	Z, r24
     1e8:	08 95       	ret

000001ea <adc_read>:

// read adc value
uint16_t adc_read(uint8_t ch)
{
	 ch &= 0b00000111;  // AND operation with 7
	 ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     1ea:	ec e7       	ldi	r30, 0x7C	; 124
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	90 81       	ld	r25, Z
}

// read adc value
uint16_t adc_read(uint8_t ch)
{
	 ch &= 0b00000111;  // AND operation with 7
     1f0:	87 70       	andi	r24, 0x07	; 7
	 ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     1f2:	98 7f       	andi	r25, 0xF8	; 248
     1f4:	98 2b       	or	r25, r24
     1f6:	90 83       	st	Z, r25
	
	// start single conversion
	// write '1' to ADSC
	set_bit(ADCSRA, ADSC);
     1f8:	ea e7       	ldi	r30, 0x7A	; 122
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 64       	ori	r24, 0x40	; 64
     200:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	//while(ADCSRA & (1<<ADSC));
	loop_until_bit_is_clear( ADCSRA, ADSC );
     202:	80 81       	ld	r24, Z
     204:	86 fd       	sbrc	r24, 6
     206:	fd cf       	rjmp	.-6      	; 0x202 <adc_read+0x18>
	
	return (ADC);
     208:	80 91 78 00 	lds	r24, 0x0078
     20c:	90 91 79 00 	lds	r25, 0x0079
}
     210:	08 95       	ret

00000212 <can_controller_reset>:
	status = spi_read();

	PORTB |= ~(1<<CAN_CS);

	return status;
}
     212:	2f 98       	cbi	0x05, 7	; 5
     214:	80 ec       	ldi	r24, 0xC0	; 192
     216:	e7 d3       	rcall	.+1998   	; 0x9e6 <spi_send>
     218:	2f 9a       	sbi	0x05, 7	; 5
     21a:	8f e3       	ldi	r24, 0x3F	; 63
     21c:	9c e9       	ldi	r25, 0x9C	; 156
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <can_controller_reset+0xc>
     222:	00 c0       	rjmp	.+0      	; 0x224 <can_controller_reset+0x12>
     224:	00 00       	nop
     226:	08 95       	ret

00000228 <can_controller_read>:
     228:	cf 93       	push	r28
     22a:	c8 2f       	mov	r28, r24
     22c:	2f 98       	cbi	0x05, 7	; 5
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	da d3       	rcall	.+1972   	; 0x9e6 <spi_send>
     232:	8c 2f       	mov	r24, r28
     234:	d8 d3       	rcall	.+1968   	; 0x9e6 <spi_send>
     236:	d9 d3       	rcall	.+1970   	; 0x9ea <spi_read>
     238:	2f 9a       	sbi	0x05, 7	; 5
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <can_controller_bit_modify>:
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	18 2f       	mov	r17, r24
     246:	d6 2f       	mov	r29, r22
     248:	c4 2f       	mov	r28, r20
     24a:	2f 98       	cbi	0x05, 7	; 5
     24c:	85 e0       	ldi	r24, 0x05	; 5
     24e:	cb d3       	rcall	.+1942   	; 0x9e6 <spi_send>
     250:	81 2f       	mov	r24, r17
     252:	c9 d3       	rcall	.+1938   	; 0x9e6 <spi_send>
     254:	8d 2f       	mov	r24, r29
     256:	c7 d3       	rcall	.+1934   	; 0x9e6 <spi_send>
     258:	8c 2f       	mov	r24, r28
     25a:	c5 d3       	rcall	.+1930   	; 0x9e6 <spi_send>
     25c:	2f 9a       	sbi	0x05, 7	; 5
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	08 95       	ret

00000266 <can_controller_set_mode>:
     266:	48 2f       	mov	r20, r24
     268:	60 ee       	ldi	r22, 0xE0	; 224
     26a:	8f e0       	ldi	r24, 0x0F	; 15
     26c:	e8 df       	rcall	.-48     	; 0x23e <can_controller_bit_modify>
     26e:	8e e0       	ldi	r24, 0x0E	; 14
     270:	db df       	rcall	.-74     	; 0x228 <can_controller_read>
     272:	80 7e       	andi	r24, 0xE0	; 224
     274:	08 95       	ret

00000276 <can_controller_write>:

void can_controller_write(uint8_t address, uint8_t data)
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	d8 2f       	mov	r29, r24
     27c:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
     27e:	2f 98       	cbi	0x05, 7	; 5
	
	spi_send(MCP_WRITE);
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	b1 d3       	rcall	.+1890   	; 0x9e6 <spi_send>
	spi_send(address);
     284:	8d 2f       	mov	r24, r29
     286:	af d3       	rcall	.+1886   	; 0x9e6 <spi_send>
	spi_send(data);
     288:	8c 2f       	mov	r24, r28
     28a:	ad d3       	rcall	.+1882   	; 0x9e6 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
     28c:	2f 9a       	sbi	0x05, 7	; 5
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <can_controller_init>:
uint8_t can_controller_init()
{
	uint8_t value;

	//spi_init(); // Initialize SPI
	can_controller_reset(); // Send reset-command
     294:	be df       	rcall	.-132    	; 0x212 <can_controller_reset>
	

	// Self-test
	value = can_controller_read(MCP_CANSTAT);
     296:	8e e0       	ldi	r24, 0x0E	; 14
     298:	c7 df       	rcall	.-114    	; 0x228 <can_controller_read>
	if ((value & MODE_MASK)  != MODE_CONFIG)
     29a:	98 2f       	mov	r25, r24
     29c:	90 7e       	andi	r25, 0xE0	; 224
     29e:	90 38       	cpi	r25, 0x80	; 128
     2a0:	71 f0       	breq	.+28     	; 0x2be <can_controller_init+0x2a>
	{
		printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
     2a2:	1f 92       	push	r1
     2a4:	8f 93       	push	r24
     2a6:	87 e0       	ldi	r24, 0x07	; 7
     2a8:	92 e0       	ldi	r25, 0x02	; 2
     2aa:	9f 93       	push	r25
     2ac:	8f 93       	push	r24
     2ae:	0e 94 a0 09 	call	0x1340	; 0x1340 <printf>
		return 1;
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	08 95       	ret
	}
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000001);
     2be:	41 e0       	ldi	r20, 0x01	; 1
     2c0:	6f ef       	ldi	r22, 0xFF	; 255
     2c2:	8b e2       	ldi	r24, 0x2B	; 43
     2c4:	bc df       	rcall	.-136    	; 0x23e <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100100, 0b01100100);
     2c6:	44 e6       	ldi	r20, 0x64	; 100
     2c8:	64 e6       	ldi	r22, 0x64	; 100
     2ca:	80 e6       	ldi	r24, 0x60	; 96
     2cc:	b8 df       	rcall	.-144    	; 0x23e <can_controller_bit_modify>
	//printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
     2ce:	40 e6       	ldi	r20, 0x60	; 96
     2d0:	60 e6       	ldi	r22, 0x60	; 96
     2d2:	80 e7       	ldi	r24, 0x70	; 112
     2d4:	b4 df       	rcall	.-152    	; 0x23e <can_controller_bit_modify>
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

	
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	82 e3       	ldi	r24, 0x32	; 50
     2da:	cd df       	rcall	.-102    	; 0x276 <can_controller_write>
	return 0;
     2dc:	80 e0       	ldi	r24, 0x00	; 0
}
     2de:	08 95       	ret

000002e0 <can_init>:
	// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE));
	// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF));
	// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
	// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	c1 df       	rcall	.-126    	; 0x266 <can_controller_set_mode>
     2e4:	88 23       	and	r24, r24
     2e6:	41 f0       	breq	.+16     	; 0x2f8 <can_init+0x18>
     2e8:	84 e5       	ldi	r24, 0x54	; 84
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	0e 94 a0 09 	call	0x1340	; 0x1340 <printf>
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	ea e0       	ldi	r30, 0x0A	; 10
     2fa:	f1 e0       	ldi	r31, 0x01	; 1
     2fc:	80 81       	ld	r24, Z
     2fe:	81 60       	ori	r24, 0x01	; 1
     300:	80 83       	st	Z, r24
     302:	ea e6       	ldi	r30, 0x6A	; 106
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	8e 7f       	andi	r24, 0xFE	; 254
     30a:	80 83       	st	Z, r24
     30c:	80 81       	ld	r24, Z
     30e:	82 60       	ori	r24, 0x02	; 2
     310:	80 83       	st	Z, r24
     312:	ec 9a       	sbi	0x1d, 4	; 29
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	8c e2       	ldi	r24, 0x2C	; 44
     318:	ae df       	rcall	.-164    	; 0x276 <can_controller_write>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	8d e2       	ldi	r24, 0x2D	; 45
     31e:	ab cf       	rjmp	.-170    	; 0x276 <can_controller_write>
     320:	08 95       	ret

00000322 <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	eb 01       	movw	r28, r22

	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
     32c:	18 2f       	mov	r17, r24
     32e:	12 95       	swap	r17
     330:	10 7f       	andi	r17, 0xF0	; 240
     332:	81 e6       	ldi	r24, 0x61	; 97
     334:	81 0f       	add	r24, r17
     336:	78 df       	rcall	.-272    	; 0x228 <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
     338:	85 e6       	ldi	r24, 0x65	; 101
     33a:	81 0f       	add	r24, r17
     33c:	75 df       	rcall	.-278    	; 0x228 <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
     33e:	98 2f       	mov	r25, r24
     340:	9f 70       	andi	r25, 0x0F	; 15
     342:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
     344:	88 23       	and	r24, r24
     346:	51 f0       	breq	.+20     	; 0x35c <can_recieve_msg+0x3a>
     348:	1a 59       	subi	r17, 0x9A	; 154
     34a:	22 96       	adiw	r28, 0x02	; 2
     34c:	08 2f       	mov	r16, r24
     34e:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
     350:	81 2f       	mov	r24, r17
     352:	6a df       	rcall	.-300    	; 0x228 <can_controller_read>
     354:	89 93       	st	Y+, r24
     356:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
     358:	10 13       	cpse	r17, r16
     35a:	fa cf       	rjmp	.-12     	; 0x350 <can_recieve_msg+0x2e>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}
	//can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
// 	can_controller_write(MCP_CANINTF, 0x00);
// 	can_controller_write(MCP_EFLG, 0x00);
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <__vector_5>:
#include "motor_controller.h"
#include "game.h"


ISR(INT4_vect)
{
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	0b b6       	in	r0, 0x3b	; 59
     372:	0f 92       	push	r0
     374:	2f 93       	push	r18
     376:	3f 93       	push	r19
     378:	4f 93       	push	r20
     37a:	5f 93       	push	r21
     37c:	6f 93       	push	r22
     37e:	7f 93       	push	r23
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
     384:	af 93       	push	r26
     386:	bf 93       	push	r27
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
	cli();
     390:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
     392:	8a e0       	ldi	r24, 0x0A	; 10
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	63 d6       	rcall	.+3270   	; 0x105e <malloc>
     398:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	//printf("message INTERRUPTION recieved\n\r");
	//print(my_buf);
	uint8_t canInt = can_controller_read(MCP_CANINTF);
     39a:	8c e2       	ldi	r24, 0x2C	; 44
     39c:	45 df       	rcall	.-374    	; 0x228 <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
     39e:	80 ff       	sbrs	r24, 0
     3a0:	18 c0       	rjmp	.+48     	; 0x3d2 <__vector_5+0x6c>
	{
		//printf("HERE\n\r");
		can_recieve_msg(0, msg);
     3a2:	be 01       	movw	r22, r28
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	bd df       	rcall	.-134    	; 0x322 <can_recieve_msg>
		//for (uint8_t byte = 0; byte < msg->length; byte++) {
			//printf("%d \t", (int8_t) msg->data[byte]);
		//}
		
		// Control servo
		timer_driver_set_duty_cycle(msg->data[3]);
     3a8:	8d 81       	ldd	r24, Y+5	; 0x05
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	4e d3       	rcall	.+1692   	; 0xa4a <timer_driver_set_duty_cycle>
		
		// Control solenoid
		control_solenoid(msg->data[5]);
     3ae:	8f 81       	ldd	r24, Y+7	; 0x07
     3b0:	fe d2       	rcall	.+1532   	; 0x9ae <control_solenoid>
		
		// Control Motor
		if(game_get_mode() == 1)
     3b2:	67 d0       	rcall	.+206    	; 0x482 <game_get_mode>
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	21 f4       	brne	.+8      	; 0x3c0 <__vector_5+0x5a>
		{
			motor_controller_set_point(msg->data[2]);
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	23 d2       	rcall	.+1094   	; 0x804 <motor_controller_set_point>
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <__vector_5+0x62>
		}else
		{
			motor_move_joystick(msg->data[4], msg->data[0]);
     3c0:	8e 81       	ldd	r24, Y+6	; 0x06
     3c2:	6a 81       	ldd	r22, Y+2	; 0x02
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	b2 d2       	rcall	.+1380   	; 0x92c <motor_move_joystick>
		}
		
		//Check Toggle Game Mode
		if (msg->data[6] == 2)
     3c8:	88 85       	ldd	r24, Y+8	; 0x08
     3ca:	82 30       	cpi	r24, 0x02	; 2
     3cc:	61 f4       	brne	.+24     	; 0x3e6 <__vector_5+0x80>
		{
			game_toggle_mode();
     3ce:	47 d0       	rcall	.+142    	; 0x45e <game_toggle_mode>
     3d0:	0a c0       	rjmp	.+20     	; 0x3e6 <__vector_5+0x80>
// 			printf("%d \n\r", msg->data[byte]);
// 		}
// 	}
	else
	{
		can_controller_write(MCP_CANINTF, 0x00);
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	8c e2       	ldi	r24, 0x2C	; 44
     3d6:	4f df       	rcall	.-354    	; 0x276 <can_controller_write>
		//can_controller_write(MCP_EFLG, 0x00);
		free(msg);
     3d8:	ce 01       	movw	r24, r28
     3da:	d9 d6       	rcall	.+3506   	; 0x118e <free>
		can_controller_write(MCP_CANINTF, 0x00);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	8c e2       	ldi	r24, 0x2C	; 44
     3e0:	4a df       	rcall	.-364    	; 0x276 <can_controller_write>
		sei();
     3e2:	78 94       	sei
		return;
     3e4:	09 c0       	rjmp	.+18     	; 0x3f8 <__vector_5+0x92>
	}
	//printf("before:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	can_controller_write(MCP_CANINTF, 0x00);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	8c e2       	ldi	r24, 0x2C	; 44
     3ea:	45 df       	rcall	.-374    	; 0x276 <can_controller_write>
	//can_controller_write(MCP_EFLG, 0x00);
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
     3ec:	ce 01       	movw	r24, r28
     3ee:	cf d6       	rcall	.+3486   	; 0x118e <free>
	can_controller_write(MCP_CANINTF, 0x00);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	8c e2       	ldi	r24, 0x2C	; 44
     3f4:	40 df       	rcall	.-384    	; 0x276 <can_controller_write>
	sei();
     3f6:	78 94       	sei
}
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	bf 91       	pop	r27
     402:	af 91       	pop	r26
     404:	9f 91       	pop	r25
     406:	8f 91       	pop	r24
     408:	7f 91       	pop	r23
     40a:	6f 91       	pop	r22
     40c:	5f 91       	pop	r21
     40e:	4f 91       	pop	r20
     410:	3f 91       	pop	r19
     412:	2f 91       	pop	r18
     414:	0f 90       	pop	r0
     416:	0b be       	out	0x3b, r0	; 59
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <dac_init>:
     422:	2b d3       	rcall	.+1622   	; 0xa7a <TWI_Master_Initialise>
     424:	50 9a       	sbi	0x0a, 0	; 10
     426:	51 9a       	sbi	0x0a, 1	; 10
     428:	08 95       	ret

0000042a <dac_driver_send>:
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	00 d0       	rcall	.+0      	; 0x430 <dac_driver_send+0x6>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	90 e5       	ldi	r25, 0x50	; 80
     436:	99 83       	std	Y+1, r25	; 0x01
     438:	1a 82       	std	Y+2, r1	; 0x02
     43a:	8b 83       	std	Y+3, r24	; 0x03
     43c:	63 e0       	ldi	r22, 0x03	; 3
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	25 d3       	rcall	.+1610   	; 0xa8e <TWI_Start_Transceiver_With_Data>
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <game_init>:
#include "motor_controller.h"

int game_mode;

void game_init(){
	game_mode = 1;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	90 93 b4 02 	sts	0x02B4, r25
     458:	80 93 b3 02 	sts	0x02B3, r24
     45c:	08 95       	ret

0000045e <game_toggle_mode>:
}

void game_toggle_mode()
{
	if (game_mode == 1)
     45e:	80 91 b3 02 	lds	r24, 0x02B3
     462:	90 91 b4 02 	lds	r25, 0x02B4
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	29 f4       	brne	.+10     	; 0x474 <game_toggle_mode+0x16>
	{
		game_mode = 0;
     46a:	10 92 b4 02 	sts	0x02B4, r1
     46e:	10 92 b3 02 	sts	0x02B3, r1
     472:	08 95       	ret
		//printf("1 -> 0\n\r");
		//motor_controller_deactivate();
	}else
	{
		game_mode = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	90 93 b4 02 	sts	0x02B4, r25
     47c:	80 93 b3 02 	sts	0x02B3, r24
     480:	08 95       	ret

00000482 <game_get_mode>:
}

int game_get_mode()
{
	return game_mode;
}
     482:	80 91 b3 02 	lds	r24, 0x02B3
     486:	90 91 b4 02 	lds	r25, 0x02B4
     48a:	08 95       	ret

0000048c <record_score>:

uint16_t record_score(uint16_t score)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
	uint16_t score_interval = 0;
	uint16_t adc = adc_read(0);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	aa de       	rcall	.-684    	; 0x1ea <adc_read>
		
	if (adc < 300)
     496:	8c 32       	cpi	r24, 0x2C	; 44
     498:	91 40       	sbci	r25, 0x01	; 1
     49a:	78 f4       	brcc	.+30     	; 0x4ba <record_score+0x2e>
	{
		score += 1;
     49c:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	93 ed       	ldi	r25, 0xD3	; 211
     4a2:	20 e3       	ldi	r18, 0x30	; 48
     4a4:	81 50       	subi	r24, 0x01	; 1
     4a6:	90 40       	sbci	r25, 0x00	; 0
     4a8:	20 40       	sbci	r18, 0x00	; 0
     4aa:	e1 f7       	brne	.-8      	; 0x4a4 <record_score+0x18>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <record_score+0x22>
     4ae:	00 00       	nop
	}
	
		
	while(score_interval == 1)
	{
		if (adc_read(0) > 300)
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	9b de       	rcall	.-714    	; 0x1ea <adc_read>
     4b4:	8d 32       	cpi	r24, 0x2D	; 45
     4b6:	91 40       	sbci	r25, 0x01	; 1
     4b8:	d8 f3       	brcs	.-10     	; 0x4b0 <record_score+0x24>
			score_interval = 0;
			break;
		}
	}
	return score;
     4ba:	ce 01       	movw	r24, r28
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <main>:



int main(void)
{
	cli();
     4c2:	f8 94       	cli
	USART_Init(MYUBRR);
     4c4:	87 e6       	ldi	r24, 0x67	; 103
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	97 d3       	rcall	.+1838   	; 0xbf8 <USART_Init>
	spi_init();
     4ca:	8b d2       	rcall	.+1302   	; 0x9e2 <spi_init>
	
	timer_driver_init();
     4cc:	92 d2       	rcall	.+1316   	; 0x9f2 <timer_driver_init>
	adc_init();
     4ce:	7c de       	rcall	.-776    	; 0x1c8 <adc_init>
	dac_init();
     4d0:	a8 df       	rcall	.-176    	; 0x422 <dac_init>
	motor_init();
     4d2:	d5 d1       	rcall	.+938    	; 0x87e <motor_init>
	game_init();
     4d4:	bd df       	rcall	.-134    	; 0x450 <game_init>
	motor_controller_init();
     4d6:	51 d0       	rcall	.+162    	; 0x57a <motor_controller_init>
	can_controller_init();
     4d8:	dd de       	rcall	.-582    	; 0x294 <can_controller_init>
	can_init();
     4da:	02 df       	rcall	.-508    	; 0x2e0 <can_init>
	sei();
     4dc:	78 94       	sei
	
	printf("Hello from node 2!\n\r");
     4de:	86 e9       	ldi	r24, 0x96	; 150
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	9f 93       	push	r25
     4e4:	8f 93       	push	r24
     4e6:	2c d7       	rcall	.+3672   	; 0x1340 <printf>
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
	
	uint16_t score = 0;
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
	//uint16_t value = 0;
	
	while (1)
	{
		//printf("inside while \n\r");
		score = record_score(score);
     4f0:	cd df       	rcall	.-102    	; 0x48c <record_score>
     4f2:	2f ef       	ldi	r18, 0xFF	; 255
     4f4:	39 e6       	ldi	r19, 0x69	; 105
     4f6:	48 e1       	ldi	r20, 0x18	; 24
     4f8:	21 50       	subi	r18, 0x01	; 1
     4fa:	30 40       	sbci	r19, 0x00	; 0
     4fc:	40 40       	sbci	r20, 0x00	; 0
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x36>
     500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x40>
     502:	00 00       	nop
     504:	f5 cf       	rjmp	.-22     	; 0x4f0 <main+0x2e>

00000506 <motor_controller_calibration>:

void motor_controller_deactivate()
{
	//cli();
	// disable compare interrupt
	clear_bit(TIMSK4, OCIE4A);
     506:	68 ec       	ldi	r22, 0xC8	; 200
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	39 d2       	rcall	.+1138   	; 0x980 <motor_move>
     50e:	2f ef       	ldi	r18, 0xFF	; 255
     510:	83 ed       	ldi	r24, 0xD3	; 211
     512:	90 e3       	ldi	r25, 0x30	; 48
     514:	21 50       	subi	r18, 0x01	; 1
     516:	80 40       	sbci	r24, 0x00	; 0
     518:	90 40       	sbci	r25, 0x00	; 0
     51a:	e1 f7       	brne	.-8      	; 0x514 <motor_controller_calibration+0xe>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <motor_controller_calibration+0x18>
     51e:	00 00       	nop
     520:	9f d1       	rcall	.+830    	; 0x860 <motor_reset_encoder>
     522:	68 ec       	ldi	r22, 0xC8	; 200
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	2b d2       	rcall	.+1110   	; 0x980 <motor_move>
     52a:	2f ef       	ldi	r18, 0xFF	; 255
     52c:	83 ed       	ldi	r24, 0xD3	; 211
     52e:	90 e3       	ldi	r25, 0x30	; 48
     530:	21 50       	subi	r18, 0x01	; 1
     532:	80 40       	sbci	r24, 0x00	; 0
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <motor_controller_calibration+0x2a>
     538:	00 c0       	rjmp	.+0      	; 0x53a <motor_controller_calibration+0x34>
     53a:	00 00       	nop
     53c:	d2 d1       	rcall	.+932    	; 0x8e2 <motor_get_encoder>
     53e:	8c 52       	subi	r24, 0x2C	; 44
     540:	91 40       	sbci	r25, 0x01	; 1
     542:	90 93 c6 02 	sts	0x02C6, r25
     546:	80 93 c5 02 	sts	0x02C5, r24
     54a:	68 ec       	ldi	r22, 0xC8	; 200
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	17 d2       	rcall	.+1070   	; 0x980 <motor_move>
     552:	2f ef       	ldi	r18, 0xFF	; 255
     554:	83 ed       	ldi	r24, 0xD3	; 211
     556:	90 e3       	ldi	r25, 0x30	; 48
     558:	21 50       	subi	r18, 0x01	; 1
     55a:	80 40       	sbci	r24, 0x00	; 0
     55c:	90 40       	sbci	r25, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <motor_controller_calibration+0x52>
     560:	00 c0       	rjmp	.+0      	; 0x562 <motor_controller_calibration+0x5c>
     562:	00 00       	nop
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0a d2       	rcall	.+1044   	; 0x980 <motor_move>
     56c:	84 ef       	ldi	r24, 0xF4	; 244
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	90 93 ba 02 	sts	0x02BA, r25
     574:	80 93 b9 02 	sts	0x02B9, r24
     578:	08 95       	ret

0000057a <motor_controller_init>:
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e8       	ldi	r26, 0x80	; 128
     580:	bf e3       	ldi	r27, 0x3F	; 63
     582:	80 93 d3 02 	sts	0x02D3, r24
     586:	90 93 d4 02 	sts	0x02D4, r25
     58a:	a0 93 d5 02 	sts	0x02D5, r26
     58e:	b0 93 d6 02 	sts	0x02D6, r27
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	a8 e4       	ldi	r26, 0x48	; 72
     598:	b1 e4       	ldi	r27, 0x41	; 65
     59a:	80 93 bd 02 	sts	0x02BD, r24
     59e:	90 93 be 02 	sts	0x02BE, r25
     5a2:	a0 93 bf 02 	sts	0x02BF, r26
     5a6:	b0 93 c0 02 	sts	0x02C0, r27
     5aa:	8d ec       	ldi	r24, 0xCD	; 205
     5ac:	9c ec       	ldi	r25, 0xCC	; 204
     5ae:	ac ec       	ldi	r26, 0xCC	; 204
     5b0:	bd e3       	ldi	r27, 0x3D	; 61
     5b2:	80 93 b5 02 	sts	0x02B5, r24
     5b6:	90 93 b6 02 	sts	0x02B6, r25
     5ba:	a0 93 b7 02 	sts	0x02B7, r26
     5be:	b0 93 b8 02 	sts	0x02B8, r27
     5c2:	10 92 cf 02 	sts	0x02CF, r1
     5c6:	10 92 d0 02 	sts	0x02D0, r1
     5ca:	10 92 d1 02 	sts	0x02D1, r1
     5ce:	10 92 d2 02 	sts	0x02D2, r1
     5d2:	10 92 c1 02 	sts	0x02C1, r1
     5d6:	10 92 c2 02 	sts	0x02C2, r1
     5da:	10 92 c3 02 	sts	0x02C3, r1
     5de:	10 92 c4 02 	sts	0x02C4, r1
     5e2:	10 92 cb 02 	sts	0x02CB, r1
     5e6:	10 92 cc 02 	sts	0x02CC, r1
     5ea:	10 92 cd 02 	sts	0x02CD, r1
     5ee:	10 92 ce 02 	sts	0x02CE, r1
     5f2:	10 92 bc 02 	sts	0x02BC, r1
     5f6:	10 92 bb 02 	sts	0x02BB, r1
     5fa:	8d ec       	ldi	r24, 0xCD	; 205
     5fc:	9c ec       	ldi	r25, 0xCC	; 204
     5fe:	ac e4       	ldi	r26, 0x4C	; 76
     600:	bd e3       	ldi	r27, 0x3D	; 61
     602:	80 93 c7 02 	sts	0x02C7, r24
     606:	90 93 c8 02 	sts	0x02C8, r25
     60a:	a0 93 c9 02 	sts	0x02C9, r26
     60e:	b0 93 ca 02 	sts	0x02CA, r27
     612:	79 df       	rcall	.-270    	; 0x506 <motor_controller_calibration>
     614:	e0 ea       	ldi	r30, 0xA0	; 160
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	80 83       	st	Z, r24
     61c:	e1 ea       	ldi	r30, 0xA1	; 161
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	8b 60       	ori	r24, 0x0B	; 11
     624:	80 83       	st	Z, r24
     626:	10 92 a5 00 	sts	0x00A5, r1
     62a:	10 92 a4 00 	sts	0x00A4, r1
     62e:	83 ed       	ldi	r24, 0xD3	; 211
     630:	90 e3       	ldi	r25, 0x30	; 48
     632:	90 93 a9 00 	sts	0x00A9, r25
     636:	80 93 a8 00 	sts	0x00A8, r24
     63a:	e2 e7       	ldi	r30, 0x72	; 114
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	82 60       	ori	r24, 0x02	; 2
     642:	80 83       	st	Z, r24
     644:	08 95       	ret

00000646 <motor_controller>:
	//sei();
}

void motor_controller()
{
     646:	8f 92       	push	r8
     648:	9f 92       	push	r9
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
	if (game_get_mode() == 1)
     65a:	13 df       	rcall	.-474    	; 0x482 <game_get_mode>
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	09 f0       	breq	.+2      	; 0x662 <motor_controller+0x1c>
     660:	c6 c0       	rjmp	.+396    	; 0x7ee <motor_controller+0x1a8>
	{
		enum direction target_dir;
		uint8_t speed;
		int motor_cur_pos = motor_get_encoder();
     662:	3f d1       	rcall	.+638    	; 0x8e2 <motor_get_encoder>
		double derivative;
		
		int curr_pos = (int) 100.0*((double)(motor_cur_pos - min_motor_pos))/((double)(max_motor_pos - min_motor_pos));
     664:	a0 90 b9 02 	lds	r10, 0x02B9
     668:	b0 90 ba 02 	lds	r11, 0x02BA
     66c:	8a 19       	sub	r24, r10
     66e:	9b 09       	sbc	r25, r11
     670:	bc 01       	movw	r22, r24
     672:	88 27       	eor	r24, r24
     674:	77 fd       	sbrc	r23, 7
     676:	80 95       	com	r24
     678:	98 2f       	mov	r25, r24
     67a:	d2 d3       	rcall	.+1956   	; 0xe20 <__floatsisf>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	48 ec       	ldi	r20, 0xC8	; 200
     682:	52 e4       	ldi	r21, 0x42	; 66
     684:	7d d4       	rcall	.+2298   	; 0xf80 <__mulsf3>
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
     68a:	60 91 c5 02 	lds	r22, 0x02C5
     68e:	70 91 c6 02 	lds	r23, 0x02C6
     692:	6a 19       	sub	r22, r10
     694:	7b 09       	sbc	r23, r11
     696:	88 27       	eor	r24, r24
     698:	77 fd       	sbrc	r23, 7
     69a:	80 95       	com	r24
     69c:	98 2f       	mov	r25, r24
     69e:	c0 d3       	rcall	.+1920   	; 0xe20 <__floatsisf>
     6a0:	9b 01       	movw	r18, r22
     6a2:	ac 01       	movw	r20, r24
     6a4:	c7 01       	movw	r24, r14
     6a6:	b6 01       	movw	r22, r12
     6a8:	20 d3       	rcall	.+1600   	; 0xcea <__divsf3>
     6aa:	87 d3       	rcall	.+1806   	; 0xdba <__fixsfsi>
		
		error = (double)(set_point - curr_pos);
     6ac:	a0 90 bb 02 	lds	r10, 0x02BB
     6b0:	b0 90 bc 02 	lds	r11, 0x02BC
     6b4:	a6 1a       	sub	r10, r22
     6b6:	b7 0a       	sbc	r11, r23
     6b8:	b5 01       	movw	r22, r10
     6ba:	88 27       	eor	r24, r24
     6bc:	77 fd       	sbrc	r23, 7
     6be:	80 95       	com	r24
     6c0:	98 2f       	mov	r25, r24
     6c2:	ae d3       	rcall	.+1884   	; 0xe20 <__floatsisf>
     6c4:	6b 01       	movw	r12, r22
     6c6:	7c 01       	movw	r14, r24
     6c8:	60 93 c1 02 	sts	0x02C1, r22
     6cc:	70 93 c2 02 	sts	0x02C2, r23
     6d0:	80 93 c3 02 	sts	0x02C3, r24
     6d4:	90 93 c4 02 	sts	0x02C4, r25
		
		if (error < 0)
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	a9 01       	movw	r20, r18
     6de:	01 d3       	rcall	.+1538   	; 0xce2 <__cmpsf2>
		{
			target_dir = RIGHT;
		}else
		{
			target_dir = LEFT;
     6e0:	c8 2f       	mov	r28, r24
     6e2:	cc 1f       	adc	r28, r28
     6e4:	cc 27       	eor	r28, r28
     6e6:	cc 1f       	adc	r28, r28
     6e8:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		integral = integral + error * dt;
     6ea:	20 91 c7 02 	lds	r18, 0x02C7
     6ee:	30 91 c8 02 	lds	r19, 0x02C8
     6f2:	40 91 c9 02 	lds	r20, 0x02C9
     6f6:	50 91 ca 02 	lds	r21, 0x02CA
     6fa:	c7 01       	movw	r24, r14
     6fc:	b6 01       	movw	r22, r12
     6fe:	40 d4       	rcall	.+2176   	; 0xf80 <__mulsf3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	60 91 cf 02 	lds	r22, 0x02CF
     708:	70 91 d0 02 	lds	r23, 0x02D0
     70c:	80 91 d1 02 	lds	r24, 0x02D1
     710:	90 91 d2 02 	lds	r25, 0x02D2
     714:	82 d2       	rcall	.+1284   	; 0xc1a <__addsf3>
     716:	60 93 cf 02 	sts	0x02CF, r22
     71a:	70 93 d0 02 	sts	0x02D0, r23
     71e:	80 93 d1 02 	sts	0x02D1, r24
     722:	90 93 d2 02 	sts	0x02D2, r25
		derivative = (error - prev_error)/dt;

		if (abs((int)error) < 6){
     726:	85 e0       	ldi	r24, 0x05	; 5
     728:	a8 0e       	add	r10, r24
     72a:	b1 1c       	adc	r11, r1
     72c:	8b e0       	ldi	r24, 0x0B	; 11
     72e:	a8 16       	cp	r10, r24
     730:	b1 04       	cpc	r11, r1
     732:	80 f4       	brcc	.+32     	; 0x754 <motor_controller+0x10e>
			error = 0;
     734:	10 92 c1 02 	sts	0x02C1, r1
     738:	10 92 c2 02 	sts	0x02C2, r1
     73c:	10 92 c3 02 	sts	0x02C3, r1
     740:	10 92 c4 02 	sts	0x02C4, r1
			integral = 0;
     744:	10 92 cf 02 	sts	0x02CF, r1
     748:	10 92 d0 02 	sts	0x02D0, r1
     74c:	10 92 d1 02 	sts	0x02D1, r1
     750:	10 92 d2 02 	sts	0x02D2, r1
		}

		//speed = abs((uint8_t) (kp*error + ki*integral + kd*derivative));
		speed = (uint8_t) abs((int)(kp*error + ki*integral));
     754:	c0 90 c1 02 	lds	r12, 0x02C1
     758:	d0 90 c2 02 	lds	r13, 0x02C2
     75c:	e0 90 c3 02 	lds	r14, 0x02C3
     760:	f0 90 c4 02 	lds	r15, 0x02C4
     764:	20 91 d3 02 	lds	r18, 0x02D3
     768:	30 91 d4 02 	lds	r19, 0x02D4
     76c:	40 91 d5 02 	lds	r20, 0x02D5
     770:	50 91 d6 02 	lds	r21, 0x02D6
     774:	c7 01       	movw	r24, r14
     776:	b6 01       	movw	r22, r12
     778:	03 d4       	rcall	.+2054   	; 0xf80 <__mulsf3>
     77a:	4b 01       	movw	r8, r22
     77c:	5c 01       	movw	r10, r24
     77e:	20 91 cf 02 	lds	r18, 0x02CF
     782:	30 91 d0 02 	lds	r19, 0x02D0
     786:	40 91 d1 02 	lds	r20, 0x02D1
     78a:	50 91 d2 02 	lds	r21, 0x02D2
     78e:	60 91 bd 02 	lds	r22, 0x02BD
     792:	70 91 be 02 	lds	r23, 0x02BE
     796:	80 91 bf 02 	lds	r24, 0x02BF
     79a:	90 91 c0 02 	lds	r25, 0x02C0
     79e:	f0 d3       	rcall	.+2016   	; 0xf80 <__mulsf3>
     7a0:	9b 01       	movw	r18, r22
     7a2:	ac 01       	movw	r20, r24
     7a4:	c5 01       	movw	r24, r10
     7a6:	b4 01       	movw	r22, r8
     7a8:	38 d2       	rcall	.+1136   	; 0xc1a <__addsf3>
     7aa:	07 d3       	rcall	.+1550   	; 0xdba <__fixsfsi>
     7ac:	9b 01       	movw	r18, r22
     7ae:	77 23       	and	r23, r23
     7b0:	24 f4       	brge	.+8      	; 0x7ba <motor_controller+0x174>
     7b2:	22 27       	eor	r18, r18
     7b4:	33 27       	eor	r19, r19
     7b6:	26 1b       	sub	r18, r22
     7b8:	37 0b       	sbc	r19, r23
     7ba:	d2 2f       	mov	r29, r18
		
		if (speed > 150)
     7bc:	27 39       	cpi	r18, 0x97	; 151
     7be:	40 f4       	brcc	.+16     	; 0x7d0 <motor_controller+0x18a>
		{
			speed = 150;
		}
		
		else if (speed < 55 && abs(error) > 5)
     7c0:	27 33       	cpi	r18, 0x37	; 55
     7c2:	48 f4       	brcc	.+18     	; 0x7d6 <motor_controller+0x190>
     7c4:	c7 01       	movw	r24, r14
     7c6:	b6 01       	movw	r22, r12
     7c8:	44 d4       	rcall	.+2184   	; 0x1052 <abs>
     7ca:	06 97       	sbiw	r24, 0x06	; 6
     7cc:	1c f4       	brge	.+6      	; 0x7d4 <motor_controller+0x18e>
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <motor_controller+0x190>
		//speed = abs((uint8_t) (kp*error + ki*integral + kd*derivative));
		speed = (uint8_t) abs((int)(kp*error + ki*integral));
		
		if (speed > 150)
		{
			speed = 150;
     7d0:	d6 e9       	ldi	r29, 0x96	; 150
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <motor_controller+0x190>
		}
		
		else if (speed < 55 && abs(error) > 5)
		{
			speed = 55;
     7d4:	d7 e3       	ldi	r29, 0x37	; 55
		}
		//	printf("MAXP: %d | BCP: %d | CP: %d | SP: %d\n\r", max_motor_pos, motor_cur_pos, curr_pos, set_point );
		
		prev_error = error;
     7d6:	c0 92 cb 02 	sts	0x02CB, r12
     7da:	d0 92 cc 02 	sts	0x02CC, r13
     7de:	e0 92 cd 02 	sts	0x02CD, r14
     7e2:	f0 92 ce 02 	sts	0x02CE, r15
		
		motor_move(target_dir, speed);
     7e6:	6d 2f       	mov	r22, r29
     7e8:	8c 2f       	mov	r24, r28
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	c9 d0       	rcall	.+402    	; 0x980 <motor_move>
	}
	
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	bf 90       	pop	r11
     7fc:	af 90       	pop	r10
     7fe:	9f 90       	pop	r9
     800:	8f 90       	pop	r8
     802:	08 95       	ret

00000804 <motor_controller_set_point>:

void motor_controller_set_point(uint16_t sp)
{
	set_point = sp;
     804:	90 93 bc 02 	sts	0x02BC, r25
     808:	80 93 bb 02 	sts	0x02BB, r24
     80c:	08 95       	ret

0000080e <__vector_42>:
}

ISR(TIMER4_COMPA_vect){
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	0f 92       	push	r0
     816:	11 24       	eor	r1, r1
     818:	0b b6       	in	r0, 0x3b	; 59
     81a:	0f 92       	push	r0
     81c:	2f 93       	push	r18
     81e:	3f 93       	push	r19
     820:	4f 93       	push	r20
     822:	5f 93       	push	r21
     824:	6f 93       	push	r22
     826:	7f 93       	push	r23
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	af 93       	push	r26
     82e:	bf 93       	push	r27
     830:	ef 93       	push	r30
     832:	ff 93       	push	r31
	
	cli();
     834:	f8 94       	cli
	motor_controller();
     836:	07 df       	rcall	.-498    	; 0x646 <motor_controller>
	sei();
     838:	78 94       	sei
     83a:	ff 91       	pop	r31
     83c:	ef 91       	pop	r30
     83e:	bf 91       	pop	r27
     840:	af 91       	pop	r26
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	7f 91       	pop	r23
     848:	6f 91       	pop	r22
     84a:	5f 91       	pop	r21
     84c:	4f 91       	pop	r20
     84e:	3f 91       	pop	r19
     850:	2f 91       	pop	r18
     852:	0f 90       	pop	r0
     854:	0b be       	out	0x3b, r0	; 59
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <motor_reset_encoder>:


void motor_set_speed(uint8_t speed)
{
	//send speed through DAC/i2C
	dac_driver_send(speed);
     860:	e2 e0       	ldi	r30, 0x02	; 2
     862:	f1 e0       	ldi	r31, 0x01	; 1
     864:	80 81       	ld	r24, Z
     866:	8f 7b       	andi	r24, 0xBF	; 191
     868:	80 83       	st	Z, r24
     86a:	87 ec       	ldi	r24, 0xC7	; 199
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <motor_reset_encoder+0xe>
     872:	00 c0       	rjmp	.+0      	; 0x874 <motor_reset_encoder+0x14>
     874:	00 00       	nop
     876:	80 81       	ld	r24, Z
     878:	80 64       	ori	r24, 0x40	; 64
     87a:	80 83       	st	Z, r24
     87c:	08 95       	ret

0000087e <motor_init>:
     87e:	e1 e0       	ldi	r30, 0x01	; 1
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	80 81       	ld	r24, Z
     884:	80 62       	ori	r24, 0x20	; 32
     886:	80 83       	st	Z, r24
     888:	80 81       	ld	r24, Z
     88a:	88 60       	ori	r24, 0x08	; 8
     88c:	80 83       	st	Z, r24
     88e:	80 81       	ld	r24, Z
     890:	82 60       	ori	r24, 0x02	; 2
     892:	80 83       	st	Z, r24
     894:	80 81       	ld	r24, Z
     896:	80 64       	ori	r24, 0x40	; 64
     898:	80 83       	st	Z, r24
     89a:	80 81       	ld	r24, Z
     89c:	80 62       	ori	r24, 0x20	; 32
     89e:	80 83       	st	Z, r24
     8a0:	e7 e0       	ldi	r30, 0x07	; 7
     8a2:	f1 e0       	ldi	r31, 0x01	; 1
     8a4:	80 81       	ld	r24, Z
     8a6:	8e 7f       	andi	r24, 0xFE	; 254
     8a8:	80 83       	st	Z, r24
     8aa:	80 81       	ld	r24, Z
     8ac:	8d 7f       	andi	r24, 0xFD	; 253
     8ae:	80 83       	st	Z, r24
     8b0:	80 81       	ld	r24, Z
     8b2:	8b 7f       	andi	r24, 0xFB	; 251
     8b4:	80 83       	st	Z, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	87 7f       	andi	r24, 0xF7	; 247
     8ba:	80 83       	st	Z, r24
     8bc:	80 81       	ld	r24, Z
     8be:	8f 7e       	andi	r24, 0xEF	; 239
     8c0:	80 83       	st	Z, r24
     8c2:	80 81       	ld	r24, Z
     8c4:	8f 7d       	andi	r24, 0xDF	; 223
     8c6:	80 83       	st	Z, r24
     8c8:	80 81       	ld	r24, Z
     8ca:	8f 7b       	andi	r24, 0xBF	; 191
     8cc:	80 83       	st	Z, r24
     8ce:	80 81       	ld	r24, Z
     8d0:	8f 77       	andi	r24, 0x7F	; 127
     8d2:	80 83       	st	Z, r24
     8d4:	e2 e0       	ldi	r30, 0x02	; 2
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	80 81       	ld	r24, Z
     8da:	80 62       	ori	r24, 0x20	; 32
     8dc:	80 83       	st	Z, r24
     8de:	c0 cf       	rjmp	.-128    	; 0x860 <motor_reset_encoder>
     8e0:	08 95       	ret

000008e2 <motor_get_encoder>:
uint16_t motor_get_encoder()
{
	uint16_t encod_counter;
	uint8_t LSB_counter;
	
	clear_bit(PORTH, MJ1_OE);
     8e2:	e2 e0       	ldi	r30, 0x02	; 2
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	80 81       	ld	r24, Z
     8e8:	8f 7d       	andi	r24, 0xDF	; 223
     8ea:	80 83       	st	Z, r24
	clear_bit(PORTH, MJ1_SEL);
     8ec:	80 81       	ld	r24, Z
     8ee:	87 7f       	andi	r24, 0xF7	; 247
     8f0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f2:	2a e6       	ldi	r18, 0x6A	; 106
     8f4:	2a 95       	dec	r18
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <motor_get_encoder+0x12>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <motor_get_encoder+0x18>
	_delay_us(20);
	encod_counter = PINK;
     8fa:	80 91 06 01 	lds	r24, 0x0106
     8fe:	90 e0       	ldi	r25, 0x00	; 0
	
	set_bit(PORTH, MJ1_SEL);
     900:	20 81       	ld	r18, Z
     902:	28 60       	ori	r18, 0x08	; 8
     904:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     906:	3f ef       	ldi	r19, 0xFF	; 255
     908:	49 ef       	ldi	r20, 0xF9	; 249
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	31 50       	subi	r19, 0x01	; 1
     90e:	40 40       	sbci	r20, 0x00	; 0
     910:	20 40       	sbci	r18, 0x00	; 0
     912:	e1 f7       	brne	.-8      	; 0x90c <motor_get_encoder+0x2a>
     914:	00 c0       	rjmp	.+0      	; 0x916 <motor_get_encoder+0x34>
     916:	00 00       	nop
	_delay_ms(20);
	LSB_counter = PINK;
     918:	20 91 06 01 	lds	r18, 0x0106
	
	set_bit(PORTH, MJ1_OE);
     91c:	30 81       	ld	r19, Z
     91e:	30 62       	ori	r19, 0x20	; 32
     920:	30 83       	st	Z, r19
	//motor_reset_encoder();
	
	//8-bit left shift
	encod_counter = encod_counter*256;
     922:	98 2f       	mov	r25, r24
     924:	88 27       	eor	r24, r24
	//add LSB
	encod_counter += LSB_counter;
	
	return encod_counter;
}
     926:	82 0f       	add	r24, r18
     928:	91 1d       	adc	r25, r1
     92a:	08 95       	ret

0000092c <motor_move_joystick>:
}

void motor_move_joystick(int dir, int8_t speed)
{
	//set motor EN to 1
	set_bit(PORTH, MJ1_EN);
     92c:	e2 e0       	ldi	r30, 0x02	; 2
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	20 81       	ld	r18, Z
     932:	20 62       	ori	r18, 0x20	; 32
     934:	20 83       	st	Z, r18
	
	//printf("SPEED: %d\n\r", speed);

	if (dir == RIGHT)
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	91 05       	cpc	r25, r1
     93a:	21 f4       	brne	.+8      	; 0x944 <motor_move_joystick+0x18>
	{
		//printf("LEFT:%d\n\r", speed);
		set_bit(PORTH, MJ1_DIR);
     93c:	80 81       	ld	r24, Z
     93e:	82 60       	ori	r24, 0x02	; 2
     940:	80 83       	st	Z, r24
     942:	07 c0       	rjmp	.+14     	; 0x952 <motor_move_joystick+0x26>
	}else if (dir == LEFT)
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	29 f4       	brne	.+10     	; 0x952 <motor_move_joystick+0x26>
	{
		//printf("RIGHT\n\r");
		clear_bit(PORTH, MJ1_DIR);
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	f1 e0       	ldi	r31, 0x01	; 1
     94c:	80 81       	ld	r24, Z
     94e:	8d 7f       	andi	r24, 0xFD	; 253
     950:	80 83       	st	Z, r24
	}

	uint8_t speed_converted = (uint8_t) abs((int)(speed*1.3));
     952:	77 27       	eor	r23, r23
     954:	67 fd       	sbrc	r22, 7
     956:	70 95       	com	r23
     958:	87 2f       	mov	r24, r23
     95a:	97 2f       	mov	r25, r23
     95c:	61 d2       	rcall	.+1218   	; 0xe20 <__floatsisf>
     95e:	26 e6       	ldi	r18, 0x66	; 102
     960:	36 e6       	ldi	r19, 0x66	; 102
     962:	46 ea       	ldi	r20, 0xA6	; 166
     964:	5f e3       	ldi	r21, 0x3F	; 63
     966:	0c d3       	rcall	.+1560   	; 0xf80 <__mulsf3>
     968:	28 d2       	rcall	.+1104   	; 0xdba <__fixsfsi>
     96a:	9b 01       	movw	r18, r22
     96c:	77 23       	and	r23, r23
     96e:	24 f4       	brge	.+8      	; 0x978 <motor_move_joystick+0x4c>
     970:	22 27       	eor	r18, r18
     972:	33 27       	eor	r19, r19
     974:	26 1b       	sub	r18, r22
     976:	37 0b       	sbc	r19, r23


void motor_set_speed(uint8_t speed)
{
	//send speed through DAC/i2C
	dac_driver_send(speed);
     978:	c9 01       	movw	r24, r18
     97a:	99 27       	eor	r25, r25
     97c:	56 cd       	rjmp	.-1364   	; 0x42a <dac_driver_send>
     97e:	08 95       	ret

00000980 <motor_move>:
}

void motor_move(int dir, uint8_t speed)
{
	//set motor EN to 1
	set_bit(PORTH, MJ1_EN);
     980:	e2 e0       	ldi	r30, 0x02	; 2
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	20 81       	ld	r18, Z
     986:	20 62       	ori	r18, 0x20	; 32
     988:	20 83       	st	Z, r18
	
	//printf("SPEED: %d\n\r", speed);

	if (dir == RIGHT)
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	91 05       	cpc	r25, r1
     98e:	21 f4       	brne	.+8      	; 0x998 <motor_move+0x18>
	{
		//printf("LEFT:%d\n\r", speed);
		set_bit(PORTH, MJ1_DIR);
     990:	80 81       	ld	r24, Z
     992:	82 60       	ori	r24, 0x02	; 2
     994:	80 83       	st	Z, r24
     996:	07 c0       	rjmp	.+14     	; 0x9a6 <motor_move+0x26>
	}else if (dir == LEFT)
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	29 f4       	brne	.+10     	; 0x9a6 <motor_move+0x26>
	{
		//printf("RIGHT\n\r");
		clear_bit(PORTH, MJ1_DIR);
     99c:	e2 e0       	ldi	r30, 0x02	; 2
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	80 81       	ld	r24, Z
     9a2:	8d 7f       	andi	r24, 0xFD	; 253
     9a4:	80 83       	st	Z, r24


void motor_set_speed(uint8_t speed)
{
	//send speed through DAC/i2C
	dac_driver_send(speed);
     9a6:	86 2f       	mov	r24, r22
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	3f cd       	rjmp	.-1410   	; 0x42a <dac_driver_send>
     9ac:	08 95       	ret

000009ae <control_solenoid>:
	motor_set_speed(speed);
}

void control_solenoid(uint8_t push)
{
	if (push == 1)
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	31 f4       	brne	.+12     	; 0x9be <control_solenoid+0x10>
	{
		clear_bit(PORTL, PL0);
     9b2:	eb e0       	ldi	r30, 0x0B	; 11
     9b4:	f1 e0       	ldi	r31, 0x01	; 1
     9b6:	80 81       	ld	r24, Z
     9b8:	8e 7f       	andi	r24, 0xFE	; 254
     9ba:	80 83       	st	Z, r24
     9bc:	08 95       	ret
	}
	else
	{
		set_bit(PORTL, PL0);
     9be:	eb e0       	ldi	r30, 0x0B	; 11
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	80 81       	ld	r24, Z
     9c4:	81 60       	ori	r24, 0x01	; 1
     9c6:	80 83       	st	Z, r24
     9c8:	08 95       	ret

000009ca <SPI_MasterInit>:
//TODO - define for register bit (reusable code)

void SPI_MasterInit(void)
{
	/* Set MOSI, SCK and SS output all others input */
	DDRB |= (1<<PB2)|(1<<PB1)|(1<<PB7)|(1<<PB0);
     9ca:	84 b1       	in	r24, 0x04	; 4
     9cc:	87 68       	ori	r24, 0x87	; 135
     9ce:	84 b9       	out	0x04, r24	; 4
	//Set MISO as input
	DDRB &= ~(1<<PB3);
     9d0:	23 98       	cbi	0x04, 3	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     9d2:	81 e5       	ldi	r24, 0x51	; 81
     9d4:	8c bd       	out	0x2c, r24	; 44
     9d6:	08 95       	ret

000009d8 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     9d8:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     9da:	0d b4       	in	r0, 0x2d	; 45
     9dc:	07 fe       	sbrs	r0, 7
     9de:	fd cf       	rjmp	.-6      	; 0x9da <SPI_MasterTransmit+0x2>
}
     9e0:	08 95       	ret

000009e2 <spi_init>:
// }


void spi_init()
{
	SPI_MasterInit();
     9e2:	f3 cf       	rjmp	.-26     	; 0x9ca <SPI_MasterInit>
     9e4:	08 95       	ret

000009e6 <spi_send>:
}

void spi_send(char data)
{
	SPI_MasterTransmit(data);
     9e6:	f8 cf       	rjmp	.-16     	; 0x9d8 <SPI_MasterTransmit>
     9e8:	08 95       	ret

000009ea <spi_read>:
	
}

char spi_read()
{
	SPI_MasterTransmit(0x00);
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	f5 df       	rcall	.-22     	; 0x9d8 <SPI_MasterTransmit>
	return SPDR;
     9ee:	8e b5       	in	r24, 0x2e	; 46
}
     9f0:	08 95       	ret

000009f2 <timer_driver_init>:
#include <avr/io.h>
#include "avr/interrupt.h"

void timer_driver_init()
{
	set_bit(DDRE, PE3);
     9f2:	6b 9a       	sbi	0x0d, 3	; 13
	cli();
     9f4:	f8 94       	cli
	//TOP = 16MHz/pre-scale/50Hz
	ICR3 = 39999;
     9f6:	8f e3       	ldi	r24, 0x3F	; 63
     9f8:	9c e9       	ldi	r25, 0x9C	; 156
     9fa:	90 93 97 00 	sts	0x0097, r25
     9fe:	80 93 96 00 	sts	0x0096, r24
	
	//duty_cycle
	OCR3A = 3999;
     a02:	8f e9       	ldi	r24, 0x9F	; 159
     a04:	9f e0       	ldi	r25, 0x0F	; 15
     a06:	90 93 99 00 	sts	0x0099, r25
     a0a:	80 93 98 00 	sts	0x0098, r24
	
	//Set pre-scale to 8
	clear_bit(TCCR3B, CS30);
     a0e:	a1 e9       	ldi	r26, 0x91	; 145
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	8c 91       	ld	r24, X
     a14:	8e 7f       	andi	r24, 0xFE	; 254
     a16:	8c 93       	st	X, r24
	set_bit(TCCR3B, CS31);
     a18:	8c 91       	ld	r24, X
     a1a:	82 60       	ori	r24, 0x02	; 2
     a1c:	8c 93       	st	X, r24
	clear_bit(TCCR3B, CS32);
     a1e:	8c 91       	ld	r24, X
     a20:	8b 7f       	andi	r24, 0xFB	; 251
     a22:	8c 93       	st	X, r24
	
	//Set mode of operation to 14 (Fast PWM with ICRn)
	set_bit(TCCR3A, WGM31);
     a24:	e0 e9       	ldi	r30, 0x90	; 144
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	80 83       	st	Z, r24
	clear_bit(TCCR3A, WGM30);
     a2e:	80 81       	ld	r24, Z
     a30:	8e 7f       	andi	r24, 0xFE	; 254
     a32:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM33) | (1 << WGM32);
     a34:	8c 91       	ld	r24, X
     a36:	88 61       	ori	r24, 0x18	; 24
     a38:	8c 93       	st	X, r24
	
	//Enable compare interruption on reg OCRnA
	set_bit(TCCR3A, COM3A1);
     a3a:	80 81       	ld	r24, Z
     a3c:	80 68       	ori	r24, 0x80	; 128
     a3e:	80 83       	st	Z, r24
	clear_bit(TCCR3A, COM3A0);
     a40:	80 81       	ld	r24, Z
     a42:	8f 7b       	andi	r24, 0xBF	; 191
     a44:	80 83       	st	Z, r24

	sei();
     a46:	78 94       	sei
     a48:	08 95       	ret

00000a4a <timer_driver_set_duty_cycle>:
}

void timer_driver_set_duty_cycle(int8_t position)
{
	int duty_cycle = 20 * position + 1999;
     a4a:	24 e1       	ldi	r18, 0x14	; 20
     a4c:	82 02       	muls	r24, r18
     a4e:	c0 01       	movw	r24, r0
     a50:	11 24       	eor	r1, r1
     a52:	81 53       	subi	r24, 0x31	; 49
     a54:	98 4f       	sbci	r25, 0xF8	; 248
	//int duty_cycle = 20 * (100 - position) + 1999;
	//printf("%d\n\r", duty_cycle);
	
	if (duty_cycle < 1999)
     a56:	8f 3c       	cpi	r24, 0xCF	; 207
     a58:	27 e0       	ldi	r18, 0x07	; 7
     a5a:	92 07       	cpc	r25, r18
     a5c:	3c f0       	brlt	.+14     	; 0xa6c <timer_driver_set_duty_cycle+0x22>
     a5e:	80 3a       	cpi	r24, 0xA0	; 160
     a60:	2f e0       	ldi	r18, 0x0F	; 15
     a62:	92 07       	cpc	r25, r18
     a64:	2c f0       	brlt	.+10     	; 0xa70 <timer_driver_set_duty_cycle+0x26>
     a66:	8f e9       	ldi	r24, 0x9F	; 159
     a68:	9f e0       	ldi	r25, 0x0F	; 15
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <timer_driver_set_duty_cycle+0x26>
		duty_cycle = 1999;
     a6c:	8f ec       	ldi	r24, 0xCF	; 207
     a6e:	97 e0       	ldi	r25, 0x07	; 7
	else if (duty_cycle > 3999)
		duty_cycle = 3999;
	
	OCR3A = (uint16_t) duty_cycle;
     a70:	90 93 99 00 	sts	0x0099, r25
     a74:	80 93 98 00 	sts	0x0098, r24
     a78:	08 95       	ret

00000a7a <TWI_Master_Initialise>:
     a7a:	8c e0       	ldi	r24, 0x0C	; 12
     a7c:	80 93 b8 00 	sts	0x00B8, r24
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	80 93 bb 00 	sts	0x00BB, r24
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	80 93 bc 00 	sts	0x00BC, r24
     a8c:	08 95       	ret

00000a8e <TWI_Start_Transceiver_With_Data>:
     a8e:	ec eb       	ldi	r30, 0xBC	; 188
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	20 81       	ld	r18, Z
     a94:	20 fd       	sbrc	r18, 0
     a96:	fd cf       	rjmp	.-6      	; 0xa92 <TWI_Start_Transceiver_With_Data+0x4>
     a98:	60 93 ae 02 	sts	0x02AE, r22
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 81       	ld	r18, Z
     aa0:	20 93 af 02 	sts	0x02AF, r18
     aa4:	20 fd       	sbrc	r18, 0
     aa6:	0c c0       	rjmp	.+24     	; 0xac0 <TWI_Start_Transceiver_With_Data+0x32>
     aa8:	62 30       	cpi	r22, 0x02	; 2
     aaa:	50 f0       	brcs	.+20     	; 0xac0 <TWI_Start_Transceiver_With_Data+0x32>
     aac:	dc 01       	movw	r26, r24
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	e0 eb       	ldi	r30, 0xB0	; 176
     ab2:	f2 e0       	ldi	r31, 0x02	; 2
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	9d 91       	ld	r25, X+
     ab8:	91 93       	st	Z+, r25
     aba:	8f 5f       	subi	r24, 0xFF	; 255
     abc:	86 13       	cpse	r24, r22
     abe:	fb cf       	rjmp	.-10     	; 0xab6 <TWI_Start_Transceiver_With_Data+0x28>
     ac0:	10 92 ad 02 	sts	0x02AD, r1
     ac4:	88 ef       	ldi	r24, 0xF8	; 248
     ac6:	80 93 06 02 	sts	0x0206, r24
     aca:	85 ea       	ldi	r24, 0xA5	; 165
     acc:	80 93 bc 00 	sts	0x00BC, r24
     ad0:	08 95       	ret

00000ad2 <__vector_39>:
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	0b b6       	in	r0, 0x3b	; 59
     ade:	0f 92       	push	r0
     ae0:	2f 93       	push	r18
     ae2:	3f 93       	push	r19
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
     af0:	80 91 b9 00 	lds	r24, 0x00B9
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	fc 01       	movw	r30, r24
     af8:	38 97       	sbiw	r30, 0x08	; 8
     afa:	e1 35       	cpi	r30, 0x51	; 81
     afc:	f1 05       	cpc	r31, r1
     afe:	08 f0       	brcs	.+2      	; 0xb02 <__vector_39+0x30>
     b00:	55 c0       	rjmp	.+170    	; 0xbac <__vector_39+0xda>
     b02:	ee 58       	subi	r30, 0x8E	; 142
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	9f c2       	rjmp	.+1342   	; 0x1046 <__tablejump2__>
     b08:	10 92 ac 02 	sts	0x02AC, r1
     b0c:	e0 91 ac 02 	lds	r30, 0x02AC
     b10:	80 91 ae 02 	lds	r24, 0x02AE
     b14:	e8 17       	cp	r30, r24
     b16:	70 f4       	brcc	.+28     	; 0xb34 <__vector_39+0x62>
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	8e 0f       	add	r24, r30
     b1c:	80 93 ac 02 	sts	0x02AC, r24
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	e1 55       	subi	r30, 0x51	; 81
     b24:	fd 4f       	sbci	r31, 0xFD	; 253
     b26:	80 81       	ld	r24, Z
     b28:	80 93 bb 00 	sts	0x00BB, r24
     b2c:	85 e8       	ldi	r24, 0x85	; 133
     b2e:	80 93 bc 00 	sts	0x00BC, r24
     b32:	43 c0       	rjmp	.+134    	; 0xbba <__vector_39+0xe8>
     b34:	80 91 ad 02 	lds	r24, 0x02AD
     b38:	81 60       	ori	r24, 0x01	; 1
     b3a:	80 93 ad 02 	sts	0x02AD, r24
     b3e:	84 e9       	ldi	r24, 0x94	; 148
     b40:	80 93 bc 00 	sts	0x00BC, r24
     b44:	3a c0       	rjmp	.+116    	; 0xbba <__vector_39+0xe8>
     b46:	e0 91 ac 02 	lds	r30, 0x02AC
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8e 0f       	add	r24, r30
     b4e:	80 93 ac 02 	sts	0x02AC, r24
     b52:	80 91 bb 00 	lds	r24, 0x00BB
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	e1 55       	subi	r30, 0x51	; 81
     b5a:	fd 4f       	sbci	r31, 0xFD	; 253
     b5c:	80 83       	st	Z, r24
     b5e:	20 91 ac 02 	lds	r18, 0x02AC
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	80 91 ae 02 	lds	r24, 0x02AE
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	28 17       	cp	r18, r24
     b6e:	39 07       	cpc	r19, r25
     b70:	24 f4       	brge	.+8      	; 0xb7a <__vector_39+0xa8>
     b72:	85 ec       	ldi	r24, 0xC5	; 197
     b74:	80 93 bc 00 	sts	0x00BC, r24
     b78:	20 c0       	rjmp	.+64     	; 0xbba <__vector_39+0xe8>
     b7a:	85 e8       	ldi	r24, 0x85	; 133
     b7c:	80 93 bc 00 	sts	0x00BC, r24
     b80:	1c c0       	rjmp	.+56     	; 0xbba <__vector_39+0xe8>
     b82:	80 91 bb 00 	lds	r24, 0x00BB
     b86:	e0 91 ac 02 	lds	r30, 0x02AC
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	e1 55       	subi	r30, 0x51	; 81
     b8e:	fd 4f       	sbci	r31, 0xFD	; 253
     b90:	80 83       	st	Z, r24
     b92:	80 91 ad 02 	lds	r24, 0x02AD
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	80 93 ad 02 	sts	0x02AD, r24
     b9c:	84 e9       	ldi	r24, 0x94	; 148
     b9e:	80 93 bc 00 	sts	0x00BC, r24
     ba2:	0b c0       	rjmp	.+22     	; 0xbba <__vector_39+0xe8>
     ba4:	85 ea       	ldi	r24, 0xA5	; 165
     ba6:	80 93 bc 00 	sts	0x00BC, r24
     baa:	07 c0       	rjmp	.+14     	; 0xbba <__vector_39+0xe8>
     bac:	80 91 b9 00 	lds	r24, 0x00B9
     bb0:	80 93 06 02 	sts	0x0206, r24
     bb4:	84 e0       	ldi	r24, 0x04	; 4
     bb6:	80 93 bc 00 	sts	0x00BC, r24
     bba:	ff 91       	pop	r31
     bbc:	ef 91       	pop	r30
     bbe:	bf 91       	pop	r27
     bc0:	af 91       	pop	r26
     bc2:	9f 91       	pop	r25
     bc4:	8f 91       	pop	r24
     bc6:	3f 91       	pop	r19
     bc8:	2f 91       	pop	r18
     bca:	0f 90       	pop	r0
     bcc:	0b be       	out	0x3b, r0	; 59
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	0f 90       	pop	r0
     bd4:	1f 90       	pop	r1
     bd6:	18 95       	reti

00000bd8 <USART_Transmit>:
     bd8:	e0 ec       	ldi	r30, 0xC0	; 192
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	90 81       	ld	r25, Z
     bde:	95 ff       	sbrs	r25, 5
     be0:	fd cf       	rjmp	.-6      	; 0xbdc <USART_Transmit+0x4>
     be2:	80 93 c6 00 	sts	0x00C6, r24
     be6:	08 95       	ret

00000be8 <USART_Receive>:
     be8:	e0 ec       	ldi	r30, 0xC0	; 192
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	88 23       	and	r24, r24
     bf0:	ec f7       	brge	.-6      	; 0xbec <USART_Receive+0x4>
     bf2:	80 91 c6 00 	lds	r24, 0x00C6
     bf6:	08 95       	ret

00000bf8 <USART_Init>:
     bf8:	90 93 c5 00 	sts	0x00C5, r25
     bfc:	80 93 c4 00 	sts	0x00C4, r24
     c00:	88 e1       	ldi	r24, 0x18	; 24
     c02:	80 93 c1 00 	sts	0x00C1, r24
     c06:	8e e0       	ldi	r24, 0x0E	; 14
     c08:	80 93 c2 00 	sts	0x00C2, r24
     c0c:	64 ef       	ldi	r22, 0xF4	; 244
     c0e:	75 e0       	ldi	r23, 0x05	; 5
     c10:	8c ee       	ldi	r24, 0xEC	; 236
     c12:	95 e0       	ldi	r25, 0x05	; 5
     c14:	4b c3       	rjmp	.+1686   	; 0x12ac <fdevopen>
     c16:	08 95       	ret

00000c18 <__subsf3>:
     c18:	50 58       	subi	r21, 0x80	; 128

00000c1a <__addsf3>:
     c1a:	bb 27       	eor	r27, r27
     c1c:	aa 27       	eor	r26, r26
     c1e:	0e d0       	rcall	.+28     	; 0xc3c <__addsf3x>
     c20:	75 c1       	rjmp	.+746    	; 0xf0c <__fp_round>
     c22:	66 d1       	rcall	.+716    	; 0xef0 <__fp_pscA>
     c24:	30 f0       	brcs	.+12     	; 0xc32 <__addsf3+0x18>
     c26:	6b d1       	rcall	.+726    	; 0xefe <__fp_pscB>
     c28:	20 f0       	brcs	.+8      	; 0xc32 <__addsf3+0x18>
     c2a:	31 f4       	brne	.+12     	; 0xc38 <__addsf3+0x1e>
     c2c:	9f 3f       	cpi	r25, 0xFF	; 255
     c2e:	11 f4       	brne	.+4      	; 0xc34 <__addsf3+0x1a>
     c30:	1e f4       	brtc	.+6      	; 0xc38 <__addsf3+0x1e>
     c32:	5b c1       	rjmp	.+694    	; 0xeea <__fp_nan>
     c34:	0e f4       	brtc	.+2      	; 0xc38 <__addsf3+0x1e>
     c36:	e0 95       	com	r30
     c38:	e7 fb       	bst	r30, 7
     c3a:	51 c1       	rjmp	.+674    	; 0xede <__fp_inf>

00000c3c <__addsf3x>:
     c3c:	e9 2f       	mov	r30, r25
     c3e:	77 d1       	rcall	.+750    	; 0xf2e <__fp_split3>
     c40:	80 f3       	brcs	.-32     	; 0xc22 <__addsf3+0x8>
     c42:	ba 17       	cp	r27, r26
     c44:	62 07       	cpc	r22, r18
     c46:	73 07       	cpc	r23, r19
     c48:	84 07       	cpc	r24, r20
     c4a:	95 07       	cpc	r25, r21
     c4c:	18 f0       	brcs	.+6      	; 0xc54 <__addsf3x+0x18>
     c4e:	71 f4       	brne	.+28     	; 0xc6c <__addsf3x+0x30>
     c50:	9e f5       	brtc	.+102    	; 0xcb8 <__addsf3x+0x7c>
     c52:	8f c1       	rjmp	.+798    	; 0xf72 <__fp_zero>
     c54:	0e f4       	brtc	.+2      	; 0xc58 <__addsf3x+0x1c>
     c56:	e0 95       	com	r30
     c58:	0b 2e       	mov	r0, r27
     c5a:	ba 2f       	mov	r27, r26
     c5c:	a0 2d       	mov	r26, r0
     c5e:	0b 01       	movw	r0, r22
     c60:	b9 01       	movw	r22, r18
     c62:	90 01       	movw	r18, r0
     c64:	0c 01       	movw	r0, r24
     c66:	ca 01       	movw	r24, r20
     c68:	a0 01       	movw	r20, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	ff 27       	eor	r31, r31
     c6e:	59 1b       	sub	r21, r25
     c70:	99 f0       	breq	.+38     	; 0xc98 <__addsf3x+0x5c>
     c72:	59 3f       	cpi	r21, 0xF9	; 249
     c74:	50 f4       	brcc	.+20     	; 0xc8a <__addsf3x+0x4e>
     c76:	50 3e       	cpi	r21, 0xE0	; 224
     c78:	68 f1       	brcs	.+90     	; 0xcd4 <__addsf3x+0x98>
     c7a:	1a 16       	cp	r1, r26
     c7c:	f0 40       	sbci	r31, 0x00	; 0
     c7e:	a2 2f       	mov	r26, r18
     c80:	23 2f       	mov	r18, r19
     c82:	34 2f       	mov	r19, r20
     c84:	44 27       	eor	r20, r20
     c86:	58 5f       	subi	r21, 0xF8	; 248
     c88:	f3 cf       	rjmp	.-26     	; 0xc70 <__addsf3x+0x34>
     c8a:	46 95       	lsr	r20
     c8c:	37 95       	ror	r19
     c8e:	27 95       	ror	r18
     c90:	a7 95       	ror	r26
     c92:	f0 40       	sbci	r31, 0x00	; 0
     c94:	53 95       	inc	r21
     c96:	c9 f7       	brne	.-14     	; 0xc8a <__addsf3x+0x4e>
     c98:	7e f4       	brtc	.+30     	; 0xcb8 <__addsf3x+0x7c>
     c9a:	1f 16       	cp	r1, r31
     c9c:	ba 0b       	sbc	r27, r26
     c9e:	62 0b       	sbc	r22, r18
     ca0:	73 0b       	sbc	r23, r19
     ca2:	84 0b       	sbc	r24, r20
     ca4:	ba f0       	brmi	.+46     	; 0xcd4 <__addsf3x+0x98>
     ca6:	91 50       	subi	r25, 0x01	; 1
     ca8:	a1 f0       	breq	.+40     	; 0xcd2 <__addsf3x+0x96>
     caa:	ff 0f       	add	r31, r31
     cac:	bb 1f       	adc	r27, r27
     cae:	66 1f       	adc	r22, r22
     cb0:	77 1f       	adc	r23, r23
     cb2:	88 1f       	adc	r24, r24
     cb4:	c2 f7       	brpl	.-16     	; 0xca6 <__addsf3x+0x6a>
     cb6:	0e c0       	rjmp	.+28     	; 0xcd4 <__addsf3x+0x98>
     cb8:	ba 0f       	add	r27, r26
     cba:	62 1f       	adc	r22, r18
     cbc:	73 1f       	adc	r23, r19
     cbe:	84 1f       	adc	r24, r20
     cc0:	48 f4       	brcc	.+18     	; 0xcd4 <__addsf3x+0x98>
     cc2:	87 95       	ror	r24
     cc4:	77 95       	ror	r23
     cc6:	67 95       	ror	r22
     cc8:	b7 95       	ror	r27
     cca:	f7 95       	ror	r31
     ccc:	9e 3f       	cpi	r25, 0xFE	; 254
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <__addsf3x+0x96>
     cd0:	b3 cf       	rjmp	.-154    	; 0xc38 <__addsf3+0x1e>
     cd2:	93 95       	inc	r25
     cd4:	88 0f       	add	r24, r24
     cd6:	08 f0       	brcs	.+2      	; 0xcda <__addsf3x+0x9e>
     cd8:	99 27       	eor	r25, r25
     cda:	ee 0f       	add	r30, r30
     cdc:	97 95       	ror	r25
     cde:	87 95       	ror	r24
     ce0:	08 95       	ret

00000ce2 <__cmpsf2>:
     ce2:	d9 d0       	rcall	.+434    	; 0xe96 <__fp_cmp>
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <__cmpsf2+0x6>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	08 95       	ret

00000cea <__divsf3>:
     cea:	0c d0       	rcall	.+24     	; 0xd04 <__divsf3x>
     cec:	0f c1       	rjmp	.+542    	; 0xf0c <__fp_round>
     cee:	07 d1       	rcall	.+526    	; 0xefe <__fp_pscB>
     cf0:	40 f0       	brcs	.+16     	; 0xd02 <__divsf3+0x18>
     cf2:	fe d0       	rcall	.+508    	; 0xef0 <__fp_pscA>
     cf4:	30 f0       	brcs	.+12     	; 0xd02 <__divsf3+0x18>
     cf6:	21 f4       	brne	.+8      	; 0xd00 <__divsf3+0x16>
     cf8:	5f 3f       	cpi	r21, 0xFF	; 255
     cfa:	19 f0       	breq	.+6      	; 0xd02 <__divsf3+0x18>
     cfc:	f0 c0       	rjmp	.+480    	; 0xede <__fp_inf>
     cfe:	51 11       	cpse	r21, r1
     d00:	39 c1       	rjmp	.+626    	; 0xf74 <__fp_szero>
     d02:	f3 c0       	rjmp	.+486    	; 0xeea <__fp_nan>

00000d04 <__divsf3x>:
     d04:	14 d1       	rcall	.+552    	; 0xf2e <__fp_split3>
     d06:	98 f3       	brcs	.-26     	; 0xcee <__divsf3+0x4>

00000d08 <__divsf3_pse>:
     d08:	99 23       	and	r25, r25
     d0a:	c9 f3       	breq	.-14     	; 0xcfe <__divsf3+0x14>
     d0c:	55 23       	and	r21, r21
     d0e:	b1 f3       	breq	.-20     	; 0xcfc <__divsf3+0x12>
     d10:	95 1b       	sub	r25, r21
     d12:	55 0b       	sbc	r21, r21
     d14:	bb 27       	eor	r27, r27
     d16:	aa 27       	eor	r26, r26
     d18:	62 17       	cp	r22, r18
     d1a:	73 07       	cpc	r23, r19
     d1c:	84 07       	cpc	r24, r20
     d1e:	38 f0       	brcs	.+14     	; 0xd2e <__divsf3_pse+0x26>
     d20:	9f 5f       	subi	r25, 0xFF	; 255
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	44 1f       	adc	r20, r20
     d2a:	aa 1f       	adc	r26, r26
     d2c:	a9 f3       	breq	.-22     	; 0xd18 <__divsf3_pse+0x10>
     d2e:	33 d0       	rcall	.+102    	; 0xd96 <__divsf3_pse+0x8e>
     d30:	0e 2e       	mov	r0, r30
     d32:	3a f0       	brmi	.+14     	; 0xd42 <__divsf3_pse+0x3a>
     d34:	e0 e8       	ldi	r30, 0x80	; 128
     d36:	30 d0       	rcall	.+96     	; 0xd98 <__divsf3_pse+0x90>
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	50 40       	sbci	r21, 0x00	; 0
     d3c:	e6 95       	lsr	r30
     d3e:	00 1c       	adc	r0, r0
     d40:	ca f7       	brpl	.-14     	; 0xd34 <__divsf3_pse+0x2c>
     d42:	29 d0       	rcall	.+82     	; 0xd96 <__divsf3_pse+0x8e>
     d44:	fe 2f       	mov	r31, r30
     d46:	27 d0       	rcall	.+78     	; 0xd96 <__divsf3_pse+0x8e>
     d48:	66 0f       	add	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	88 1f       	adc	r24, r24
     d4e:	bb 1f       	adc	r27, r27
     d50:	26 17       	cp	r18, r22
     d52:	37 07       	cpc	r19, r23
     d54:	48 07       	cpc	r20, r24
     d56:	ab 07       	cpc	r26, r27
     d58:	b0 e8       	ldi	r27, 0x80	; 128
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__divsf3_pse+0x56>
     d5c:	bb 0b       	sbc	r27, r27
     d5e:	80 2d       	mov	r24, r0
     d60:	bf 01       	movw	r22, r30
     d62:	ff 27       	eor	r31, r31
     d64:	93 58       	subi	r25, 0x83	; 131
     d66:	5f 4f       	sbci	r21, 0xFF	; 255
     d68:	2a f0       	brmi	.+10     	; 0xd74 <__divsf3_pse+0x6c>
     d6a:	9e 3f       	cpi	r25, 0xFE	; 254
     d6c:	51 05       	cpc	r21, r1
     d6e:	68 f0       	brcs	.+26     	; 0xd8a <__divsf3_pse+0x82>
     d70:	b6 c0       	rjmp	.+364    	; 0xede <__fp_inf>
     d72:	00 c1       	rjmp	.+512    	; 0xf74 <__fp_szero>
     d74:	5f 3f       	cpi	r21, 0xFF	; 255
     d76:	ec f3       	brlt	.-6      	; 0xd72 <__divsf3_pse+0x6a>
     d78:	98 3e       	cpi	r25, 0xE8	; 232
     d7a:	dc f3       	brlt	.-10     	; 0xd72 <__divsf3_pse+0x6a>
     d7c:	86 95       	lsr	r24
     d7e:	77 95       	ror	r23
     d80:	67 95       	ror	r22
     d82:	b7 95       	ror	r27
     d84:	f7 95       	ror	r31
     d86:	9f 5f       	subi	r25, 0xFF	; 255
     d88:	c9 f7       	brne	.-14     	; 0xd7c <__divsf3_pse+0x74>
     d8a:	88 0f       	add	r24, r24
     d8c:	91 1d       	adc	r25, r1
     d8e:	96 95       	lsr	r25
     d90:	87 95       	ror	r24
     d92:	97 f9       	bld	r25, 7
     d94:	08 95       	ret
     d96:	e1 e0       	ldi	r30, 0x01	; 1
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	bb 1f       	adc	r27, r27
     da0:	62 17       	cp	r22, r18
     da2:	73 07       	cpc	r23, r19
     da4:	84 07       	cpc	r24, r20
     da6:	ba 07       	cpc	r27, r26
     da8:	20 f0       	brcs	.+8      	; 0xdb2 <__divsf3_pse+0xaa>
     daa:	62 1b       	sub	r22, r18
     dac:	73 0b       	sbc	r23, r19
     dae:	84 0b       	sbc	r24, r20
     db0:	ba 0b       	sbc	r27, r26
     db2:	ee 1f       	adc	r30, r30
     db4:	88 f7       	brcc	.-30     	; 0xd98 <__divsf3_pse+0x90>
     db6:	e0 95       	com	r30
     db8:	08 95       	ret

00000dba <__fixsfsi>:
     dba:	04 d0       	rcall	.+8      	; 0xdc4 <__fixunssfsi>
     dbc:	68 94       	set
     dbe:	b1 11       	cpse	r27, r1
     dc0:	d9 c0       	rjmp	.+434    	; 0xf74 <__fp_szero>
     dc2:	08 95       	ret

00000dc4 <__fixunssfsi>:
     dc4:	bc d0       	rcall	.+376    	; 0xf3e <__fp_splitA>
     dc6:	88 f0       	brcs	.+34     	; 0xdea <__fixunssfsi+0x26>
     dc8:	9f 57       	subi	r25, 0x7F	; 127
     dca:	90 f0       	brcs	.+36     	; 0xdf0 <__fixunssfsi+0x2c>
     dcc:	b9 2f       	mov	r27, r25
     dce:	99 27       	eor	r25, r25
     dd0:	b7 51       	subi	r27, 0x17	; 23
     dd2:	a0 f0       	brcs	.+40     	; 0xdfc <__fixunssfsi+0x38>
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <__fixunssfsi+0x46>
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	1a f0       	brmi	.+6      	; 0xde6 <__fixunssfsi+0x22>
     de0:	ba 95       	dec	r27
     de2:	c9 f7       	brne	.-14     	; 0xdd6 <__fixunssfsi+0x12>
     de4:	12 c0       	rjmp	.+36     	; 0xe0a <__fixunssfsi+0x46>
     de6:	b1 30       	cpi	r27, 0x01	; 1
     de8:	81 f0       	breq	.+32     	; 0xe0a <__fixunssfsi+0x46>
     dea:	c3 d0       	rcall	.+390    	; 0xf72 <__fp_zero>
     dec:	b1 e0       	ldi	r27, 0x01	; 1
     dee:	08 95       	ret
     df0:	c0 c0       	rjmp	.+384    	; 0xf72 <__fp_zero>
     df2:	67 2f       	mov	r22, r23
     df4:	78 2f       	mov	r23, r24
     df6:	88 27       	eor	r24, r24
     df8:	b8 5f       	subi	r27, 0xF8	; 248
     dfa:	39 f0       	breq	.+14     	; 0xe0a <__fixunssfsi+0x46>
     dfc:	b9 3f       	cpi	r27, 0xF9	; 249
     dfe:	cc f3       	brlt	.-14     	; 0xdf2 <__fixunssfsi+0x2e>
     e00:	86 95       	lsr	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b3 95       	inc	r27
     e08:	d9 f7       	brne	.-10     	; 0xe00 <__fixunssfsi+0x3c>
     e0a:	3e f4       	brtc	.+14     	; 0xe1a <__fixunssfsi+0x56>
     e0c:	90 95       	com	r25
     e0e:	80 95       	com	r24
     e10:	70 95       	com	r23
     e12:	61 95       	neg	r22
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	8f 4f       	sbci	r24, 0xFF	; 255
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	08 95       	ret

00000e1c <__floatunsisf>:
     e1c:	e8 94       	clt
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <__floatsisf+0x12>

00000e20 <__floatsisf>:
     e20:	97 fb       	bst	r25, 7
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__floatsisf+0x12>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	99 23       	and	r25, r25
     e34:	a9 f0       	breq	.+42     	; 0xe60 <__floatsisf+0x40>
     e36:	f9 2f       	mov	r31, r25
     e38:	96 e9       	ldi	r25, 0x96	; 150
     e3a:	bb 27       	eor	r27, r27
     e3c:	93 95       	inc	r25
     e3e:	f6 95       	lsr	r31
     e40:	87 95       	ror	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	f1 11       	cpse	r31, r1
     e4a:	f8 cf       	rjmp	.-16     	; 0xe3c <__floatsisf+0x1c>
     e4c:	fa f4       	brpl	.+62     	; 0xe8c <__floatsisf+0x6c>
     e4e:	bb 0f       	add	r27, r27
     e50:	11 f4       	brne	.+4      	; 0xe56 <__floatsisf+0x36>
     e52:	60 ff       	sbrs	r22, 0
     e54:	1b c0       	rjmp	.+54     	; 0xe8c <__floatsisf+0x6c>
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	16 c0       	rjmp	.+44     	; 0xe8c <__floatsisf+0x6c>
     e60:	88 23       	and	r24, r24
     e62:	11 f0       	breq	.+4      	; 0xe68 <__floatsisf+0x48>
     e64:	96 e9       	ldi	r25, 0x96	; 150
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <__floatsisf+0x6a>
     e68:	77 23       	and	r23, r23
     e6a:	21 f0       	breq	.+8      	; 0xe74 <__floatsisf+0x54>
     e6c:	9e e8       	ldi	r25, 0x8E	; 142
     e6e:	87 2f       	mov	r24, r23
     e70:	76 2f       	mov	r23, r22
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <__floatsisf+0x5e>
     e74:	66 23       	and	r22, r22
     e76:	71 f0       	breq	.+28     	; 0xe94 <__floatsisf+0x74>
     e78:	96 e8       	ldi	r25, 0x86	; 134
     e7a:	86 2f       	mov	r24, r22
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	2a f0       	brmi	.+10     	; 0xe8c <__floatsisf+0x6c>
     e82:	9a 95       	dec	r25
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	da f7       	brpl	.-10     	; 0xe82 <__floatsisf+0x62>
     e8c:	88 0f       	add	r24, r24
     e8e:	96 95       	lsr	r25
     e90:	87 95       	ror	r24
     e92:	97 f9       	bld	r25, 7
     e94:	08 95       	ret

00000e96 <__fp_cmp>:
     e96:	99 0f       	add	r25, r25
     e98:	00 08       	sbc	r0, r0
     e9a:	55 0f       	add	r21, r21
     e9c:	aa 0b       	sbc	r26, r26
     e9e:	e0 e8       	ldi	r30, 0x80	; 128
     ea0:	fe ef       	ldi	r31, 0xFE	; 254
     ea2:	16 16       	cp	r1, r22
     ea4:	17 06       	cpc	r1, r23
     ea6:	e8 07       	cpc	r30, r24
     ea8:	f9 07       	cpc	r31, r25
     eaa:	c0 f0       	brcs	.+48     	; 0xedc <__fp_cmp+0x46>
     eac:	12 16       	cp	r1, r18
     eae:	13 06       	cpc	r1, r19
     eb0:	e4 07       	cpc	r30, r20
     eb2:	f5 07       	cpc	r31, r21
     eb4:	98 f0       	brcs	.+38     	; 0xedc <__fp_cmp+0x46>
     eb6:	62 1b       	sub	r22, r18
     eb8:	73 0b       	sbc	r23, r19
     eba:	84 0b       	sbc	r24, r20
     ebc:	95 0b       	sbc	r25, r21
     ebe:	39 f4       	brne	.+14     	; 0xece <__fp_cmp+0x38>
     ec0:	0a 26       	eor	r0, r26
     ec2:	61 f0       	breq	.+24     	; 0xedc <__fp_cmp+0x46>
     ec4:	23 2b       	or	r18, r19
     ec6:	24 2b       	or	r18, r20
     ec8:	25 2b       	or	r18, r21
     eca:	21 f4       	brne	.+8      	; 0xed4 <__fp_cmp+0x3e>
     ecc:	08 95       	ret
     ece:	0a 26       	eor	r0, r26
     ed0:	09 f4       	brne	.+2      	; 0xed4 <__fp_cmp+0x3e>
     ed2:	a1 40       	sbci	r26, 0x01	; 1
     ed4:	a6 95       	lsr	r26
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	81 1d       	adc	r24, r1
     eda:	81 1d       	adc	r24, r1
     edc:	08 95       	ret

00000ede <__fp_inf>:
     ede:	97 f9       	bld	r25, 7
     ee0:	9f 67       	ori	r25, 0x7F	; 127
     ee2:	80 e8       	ldi	r24, 0x80	; 128
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	08 95       	ret

00000eea <__fp_nan>:
     eea:	9f ef       	ldi	r25, 0xFF	; 255
     eec:	80 ec       	ldi	r24, 0xC0	; 192
     eee:	08 95       	ret

00000ef0 <__fp_pscA>:
     ef0:	00 24       	eor	r0, r0
     ef2:	0a 94       	dec	r0
     ef4:	16 16       	cp	r1, r22
     ef6:	17 06       	cpc	r1, r23
     ef8:	18 06       	cpc	r1, r24
     efa:	09 06       	cpc	r0, r25
     efc:	08 95       	ret

00000efe <__fp_pscB>:
     efe:	00 24       	eor	r0, r0
     f00:	0a 94       	dec	r0
     f02:	12 16       	cp	r1, r18
     f04:	13 06       	cpc	r1, r19
     f06:	14 06       	cpc	r1, r20
     f08:	05 06       	cpc	r0, r21
     f0a:	08 95       	ret

00000f0c <__fp_round>:
     f0c:	09 2e       	mov	r0, r25
     f0e:	03 94       	inc	r0
     f10:	00 0c       	add	r0, r0
     f12:	11 f4       	brne	.+4      	; 0xf18 <__fp_round+0xc>
     f14:	88 23       	and	r24, r24
     f16:	52 f0       	brmi	.+20     	; 0xf2c <__fp_round+0x20>
     f18:	bb 0f       	add	r27, r27
     f1a:	40 f4       	brcc	.+16     	; 0xf2c <__fp_round+0x20>
     f1c:	bf 2b       	or	r27, r31
     f1e:	11 f4       	brne	.+4      	; 0xf24 <__fp_round+0x18>
     f20:	60 ff       	sbrs	r22, 0
     f22:	04 c0       	rjmp	.+8      	; 0xf2c <__fp_round+0x20>
     f24:	6f 5f       	subi	r22, 0xFF	; 255
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	8f 4f       	sbci	r24, 0xFF	; 255
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	08 95       	ret

00000f2e <__fp_split3>:
     f2e:	57 fd       	sbrc	r21, 7
     f30:	90 58       	subi	r25, 0x80	; 128
     f32:	44 0f       	add	r20, r20
     f34:	55 1f       	adc	r21, r21
     f36:	59 f0       	breq	.+22     	; 0xf4e <__fp_splitA+0x10>
     f38:	5f 3f       	cpi	r21, 0xFF	; 255
     f3a:	71 f0       	breq	.+28     	; 0xf58 <__fp_splitA+0x1a>
     f3c:	47 95       	ror	r20

00000f3e <__fp_splitA>:
     f3e:	88 0f       	add	r24, r24
     f40:	97 fb       	bst	r25, 7
     f42:	99 1f       	adc	r25, r25
     f44:	61 f0       	breq	.+24     	; 0xf5e <__fp_splitA+0x20>
     f46:	9f 3f       	cpi	r25, 0xFF	; 255
     f48:	79 f0       	breq	.+30     	; 0xf68 <__fp_splitA+0x2a>
     f4a:	87 95       	ror	r24
     f4c:	08 95       	ret
     f4e:	12 16       	cp	r1, r18
     f50:	13 06       	cpc	r1, r19
     f52:	14 06       	cpc	r1, r20
     f54:	55 1f       	adc	r21, r21
     f56:	f2 cf       	rjmp	.-28     	; 0xf3c <__fp_split3+0xe>
     f58:	46 95       	lsr	r20
     f5a:	f1 df       	rcall	.-30     	; 0xf3e <__fp_splitA>
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <__fp_splitA+0x30>
     f5e:	16 16       	cp	r1, r22
     f60:	17 06       	cpc	r1, r23
     f62:	18 06       	cpc	r1, r24
     f64:	99 1f       	adc	r25, r25
     f66:	f1 cf       	rjmp	.-30     	; 0xf4a <__fp_splitA+0xc>
     f68:	86 95       	lsr	r24
     f6a:	71 05       	cpc	r23, r1
     f6c:	61 05       	cpc	r22, r1
     f6e:	08 94       	sec
     f70:	08 95       	ret

00000f72 <__fp_zero>:
     f72:	e8 94       	clt

00000f74 <__fp_szero>:
     f74:	bb 27       	eor	r27, r27
     f76:	66 27       	eor	r22, r22
     f78:	77 27       	eor	r23, r23
     f7a:	cb 01       	movw	r24, r22
     f7c:	97 f9       	bld	r25, 7
     f7e:	08 95       	ret

00000f80 <__mulsf3>:
     f80:	0b d0       	rcall	.+22     	; 0xf98 <__mulsf3x>
     f82:	c4 cf       	rjmp	.-120    	; 0xf0c <__fp_round>
     f84:	b5 df       	rcall	.-150    	; 0xef0 <__fp_pscA>
     f86:	28 f0       	brcs	.+10     	; 0xf92 <__mulsf3+0x12>
     f88:	ba df       	rcall	.-140    	; 0xefe <__fp_pscB>
     f8a:	18 f0       	brcs	.+6      	; 0xf92 <__mulsf3+0x12>
     f8c:	95 23       	and	r25, r21
     f8e:	09 f0       	breq	.+2      	; 0xf92 <__mulsf3+0x12>
     f90:	a6 cf       	rjmp	.-180    	; 0xede <__fp_inf>
     f92:	ab cf       	rjmp	.-170    	; 0xeea <__fp_nan>
     f94:	11 24       	eor	r1, r1
     f96:	ee cf       	rjmp	.-36     	; 0xf74 <__fp_szero>

00000f98 <__mulsf3x>:
     f98:	ca df       	rcall	.-108    	; 0xf2e <__fp_split3>
     f9a:	a0 f3       	brcs	.-24     	; 0xf84 <__mulsf3+0x4>

00000f9c <__mulsf3_pse>:
     f9c:	95 9f       	mul	r25, r21
     f9e:	d1 f3       	breq	.-12     	; 0xf94 <__mulsf3+0x14>
     fa0:	95 0f       	add	r25, r21
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	55 1f       	adc	r21, r21
     fa6:	62 9f       	mul	r22, r18
     fa8:	f0 01       	movw	r30, r0
     faa:	72 9f       	mul	r23, r18
     fac:	bb 27       	eor	r27, r27
     fae:	f0 0d       	add	r31, r0
     fb0:	b1 1d       	adc	r27, r1
     fb2:	63 9f       	mul	r22, r19
     fb4:	aa 27       	eor	r26, r26
     fb6:	f0 0d       	add	r31, r0
     fb8:	b1 1d       	adc	r27, r1
     fba:	aa 1f       	adc	r26, r26
     fbc:	64 9f       	mul	r22, r20
     fbe:	66 27       	eor	r22, r22
     fc0:	b0 0d       	add	r27, r0
     fc2:	a1 1d       	adc	r26, r1
     fc4:	66 1f       	adc	r22, r22
     fc6:	82 9f       	mul	r24, r18
     fc8:	22 27       	eor	r18, r18
     fca:	b0 0d       	add	r27, r0
     fcc:	a1 1d       	adc	r26, r1
     fce:	62 1f       	adc	r22, r18
     fd0:	73 9f       	mul	r23, r19
     fd2:	b0 0d       	add	r27, r0
     fd4:	a1 1d       	adc	r26, r1
     fd6:	62 1f       	adc	r22, r18
     fd8:	83 9f       	mul	r24, r19
     fda:	a0 0d       	add	r26, r0
     fdc:	61 1d       	adc	r22, r1
     fde:	22 1f       	adc	r18, r18
     fe0:	74 9f       	mul	r23, r20
     fe2:	33 27       	eor	r19, r19
     fe4:	a0 0d       	add	r26, r0
     fe6:	61 1d       	adc	r22, r1
     fe8:	23 1f       	adc	r18, r19
     fea:	84 9f       	mul	r24, r20
     fec:	60 0d       	add	r22, r0
     fee:	21 1d       	adc	r18, r1
     ff0:	82 2f       	mov	r24, r18
     ff2:	76 2f       	mov	r23, r22
     ff4:	6a 2f       	mov	r22, r26
     ff6:	11 24       	eor	r1, r1
     ff8:	9f 57       	subi	r25, 0x7F	; 127
     ffa:	50 40       	sbci	r21, 0x00	; 0
     ffc:	8a f0       	brmi	.+34     	; 0x1020 <__mulsf3_pse+0x84>
     ffe:	e1 f0       	breq	.+56     	; 0x1038 <__mulsf3_pse+0x9c>
    1000:	88 23       	and	r24, r24
    1002:	4a f0       	brmi	.+18     	; 0x1016 <__mulsf3_pse+0x7a>
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	bb 1f       	adc	r27, r27
    100a:	66 1f       	adc	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	88 1f       	adc	r24, r24
    1010:	91 50       	subi	r25, 0x01	; 1
    1012:	50 40       	sbci	r21, 0x00	; 0
    1014:	a9 f7       	brne	.-22     	; 0x1000 <__mulsf3_pse+0x64>
    1016:	9e 3f       	cpi	r25, 0xFE	; 254
    1018:	51 05       	cpc	r21, r1
    101a:	70 f0       	brcs	.+28     	; 0x1038 <__mulsf3_pse+0x9c>
    101c:	60 cf       	rjmp	.-320    	; 0xede <__fp_inf>
    101e:	aa cf       	rjmp	.-172    	; 0xf74 <__fp_szero>
    1020:	5f 3f       	cpi	r21, 0xFF	; 255
    1022:	ec f3       	brlt	.-6      	; 0x101e <__mulsf3_pse+0x82>
    1024:	98 3e       	cpi	r25, 0xE8	; 232
    1026:	dc f3       	brlt	.-10     	; 0x101e <__mulsf3_pse+0x82>
    1028:	86 95       	lsr	r24
    102a:	77 95       	ror	r23
    102c:	67 95       	ror	r22
    102e:	b7 95       	ror	r27
    1030:	f7 95       	ror	r31
    1032:	e7 95       	ror	r30
    1034:	9f 5f       	subi	r25, 0xFF	; 255
    1036:	c1 f7       	brne	.-16     	; 0x1028 <__mulsf3_pse+0x8c>
    1038:	fe 2b       	or	r31, r30
    103a:	88 0f       	add	r24, r24
    103c:	91 1d       	adc	r25, r1
    103e:	96 95       	lsr	r25
    1040:	87 95       	ror	r24
    1042:	97 f9       	bld	r25, 7
    1044:	08 95       	ret

00001046 <__tablejump2__>:
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31

0000104a <__tablejump__>:
    104a:	05 90       	lpm	r0, Z+
    104c:	f4 91       	lpm	r31, Z
    104e:	e0 2d       	mov	r30, r0
    1050:	19 94       	eijmp

00001052 <abs>:
    1052:	97 ff       	sbrs	r25, 7
    1054:	03 c0       	rjmp	.+6      	; 0x105c <abs+0xa>
    1056:	91 95       	neg	r25
    1058:	81 95       	neg	r24
    105a:	91 09       	sbc	r25, r1
    105c:	08 95       	ret

0000105e <malloc>:
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	91 05       	cpc	r25, r1
    1066:	10 f4       	brcc	.+4      	; 0x106c <malloc+0xe>
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	e0 91 d9 02 	lds	r30, 0x02D9
    1070:	f0 91 da 02 	lds	r31, 0x02DA
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	30 97       	sbiw	r30, 0x00	; 0
    107e:	39 f1       	breq	.+78     	; 0x10ce <malloc+0x70>
    1080:	40 81       	ld	r20, Z
    1082:	51 81       	ldd	r21, Z+1	; 0x01
    1084:	48 17       	cp	r20, r24
    1086:	59 07       	cpc	r21, r25
    1088:	b8 f0       	brcs	.+46     	; 0x10b8 <malloc+0x5a>
    108a:	48 17       	cp	r20, r24
    108c:	59 07       	cpc	r21, r25
    108e:	71 f4       	brne	.+28     	; 0x10ac <malloc+0x4e>
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	10 97       	sbiw	r26, 0x00	; 0
    1096:	29 f0       	breq	.+10     	; 0x10a2 <malloc+0x44>
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	9c 93       	st	X, r25
    109c:	8e 93       	st	-X, r24
    109e:	12 97       	sbiw	r26, 0x02	; 2
    10a0:	2c c0       	rjmp	.+88     	; 0x10fa <malloc+0x9c>
    10a2:	90 93 da 02 	sts	0x02DA, r25
    10a6:	80 93 d9 02 	sts	0x02D9, r24
    10aa:	27 c0       	rjmp	.+78     	; 0x10fa <malloc+0x9c>
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	31 f0       	breq	.+12     	; 0x10be <malloc+0x60>
    10b2:	42 17       	cp	r20, r18
    10b4:	53 07       	cpc	r21, r19
    10b6:	18 f0       	brcs	.+6      	; 0x10be <malloc+0x60>
    10b8:	a9 01       	movw	r20, r18
    10ba:	db 01       	movw	r26, r22
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <malloc+0x62>
    10be:	ef 01       	movw	r28, r30
    10c0:	9a 01       	movw	r18, r20
    10c2:	bd 01       	movw	r22, r26
    10c4:	df 01       	movw	r26, r30
    10c6:	02 80       	ldd	r0, Z+2	; 0x02
    10c8:	f3 81       	ldd	r31, Z+3	; 0x03
    10ca:	e0 2d       	mov	r30, r0
    10cc:	d7 cf       	rjmp	.-82     	; 0x107c <malloc+0x1e>
    10ce:	21 15       	cp	r18, r1
    10d0:	31 05       	cpc	r19, r1
    10d2:	f9 f0       	breq	.+62     	; 0x1112 <malloc+0xb4>
    10d4:	28 1b       	sub	r18, r24
    10d6:	39 0b       	sbc	r19, r25
    10d8:	24 30       	cpi	r18, 0x04	; 4
    10da:	31 05       	cpc	r19, r1
    10dc:	80 f4       	brcc	.+32     	; 0x10fe <malloc+0xa0>
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	9b 81       	ldd	r25, Y+3	; 0x03
    10e2:	61 15       	cp	r22, r1
    10e4:	71 05       	cpc	r23, r1
    10e6:	21 f0       	breq	.+8      	; 0x10f0 <malloc+0x92>
    10e8:	fb 01       	movw	r30, r22
    10ea:	93 83       	std	Z+3, r25	; 0x03
    10ec:	82 83       	std	Z+2, r24	; 0x02
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <malloc+0x9a>
    10f0:	90 93 da 02 	sts	0x02DA, r25
    10f4:	80 93 d9 02 	sts	0x02D9, r24
    10f8:	fe 01       	movw	r30, r28
    10fa:	32 96       	adiw	r30, 0x02	; 2
    10fc:	44 c0       	rjmp	.+136    	; 0x1186 <malloc+0x128>
    10fe:	fe 01       	movw	r30, r28
    1100:	e2 0f       	add	r30, r18
    1102:	f3 1f       	adc	r31, r19
    1104:	81 93       	st	Z+, r24
    1106:	91 93       	st	Z+, r25
    1108:	22 50       	subi	r18, 0x02	; 2
    110a:	31 09       	sbc	r19, r1
    110c:	39 83       	std	Y+1, r19	; 0x01
    110e:	28 83       	st	Y, r18
    1110:	3a c0       	rjmp	.+116    	; 0x1186 <malloc+0x128>
    1112:	20 91 d7 02 	lds	r18, 0x02D7
    1116:	30 91 d8 02 	lds	r19, 0x02D8
    111a:	23 2b       	or	r18, r19
    111c:	41 f4       	brne	.+16     	; 0x112e <malloc+0xd0>
    111e:	20 91 02 02 	lds	r18, 0x0202
    1122:	30 91 03 02 	lds	r19, 0x0203
    1126:	30 93 d8 02 	sts	0x02D8, r19
    112a:	20 93 d7 02 	sts	0x02D7, r18
    112e:	20 91 00 02 	lds	r18, 0x0200
    1132:	30 91 01 02 	lds	r19, 0x0201
    1136:	21 15       	cp	r18, r1
    1138:	31 05       	cpc	r19, r1
    113a:	41 f4       	brne	.+16     	; 0x114c <malloc+0xee>
    113c:	2d b7       	in	r18, 0x3d	; 61
    113e:	3e b7       	in	r19, 0x3e	; 62
    1140:	40 91 04 02 	lds	r20, 0x0204
    1144:	50 91 05 02 	lds	r21, 0x0205
    1148:	24 1b       	sub	r18, r20
    114a:	35 0b       	sbc	r19, r21
    114c:	e0 91 d7 02 	lds	r30, 0x02D7
    1150:	f0 91 d8 02 	lds	r31, 0x02D8
    1154:	e2 17       	cp	r30, r18
    1156:	f3 07       	cpc	r31, r19
    1158:	a0 f4       	brcc	.+40     	; 0x1182 <malloc+0x124>
    115a:	2e 1b       	sub	r18, r30
    115c:	3f 0b       	sbc	r19, r31
    115e:	28 17       	cp	r18, r24
    1160:	39 07       	cpc	r19, r25
    1162:	78 f0       	brcs	.+30     	; 0x1182 <malloc+0x124>
    1164:	ac 01       	movw	r20, r24
    1166:	4e 5f       	subi	r20, 0xFE	; 254
    1168:	5f 4f       	sbci	r21, 0xFF	; 255
    116a:	24 17       	cp	r18, r20
    116c:	35 07       	cpc	r19, r21
    116e:	48 f0       	brcs	.+18     	; 0x1182 <malloc+0x124>
    1170:	4e 0f       	add	r20, r30
    1172:	5f 1f       	adc	r21, r31
    1174:	50 93 d8 02 	sts	0x02D8, r21
    1178:	40 93 d7 02 	sts	0x02D7, r20
    117c:	81 93       	st	Z+, r24
    117e:	91 93       	st	Z+, r25
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <malloc+0x128>
    1182:	e0 e0       	ldi	r30, 0x00	; 0
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	cf 01       	movw	r24, r30
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <free>:
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	09 f4       	brne	.+2      	; 0x1198 <free+0xa>
    1196:	87 c0       	rjmp	.+270    	; 0x12a6 <free+0x118>
    1198:	fc 01       	movw	r30, r24
    119a:	32 97       	sbiw	r30, 0x02	; 2
    119c:	13 82       	std	Z+3, r1	; 0x03
    119e:	12 82       	std	Z+2, r1	; 0x02
    11a0:	c0 91 d9 02 	lds	r28, 0x02D9
    11a4:	d0 91 da 02 	lds	r29, 0x02DA
    11a8:	20 97       	sbiw	r28, 0x00	; 0
    11aa:	81 f4       	brne	.+32     	; 0x11cc <free+0x3e>
    11ac:	20 81       	ld	r18, Z
    11ae:	31 81       	ldd	r19, Z+1	; 0x01
    11b0:	28 0f       	add	r18, r24
    11b2:	39 1f       	adc	r19, r25
    11b4:	80 91 d7 02 	lds	r24, 0x02D7
    11b8:	90 91 d8 02 	lds	r25, 0x02D8
    11bc:	82 17       	cp	r24, r18
    11be:	93 07       	cpc	r25, r19
    11c0:	79 f5       	brne	.+94     	; 0x1220 <free+0x92>
    11c2:	f0 93 d8 02 	sts	0x02D8, r31
    11c6:	e0 93 d7 02 	sts	0x02D7, r30
    11ca:	6d c0       	rjmp	.+218    	; 0x12a6 <free+0x118>
    11cc:	de 01       	movw	r26, r28
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	ae 17       	cp	r26, r30
    11d4:	bf 07       	cpc	r27, r31
    11d6:	50 f4       	brcc	.+20     	; 0x11ec <free+0x5e>
    11d8:	12 96       	adiw	r26, 0x02	; 2
    11da:	4d 91       	ld	r20, X+
    11dc:	5c 91       	ld	r21, X
    11de:	13 97       	sbiw	r26, 0x03	; 3
    11e0:	9d 01       	movw	r18, r26
    11e2:	41 15       	cp	r20, r1
    11e4:	51 05       	cpc	r21, r1
    11e6:	09 f1       	breq	.+66     	; 0x122a <free+0x9c>
    11e8:	da 01       	movw	r26, r20
    11ea:	f3 cf       	rjmp	.-26     	; 0x11d2 <free+0x44>
    11ec:	b3 83       	std	Z+3, r27	; 0x03
    11ee:	a2 83       	std	Z+2, r26	; 0x02
    11f0:	40 81       	ld	r20, Z
    11f2:	51 81       	ldd	r21, Z+1	; 0x01
    11f4:	84 0f       	add	r24, r20
    11f6:	95 1f       	adc	r25, r21
    11f8:	8a 17       	cp	r24, r26
    11fa:	9b 07       	cpc	r25, r27
    11fc:	71 f4       	brne	.+28     	; 0x121a <free+0x8c>
    11fe:	8d 91       	ld	r24, X+
    1200:	9c 91       	ld	r25, X
    1202:	11 97       	sbiw	r26, 0x01	; 1
    1204:	84 0f       	add	r24, r20
    1206:	95 1f       	adc	r25, r21
    1208:	02 96       	adiw	r24, 0x02	; 2
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
    120e:	12 96       	adiw	r26, 0x02	; 2
    1210:	8d 91       	ld	r24, X+
    1212:	9c 91       	ld	r25, X
    1214:	13 97       	sbiw	r26, 0x03	; 3
    1216:	93 83       	std	Z+3, r25	; 0x03
    1218:	82 83       	std	Z+2, r24	; 0x02
    121a:	21 15       	cp	r18, r1
    121c:	31 05       	cpc	r19, r1
    121e:	29 f4       	brne	.+10     	; 0x122a <free+0x9c>
    1220:	f0 93 da 02 	sts	0x02DA, r31
    1224:	e0 93 d9 02 	sts	0x02D9, r30
    1228:	3e c0       	rjmp	.+124    	; 0x12a6 <free+0x118>
    122a:	d9 01       	movw	r26, r18
    122c:	13 96       	adiw	r26, 0x03	; 3
    122e:	fc 93       	st	X, r31
    1230:	ee 93       	st	-X, r30
    1232:	12 97       	sbiw	r26, 0x02	; 2
    1234:	4d 91       	ld	r20, X+
    1236:	5d 91       	ld	r21, X+
    1238:	a4 0f       	add	r26, r20
    123a:	b5 1f       	adc	r27, r21
    123c:	ea 17       	cp	r30, r26
    123e:	fb 07       	cpc	r31, r27
    1240:	79 f4       	brne	.+30     	; 0x1260 <free+0xd2>
    1242:	80 81       	ld	r24, Z
    1244:	91 81       	ldd	r25, Z+1	; 0x01
    1246:	84 0f       	add	r24, r20
    1248:	95 1f       	adc	r25, r21
    124a:	02 96       	adiw	r24, 0x02	; 2
    124c:	d9 01       	movw	r26, r18
    124e:	11 96       	adiw	r26, 0x01	; 1
    1250:	9c 93       	st	X, r25
    1252:	8e 93       	st	-X, r24
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	93 81       	ldd	r25, Z+3	; 0x03
    1258:	13 96       	adiw	r26, 0x03	; 3
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
    125e:	12 97       	sbiw	r26, 0x02	; 2
    1260:	e0 e0       	ldi	r30, 0x00	; 0
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	9b 81       	ldd	r25, Y+3	; 0x03
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	19 f0       	breq	.+6      	; 0x1272 <free+0xe4>
    126c:	fe 01       	movw	r30, r28
    126e:	ec 01       	movw	r28, r24
    1270:	f9 cf       	rjmp	.-14     	; 0x1264 <free+0xd6>
    1272:	ce 01       	movw	r24, r28
    1274:	02 96       	adiw	r24, 0x02	; 2
    1276:	28 81       	ld	r18, Y
    1278:	39 81       	ldd	r19, Y+1	; 0x01
    127a:	82 0f       	add	r24, r18
    127c:	93 1f       	adc	r25, r19
    127e:	20 91 d7 02 	lds	r18, 0x02D7
    1282:	30 91 d8 02 	lds	r19, 0x02D8
    1286:	28 17       	cp	r18, r24
    1288:	39 07       	cpc	r19, r25
    128a:	69 f4       	brne	.+26     	; 0x12a6 <free+0x118>
    128c:	30 97       	sbiw	r30, 0x00	; 0
    128e:	29 f4       	brne	.+10     	; 0x129a <free+0x10c>
    1290:	10 92 da 02 	sts	0x02DA, r1
    1294:	10 92 d9 02 	sts	0x02D9, r1
    1298:	02 c0       	rjmp	.+4      	; 0x129e <free+0x110>
    129a:	13 82       	std	Z+3, r1	; 0x03
    129c:	12 82       	std	Z+2, r1	; 0x02
    129e:	d0 93 d8 02 	sts	0x02D8, r29
    12a2:	c0 93 d7 02 	sts	0x02D7, r28
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <fdevopen>:
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	ec 01       	movw	r28, r24
    12b6:	8b 01       	movw	r16, r22
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	31 f4       	brne	.+12     	; 0x12c8 <fdevopen+0x1c>
    12bc:	61 15       	cp	r22, r1
    12be:	71 05       	cpc	r23, r1
    12c0:	19 f4       	brne	.+6      	; 0x12c8 <fdevopen+0x1c>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	37 c0       	rjmp	.+110    	; 0x1336 <fdevopen+0x8a>
    12c8:	6e e0       	ldi	r22, 0x0E	; 14
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	36 d2       	rcall	.+1132   	; 0x173e <calloc>
    12d2:	fc 01       	movw	r30, r24
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	a9 f3       	breq	.-22     	; 0x12c2 <fdevopen+0x16>
    12d8:	80 e8       	ldi	r24, 0x80	; 128
    12da:	83 83       	std	Z+3, r24	; 0x03
    12dc:	01 15       	cp	r16, r1
    12de:	11 05       	cpc	r17, r1
    12e0:	71 f0       	breq	.+28     	; 0x12fe <fdevopen+0x52>
    12e2:	13 87       	std	Z+11, r17	; 0x0b
    12e4:	02 87       	std	Z+10, r16	; 0x0a
    12e6:	81 e8       	ldi	r24, 0x81	; 129
    12e8:	83 83       	std	Z+3, r24	; 0x03
    12ea:	80 91 db 02 	lds	r24, 0x02DB
    12ee:	90 91 dc 02 	lds	r25, 0x02DC
    12f2:	89 2b       	or	r24, r25
    12f4:	21 f4       	brne	.+8      	; 0x12fe <fdevopen+0x52>
    12f6:	f0 93 dc 02 	sts	0x02DC, r31
    12fa:	e0 93 db 02 	sts	0x02DB, r30
    12fe:	20 97       	sbiw	r28, 0x00	; 0
    1300:	c9 f0       	breq	.+50     	; 0x1334 <fdevopen+0x88>
    1302:	d1 87       	std	Z+9, r29	; 0x09
    1304:	c0 87       	std	Z+8, r28	; 0x08
    1306:	83 81       	ldd	r24, Z+3	; 0x03
    1308:	82 60       	ori	r24, 0x02	; 2
    130a:	83 83       	std	Z+3, r24	; 0x03
    130c:	80 91 dd 02 	lds	r24, 0x02DD
    1310:	90 91 de 02 	lds	r25, 0x02DE
    1314:	89 2b       	or	r24, r25
    1316:	71 f4       	brne	.+28     	; 0x1334 <fdevopen+0x88>
    1318:	f0 93 de 02 	sts	0x02DE, r31
    131c:	e0 93 dd 02 	sts	0x02DD, r30
    1320:	80 91 df 02 	lds	r24, 0x02DF
    1324:	90 91 e0 02 	lds	r25, 0x02E0
    1328:	89 2b       	or	r24, r25
    132a:	21 f4       	brne	.+8      	; 0x1334 <fdevopen+0x88>
    132c:	f0 93 e0 02 	sts	0x02E0, r31
    1330:	e0 93 df 02 	sts	0x02DF, r30
    1334:	cf 01       	movw	r24, r30
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	08 95       	ret

00001340 <printf>:
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	fe 01       	movw	r30, r28
    134a:	36 96       	adiw	r30, 0x06	; 6
    134c:	61 91       	ld	r22, Z+
    134e:	71 91       	ld	r23, Z+
    1350:	af 01       	movw	r20, r30
    1352:	80 91 dd 02 	lds	r24, 0x02DD
    1356:	90 91 de 02 	lds	r25, 0x02DE
    135a:	03 d0       	rcall	.+6      	; 0x1362 <vfprintf>
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <vfprintf>:
    1362:	2f 92       	push	r2
    1364:	3f 92       	push	r3
    1366:	4f 92       	push	r4
    1368:	5f 92       	push	r5
    136a:	6f 92       	push	r6
    136c:	7f 92       	push	r7
    136e:	8f 92       	push	r8
    1370:	9f 92       	push	r9
    1372:	af 92       	push	r10
    1374:	bf 92       	push	r11
    1376:	cf 92       	push	r12
    1378:	df 92       	push	r13
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	2c 97       	sbiw	r28, 0x0c	; 12
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	7c 01       	movw	r14, r24
    1398:	6b 01       	movw	r12, r22
    139a:	8a 01       	movw	r16, r20
    139c:	fc 01       	movw	r30, r24
    139e:	17 82       	std	Z+7, r1	; 0x07
    13a0:	16 82       	std	Z+6, r1	; 0x06
    13a2:	83 81       	ldd	r24, Z+3	; 0x03
    13a4:	81 ff       	sbrs	r24, 1
    13a6:	b0 c1       	rjmp	.+864    	; 0x1708 <vfprintf+0x3a6>
    13a8:	ce 01       	movw	r24, r28
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	4c 01       	movw	r8, r24
    13ae:	f7 01       	movw	r30, r14
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	f6 01       	movw	r30, r12
    13b4:	93 fd       	sbrc	r25, 3
    13b6:	85 91       	lpm	r24, Z+
    13b8:	93 ff       	sbrs	r25, 3
    13ba:	81 91       	ld	r24, Z+
    13bc:	6f 01       	movw	r12, r30
    13be:	88 23       	and	r24, r24
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <vfprintf+0x62>
    13c2:	9e c1       	rjmp	.+828    	; 0x1700 <vfprintf+0x39e>
    13c4:	85 32       	cpi	r24, 0x25	; 37
    13c6:	39 f4       	brne	.+14     	; 0x13d6 <vfprintf+0x74>
    13c8:	93 fd       	sbrc	r25, 3
    13ca:	85 91       	lpm	r24, Z+
    13cc:	93 ff       	sbrs	r25, 3
    13ce:	81 91       	ld	r24, Z+
    13d0:	6f 01       	movw	r12, r30
    13d2:	85 32       	cpi	r24, 0x25	; 37
    13d4:	21 f4       	brne	.+8      	; 0x13de <vfprintf+0x7c>
    13d6:	b7 01       	movw	r22, r14
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	e8 d1       	rcall	.+976    	; 0x17ac <fputc>
    13dc:	e8 cf       	rjmp	.-48     	; 0x13ae <vfprintf+0x4c>
    13de:	51 2c       	mov	r5, r1
    13e0:	31 2c       	mov	r3, r1
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	20 32       	cpi	r18, 0x20	; 32
    13e6:	a0 f4       	brcc	.+40     	; 0x1410 <vfprintf+0xae>
    13e8:	8b 32       	cpi	r24, 0x2B	; 43
    13ea:	69 f0       	breq	.+26     	; 0x1406 <vfprintf+0xa4>
    13ec:	30 f4       	brcc	.+12     	; 0x13fa <vfprintf+0x98>
    13ee:	80 32       	cpi	r24, 0x20	; 32
    13f0:	59 f0       	breq	.+22     	; 0x1408 <vfprintf+0xa6>
    13f2:	83 32       	cpi	r24, 0x23	; 35
    13f4:	69 f4       	brne	.+26     	; 0x1410 <vfprintf+0xae>
    13f6:	20 61       	ori	r18, 0x10	; 16
    13f8:	2c c0       	rjmp	.+88     	; 0x1452 <vfprintf+0xf0>
    13fa:	8d 32       	cpi	r24, 0x2D	; 45
    13fc:	39 f0       	breq	.+14     	; 0x140c <vfprintf+0xaa>
    13fe:	80 33       	cpi	r24, 0x30	; 48
    1400:	39 f4       	brne	.+14     	; 0x1410 <vfprintf+0xae>
    1402:	21 60       	ori	r18, 0x01	; 1
    1404:	26 c0       	rjmp	.+76     	; 0x1452 <vfprintf+0xf0>
    1406:	22 60       	ori	r18, 0x02	; 2
    1408:	24 60       	ori	r18, 0x04	; 4
    140a:	23 c0       	rjmp	.+70     	; 0x1452 <vfprintf+0xf0>
    140c:	28 60       	ori	r18, 0x08	; 8
    140e:	21 c0       	rjmp	.+66     	; 0x1452 <vfprintf+0xf0>
    1410:	27 fd       	sbrc	r18, 7
    1412:	27 c0       	rjmp	.+78     	; 0x1462 <vfprintf+0x100>
    1414:	30 ed       	ldi	r19, 0xD0	; 208
    1416:	38 0f       	add	r19, r24
    1418:	3a 30       	cpi	r19, 0x0A	; 10
    141a:	78 f4       	brcc	.+30     	; 0x143a <vfprintf+0xd8>
    141c:	26 ff       	sbrs	r18, 6
    141e:	06 c0       	rjmp	.+12     	; 0x142c <vfprintf+0xca>
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	5f 9e       	mul	r5, r31
    1424:	30 0d       	add	r19, r0
    1426:	11 24       	eor	r1, r1
    1428:	53 2e       	mov	r5, r19
    142a:	13 c0       	rjmp	.+38     	; 0x1452 <vfprintf+0xf0>
    142c:	8a e0       	ldi	r24, 0x0A	; 10
    142e:	38 9e       	mul	r3, r24
    1430:	30 0d       	add	r19, r0
    1432:	11 24       	eor	r1, r1
    1434:	33 2e       	mov	r3, r19
    1436:	20 62       	ori	r18, 0x20	; 32
    1438:	0c c0       	rjmp	.+24     	; 0x1452 <vfprintf+0xf0>
    143a:	8e 32       	cpi	r24, 0x2E	; 46
    143c:	21 f4       	brne	.+8      	; 0x1446 <vfprintf+0xe4>
    143e:	26 fd       	sbrc	r18, 6
    1440:	5f c1       	rjmp	.+702    	; 0x1700 <vfprintf+0x39e>
    1442:	20 64       	ori	r18, 0x40	; 64
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <vfprintf+0xf0>
    1446:	8c 36       	cpi	r24, 0x6C	; 108
    1448:	11 f4       	brne	.+4      	; 0x144e <vfprintf+0xec>
    144a:	20 68       	ori	r18, 0x80	; 128
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <vfprintf+0xf0>
    144e:	88 36       	cpi	r24, 0x68	; 104
    1450:	41 f4       	brne	.+16     	; 0x1462 <vfprintf+0x100>
    1452:	f6 01       	movw	r30, r12
    1454:	93 fd       	sbrc	r25, 3
    1456:	85 91       	lpm	r24, Z+
    1458:	93 ff       	sbrs	r25, 3
    145a:	81 91       	ld	r24, Z+
    145c:	6f 01       	movw	r12, r30
    145e:	81 11       	cpse	r24, r1
    1460:	c1 cf       	rjmp	.-126    	; 0x13e4 <vfprintf+0x82>
    1462:	98 2f       	mov	r25, r24
    1464:	9f 7d       	andi	r25, 0xDF	; 223
    1466:	95 54       	subi	r25, 0x45	; 69
    1468:	93 30       	cpi	r25, 0x03	; 3
    146a:	28 f4       	brcc	.+10     	; 0x1476 <vfprintf+0x114>
    146c:	0c 5f       	subi	r16, 0xFC	; 252
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
    1470:	ff e3       	ldi	r31, 0x3F	; 63
    1472:	f9 83       	std	Y+1, r31	; 0x01
    1474:	0d c0       	rjmp	.+26     	; 0x1490 <vfprintf+0x12e>
    1476:	83 36       	cpi	r24, 0x63	; 99
    1478:	31 f0       	breq	.+12     	; 0x1486 <vfprintf+0x124>
    147a:	83 37       	cpi	r24, 0x73	; 115
    147c:	71 f0       	breq	.+28     	; 0x149a <vfprintf+0x138>
    147e:	83 35       	cpi	r24, 0x53	; 83
    1480:	09 f0       	breq	.+2      	; 0x1484 <vfprintf+0x122>
    1482:	57 c0       	rjmp	.+174    	; 0x1532 <vfprintf+0x1d0>
    1484:	21 c0       	rjmp	.+66     	; 0x14c8 <vfprintf+0x166>
    1486:	f8 01       	movw	r30, r16
    1488:	80 81       	ld	r24, Z
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	0e 5f       	subi	r16, 0xFE	; 254
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
    1490:	44 24       	eor	r4, r4
    1492:	43 94       	inc	r4
    1494:	51 2c       	mov	r5, r1
    1496:	54 01       	movw	r10, r8
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <vfprintf+0x160>
    149a:	38 01       	movw	r6, r16
    149c:	f2 e0       	ldi	r31, 0x02	; 2
    149e:	6f 0e       	add	r6, r31
    14a0:	71 1c       	adc	r7, r1
    14a2:	f8 01       	movw	r30, r16
    14a4:	a0 80       	ld	r10, Z
    14a6:	b1 80       	ldd	r11, Z+1	; 0x01
    14a8:	26 ff       	sbrs	r18, 6
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <vfprintf+0x150>
    14ac:	65 2d       	mov	r22, r5
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <vfprintf+0x154>
    14b2:	6f ef       	ldi	r22, 0xFF	; 255
    14b4:	7f ef       	ldi	r23, 0xFF	; 255
    14b6:	c5 01       	movw	r24, r10
    14b8:	2c 87       	std	Y+12, r18	; 0x0c
    14ba:	6d d1       	rcall	.+730    	; 0x1796 <strnlen>
    14bc:	2c 01       	movw	r4, r24
    14be:	83 01       	movw	r16, r6
    14c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14c2:	2f 77       	andi	r18, 0x7F	; 127
    14c4:	22 2e       	mov	r2, r18
    14c6:	16 c0       	rjmp	.+44     	; 0x14f4 <vfprintf+0x192>
    14c8:	38 01       	movw	r6, r16
    14ca:	f2 e0       	ldi	r31, 0x02	; 2
    14cc:	6f 0e       	add	r6, r31
    14ce:	71 1c       	adc	r7, r1
    14d0:	f8 01       	movw	r30, r16
    14d2:	a0 80       	ld	r10, Z
    14d4:	b1 80       	ldd	r11, Z+1	; 0x01
    14d6:	26 ff       	sbrs	r18, 6
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <vfprintf+0x17e>
    14da:	65 2d       	mov	r22, r5
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <vfprintf+0x182>
    14e0:	6f ef       	ldi	r22, 0xFF	; 255
    14e2:	7f ef       	ldi	r23, 0xFF	; 255
    14e4:	c5 01       	movw	r24, r10
    14e6:	2c 87       	std	Y+12, r18	; 0x0c
    14e8:	44 d1       	rcall	.+648    	; 0x1772 <strnlen_P>
    14ea:	2c 01       	movw	r4, r24
    14ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ee:	20 68       	ori	r18, 0x80	; 128
    14f0:	22 2e       	mov	r2, r18
    14f2:	83 01       	movw	r16, r6
    14f4:	23 fc       	sbrc	r2, 3
    14f6:	19 c0       	rjmp	.+50     	; 0x152a <vfprintf+0x1c8>
    14f8:	83 2d       	mov	r24, r3
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	48 16       	cp	r4, r24
    14fe:	59 06       	cpc	r5, r25
    1500:	a0 f4       	brcc	.+40     	; 0x152a <vfprintf+0x1c8>
    1502:	b7 01       	movw	r22, r14
    1504:	80 e2       	ldi	r24, 0x20	; 32
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	51 d1       	rcall	.+674    	; 0x17ac <fputc>
    150a:	3a 94       	dec	r3
    150c:	f5 cf       	rjmp	.-22     	; 0x14f8 <vfprintf+0x196>
    150e:	f5 01       	movw	r30, r10
    1510:	27 fc       	sbrc	r2, 7
    1512:	85 91       	lpm	r24, Z+
    1514:	27 fe       	sbrs	r2, 7
    1516:	81 91       	ld	r24, Z+
    1518:	5f 01       	movw	r10, r30
    151a:	b7 01       	movw	r22, r14
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	46 d1       	rcall	.+652    	; 0x17ac <fputc>
    1520:	31 10       	cpse	r3, r1
    1522:	3a 94       	dec	r3
    1524:	f1 e0       	ldi	r31, 0x01	; 1
    1526:	4f 1a       	sub	r4, r31
    1528:	51 08       	sbc	r5, r1
    152a:	41 14       	cp	r4, r1
    152c:	51 04       	cpc	r5, r1
    152e:	79 f7       	brne	.-34     	; 0x150e <vfprintf+0x1ac>
    1530:	de c0       	rjmp	.+444    	; 0x16ee <vfprintf+0x38c>
    1532:	84 36       	cpi	r24, 0x64	; 100
    1534:	11 f0       	breq	.+4      	; 0x153a <vfprintf+0x1d8>
    1536:	89 36       	cpi	r24, 0x69	; 105
    1538:	31 f5       	brne	.+76     	; 0x1586 <vfprintf+0x224>
    153a:	f8 01       	movw	r30, r16
    153c:	27 ff       	sbrs	r18, 7
    153e:	07 c0       	rjmp	.+14     	; 0x154e <vfprintf+0x1ec>
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	0c 5f       	subi	r16, 0xFC	; 252
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
    154c:	08 c0       	rjmp	.+16     	; 0x155e <vfprintf+0x1fc>
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	88 27       	eor	r24, r24
    1554:	77 fd       	sbrc	r23, 7
    1556:	80 95       	com	r24
    1558:	98 2f       	mov	r25, r24
    155a:	0e 5f       	subi	r16, 0xFE	; 254
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	2f 76       	andi	r18, 0x6F	; 111
    1560:	b2 2e       	mov	r11, r18
    1562:	97 ff       	sbrs	r25, 7
    1564:	09 c0       	rjmp	.+18     	; 0x1578 <vfprintf+0x216>
    1566:	90 95       	com	r25
    1568:	80 95       	com	r24
    156a:	70 95       	com	r23
    156c:	61 95       	neg	r22
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	8f 4f       	sbci	r24, 0xFF	; 255
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	20 68       	ori	r18, 0x80	; 128
    1576:	b2 2e       	mov	r11, r18
    1578:	2a e0       	ldi	r18, 0x0A	; 10
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	a4 01       	movw	r20, r8
    157e:	48 d1       	rcall	.+656    	; 0x1810 <__ultoa_invert>
    1580:	a8 2e       	mov	r10, r24
    1582:	a8 18       	sub	r10, r8
    1584:	43 c0       	rjmp	.+134    	; 0x160c <vfprintf+0x2aa>
    1586:	85 37       	cpi	r24, 0x75	; 117
    1588:	29 f4       	brne	.+10     	; 0x1594 <vfprintf+0x232>
    158a:	2f 7e       	andi	r18, 0xEF	; 239
    158c:	b2 2e       	mov	r11, r18
    158e:	2a e0       	ldi	r18, 0x0A	; 10
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	25 c0       	rjmp	.+74     	; 0x15de <vfprintf+0x27c>
    1594:	f2 2f       	mov	r31, r18
    1596:	f9 7f       	andi	r31, 0xF9	; 249
    1598:	bf 2e       	mov	r11, r31
    159a:	8f 36       	cpi	r24, 0x6F	; 111
    159c:	c1 f0       	breq	.+48     	; 0x15ce <vfprintf+0x26c>
    159e:	18 f4       	brcc	.+6      	; 0x15a6 <vfprintf+0x244>
    15a0:	88 35       	cpi	r24, 0x58	; 88
    15a2:	79 f0       	breq	.+30     	; 0x15c2 <vfprintf+0x260>
    15a4:	ad c0       	rjmp	.+346    	; 0x1700 <vfprintf+0x39e>
    15a6:	80 37       	cpi	r24, 0x70	; 112
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <vfprintf+0x24e>
    15aa:	88 37       	cpi	r24, 0x78	; 120
    15ac:	21 f0       	breq	.+8      	; 0x15b6 <vfprintf+0x254>
    15ae:	a8 c0       	rjmp	.+336    	; 0x1700 <vfprintf+0x39e>
    15b0:	2f 2f       	mov	r18, r31
    15b2:	20 61       	ori	r18, 0x10	; 16
    15b4:	b2 2e       	mov	r11, r18
    15b6:	b4 fe       	sbrs	r11, 4
    15b8:	0d c0       	rjmp	.+26     	; 0x15d4 <vfprintf+0x272>
    15ba:	8b 2d       	mov	r24, r11
    15bc:	84 60       	ori	r24, 0x04	; 4
    15be:	b8 2e       	mov	r11, r24
    15c0:	09 c0       	rjmp	.+18     	; 0x15d4 <vfprintf+0x272>
    15c2:	24 ff       	sbrs	r18, 4
    15c4:	0a c0       	rjmp	.+20     	; 0x15da <vfprintf+0x278>
    15c6:	9f 2f       	mov	r25, r31
    15c8:	96 60       	ori	r25, 0x06	; 6
    15ca:	b9 2e       	mov	r11, r25
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <vfprintf+0x278>
    15ce:	28 e0       	ldi	r18, 0x08	; 8
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <vfprintf+0x27c>
    15d4:	20 e1       	ldi	r18, 0x10	; 16
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <vfprintf+0x27c>
    15da:	20 e1       	ldi	r18, 0x10	; 16
    15dc:	32 e0       	ldi	r19, 0x02	; 2
    15de:	f8 01       	movw	r30, r16
    15e0:	b7 fe       	sbrs	r11, 7
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <vfprintf+0x290>
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	0c 5f       	subi	r16, 0xFC	; 252
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <vfprintf+0x29c>
    15f2:	60 81       	ld	r22, Z
    15f4:	71 81       	ldd	r23, Z+1	; 0x01
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 5f       	subi	r16, 0xFE	; 254
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    15fe:	a4 01       	movw	r20, r8
    1600:	07 d1       	rcall	.+526    	; 0x1810 <__ultoa_invert>
    1602:	a8 2e       	mov	r10, r24
    1604:	a8 18       	sub	r10, r8
    1606:	fb 2d       	mov	r31, r11
    1608:	ff 77       	andi	r31, 0x7F	; 127
    160a:	bf 2e       	mov	r11, r31
    160c:	b6 fe       	sbrs	r11, 6
    160e:	0b c0       	rjmp	.+22     	; 0x1626 <vfprintf+0x2c4>
    1610:	2b 2d       	mov	r18, r11
    1612:	2e 7f       	andi	r18, 0xFE	; 254
    1614:	a5 14       	cp	r10, r5
    1616:	50 f4       	brcc	.+20     	; 0x162c <vfprintf+0x2ca>
    1618:	b4 fe       	sbrs	r11, 4
    161a:	0a c0       	rjmp	.+20     	; 0x1630 <vfprintf+0x2ce>
    161c:	b2 fc       	sbrc	r11, 2
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <vfprintf+0x2ce>
    1620:	2b 2d       	mov	r18, r11
    1622:	2e 7e       	andi	r18, 0xEE	; 238
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <vfprintf+0x2ce>
    1626:	7a 2c       	mov	r7, r10
    1628:	2b 2d       	mov	r18, r11
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <vfprintf+0x2d0>
    162c:	7a 2c       	mov	r7, r10
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <vfprintf+0x2d0>
    1630:	75 2c       	mov	r7, r5
    1632:	24 ff       	sbrs	r18, 4
    1634:	0d c0       	rjmp	.+26     	; 0x1650 <vfprintf+0x2ee>
    1636:	fe 01       	movw	r30, r28
    1638:	ea 0d       	add	r30, r10
    163a:	f1 1d       	adc	r31, r1
    163c:	80 81       	ld	r24, Z
    163e:	80 33       	cpi	r24, 0x30	; 48
    1640:	11 f4       	brne	.+4      	; 0x1646 <vfprintf+0x2e4>
    1642:	29 7e       	andi	r18, 0xE9	; 233
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <vfprintf+0x2f6>
    1646:	22 ff       	sbrs	r18, 2
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <vfprintf+0x2f4>
    164a:	73 94       	inc	r7
    164c:	73 94       	inc	r7
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <vfprintf+0x2f6>
    1650:	82 2f       	mov	r24, r18
    1652:	86 78       	andi	r24, 0x86	; 134
    1654:	09 f0       	breq	.+2      	; 0x1658 <vfprintf+0x2f6>
    1656:	73 94       	inc	r7
    1658:	23 fd       	sbrc	r18, 3
    165a:	12 c0       	rjmp	.+36     	; 0x1680 <vfprintf+0x31e>
    165c:	20 ff       	sbrs	r18, 0
    165e:	06 c0       	rjmp	.+12     	; 0x166c <vfprintf+0x30a>
    1660:	5a 2c       	mov	r5, r10
    1662:	73 14       	cp	r7, r3
    1664:	18 f4       	brcc	.+6      	; 0x166c <vfprintf+0x30a>
    1666:	53 0c       	add	r5, r3
    1668:	57 18       	sub	r5, r7
    166a:	73 2c       	mov	r7, r3
    166c:	73 14       	cp	r7, r3
    166e:	60 f4       	brcc	.+24     	; 0x1688 <vfprintf+0x326>
    1670:	b7 01       	movw	r22, r14
    1672:	80 e2       	ldi	r24, 0x20	; 32
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	2c 87       	std	Y+12, r18	; 0x0c
    1678:	99 d0       	rcall	.+306    	; 0x17ac <fputc>
    167a:	73 94       	inc	r7
    167c:	2c 85       	ldd	r18, Y+12	; 0x0c
    167e:	f6 cf       	rjmp	.-20     	; 0x166c <vfprintf+0x30a>
    1680:	73 14       	cp	r7, r3
    1682:	10 f4       	brcc	.+4      	; 0x1688 <vfprintf+0x326>
    1684:	37 18       	sub	r3, r7
    1686:	01 c0       	rjmp	.+2      	; 0x168a <vfprintf+0x328>
    1688:	31 2c       	mov	r3, r1
    168a:	24 ff       	sbrs	r18, 4
    168c:	11 c0       	rjmp	.+34     	; 0x16b0 <vfprintf+0x34e>
    168e:	b7 01       	movw	r22, r14
    1690:	80 e3       	ldi	r24, 0x30	; 48
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	2c 87       	std	Y+12, r18	; 0x0c
    1696:	8a d0       	rcall	.+276    	; 0x17ac <fputc>
    1698:	2c 85       	ldd	r18, Y+12	; 0x0c
    169a:	22 ff       	sbrs	r18, 2
    169c:	16 c0       	rjmp	.+44     	; 0x16ca <vfprintf+0x368>
    169e:	21 ff       	sbrs	r18, 1
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <vfprintf+0x346>
    16a2:	88 e5       	ldi	r24, 0x58	; 88
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x34a>
    16a8:	88 e7       	ldi	r24, 0x78	; 120
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	b7 01       	movw	r22, r14
    16ae:	0c c0       	rjmp	.+24     	; 0x16c8 <vfprintf+0x366>
    16b0:	82 2f       	mov	r24, r18
    16b2:	86 78       	andi	r24, 0x86	; 134
    16b4:	51 f0       	breq	.+20     	; 0x16ca <vfprintf+0x368>
    16b6:	21 fd       	sbrc	r18, 1
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <vfprintf+0x35c>
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <vfprintf+0x35e>
    16be:	8b e2       	ldi	r24, 0x2B	; 43
    16c0:	27 fd       	sbrc	r18, 7
    16c2:	8d e2       	ldi	r24, 0x2D	; 45
    16c4:	b7 01       	movw	r22, r14
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	71 d0       	rcall	.+226    	; 0x17ac <fputc>
    16ca:	a5 14       	cp	r10, r5
    16cc:	30 f4       	brcc	.+12     	; 0x16da <vfprintf+0x378>
    16ce:	b7 01       	movw	r22, r14
    16d0:	80 e3       	ldi	r24, 0x30	; 48
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	6b d0       	rcall	.+214    	; 0x17ac <fputc>
    16d6:	5a 94       	dec	r5
    16d8:	f8 cf       	rjmp	.-16     	; 0x16ca <vfprintf+0x368>
    16da:	aa 94       	dec	r10
    16dc:	f4 01       	movw	r30, r8
    16de:	ea 0d       	add	r30, r10
    16e0:	f1 1d       	adc	r31, r1
    16e2:	80 81       	ld	r24, Z
    16e4:	b7 01       	movw	r22, r14
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	61 d0       	rcall	.+194    	; 0x17ac <fputc>
    16ea:	a1 10       	cpse	r10, r1
    16ec:	f6 cf       	rjmp	.-20     	; 0x16da <vfprintf+0x378>
    16ee:	33 20       	and	r3, r3
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <vfprintf+0x392>
    16f2:	5d ce       	rjmp	.-838    	; 0x13ae <vfprintf+0x4c>
    16f4:	b7 01       	movw	r22, r14
    16f6:	80 e2       	ldi	r24, 0x20	; 32
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	58 d0       	rcall	.+176    	; 0x17ac <fputc>
    16fc:	3a 94       	dec	r3
    16fe:	f7 cf       	rjmp	.-18     	; 0x16ee <vfprintf+0x38c>
    1700:	f7 01       	movw	r30, r14
    1702:	86 81       	ldd	r24, Z+6	; 0x06
    1704:	97 81       	ldd	r25, Z+7	; 0x07
    1706:	02 c0       	rjmp	.+4      	; 0x170c <vfprintf+0x3aa>
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	9f ef       	ldi	r25, 0xFF	; 255
    170c:	2c 96       	adiw	r28, 0x0c	; 12
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	7f 90       	pop	r7
    1732:	6f 90       	pop	r6
    1734:	5f 90       	pop	r5
    1736:	4f 90       	pop	r4
    1738:	3f 90       	pop	r3
    173a:	2f 90       	pop	r2
    173c:	08 95       	ret

0000173e <calloc>:
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	86 9f       	mul	r24, r22
    1748:	80 01       	movw	r16, r0
    174a:	87 9f       	mul	r24, r23
    174c:	10 0d       	add	r17, r0
    174e:	96 9f       	mul	r25, r22
    1750:	10 0d       	add	r17, r0
    1752:	11 24       	eor	r1, r1
    1754:	c8 01       	movw	r24, r16
    1756:	83 dc       	rcall	.-1786   	; 0x105e <malloc>
    1758:	ec 01       	movw	r28, r24
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	21 f0       	breq	.+8      	; 0x1766 <calloc+0x28>
    175e:	a8 01       	movw	r20, r16
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	11 d0       	rcall	.+34     	; 0x1788 <memset>
    1766:	ce 01       	movw	r24, r28
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	08 95       	ret

00001772 <strnlen_P>:
    1772:	fc 01       	movw	r30, r24
    1774:	05 90       	lpm	r0, Z+
    1776:	61 50       	subi	r22, 0x01	; 1
    1778:	70 40       	sbci	r23, 0x00	; 0
    177a:	01 10       	cpse	r0, r1
    177c:	d8 f7       	brcc	.-10     	; 0x1774 <strnlen_P+0x2>
    177e:	80 95       	com	r24
    1780:	90 95       	com	r25
    1782:	8e 0f       	add	r24, r30
    1784:	9f 1f       	adc	r25, r31
    1786:	08 95       	ret

00001788 <memset>:
    1788:	dc 01       	movw	r26, r24
    178a:	01 c0       	rjmp	.+2      	; 0x178e <memset+0x6>
    178c:	6d 93       	st	X+, r22
    178e:	41 50       	subi	r20, 0x01	; 1
    1790:	50 40       	sbci	r21, 0x00	; 0
    1792:	e0 f7       	brcc	.-8      	; 0x178c <memset+0x4>
    1794:	08 95       	ret

00001796 <strnlen>:
    1796:	fc 01       	movw	r30, r24
    1798:	61 50       	subi	r22, 0x01	; 1
    179a:	70 40       	sbci	r23, 0x00	; 0
    179c:	01 90       	ld	r0, Z+
    179e:	01 10       	cpse	r0, r1
    17a0:	d8 f7       	brcc	.-10     	; 0x1798 <strnlen+0x2>
    17a2:	80 95       	com	r24
    17a4:	90 95       	com	r25
    17a6:	8e 0f       	add	r24, r30
    17a8:	9f 1f       	adc	r25, r31
    17aa:	08 95       	ret

000017ac <fputc>:
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	18 2f       	mov	r17, r24
    17b6:	09 2f       	mov	r16, r25
    17b8:	eb 01       	movw	r28, r22
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	81 fd       	sbrc	r24, 1
    17be:	03 c0       	rjmp	.+6      	; 0x17c6 <fputc+0x1a>
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	9f ef       	ldi	r25, 0xFF	; 255
    17c4:	20 c0       	rjmp	.+64     	; 0x1806 <fputc+0x5a>
    17c6:	82 ff       	sbrs	r24, 2
    17c8:	10 c0       	rjmp	.+32     	; 0x17ea <fputc+0x3e>
    17ca:	4e 81       	ldd	r20, Y+6	; 0x06
    17cc:	5f 81       	ldd	r21, Y+7	; 0x07
    17ce:	2c 81       	ldd	r18, Y+4	; 0x04
    17d0:	3d 81       	ldd	r19, Y+5	; 0x05
    17d2:	42 17       	cp	r20, r18
    17d4:	53 07       	cpc	r21, r19
    17d6:	7c f4       	brge	.+30     	; 0x17f6 <fputc+0x4a>
    17d8:	e8 81       	ld	r30, Y
    17da:	f9 81       	ldd	r31, Y+1	; 0x01
    17dc:	9f 01       	movw	r18, r30
    17de:	2f 5f       	subi	r18, 0xFF	; 255
    17e0:	3f 4f       	sbci	r19, 0xFF	; 255
    17e2:	39 83       	std	Y+1, r19	; 0x01
    17e4:	28 83       	st	Y, r18
    17e6:	10 83       	st	Z, r17
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <fputc+0x4a>
    17ea:	e8 85       	ldd	r30, Y+8	; 0x08
    17ec:	f9 85       	ldd	r31, Y+9	; 0x09
    17ee:	81 2f       	mov	r24, r17
    17f0:	19 95       	eicall
    17f2:	89 2b       	or	r24, r25
    17f4:	29 f7       	brne	.-54     	; 0x17c0 <fputc+0x14>
    17f6:	2e 81       	ldd	r18, Y+6	; 0x06
    17f8:	3f 81       	ldd	r19, Y+7	; 0x07
    17fa:	2f 5f       	subi	r18, 0xFF	; 255
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	3f 83       	std	Y+7, r19	; 0x07
    1800:	2e 83       	std	Y+6, r18	; 0x06
    1802:	81 2f       	mov	r24, r17
    1804:	90 2f       	mov	r25, r16
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	08 95       	ret

00001810 <__ultoa_invert>:
    1810:	fa 01       	movw	r30, r20
    1812:	aa 27       	eor	r26, r26
    1814:	28 30       	cpi	r18, 0x08	; 8
    1816:	51 f1       	breq	.+84     	; 0x186c <__ultoa_invert+0x5c>
    1818:	20 31       	cpi	r18, 0x10	; 16
    181a:	81 f1       	breq	.+96     	; 0x187c <__ultoa_invert+0x6c>
    181c:	e8 94       	clt
    181e:	6f 93       	push	r22
    1820:	6e 7f       	andi	r22, 0xFE	; 254
    1822:	6e 5f       	subi	r22, 0xFE	; 254
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	8f 4f       	sbci	r24, 0xFF	; 255
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	af 4f       	sbci	r26, 0xFF	; 255
    182c:	b1 e0       	ldi	r27, 0x01	; 1
    182e:	3e d0       	rcall	.+124    	; 0x18ac <__ultoa_invert+0x9c>
    1830:	b4 e0       	ldi	r27, 0x04	; 4
    1832:	3c d0       	rcall	.+120    	; 0x18ac <__ultoa_invert+0x9c>
    1834:	67 0f       	add	r22, r23
    1836:	78 1f       	adc	r23, r24
    1838:	89 1f       	adc	r24, r25
    183a:	9a 1f       	adc	r25, r26
    183c:	a1 1d       	adc	r26, r1
    183e:	68 0f       	add	r22, r24
    1840:	79 1f       	adc	r23, r25
    1842:	8a 1f       	adc	r24, r26
    1844:	91 1d       	adc	r25, r1
    1846:	a1 1d       	adc	r26, r1
    1848:	6a 0f       	add	r22, r26
    184a:	71 1d       	adc	r23, r1
    184c:	81 1d       	adc	r24, r1
    184e:	91 1d       	adc	r25, r1
    1850:	a1 1d       	adc	r26, r1
    1852:	20 d0       	rcall	.+64     	; 0x1894 <__ultoa_invert+0x84>
    1854:	09 f4       	brne	.+2      	; 0x1858 <__ultoa_invert+0x48>
    1856:	68 94       	set
    1858:	3f 91       	pop	r19
    185a:	2a e0       	ldi	r18, 0x0A	; 10
    185c:	26 9f       	mul	r18, r22
    185e:	11 24       	eor	r1, r1
    1860:	30 19       	sub	r19, r0
    1862:	30 5d       	subi	r19, 0xD0	; 208
    1864:	31 93       	st	Z+, r19
    1866:	de f6       	brtc	.-74     	; 0x181e <__ultoa_invert+0xe>
    1868:	cf 01       	movw	r24, r30
    186a:	08 95       	ret
    186c:	46 2f       	mov	r20, r22
    186e:	47 70       	andi	r20, 0x07	; 7
    1870:	40 5d       	subi	r20, 0xD0	; 208
    1872:	41 93       	st	Z+, r20
    1874:	b3 e0       	ldi	r27, 0x03	; 3
    1876:	0f d0       	rcall	.+30     	; 0x1896 <__ultoa_invert+0x86>
    1878:	c9 f7       	brne	.-14     	; 0x186c <__ultoa_invert+0x5c>
    187a:	f6 cf       	rjmp	.-20     	; 0x1868 <__ultoa_invert+0x58>
    187c:	46 2f       	mov	r20, r22
    187e:	4f 70       	andi	r20, 0x0F	; 15
    1880:	40 5d       	subi	r20, 0xD0	; 208
    1882:	4a 33       	cpi	r20, 0x3A	; 58
    1884:	18 f0       	brcs	.+6      	; 0x188c <__ultoa_invert+0x7c>
    1886:	49 5d       	subi	r20, 0xD9	; 217
    1888:	31 fd       	sbrc	r19, 1
    188a:	40 52       	subi	r20, 0x20	; 32
    188c:	41 93       	st	Z+, r20
    188e:	02 d0       	rcall	.+4      	; 0x1894 <__ultoa_invert+0x84>
    1890:	a9 f7       	brne	.-22     	; 0x187c <__ultoa_invert+0x6c>
    1892:	ea cf       	rjmp	.-44     	; 0x1868 <__ultoa_invert+0x58>
    1894:	b4 e0       	ldi	r27, 0x04	; 4
    1896:	a6 95       	lsr	r26
    1898:	97 95       	ror	r25
    189a:	87 95       	ror	r24
    189c:	77 95       	ror	r23
    189e:	67 95       	ror	r22
    18a0:	ba 95       	dec	r27
    18a2:	c9 f7       	brne	.-14     	; 0x1896 <__ultoa_invert+0x86>
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	61 05       	cpc	r22, r1
    18a8:	71 05       	cpc	r23, r1
    18aa:	08 95       	ret
    18ac:	9b 01       	movw	r18, r22
    18ae:	ac 01       	movw	r20, r24
    18b0:	0a 2e       	mov	r0, r26
    18b2:	06 94       	lsr	r0
    18b4:	57 95       	ror	r21
    18b6:	47 95       	ror	r20
    18b8:	37 95       	ror	r19
    18ba:	27 95       	ror	r18
    18bc:	ba 95       	dec	r27
    18be:	c9 f7       	brne	.-14     	; 0x18b2 <__ultoa_invert+0xa2>
    18c0:	62 0f       	add	r22, r18
    18c2:	73 1f       	adc	r23, r19
    18c4:	84 1f       	adc	r24, r20
    18c6:	95 1f       	adc	r25, r21
    18c8:	a0 1d       	adc	r26, r0
    18ca:	08 95       	ret

000018cc <_exit>:
    18cc:	f8 94       	cli

000018ce <__stop_program>:
    18ce:	ff cf       	rjmp	.-2      	; 0x18ce <__stop_program>
