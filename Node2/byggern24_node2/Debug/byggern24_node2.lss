
byggern24_node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800200  00000d5a  00000dee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002c4  008002c4  00000eb2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015dd  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ad9  00000000  00000000  000026ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ebc  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d4  00000000  00000000  00004040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000567  00000000  00000000  00004414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c30  00000000  00000000  0000497b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  000055ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	59 c1       	rjmp	.+690    	; 0x2b8 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e5       	ldi	r30, 0x5A	; 90
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 3c       	cpi	r26, 0xC4	; 196
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 ec       	ldi	r26, 0xC4	; 196
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 3c       	cpi	r26, 0xCE	; 206
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	3a d1       	rcall	.+628    	; 0x394 <main>
 120:	1a c6       	rjmp	.+3124   	; 0xd56 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <adc_init>:

void adc_init ()
{
	// AREF = AVcc

	set_bit(ADMUX, REFS0);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	clear_bit(ADMUX, REFS1);
 12e:	80 81       	ld	r24, Z
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	80 83       	st	Z, r24
	clear_bit(ADMUX, ADLAR);
 134:	80 81       	ld	r24, Z
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	80 83       	st	Z, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	87 68       	ori	r24, 0x87	; 135
 142:	80 83       	st	Z, r24
 144:	08 95       	ret

00000146 <adc_read>:

// read adc value
uint16_t adc_read(uint8_t ch)
{
	 ch &= 0b00000111;  // AND operation with 7
	 ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 146:	ec e7       	ldi	r30, 0x7C	; 124
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	90 81       	ld	r25, Z
}

// read adc value
uint16_t adc_read(uint8_t ch)
{
	 ch &= 0b00000111;  // AND operation with 7
 14c:	87 70       	andi	r24, 0x07	; 7
	 ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 14e:	98 7f       	andi	r25, 0xF8	; 248
 150:	98 2b       	or	r25, r24
 152:	90 83       	st	Z, r25
	
	// start single conversion
	// write '1' to ADSC
	set_bit(ADCSRA, ADSC);
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	//while(ADCSRA & (1<<ADSC));
	loop_until_bit_is_clear( ADCSRA, ADSC );
 15e:	80 81       	ld	r24, Z
 160:	86 fd       	sbrc	r24, 6
 162:	fd cf       	rjmp	.-6      	; 0x15e <adc_read+0x18>
	
	return (ADC);
 164:	80 91 78 00 	lds	r24, 0x0078
 168:	90 91 79 00 	lds	r25, 0x0079
}
 16c:	08 95       	ret

0000016e <can_controller_reset>:
	status = spi_read();

	PORTB |= ~(1<<CAN_CS);

	return status;
}
 16e:	2f 98       	cbi	0x05, 7	; 5
 170:	80 ec       	ldi	r24, 0xC0	; 192
 172:	46 d1       	rcall	.+652    	; 0x400 <spi_send>
 174:	2f 9a       	sbi	0x05, 7	; 5
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	9c e9       	ldi	r25, 0x9C	; 156
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <can_controller_reset+0xc>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <can_controller_reset+0x12>
 180:	00 00       	nop
 182:	08 95       	ret

00000184 <can_controller_read>:
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
 188:	2f 98       	cbi	0x05, 7	; 5
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	39 d1       	rcall	.+626    	; 0x400 <spi_send>
 18e:	8c 2f       	mov	r24, r28
 190:	37 d1       	rcall	.+622    	; 0x400 <spi_send>
 192:	38 d1       	rcall	.+624    	; 0x404 <spi_read>
 194:	2f 9a       	sbi	0x05, 7	; 5
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <can_controller_bit_modify>:
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	18 2f       	mov	r17, r24
 1a2:	d6 2f       	mov	r29, r22
 1a4:	c4 2f       	mov	r28, r20
 1a6:	2f 98       	cbi	0x05, 7	; 5
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	2a d1       	rcall	.+596    	; 0x400 <spi_send>
 1ac:	81 2f       	mov	r24, r17
 1ae:	28 d1       	rcall	.+592    	; 0x400 <spi_send>
 1b0:	8d 2f       	mov	r24, r29
 1b2:	26 d1       	rcall	.+588    	; 0x400 <spi_send>
 1b4:	8c 2f       	mov	r24, r28
 1b6:	24 d1       	rcall	.+584    	; 0x400 <spi_send>
 1b8:	2f 9a       	sbi	0x05, 7	; 5
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	08 95       	ret

000001c2 <can_controller_set_mode>:
 1c2:	48 2f       	mov	r20, r24
 1c4:	60 ee       	ldi	r22, 0xE0	; 224
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	e8 df       	rcall	.-48     	; 0x19a <can_controller_bit_modify>
 1ca:	8e e0       	ldi	r24, 0x0E	; 14
 1cc:	db df       	rcall	.-74     	; 0x184 <can_controller_read>
 1ce:	80 7e       	andi	r24, 0xE0	; 224
 1d0:	08 95       	ret

000001d2 <can_controller_write>:

void can_controller_write(uint8_t address, uint8_t data)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	d8 2f       	mov	r29, r24
 1d8:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
 1da:	2f 98       	cbi	0x05, 7	; 5
	
	spi_send(MCP_WRITE);
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	10 d1       	rcall	.+544    	; 0x400 <spi_send>
	spi_send(address);
 1e0:	8d 2f       	mov	r24, r29
 1e2:	0e d1       	rcall	.+540    	; 0x400 <spi_send>
	spi_send(data);
 1e4:	8c 2f       	mov	r24, r28
 1e6:	0c d1       	rcall	.+536    	; 0x400 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
 1e8:	2f 9a       	sbi	0x05, 7	; 5
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <can_controller_init>:
uint8_t can_controller_init()
{
	uint8_t value;

	//spi_init(); // Initialize SPI
	can_controller_reset(); // Send reset-command
 1f0:	be df       	rcall	.-132    	; 0x16e <can_controller_reset>
	

	// Self-test
	value = can_controller_read(MCP_CANSTAT);
 1f2:	8e e0       	ldi	r24, 0x0E	; 14
 1f4:	c7 df       	rcall	.-114    	; 0x184 <can_controller_read>
	if ((value & MODE_MASK)  != MODE_CONFIG)
 1f6:	98 2f       	mov	r25, r24
 1f8:	90 7e       	andi	r25, 0xE0	; 224
 1fa:	90 38       	cpi	r25, 0x80	; 128
 1fc:	69 f0       	breq	.+26     	; 0x218 <can_controller_init+0x28>
	{
		printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
 1fe:	1f 92       	push	r1
 200:	8f 93       	push	r24
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	9f 93       	push	r25
 208:	8f 93       	push	r24
 20a:	df d2       	rcall	.+1470   	; 0x7ca <printf>
		return 1;
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	08 95       	ret
	}
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000001);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	6f ef       	ldi	r22, 0xFF	; 255
 21c:	8b e2       	ldi	r24, 0x2B	; 43
 21e:	bd df       	rcall	.-134    	; 0x19a <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100100, 0b01100100);
 220:	44 e6       	ldi	r20, 0x64	; 100
 222:	64 e6       	ldi	r22, 0x64	; 100
 224:	80 e6       	ldi	r24, 0x60	; 96
 226:	b9 df       	rcall	.-142    	; 0x19a <can_controller_bit_modify>
	//printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
 228:	40 e6       	ldi	r20, 0x60	; 96
 22a:	60 e6       	ldi	r22, 0x60	; 96
 22c:	80 e7       	ldi	r24, 0x70	; 112
 22e:	b5 df       	rcall	.-150    	; 0x19a <can_controller_bit_modify>
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

	
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	82 e3       	ldi	r24, 0x32	; 50
 234:	ce df       	rcall	.-100    	; 0x1d2 <can_controller_write>
	return 0;
 236:	80 e0       	ldi	r24, 0x00	; 0
}
 238:	08 95       	ret

0000023a <can_init>:
	// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE));
	// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF));
	// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
	// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	c2 df       	rcall	.-124    	; 0x1c2 <can_controller_set_mode>
 23e:	88 23       	and	r24, r24
 240:	39 f0       	breq	.+14     	; 0x250 <can_init+0x16>
 242:	83 e5       	ldi	r24, 0x53	; 83
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	9f 93       	push	r25
 248:	8f 93       	push	r24
 24a:	bf d2       	rcall	.+1406   	; 0x7ca <printf>
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	f8 94       	cli
 252:	e9 e6       	ldi	r30, 0x69	; 105
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	80 83       	st	Z, r24
 25c:	80 81       	ld	r24, Z
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	80 83       	st	Z, r24
 262:	e8 9a       	sbi	0x1d, 0	; 29
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	8c e2       	ldi	r24, 0x2C	; 44
 268:	b4 df       	rcall	.-152    	; 0x1d2 <can_controller_write>
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	8d e2       	ldi	r24, 0x2D	; 45
 26e:	b1 df       	rcall	.-158    	; 0x1d2 <can_controller_write>
 270:	78 94       	sei
 272:	08 95       	ret

00000274 <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	eb 01       	movw	r28, r22

	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
 27e:	18 2f       	mov	r17, r24
 280:	12 95       	swap	r17
 282:	10 7f       	andi	r17, 0xF0	; 240
 284:	81 e6       	ldi	r24, 0x61	; 97
 286:	81 0f       	add	r24, r17
 288:	7d df       	rcall	.-262    	; 0x184 <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
 28a:	85 e6       	ldi	r24, 0x65	; 101
 28c:	81 0f       	add	r24, r17
 28e:	7a df       	rcall	.-268    	; 0x184 <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
 290:	98 2f       	mov	r25, r24
 292:	9f 70       	andi	r25, 0x0F	; 15
 294:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 296:	88 23       	and	r24, r24
 298:	51 f0       	breq	.+20     	; 0x2ae <can_recieve_msg+0x3a>
 29a:	1a 59       	subi	r17, 0x9A	; 154
 29c:	22 96       	adiw	r28, 0x02	; 2
 29e:	08 2f       	mov	r16, r24
 2a0:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
 2a2:	81 2f       	mov	r24, r17
 2a4:	6f df       	rcall	.-290    	; 0x184 <can_controller_read>
 2a6:	89 93       	st	Y+, r24
 2a8:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 2aa:	10 13       	cpse	r17, r16
 2ac:	fa cf       	rjmp	.-12     	; 0x2a2 <can_recieve_msg+0x2e>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}
	//can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
// 	can_controller_write(MCP_CANINTF, 0x00);
// 	can_controller_write(MCP_EFLG, 0x00);
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <__vector_1>:
#include "usart_driver.h"
#include "timer_driver.h"


ISR(INT0_vect)
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	0b b6       	in	r0, 0x3b	; 59
 2c4:	0f 92       	push	r0
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	cli();
 2e2:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 2e4:	8a e0       	ldi	r24, 0x0A	; 10
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	ff d0       	rcall	.+510    	; 0x4e8 <malloc>
 2ea:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	//printf("message INTERRUPTION recieved\n\r");
	//print(my_buf);
	uint8_t canInt = can_controller_read(MCP_CANINTF);
 2ec:	8c e2       	ldi	r24, 0x2C	; 44
 2ee:	4a df       	rcall	.-364    	; 0x184 <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
 2f0:	80 ff       	sbrs	r24, 0
 2f2:	17 c0       	rjmp	.+46     	; 0x322 <__vector_1+0x6a>
	{
		can_recieve_msg(0, msg);
 2f4:	be 01       	movw	r22, r28
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	bd df       	rcall	.-134    	; 0x274 <can_recieve_msg>
		
		//printf("X:\tY:\tLeft:\tRight:\tDirection:\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 2fa:	99 81       	ldd	r25, Y+1	; 0x01
 2fc:	99 23       	and	r25, r25
 2fe:	21 f0       	breq	.+8      	; 0x308 <__vector_1+0x50>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	89 13       	cpse	r24, r25
 306:	fd cf       	rjmp	.-6      	; 0x302 <__vector_1+0x4a>
			//printf("%d \t", (int8_t) msg->data[byte]);
		}
		timer_driver_set_duty_cycle(msg->data[0]);
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ab d0       	rcall	.+342    	; 0x464 <timer_driver_set_duty_cycle>
		can_controller_write(MCP_CANINTF, 0x00);
		sei();
		return;
	}
	//printf("before:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	can_controller_write(MCP_CANINTF, 0x00);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	8c e2       	ldi	r24, 0x2C	; 44
 312:	5f df       	rcall	.-322    	; 0x1d2 <can_controller_write>
	//can_controller_write(MCP_EFLG, 0x00);
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
 314:	ce 01       	movw	r24, r28
 316:	80 d1       	rcall	.+768    	; 0x618 <free>
	can_controller_write(MCP_CANINTF, 0x00);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	8c e2       	ldi	r24, 0x2C	; 44
 31c:	5a df       	rcall	.-332    	; 0x1d2 <can_controller_write>
	sei();
 31e:	78 94       	sei
 320:	09 c0       	rjmp	.+18     	; 0x334 <__vector_1+0x7c>
// 			printf("%d \n\r", msg->data[byte]);
// 		}
// 	}
	else
	{
		can_controller_write(MCP_CANINTF, 0x00);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	8c e2       	ldi	r24, 0x2C	; 44
 326:	55 df       	rcall	.-342    	; 0x1d2 <can_controller_write>
		//can_controller_write(MCP_EFLG, 0x00);
		free(msg);
 328:	ce 01       	movw	r24, r28
 32a:	76 d1       	rcall	.+748    	; 0x618 <free>
		can_controller_write(MCP_CANINTF, 0x00);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	8c e2       	ldi	r24, 0x2C	; 44
 330:	50 df       	rcall	.-352    	; 0x1d2 <can_controller_write>
		sei();
 332:	78 94       	sei
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
	can_controller_write(MCP_CANINTF, 0x00);
	sei();
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0b be       	out	0x3b, r0	; 59
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <record_score>:

#include "util.h"
#include "adc_driver.h"

uint16_t record_score(uint16_t score)
{
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
	uint16_t score_interval = 0;
	uint16_t adc = adc_read(0);
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	ef de       	rcall	.-546    	; 0x146 <adc_read>
		
	if (adc < 300)
 368:	8c 32       	cpi	r24, 0x2C	; 44
 36a:	91 40       	sbci	r25, 0x01	; 1
 36c:	78 f4       	brcc	.+30     	; 0x38c <record_score+0x2e>
	{
		score += 1;
 36e:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	93 ed       	ldi	r25, 0xD3	; 211
 374:	20 e3       	ldi	r18, 0x30	; 48
 376:	81 50       	subi	r24, 0x01	; 1
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	20 40       	sbci	r18, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <record_score+0x18>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <record_score+0x22>
 380:	00 00       	nop
		_delay_ms(1000);
	}
		
	while(score_interval == 1)
	{
		if (adc_read(0) > 300)
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	e0 de       	rcall	.-576    	; 0x146 <adc_read>
 386:	8d 32       	cpi	r24, 0x2D	; 45
 388:	91 40       	sbci	r25, 0x01	; 1
 38a:	d8 f3       	brcs	.-10     	; 0x382 <record_score+0x24>
			score_interval = 0;
			break;
		}
	}
	return score;
 38c:	ce 01       	movw	r24, r28
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <main>:
#include "adc_driver.h";
#include "game.h";

int main(void)
{
	USART_Init(MYUBRR);
 394:	87 e6       	ldi	r24, 0x67	; 103
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	97 d0       	rcall	.+302    	; 0x4c8 <USART_Init>
	spi_init();
 39a:	30 d0       	rcall	.+96     	; 0x3fc <spi_init>
	can_controller_init();
 39c:	29 df       	rcall	.-430    	; 0x1f0 <can_controller_init>
	can_init();
 39e:	4d df       	rcall	.-358    	; 0x23a <can_init>
	timer_driver_init();
 3a0:	35 d0       	rcall	.+106    	; 0x40c <timer_driver_init>
	adc_init();
 3a2:	c0 de       	rcall	.-640    	; 0x124 <adc_init>
	
	printf("Hello from node 2!\n\r");
 3a4:	85 e9       	ldi	r24, 0x95	; 149
 3a6:	92 e0       	ldi	r25, 0x02	; 2
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	0e d2       	rcall	.+1052   	; 0x7ca <printf>
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0

	//can_driver_test();
	//adc_driver_test ();

	uint16_t score = 0;
 3b2:	00 e0       	ldi	r16, 0x00	; 0
 3b4:	10 e0       	ldi	r17, 0x00	; 0
	while (1)
	{
		score = record_score(score);
		printf("ADC read: %d\t Score: %d\n\r", adc_read(0), score);
 3b6:	ca ea       	ldi	r28, 0xAA	; 170
 3b8:	d2 e0       	ldi	r29, 0x02	; 2
	//adc_driver_test ();

	uint16_t score = 0;
	while (1)
	{
		score = record_score(score);
 3ba:	80 2f       	mov	r24, r16
 3bc:	91 2f       	mov	r25, r17
 3be:	cf df       	rcall	.-98     	; 0x35e <record_score>
 3c0:	08 2f       	mov	r16, r24
 3c2:	19 2f       	mov	r17, r25
		printf("ADC read: %d\t Score: %d\n\r", adc_read(0), score);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	bf de       	rcall	.-642    	; 0x146 <adc_read>
 3c8:	1f 93       	push	r17
 3ca:	0f 93       	push	r16
 3cc:	9f 93       	push	r25
 3ce:	8f 93       	push	r24
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	fa d1       	rcall	.+1012   	; 0x7ca <printf>
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	eb cf       	rjmp	.-42     	; 0x3ba <main+0x26>

000003e4 <SPI_MasterInit>:
//TODO - define for register bit (reusable code)

void SPI_MasterInit(void)
{
	/* Set MOSI, SCK and SS output all others input */
	DDRB |= (1<<PB2)|(1<<PB1)|(1<<PB7)|(1<<PB0);
 3e4:	84 b1       	in	r24, 0x04	; 4
 3e6:	87 68       	ori	r24, 0x87	; 135
 3e8:	84 b9       	out	0x04, r24	; 4
	//Set MISO as input
	DDRB &= ~(1<<PB3);
 3ea:	23 98       	cbi	0x04, 3	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 3ec:	81 e5       	ldi	r24, 0x51	; 81
 3ee:	8c bd       	out	0x2c, r24	; 44
 3f0:	08 95       	ret

000003f2 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 3f2:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 3f4:	0d b4       	in	r0, 0x2d	; 45
 3f6:	07 fe       	sbrs	r0, 7
 3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <SPI_MasterTransmit+0x2>
}
 3fa:	08 95       	ret

000003fc <spi_init>:
// }


void spi_init()
{
	SPI_MasterInit();
 3fc:	f3 cf       	rjmp	.-26     	; 0x3e4 <SPI_MasterInit>
 3fe:	08 95       	ret

00000400 <spi_send>:
}

void spi_send(char data)
{
	SPI_MasterTransmit(data);
 400:	f8 cf       	rjmp	.-16     	; 0x3f2 <SPI_MasterTransmit>
 402:	08 95       	ret

00000404 <spi_read>:
	
}

char spi_read()
{
	SPI_MasterTransmit(0x00);
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	f5 df       	rcall	.-22     	; 0x3f2 <SPI_MasterTransmit>
	return SPDR;
 408:	8e b5       	in	r24, 0x2e	; 46
}
 40a:	08 95       	ret

0000040c <timer_driver_init>:
#include <avr/io.h>
#include "avr/interrupt.h"

void timer_driver_init()
{
	set_bit(DDRB, PB5);
 40c:	25 9a       	sbi	0x04, 5	; 4
	cli();
 40e:	f8 94       	cli
	//TOP = 16MHz/pre-scale/50Hz
	ICR1 = 39999;
 410:	8f e3       	ldi	r24, 0x3F	; 63
 412:	9c e9       	ldi	r25, 0x9C	; 156
 414:	90 93 87 00 	sts	0x0087, r25
 418:	80 93 86 00 	sts	0x0086, r24
	
	//duty_cycle
	OCR1A = 3999;
 41c:	8f e9       	ldi	r24, 0x9F	; 159
 41e:	9f e0       	ldi	r25, 0x0F	; 15
 420:	90 93 89 00 	sts	0x0089, r25
 424:	80 93 88 00 	sts	0x0088, r24
	
	//Set pre-scale to 8
	clear_bit(TCCR1B, CS10);
 428:	a1 e8       	ldi	r26, 0x81	; 129
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	8c 91       	ld	r24, X
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	8c 93       	st	X, r24
	set_bit(TCCR1B, CS11);
 432:	8c 91       	ld	r24, X
 434:	82 60       	ori	r24, 0x02	; 2
 436:	8c 93       	st	X, r24
	clear_bit(TCCR1B, CS12);
 438:	8c 91       	ld	r24, X
 43a:	8b 7f       	andi	r24, 0xFB	; 251
 43c:	8c 93       	st	X, r24
	
	//Set mode of operation to 14 (Fast PWM with ICRn)
	set_bit(TCCR1A, WGM11);
 43e:	e0 e8       	ldi	r30, 0x80	; 128
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	82 60       	ori	r24, 0x02	; 2
 446:	80 83       	st	Z, r24
	clear_bit(TCCR1A, WGM10);
 448:	80 81       	ld	r24, Z
 44a:	8e 7f       	andi	r24, 0xFE	; 254
 44c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 44e:	8c 91       	ld	r24, X
 450:	88 61       	ori	r24, 0x18	; 24
 452:	8c 93       	st	X, r24
	
	//Enable compare interruption on reg OCRnA
	set_bit(TCCR1A, COM1A1);
 454:	80 81       	ld	r24, Z
 456:	80 68       	ori	r24, 0x80	; 128
 458:	80 83       	st	Z, r24
	clear_bit(TCCR1A, COM1A0);
 45a:	80 81       	ld	r24, Z
 45c:	8f 7b       	andi	r24, 0xBF	; 191
 45e:	80 83       	st	Z, r24

	sei();
 460:	78 94       	sei
 462:	08 95       	ret

00000464 <timer_driver_set_duty_cycle>:
}

void timer_driver_set_duty_cycle(int8_t position)
{
	int duty_cycle = 10 * position + 2999;
 464:	99 27       	eor	r25, r25
 466:	87 fd       	sbrc	r24, 7
 468:	90 95       	com	r25
 46a:	9c 01       	movw	r18, r24
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	82 0f       	add	r24, r18
 47e:	93 1f       	adc	r25, r19
 480:	89 54       	subi	r24, 0x49	; 73
 482:	94 4f       	sbci	r25, 0xF4	; 244
	
	if (duty_cycle < 1999)
 484:	8f 3c       	cpi	r24, 0xCF	; 207
 486:	27 e0       	ldi	r18, 0x07	; 7
 488:	92 07       	cpc	r25, r18
 48a:	3c f0       	brlt	.+14     	; 0x49a <timer_driver_set_duty_cycle+0x36>
 48c:	80 3a       	cpi	r24, 0xA0	; 160
 48e:	2f e0       	ldi	r18, 0x0F	; 15
 490:	92 07       	cpc	r25, r18
 492:	2c f0       	brlt	.+10     	; 0x49e <timer_driver_set_duty_cycle+0x3a>
 494:	8f e9       	ldi	r24, 0x9F	; 159
 496:	9f e0       	ldi	r25, 0x0F	; 15
 498:	02 c0       	rjmp	.+4      	; 0x49e <timer_driver_set_duty_cycle+0x3a>
		duty_cycle = 1999;
 49a:	8f ec       	ldi	r24, 0xCF	; 207
 49c:	97 e0       	ldi	r25, 0x07	; 7
	else if (duty_cycle > 3999)
		duty_cycle = 3999;
	
	OCR1A = (uint16_t) duty_cycle;
 49e:	90 93 89 00 	sts	0x0089, r25
 4a2:	80 93 88 00 	sts	0x0088, r24
 4a6:	08 95       	ret

000004a8 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 4a8:	e0 ec       	ldi	r30, 0xC0	; 192
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	90 81       	ld	r25, Z
 4ae:	95 ff       	sbrs	r25, 5
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 4b2:	80 93 c6 00 	sts	0x00C6, r24
 4b6:	08 95       	ret

000004b8 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 4b8:	e0 ec       	ldi	r30, 0xC0	; 192
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	88 23       	and	r24, r24
 4c0:	ec f7       	brge	.-6      	; 0x4bc <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 4c2:	80 91 c6 00 	lds	r24, 0x00C6
}
 4c6:	08 95       	ret

000004c8 <USART_Init>:
#include "avr/io.h"

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr >> 8);
 4c8:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 4cc:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 4d0:	88 e1       	ldi	r24, 0x18	; 24
 4d2:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0)|(3 << UCSZ00);
 4d6:	8e e0       	ldi	r24, 0x0E	; 14
 4d8:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_Transmit, USART_Receive);
 4dc:	6c e5       	ldi	r22, 0x5C	; 92
 4de:	72 e0       	ldi	r23, 0x02	; 2
 4e0:	84 e5       	ldi	r24, 0x54	; 84
 4e2:	92 e0       	ldi	r25, 0x02	; 2
 4e4:	28 c1       	rjmp	.+592    	; 0x736 <fdevopen>
 4e6:	08 95       	ret

000004e8 <malloc>:
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	91 05       	cpc	r25, r1
 4f0:	10 f4       	brcc	.+4      	; 0x4f6 <malloc+0xe>
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	e0 91 c6 02 	lds	r30, 0x02C6
 4fa:	f0 91 c7 02 	lds	r31, 0x02C7
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	a0 e0       	ldi	r26, 0x00	; 0
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	30 97       	sbiw	r30, 0x00	; 0
 508:	39 f1       	breq	.+78     	; 0x558 <malloc+0x70>
 50a:	40 81       	ld	r20, Z
 50c:	51 81       	ldd	r21, Z+1	; 0x01
 50e:	48 17       	cp	r20, r24
 510:	59 07       	cpc	r21, r25
 512:	b8 f0       	brcs	.+46     	; 0x542 <malloc+0x5a>
 514:	48 17       	cp	r20, r24
 516:	59 07       	cpc	r21, r25
 518:	71 f4       	brne	.+28     	; 0x536 <malloc+0x4e>
 51a:	82 81       	ldd	r24, Z+2	; 0x02
 51c:	93 81       	ldd	r25, Z+3	; 0x03
 51e:	10 97       	sbiw	r26, 0x00	; 0
 520:	29 f0       	breq	.+10     	; 0x52c <malloc+0x44>
 522:	13 96       	adiw	r26, 0x03	; 3
 524:	9c 93       	st	X, r25
 526:	8e 93       	st	-X, r24
 528:	12 97       	sbiw	r26, 0x02	; 2
 52a:	2c c0       	rjmp	.+88     	; 0x584 <malloc+0x9c>
 52c:	90 93 c7 02 	sts	0x02C7, r25
 530:	80 93 c6 02 	sts	0x02C6, r24
 534:	27 c0       	rjmp	.+78     	; 0x584 <malloc+0x9c>
 536:	21 15       	cp	r18, r1
 538:	31 05       	cpc	r19, r1
 53a:	31 f0       	breq	.+12     	; 0x548 <malloc+0x60>
 53c:	42 17       	cp	r20, r18
 53e:	53 07       	cpc	r21, r19
 540:	18 f0       	brcs	.+6      	; 0x548 <malloc+0x60>
 542:	a9 01       	movw	r20, r18
 544:	db 01       	movw	r26, r22
 546:	01 c0       	rjmp	.+2      	; 0x54a <malloc+0x62>
 548:	ef 01       	movw	r28, r30
 54a:	9a 01       	movw	r18, r20
 54c:	bd 01       	movw	r22, r26
 54e:	df 01       	movw	r26, r30
 550:	02 80       	ldd	r0, Z+2	; 0x02
 552:	f3 81       	ldd	r31, Z+3	; 0x03
 554:	e0 2d       	mov	r30, r0
 556:	d7 cf       	rjmp	.-82     	; 0x506 <malloc+0x1e>
 558:	21 15       	cp	r18, r1
 55a:	31 05       	cpc	r19, r1
 55c:	f9 f0       	breq	.+62     	; 0x59c <malloc+0xb4>
 55e:	28 1b       	sub	r18, r24
 560:	39 0b       	sbc	r19, r25
 562:	24 30       	cpi	r18, 0x04	; 4
 564:	31 05       	cpc	r19, r1
 566:	80 f4       	brcc	.+32     	; 0x588 <malloc+0xa0>
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	9b 81       	ldd	r25, Y+3	; 0x03
 56c:	61 15       	cp	r22, r1
 56e:	71 05       	cpc	r23, r1
 570:	21 f0       	breq	.+8      	; 0x57a <malloc+0x92>
 572:	fb 01       	movw	r30, r22
 574:	93 83       	std	Z+3, r25	; 0x03
 576:	82 83       	std	Z+2, r24	; 0x02
 578:	04 c0       	rjmp	.+8      	; 0x582 <malloc+0x9a>
 57a:	90 93 c7 02 	sts	0x02C7, r25
 57e:	80 93 c6 02 	sts	0x02C6, r24
 582:	fe 01       	movw	r30, r28
 584:	32 96       	adiw	r30, 0x02	; 2
 586:	44 c0       	rjmp	.+136    	; 0x610 <malloc+0x128>
 588:	fe 01       	movw	r30, r28
 58a:	e2 0f       	add	r30, r18
 58c:	f3 1f       	adc	r31, r19
 58e:	81 93       	st	Z+, r24
 590:	91 93       	st	Z+, r25
 592:	22 50       	subi	r18, 0x02	; 2
 594:	31 09       	sbc	r19, r1
 596:	39 83       	std	Y+1, r19	; 0x01
 598:	28 83       	st	Y, r18
 59a:	3a c0       	rjmp	.+116    	; 0x610 <malloc+0x128>
 59c:	20 91 c4 02 	lds	r18, 0x02C4
 5a0:	30 91 c5 02 	lds	r19, 0x02C5
 5a4:	23 2b       	or	r18, r19
 5a6:	41 f4       	brne	.+16     	; 0x5b8 <malloc+0xd0>
 5a8:	20 91 02 02 	lds	r18, 0x0202
 5ac:	30 91 03 02 	lds	r19, 0x0203
 5b0:	30 93 c5 02 	sts	0x02C5, r19
 5b4:	20 93 c4 02 	sts	0x02C4, r18
 5b8:	20 91 00 02 	lds	r18, 0x0200
 5bc:	30 91 01 02 	lds	r19, 0x0201
 5c0:	21 15       	cp	r18, r1
 5c2:	31 05       	cpc	r19, r1
 5c4:	41 f4       	brne	.+16     	; 0x5d6 <malloc+0xee>
 5c6:	2d b7       	in	r18, 0x3d	; 61
 5c8:	3e b7       	in	r19, 0x3e	; 62
 5ca:	40 91 04 02 	lds	r20, 0x0204
 5ce:	50 91 05 02 	lds	r21, 0x0205
 5d2:	24 1b       	sub	r18, r20
 5d4:	35 0b       	sbc	r19, r21
 5d6:	e0 91 c4 02 	lds	r30, 0x02C4
 5da:	f0 91 c5 02 	lds	r31, 0x02C5
 5de:	e2 17       	cp	r30, r18
 5e0:	f3 07       	cpc	r31, r19
 5e2:	a0 f4       	brcc	.+40     	; 0x60c <malloc+0x124>
 5e4:	2e 1b       	sub	r18, r30
 5e6:	3f 0b       	sbc	r19, r31
 5e8:	28 17       	cp	r18, r24
 5ea:	39 07       	cpc	r19, r25
 5ec:	78 f0       	brcs	.+30     	; 0x60c <malloc+0x124>
 5ee:	ac 01       	movw	r20, r24
 5f0:	4e 5f       	subi	r20, 0xFE	; 254
 5f2:	5f 4f       	sbci	r21, 0xFF	; 255
 5f4:	24 17       	cp	r18, r20
 5f6:	35 07       	cpc	r19, r21
 5f8:	48 f0       	brcs	.+18     	; 0x60c <malloc+0x124>
 5fa:	4e 0f       	add	r20, r30
 5fc:	5f 1f       	adc	r21, r31
 5fe:	50 93 c5 02 	sts	0x02C5, r21
 602:	40 93 c4 02 	sts	0x02C4, r20
 606:	81 93       	st	Z+, r24
 608:	91 93       	st	Z+, r25
 60a:	02 c0       	rjmp	.+4      	; 0x610 <malloc+0x128>
 60c:	e0 e0       	ldi	r30, 0x00	; 0
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	cf 01       	movw	r24, r30
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <free>:
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	00 97       	sbiw	r24, 0x00	; 0
 61e:	09 f4       	brne	.+2      	; 0x622 <free+0xa>
 620:	87 c0       	rjmp	.+270    	; 0x730 <free+0x118>
 622:	fc 01       	movw	r30, r24
 624:	32 97       	sbiw	r30, 0x02	; 2
 626:	13 82       	std	Z+3, r1	; 0x03
 628:	12 82       	std	Z+2, r1	; 0x02
 62a:	c0 91 c6 02 	lds	r28, 0x02C6
 62e:	d0 91 c7 02 	lds	r29, 0x02C7
 632:	20 97       	sbiw	r28, 0x00	; 0
 634:	81 f4       	brne	.+32     	; 0x656 <free+0x3e>
 636:	20 81       	ld	r18, Z
 638:	31 81       	ldd	r19, Z+1	; 0x01
 63a:	28 0f       	add	r18, r24
 63c:	39 1f       	adc	r19, r25
 63e:	80 91 c4 02 	lds	r24, 0x02C4
 642:	90 91 c5 02 	lds	r25, 0x02C5
 646:	82 17       	cp	r24, r18
 648:	93 07       	cpc	r25, r19
 64a:	79 f5       	brne	.+94     	; 0x6aa <free+0x92>
 64c:	f0 93 c5 02 	sts	0x02C5, r31
 650:	e0 93 c4 02 	sts	0x02C4, r30
 654:	6d c0       	rjmp	.+218    	; 0x730 <free+0x118>
 656:	de 01       	movw	r26, r28
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	ae 17       	cp	r26, r30
 65e:	bf 07       	cpc	r27, r31
 660:	50 f4       	brcc	.+20     	; 0x676 <free+0x5e>
 662:	12 96       	adiw	r26, 0x02	; 2
 664:	4d 91       	ld	r20, X+
 666:	5c 91       	ld	r21, X
 668:	13 97       	sbiw	r26, 0x03	; 3
 66a:	9d 01       	movw	r18, r26
 66c:	41 15       	cp	r20, r1
 66e:	51 05       	cpc	r21, r1
 670:	09 f1       	breq	.+66     	; 0x6b4 <free+0x9c>
 672:	da 01       	movw	r26, r20
 674:	f3 cf       	rjmp	.-26     	; 0x65c <free+0x44>
 676:	b3 83       	std	Z+3, r27	; 0x03
 678:	a2 83       	std	Z+2, r26	; 0x02
 67a:	40 81       	ld	r20, Z
 67c:	51 81       	ldd	r21, Z+1	; 0x01
 67e:	84 0f       	add	r24, r20
 680:	95 1f       	adc	r25, r21
 682:	8a 17       	cp	r24, r26
 684:	9b 07       	cpc	r25, r27
 686:	71 f4       	brne	.+28     	; 0x6a4 <free+0x8c>
 688:	8d 91       	ld	r24, X+
 68a:	9c 91       	ld	r25, X
 68c:	11 97       	sbiw	r26, 0x01	; 1
 68e:	84 0f       	add	r24, r20
 690:	95 1f       	adc	r25, r21
 692:	02 96       	adiw	r24, 0x02	; 2
 694:	91 83       	std	Z+1, r25	; 0x01
 696:	80 83       	st	Z, r24
 698:	12 96       	adiw	r26, 0x02	; 2
 69a:	8d 91       	ld	r24, X+
 69c:	9c 91       	ld	r25, X
 69e:	13 97       	sbiw	r26, 0x03	; 3
 6a0:	93 83       	std	Z+3, r25	; 0x03
 6a2:	82 83       	std	Z+2, r24	; 0x02
 6a4:	21 15       	cp	r18, r1
 6a6:	31 05       	cpc	r19, r1
 6a8:	29 f4       	brne	.+10     	; 0x6b4 <free+0x9c>
 6aa:	f0 93 c7 02 	sts	0x02C7, r31
 6ae:	e0 93 c6 02 	sts	0x02C6, r30
 6b2:	3e c0       	rjmp	.+124    	; 0x730 <free+0x118>
 6b4:	d9 01       	movw	r26, r18
 6b6:	13 96       	adiw	r26, 0x03	; 3
 6b8:	fc 93       	st	X, r31
 6ba:	ee 93       	st	-X, r30
 6bc:	12 97       	sbiw	r26, 0x02	; 2
 6be:	4d 91       	ld	r20, X+
 6c0:	5d 91       	ld	r21, X+
 6c2:	a4 0f       	add	r26, r20
 6c4:	b5 1f       	adc	r27, r21
 6c6:	ea 17       	cp	r30, r26
 6c8:	fb 07       	cpc	r31, r27
 6ca:	79 f4       	brne	.+30     	; 0x6ea <free+0xd2>
 6cc:	80 81       	ld	r24, Z
 6ce:	91 81       	ldd	r25, Z+1	; 0x01
 6d0:	84 0f       	add	r24, r20
 6d2:	95 1f       	adc	r25, r21
 6d4:	02 96       	adiw	r24, 0x02	; 2
 6d6:	d9 01       	movw	r26, r18
 6d8:	11 96       	adiw	r26, 0x01	; 1
 6da:	9c 93       	st	X, r25
 6dc:	8e 93       	st	-X, r24
 6de:	82 81       	ldd	r24, Z+2	; 0x02
 6e0:	93 81       	ldd	r25, Z+3	; 0x03
 6e2:	13 96       	adiw	r26, 0x03	; 3
 6e4:	9c 93       	st	X, r25
 6e6:	8e 93       	st	-X, r24
 6e8:	12 97       	sbiw	r26, 0x02	; 2
 6ea:	e0 e0       	ldi	r30, 0x00	; 0
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	9b 81       	ldd	r25, Y+3	; 0x03
 6f2:	00 97       	sbiw	r24, 0x00	; 0
 6f4:	19 f0       	breq	.+6      	; 0x6fc <free+0xe4>
 6f6:	fe 01       	movw	r30, r28
 6f8:	ec 01       	movw	r28, r24
 6fa:	f9 cf       	rjmp	.-14     	; 0x6ee <free+0xd6>
 6fc:	ce 01       	movw	r24, r28
 6fe:	02 96       	adiw	r24, 0x02	; 2
 700:	28 81       	ld	r18, Y
 702:	39 81       	ldd	r19, Y+1	; 0x01
 704:	82 0f       	add	r24, r18
 706:	93 1f       	adc	r25, r19
 708:	20 91 c4 02 	lds	r18, 0x02C4
 70c:	30 91 c5 02 	lds	r19, 0x02C5
 710:	28 17       	cp	r18, r24
 712:	39 07       	cpc	r19, r25
 714:	69 f4       	brne	.+26     	; 0x730 <free+0x118>
 716:	30 97       	sbiw	r30, 0x00	; 0
 718:	29 f4       	brne	.+10     	; 0x724 <free+0x10c>
 71a:	10 92 c7 02 	sts	0x02C7, r1
 71e:	10 92 c6 02 	sts	0x02C6, r1
 722:	02 c0       	rjmp	.+4      	; 0x728 <free+0x110>
 724:	13 82       	std	Z+3, r1	; 0x03
 726:	12 82       	std	Z+2, r1	; 0x02
 728:	d0 93 c5 02 	sts	0x02C5, r29
 72c:	c0 93 c4 02 	sts	0x02C4, r28
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <fdevopen>:
 736:	0f 93       	push	r16
 738:	1f 93       	push	r17
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	ec 01       	movw	r28, r24
 740:	8b 01       	movw	r16, r22
 742:	00 97       	sbiw	r24, 0x00	; 0
 744:	31 f4       	brne	.+12     	; 0x752 <fdevopen+0x1c>
 746:	61 15       	cp	r22, r1
 748:	71 05       	cpc	r23, r1
 74a:	19 f4       	brne	.+6      	; 0x752 <fdevopen+0x1c>
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	37 c0       	rjmp	.+110    	; 0x7c0 <fdevopen+0x8a>
 752:	6e e0       	ldi	r22, 0x0E	; 14
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	36 d2       	rcall	.+1132   	; 0xbc8 <calloc>
 75c:	fc 01       	movw	r30, r24
 75e:	00 97       	sbiw	r24, 0x00	; 0
 760:	a9 f3       	breq	.-22     	; 0x74c <fdevopen+0x16>
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	83 83       	std	Z+3, r24	; 0x03
 766:	01 15       	cp	r16, r1
 768:	11 05       	cpc	r17, r1
 76a:	71 f0       	breq	.+28     	; 0x788 <fdevopen+0x52>
 76c:	13 87       	std	Z+11, r17	; 0x0b
 76e:	02 87       	std	Z+10, r16	; 0x0a
 770:	81 e8       	ldi	r24, 0x81	; 129
 772:	83 83       	std	Z+3, r24	; 0x03
 774:	80 91 c8 02 	lds	r24, 0x02C8
 778:	90 91 c9 02 	lds	r25, 0x02C9
 77c:	89 2b       	or	r24, r25
 77e:	21 f4       	brne	.+8      	; 0x788 <fdevopen+0x52>
 780:	f0 93 c9 02 	sts	0x02C9, r31
 784:	e0 93 c8 02 	sts	0x02C8, r30
 788:	20 97       	sbiw	r28, 0x00	; 0
 78a:	c9 f0       	breq	.+50     	; 0x7be <fdevopen+0x88>
 78c:	d1 87       	std	Z+9, r29	; 0x09
 78e:	c0 87       	std	Z+8, r28	; 0x08
 790:	83 81       	ldd	r24, Z+3	; 0x03
 792:	82 60       	ori	r24, 0x02	; 2
 794:	83 83       	std	Z+3, r24	; 0x03
 796:	80 91 ca 02 	lds	r24, 0x02CA
 79a:	90 91 cb 02 	lds	r25, 0x02CB
 79e:	89 2b       	or	r24, r25
 7a0:	71 f4       	brne	.+28     	; 0x7be <fdevopen+0x88>
 7a2:	f0 93 cb 02 	sts	0x02CB, r31
 7a6:	e0 93 ca 02 	sts	0x02CA, r30
 7aa:	80 91 cc 02 	lds	r24, 0x02CC
 7ae:	90 91 cd 02 	lds	r25, 0x02CD
 7b2:	89 2b       	or	r24, r25
 7b4:	21 f4       	brne	.+8      	; 0x7be <fdevopen+0x88>
 7b6:	f0 93 cd 02 	sts	0x02CD, r31
 7ba:	e0 93 cc 02 	sts	0x02CC, r30
 7be:	cf 01       	movw	r24, r30
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	08 95       	ret

000007ca <printf>:
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	fe 01       	movw	r30, r28
 7d4:	36 96       	adiw	r30, 0x06	; 6
 7d6:	61 91       	ld	r22, Z+
 7d8:	71 91       	ld	r23, Z+
 7da:	af 01       	movw	r20, r30
 7dc:	80 91 ca 02 	lds	r24, 0x02CA
 7e0:	90 91 cb 02 	lds	r25, 0x02CB
 7e4:	03 d0       	rcall	.+6      	; 0x7ec <vfprintf>
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	08 95       	ret

000007ec <vfprintf>:
 7ec:	2f 92       	push	r2
 7ee:	3f 92       	push	r3
 7f0:	4f 92       	push	r4
 7f2:	5f 92       	push	r5
 7f4:	6f 92       	push	r6
 7f6:	7f 92       	push	r7
 7f8:	8f 92       	push	r8
 7fa:	9f 92       	push	r9
 7fc:	af 92       	push	r10
 7fe:	bf 92       	push	r11
 800:	cf 92       	push	r12
 802:	df 92       	push	r13
 804:	ef 92       	push	r14
 806:	ff 92       	push	r15
 808:	0f 93       	push	r16
 80a:	1f 93       	push	r17
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	cd b7       	in	r28, 0x3d	; 61
 812:	de b7       	in	r29, 0x3e	; 62
 814:	2c 97       	sbiw	r28, 0x0c	; 12
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	f8 94       	cli
 81a:	de bf       	out	0x3e, r29	; 62
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	cd bf       	out	0x3d, r28	; 61
 820:	7c 01       	movw	r14, r24
 822:	6b 01       	movw	r12, r22
 824:	8a 01       	movw	r16, r20
 826:	fc 01       	movw	r30, r24
 828:	17 82       	std	Z+7, r1	; 0x07
 82a:	16 82       	std	Z+6, r1	; 0x06
 82c:	83 81       	ldd	r24, Z+3	; 0x03
 82e:	81 ff       	sbrs	r24, 1
 830:	b0 c1       	rjmp	.+864    	; 0xb92 <vfprintf+0x3a6>
 832:	ce 01       	movw	r24, r28
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	4c 01       	movw	r8, r24
 838:	f7 01       	movw	r30, r14
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	f6 01       	movw	r30, r12
 83e:	93 fd       	sbrc	r25, 3
 840:	85 91       	lpm	r24, Z+
 842:	93 ff       	sbrs	r25, 3
 844:	81 91       	ld	r24, Z+
 846:	6f 01       	movw	r12, r30
 848:	88 23       	and	r24, r24
 84a:	09 f4       	brne	.+2      	; 0x84e <vfprintf+0x62>
 84c:	9e c1       	rjmp	.+828    	; 0xb8a <vfprintf+0x39e>
 84e:	85 32       	cpi	r24, 0x25	; 37
 850:	39 f4       	brne	.+14     	; 0x860 <vfprintf+0x74>
 852:	93 fd       	sbrc	r25, 3
 854:	85 91       	lpm	r24, Z+
 856:	93 ff       	sbrs	r25, 3
 858:	81 91       	ld	r24, Z+
 85a:	6f 01       	movw	r12, r30
 85c:	85 32       	cpi	r24, 0x25	; 37
 85e:	21 f4       	brne	.+8      	; 0x868 <vfprintf+0x7c>
 860:	b7 01       	movw	r22, r14
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	e8 d1       	rcall	.+976    	; 0xc36 <fputc>
 866:	e8 cf       	rjmp	.-48     	; 0x838 <vfprintf+0x4c>
 868:	51 2c       	mov	r5, r1
 86a:	31 2c       	mov	r3, r1
 86c:	20 e0       	ldi	r18, 0x00	; 0
 86e:	20 32       	cpi	r18, 0x20	; 32
 870:	a0 f4       	brcc	.+40     	; 0x89a <vfprintf+0xae>
 872:	8b 32       	cpi	r24, 0x2B	; 43
 874:	69 f0       	breq	.+26     	; 0x890 <vfprintf+0xa4>
 876:	30 f4       	brcc	.+12     	; 0x884 <vfprintf+0x98>
 878:	80 32       	cpi	r24, 0x20	; 32
 87a:	59 f0       	breq	.+22     	; 0x892 <vfprintf+0xa6>
 87c:	83 32       	cpi	r24, 0x23	; 35
 87e:	69 f4       	brne	.+26     	; 0x89a <vfprintf+0xae>
 880:	20 61       	ori	r18, 0x10	; 16
 882:	2c c0       	rjmp	.+88     	; 0x8dc <vfprintf+0xf0>
 884:	8d 32       	cpi	r24, 0x2D	; 45
 886:	39 f0       	breq	.+14     	; 0x896 <vfprintf+0xaa>
 888:	80 33       	cpi	r24, 0x30	; 48
 88a:	39 f4       	brne	.+14     	; 0x89a <vfprintf+0xae>
 88c:	21 60       	ori	r18, 0x01	; 1
 88e:	26 c0       	rjmp	.+76     	; 0x8dc <vfprintf+0xf0>
 890:	22 60       	ori	r18, 0x02	; 2
 892:	24 60       	ori	r18, 0x04	; 4
 894:	23 c0       	rjmp	.+70     	; 0x8dc <vfprintf+0xf0>
 896:	28 60       	ori	r18, 0x08	; 8
 898:	21 c0       	rjmp	.+66     	; 0x8dc <vfprintf+0xf0>
 89a:	27 fd       	sbrc	r18, 7
 89c:	27 c0       	rjmp	.+78     	; 0x8ec <vfprintf+0x100>
 89e:	30 ed       	ldi	r19, 0xD0	; 208
 8a0:	38 0f       	add	r19, r24
 8a2:	3a 30       	cpi	r19, 0x0A	; 10
 8a4:	78 f4       	brcc	.+30     	; 0x8c4 <vfprintf+0xd8>
 8a6:	26 ff       	sbrs	r18, 6
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <vfprintf+0xca>
 8aa:	fa e0       	ldi	r31, 0x0A	; 10
 8ac:	5f 9e       	mul	r5, r31
 8ae:	30 0d       	add	r19, r0
 8b0:	11 24       	eor	r1, r1
 8b2:	53 2e       	mov	r5, r19
 8b4:	13 c0       	rjmp	.+38     	; 0x8dc <vfprintf+0xf0>
 8b6:	8a e0       	ldi	r24, 0x0A	; 10
 8b8:	38 9e       	mul	r3, r24
 8ba:	30 0d       	add	r19, r0
 8bc:	11 24       	eor	r1, r1
 8be:	33 2e       	mov	r3, r19
 8c0:	20 62       	ori	r18, 0x20	; 32
 8c2:	0c c0       	rjmp	.+24     	; 0x8dc <vfprintf+0xf0>
 8c4:	8e 32       	cpi	r24, 0x2E	; 46
 8c6:	21 f4       	brne	.+8      	; 0x8d0 <vfprintf+0xe4>
 8c8:	26 fd       	sbrc	r18, 6
 8ca:	5f c1       	rjmp	.+702    	; 0xb8a <vfprintf+0x39e>
 8cc:	20 64       	ori	r18, 0x40	; 64
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0xf0>
 8d0:	8c 36       	cpi	r24, 0x6C	; 108
 8d2:	11 f4       	brne	.+4      	; 0x8d8 <vfprintf+0xec>
 8d4:	20 68       	ori	r18, 0x80	; 128
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0xf0>
 8d8:	88 36       	cpi	r24, 0x68	; 104
 8da:	41 f4       	brne	.+16     	; 0x8ec <vfprintf+0x100>
 8dc:	f6 01       	movw	r30, r12
 8de:	93 fd       	sbrc	r25, 3
 8e0:	85 91       	lpm	r24, Z+
 8e2:	93 ff       	sbrs	r25, 3
 8e4:	81 91       	ld	r24, Z+
 8e6:	6f 01       	movw	r12, r30
 8e8:	81 11       	cpse	r24, r1
 8ea:	c1 cf       	rjmp	.-126    	; 0x86e <vfprintf+0x82>
 8ec:	98 2f       	mov	r25, r24
 8ee:	9f 7d       	andi	r25, 0xDF	; 223
 8f0:	95 54       	subi	r25, 0x45	; 69
 8f2:	93 30       	cpi	r25, 0x03	; 3
 8f4:	28 f4       	brcc	.+10     	; 0x900 <vfprintf+0x114>
 8f6:	0c 5f       	subi	r16, 0xFC	; 252
 8f8:	1f 4f       	sbci	r17, 0xFF	; 255
 8fa:	ff e3       	ldi	r31, 0x3F	; 63
 8fc:	f9 83       	std	Y+1, r31	; 0x01
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <vfprintf+0x12e>
 900:	83 36       	cpi	r24, 0x63	; 99
 902:	31 f0       	breq	.+12     	; 0x910 <vfprintf+0x124>
 904:	83 37       	cpi	r24, 0x73	; 115
 906:	71 f0       	breq	.+28     	; 0x924 <vfprintf+0x138>
 908:	83 35       	cpi	r24, 0x53	; 83
 90a:	09 f0       	breq	.+2      	; 0x90e <vfprintf+0x122>
 90c:	57 c0       	rjmp	.+174    	; 0x9bc <vfprintf+0x1d0>
 90e:	21 c0       	rjmp	.+66     	; 0x952 <vfprintf+0x166>
 910:	f8 01       	movw	r30, r16
 912:	80 81       	ld	r24, Z
 914:	89 83       	std	Y+1, r24	; 0x01
 916:	0e 5f       	subi	r16, 0xFE	; 254
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	44 24       	eor	r4, r4
 91c:	43 94       	inc	r4
 91e:	51 2c       	mov	r5, r1
 920:	54 01       	movw	r10, r8
 922:	14 c0       	rjmp	.+40     	; 0x94c <vfprintf+0x160>
 924:	38 01       	movw	r6, r16
 926:	f2 e0       	ldi	r31, 0x02	; 2
 928:	6f 0e       	add	r6, r31
 92a:	71 1c       	adc	r7, r1
 92c:	f8 01       	movw	r30, r16
 92e:	a0 80       	ld	r10, Z
 930:	b1 80       	ldd	r11, Z+1	; 0x01
 932:	26 ff       	sbrs	r18, 6
 934:	03 c0       	rjmp	.+6      	; 0x93c <vfprintf+0x150>
 936:	65 2d       	mov	r22, r5
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	02 c0       	rjmp	.+4      	; 0x940 <vfprintf+0x154>
 93c:	6f ef       	ldi	r22, 0xFF	; 255
 93e:	7f ef       	ldi	r23, 0xFF	; 255
 940:	c5 01       	movw	r24, r10
 942:	2c 87       	std	Y+12, r18	; 0x0c
 944:	6d d1       	rcall	.+730    	; 0xc20 <strnlen>
 946:	2c 01       	movw	r4, r24
 948:	83 01       	movw	r16, r6
 94a:	2c 85       	ldd	r18, Y+12	; 0x0c
 94c:	2f 77       	andi	r18, 0x7F	; 127
 94e:	22 2e       	mov	r2, r18
 950:	16 c0       	rjmp	.+44     	; 0x97e <vfprintf+0x192>
 952:	38 01       	movw	r6, r16
 954:	f2 e0       	ldi	r31, 0x02	; 2
 956:	6f 0e       	add	r6, r31
 958:	71 1c       	adc	r7, r1
 95a:	f8 01       	movw	r30, r16
 95c:	a0 80       	ld	r10, Z
 95e:	b1 80       	ldd	r11, Z+1	; 0x01
 960:	26 ff       	sbrs	r18, 6
 962:	03 c0       	rjmp	.+6      	; 0x96a <vfprintf+0x17e>
 964:	65 2d       	mov	r22, r5
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	02 c0       	rjmp	.+4      	; 0x96e <vfprintf+0x182>
 96a:	6f ef       	ldi	r22, 0xFF	; 255
 96c:	7f ef       	ldi	r23, 0xFF	; 255
 96e:	c5 01       	movw	r24, r10
 970:	2c 87       	std	Y+12, r18	; 0x0c
 972:	44 d1       	rcall	.+648    	; 0xbfc <strnlen_P>
 974:	2c 01       	movw	r4, r24
 976:	2c 85       	ldd	r18, Y+12	; 0x0c
 978:	20 68       	ori	r18, 0x80	; 128
 97a:	22 2e       	mov	r2, r18
 97c:	83 01       	movw	r16, r6
 97e:	23 fc       	sbrc	r2, 3
 980:	19 c0       	rjmp	.+50     	; 0x9b4 <vfprintf+0x1c8>
 982:	83 2d       	mov	r24, r3
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	48 16       	cp	r4, r24
 988:	59 06       	cpc	r5, r25
 98a:	a0 f4       	brcc	.+40     	; 0x9b4 <vfprintf+0x1c8>
 98c:	b7 01       	movw	r22, r14
 98e:	80 e2       	ldi	r24, 0x20	; 32
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	51 d1       	rcall	.+674    	; 0xc36 <fputc>
 994:	3a 94       	dec	r3
 996:	f5 cf       	rjmp	.-22     	; 0x982 <vfprintf+0x196>
 998:	f5 01       	movw	r30, r10
 99a:	27 fc       	sbrc	r2, 7
 99c:	85 91       	lpm	r24, Z+
 99e:	27 fe       	sbrs	r2, 7
 9a0:	81 91       	ld	r24, Z+
 9a2:	5f 01       	movw	r10, r30
 9a4:	b7 01       	movw	r22, r14
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	46 d1       	rcall	.+652    	; 0xc36 <fputc>
 9aa:	31 10       	cpse	r3, r1
 9ac:	3a 94       	dec	r3
 9ae:	f1 e0       	ldi	r31, 0x01	; 1
 9b0:	4f 1a       	sub	r4, r31
 9b2:	51 08       	sbc	r5, r1
 9b4:	41 14       	cp	r4, r1
 9b6:	51 04       	cpc	r5, r1
 9b8:	79 f7       	brne	.-34     	; 0x998 <vfprintf+0x1ac>
 9ba:	de c0       	rjmp	.+444    	; 0xb78 <vfprintf+0x38c>
 9bc:	84 36       	cpi	r24, 0x64	; 100
 9be:	11 f0       	breq	.+4      	; 0x9c4 <vfprintf+0x1d8>
 9c0:	89 36       	cpi	r24, 0x69	; 105
 9c2:	31 f5       	brne	.+76     	; 0xa10 <vfprintf+0x224>
 9c4:	f8 01       	movw	r30, r16
 9c6:	27 ff       	sbrs	r18, 7
 9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <vfprintf+0x1ec>
 9ca:	60 81       	ld	r22, Z
 9cc:	71 81       	ldd	r23, Z+1	; 0x01
 9ce:	82 81       	ldd	r24, Z+2	; 0x02
 9d0:	93 81       	ldd	r25, Z+3	; 0x03
 9d2:	0c 5f       	subi	r16, 0xFC	; 252
 9d4:	1f 4f       	sbci	r17, 0xFF	; 255
 9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <vfprintf+0x1fc>
 9d8:	60 81       	ld	r22, Z
 9da:	71 81       	ldd	r23, Z+1	; 0x01
 9dc:	88 27       	eor	r24, r24
 9de:	77 fd       	sbrc	r23, 7
 9e0:	80 95       	com	r24
 9e2:	98 2f       	mov	r25, r24
 9e4:	0e 5f       	subi	r16, 0xFE	; 254
 9e6:	1f 4f       	sbci	r17, 0xFF	; 255
 9e8:	2f 76       	andi	r18, 0x6F	; 111
 9ea:	b2 2e       	mov	r11, r18
 9ec:	97 ff       	sbrs	r25, 7
 9ee:	09 c0       	rjmp	.+18     	; 0xa02 <vfprintf+0x216>
 9f0:	90 95       	com	r25
 9f2:	80 95       	com	r24
 9f4:	70 95       	com	r23
 9f6:	61 95       	neg	r22
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	20 68       	ori	r18, 0x80	; 128
 a00:	b2 2e       	mov	r11, r18
 a02:	2a e0       	ldi	r18, 0x0A	; 10
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	a4 01       	movw	r20, r8
 a08:	48 d1       	rcall	.+656    	; 0xc9a <__ultoa_invert>
 a0a:	a8 2e       	mov	r10, r24
 a0c:	a8 18       	sub	r10, r8
 a0e:	43 c0       	rjmp	.+134    	; 0xa96 <vfprintf+0x2aa>
 a10:	85 37       	cpi	r24, 0x75	; 117
 a12:	29 f4       	brne	.+10     	; 0xa1e <vfprintf+0x232>
 a14:	2f 7e       	andi	r18, 0xEF	; 239
 a16:	b2 2e       	mov	r11, r18
 a18:	2a e0       	ldi	r18, 0x0A	; 10
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	25 c0       	rjmp	.+74     	; 0xa68 <vfprintf+0x27c>
 a1e:	f2 2f       	mov	r31, r18
 a20:	f9 7f       	andi	r31, 0xF9	; 249
 a22:	bf 2e       	mov	r11, r31
 a24:	8f 36       	cpi	r24, 0x6F	; 111
 a26:	c1 f0       	breq	.+48     	; 0xa58 <vfprintf+0x26c>
 a28:	18 f4       	brcc	.+6      	; 0xa30 <vfprintf+0x244>
 a2a:	88 35       	cpi	r24, 0x58	; 88
 a2c:	79 f0       	breq	.+30     	; 0xa4c <vfprintf+0x260>
 a2e:	ad c0       	rjmp	.+346    	; 0xb8a <vfprintf+0x39e>
 a30:	80 37       	cpi	r24, 0x70	; 112
 a32:	19 f0       	breq	.+6      	; 0xa3a <vfprintf+0x24e>
 a34:	88 37       	cpi	r24, 0x78	; 120
 a36:	21 f0       	breq	.+8      	; 0xa40 <vfprintf+0x254>
 a38:	a8 c0       	rjmp	.+336    	; 0xb8a <vfprintf+0x39e>
 a3a:	2f 2f       	mov	r18, r31
 a3c:	20 61       	ori	r18, 0x10	; 16
 a3e:	b2 2e       	mov	r11, r18
 a40:	b4 fe       	sbrs	r11, 4
 a42:	0d c0       	rjmp	.+26     	; 0xa5e <vfprintf+0x272>
 a44:	8b 2d       	mov	r24, r11
 a46:	84 60       	ori	r24, 0x04	; 4
 a48:	b8 2e       	mov	r11, r24
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <vfprintf+0x272>
 a4c:	24 ff       	sbrs	r18, 4
 a4e:	0a c0       	rjmp	.+20     	; 0xa64 <vfprintf+0x278>
 a50:	9f 2f       	mov	r25, r31
 a52:	96 60       	ori	r25, 0x06	; 6
 a54:	b9 2e       	mov	r11, r25
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <vfprintf+0x278>
 a58:	28 e0       	ldi	r18, 0x08	; 8
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	05 c0       	rjmp	.+10     	; 0xa68 <vfprintf+0x27c>
 a5e:	20 e1       	ldi	r18, 0x10	; 16
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <vfprintf+0x27c>
 a64:	20 e1       	ldi	r18, 0x10	; 16
 a66:	32 e0       	ldi	r19, 0x02	; 2
 a68:	f8 01       	movw	r30, r16
 a6a:	b7 fe       	sbrs	r11, 7
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <vfprintf+0x290>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	82 81       	ldd	r24, Z+2	; 0x02
 a74:	93 81       	ldd	r25, Z+3	; 0x03
 a76:	0c 5f       	subi	r16, 0xFC	; 252
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <vfprintf+0x29c>
 a7c:	60 81       	ld	r22, Z
 a7e:	71 81       	ldd	r23, Z+1	; 0x01
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 5f       	subi	r16, 0xFE	; 254
 a86:	1f 4f       	sbci	r17, 0xFF	; 255
 a88:	a4 01       	movw	r20, r8
 a8a:	07 d1       	rcall	.+526    	; 0xc9a <__ultoa_invert>
 a8c:	a8 2e       	mov	r10, r24
 a8e:	a8 18       	sub	r10, r8
 a90:	fb 2d       	mov	r31, r11
 a92:	ff 77       	andi	r31, 0x7F	; 127
 a94:	bf 2e       	mov	r11, r31
 a96:	b6 fe       	sbrs	r11, 6
 a98:	0b c0       	rjmp	.+22     	; 0xab0 <vfprintf+0x2c4>
 a9a:	2b 2d       	mov	r18, r11
 a9c:	2e 7f       	andi	r18, 0xFE	; 254
 a9e:	a5 14       	cp	r10, r5
 aa0:	50 f4       	brcc	.+20     	; 0xab6 <vfprintf+0x2ca>
 aa2:	b4 fe       	sbrs	r11, 4
 aa4:	0a c0       	rjmp	.+20     	; 0xaba <vfprintf+0x2ce>
 aa6:	b2 fc       	sbrc	r11, 2
 aa8:	08 c0       	rjmp	.+16     	; 0xaba <vfprintf+0x2ce>
 aaa:	2b 2d       	mov	r18, r11
 aac:	2e 7e       	andi	r18, 0xEE	; 238
 aae:	05 c0       	rjmp	.+10     	; 0xaba <vfprintf+0x2ce>
 ab0:	7a 2c       	mov	r7, r10
 ab2:	2b 2d       	mov	r18, r11
 ab4:	03 c0       	rjmp	.+6      	; 0xabc <vfprintf+0x2d0>
 ab6:	7a 2c       	mov	r7, r10
 ab8:	01 c0       	rjmp	.+2      	; 0xabc <vfprintf+0x2d0>
 aba:	75 2c       	mov	r7, r5
 abc:	24 ff       	sbrs	r18, 4
 abe:	0d c0       	rjmp	.+26     	; 0xada <vfprintf+0x2ee>
 ac0:	fe 01       	movw	r30, r28
 ac2:	ea 0d       	add	r30, r10
 ac4:	f1 1d       	adc	r31, r1
 ac6:	80 81       	ld	r24, Z
 ac8:	80 33       	cpi	r24, 0x30	; 48
 aca:	11 f4       	brne	.+4      	; 0xad0 <vfprintf+0x2e4>
 acc:	29 7e       	andi	r18, 0xE9	; 233
 ace:	09 c0       	rjmp	.+18     	; 0xae2 <vfprintf+0x2f6>
 ad0:	22 ff       	sbrs	r18, 2
 ad2:	06 c0       	rjmp	.+12     	; 0xae0 <vfprintf+0x2f4>
 ad4:	73 94       	inc	r7
 ad6:	73 94       	inc	r7
 ad8:	04 c0       	rjmp	.+8      	; 0xae2 <vfprintf+0x2f6>
 ada:	82 2f       	mov	r24, r18
 adc:	86 78       	andi	r24, 0x86	; 134
 ade:	09 f0       	breq	.+2      	; 0xae2 <vfprintf+0x2f6>
 ae0:	73 94       	inc	r7
 ae2:	23 fd       	sbrc	r18, 3
 ae4:	12 c0       	rjmp	.+36     	; 0xb0a <vfprintf+0x31e>
 ae6:	20 ff       	sbrs	r18, 0
 ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <vfprintf+0x30a>
 aea:	5a 2c       	mov	r5, r10
 aec:	73 14       	cp	r7, r3
 aee:	18 f4       	brcc	.+6      	; 0xaf6 <vfprintf+0x30a>
 af0:	53 0c       	add	r5, r3
 af2:	57 18       	sub	r5, r7
 af4:	73 2c       	mov	r7, r3
 af6:	73 14       	cp	r7, r3
 af8:	60 f4       	brcc	.+24     	; 0xb12 <vfprintf+0x326>
 afa:	b7 01       	movw	r22, r14
 afc:	80 e2       	ldi	r24, 0x20	; 32
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	2c 87       	std	Y+12, r18	; 0x0c
 b02:	99 d0       	rcall	.+306    	; 0xc36 <fputc>
 b04:	73 94       	inc	r7
 b06:	2c 85       	ldd	r18, Y+12	; 0x0c
 b08:	f6 cf       	rjmp	.-20     	; 0xaf6 <vfprintf+0x30a>
 b0a:	73 14       	cp	r7, r3
 b0c:	10 f4       	brcc	.+4      	; 0xb12 <vfprintf+0x326>
 b0e:	37 18       	sub	r3, r7
 b10:	01 c0       	rjmp	.+2      	; 0xb14 <vfprintf+0x328>
 b12:	31 2c       	mov	r3, r1
 b14:	24 ff       	sbrs	r18, 4
 b16:	11 c0       	rjmp	.+34     	; 0xb3a <vfprintf+0x34e>
 b18:	b7 01       	movw	r22, r14
 b1a:	80 e3       	ldi	r24, 0x30	; 48
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	2c 87       	std	Y+12, r18	; 0x0c
 b20:	8a d0       	rcall	.+276    	; 0xc36 <fputc>
 b22:	2c 85       	ldd	r18, Y+12	; 0x0c
 b24:	22 ff       	sbrs	r18, 2
 b26:	16 c0       	rjmp	.+44     	; 0xb54 <vfprintf+0x368>
 b28:	21 ff       	sbrs	r18, 1
 b2a:	03 c0       	rjmp	.+6      	; 0xb32 <vfprintf+0x346>
 b2c:	88 e5       	ldi	r24, 0x58	; 88
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <vfprintf+0x34a>
 b32:	88 e7       	ldi	r24, 0x78	; 120
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	b7 01       	movw	r22, r14
 b38:	0c c0       	rjmp	.+24     	; 0xb52 <vfprintf+0x366>
 b3a:	82 2f       	mov	r24, r18
 b3c:	86 78       	andi	r24, 0x86	; 134
 b3e:	51 f0       	breq	.+20     	; 0xb54 <vfprintf+0x368>
 b40:	21 fd       	sbrc	r18, 1
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <vfprintf+0x35c>
 b44:	80 e2       	ldi	r24, 0x20	; 32
 b46:	01 c0       	rjmp	.+2      	; 0xb4a <vfprintf+0x35e>
 b48:	8b e2       	ldi	r24, 0x2B	; 43
 b4a:	27 fd       	sbrc	r18, 7
 b4c:	8d e2       	ldi	r24, 0x2D	; 45
 b4e:	b7 01       	movw	r22, r14
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	71 d0       	rcall	.+226    	; 0xc36 <fputc>
 b54:	a5 14       	cp	r10, r5
 b56:	30 f4       	brcc	.+12     	; 0xb64 <vfprintf+0x378>
 b58:	b7 01       	movw	r22, r14
 b5a:	80 e3       	ldi	r24, 0x30	; 48
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	6b d0       	rcall	.+214    	; 0xc36 <fputc>
 b60:	5a 94       	dec	r5
 b62:	f8 cf       	rjmp	.-16     	; 0xb54 <vfprintf+0x368>
 b64:	aa 94       	dec	r10
 b66:	f4 01       	movw	r30, r8
 b68:	ea 0d       	add	r30, r10
 b6a:	f1 1d       	adc	r31, r1
 b6c:	80 81       	ld	r24, Z
 b6e:	b7 01       	movw	r22, r14
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	61 d0       	rcall	.+194    	; 0xc36 <fputc>
 b74:	a1 10       	cpse	r10, r1
 b76:	f6 cf       	rjmp	.-20     	; 0xb64 <vfprintf+0x378>
 b78:	33 20       	and	r3, r3
 b7a:	09 f4       	brne	.+2      	; 0xb7e <vfprintf+0x392>
 b7c:	5d ce       	rjmp	.-838    	; 0x838 <vfprintf+0x4c>
 b7e:	b7 01       	movw	r22, r14
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	58 d0       	rcall	.+176    	; 0xc36 <fputc>
 b86:	3a 94       	dec	r3
 b88:	f7 cf       	rjmp	.-18     	; 0xb78 <vfprintf+0x38c>
 b8a:	f7 01       	movw	r30, r14
 b8c:	86 81       	ldd	r24, Z+6	; 0x06
 b8e:	97 81       	ldd	r25, Z+7	; 0x07
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <vfprintf+0x3aa>
 b92:	8f ef       	ldi	r24, 0xFF	; 255
 b94:	9f ef       	ldi	r25, 0xFF	; 255
 b96:	2c 96       	adiw	r28, 0x0c	; 12
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	f8 94       	cli
 b9c:	de bf       	out	0x3e, r29	; 62
 b9e:	0f be       	out	0x3f, r0	; 63
 ba0:	cd bf       	out	0x3d, r28	; 61
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	1f 91       	pop	r17
 ba8:	0f 91       	pop	r16
 baa:	ff 90       	pop	r15
 bac:	ef 90       	pop	r14
 bae:	df 90       	pop	r13
 bb0:	cf 90       	pop	r12
 bb2:	bf 90       	pop	r11
 bb4:	af 90       	pop	r10
 bb6:	9f 90       	pop	r9
 bb8:	8f 90       	pop	r8
 bba:	7f 90       	pop	r7
 bbc:	6f 90       	pop	r6
 bbe:	5f 90       	pop	r5
 bc0:	4f 90       	pop	r4
 bc2:	3f 90       	pop	r3
 bc4:	2f 90       	pop	r2
 bc6:	08 95       	ret

00000bc8 <calloc>:
 bc8:	0f 93       	push	r16
 bca:	1f 93       	push	r17
 bcc:	cf 93       	push	r28
 bce:	df 93       	push	r29
 bd0:	86 9f       	mul	r24, r22
 bd2:	80 01       	movw	r16, r0
 bd4:	87 9f       	mul	r24, r23
 bd6:	10 0d       	add	r17, r0
 bd8:	96 9f       	mul	r25, r22
 bda:	10 0d       	add	r17, r0
 bdc:	11 24       	eor	r1, r1
 bde:	c8 01       	movw	r24, r16
 be0:	83 dc       	rcall	.-1786   	; 0x4e8 <malloc>
 be2:	ec 01       	movw	r28, r24
 be4:	00 97       	sbiw	r24, 0x00	; 0
 be6:	21 f0       	breq	.+8      	; 0xbf0 <calloc+0x28>
 be8:	a8 01       	movw	r20, r16
 bea:	60 e0       	ldi	r22, 0x00	; 0
 bec:	70 e0       	ldi	r23, 0x00	; 0
 bee:	11 d0       	rcall	.+34     	; 0xc12 <memset>
 bf0:	ce 01       	movw	r24, r28
 bf2:	df 91       	pop	r29
 bf4:	cf 91       	pop	r28
 bf6:	1f 91       	pop	r17
 bf8:	0f 91       	pop	r16
 bfa:	08 95       	ret

00000bfc <strnlen_P>:
 bfc:	fc 01       	movw	r30, r24
 bfe:	05 90       	lpm	r0, Z+
 c00:	61 50       	subi	r22, 0x01	; 1
 c02:	70 40       	sbci	r23, 0x00	; 0
 c04:	01 10       	cpse	r0, r1
 c06:	d8 f7       	brcc	.-10     	; 0xbfe <strnlen_P+0x2>
 c08:	80 95       	com	r24
 c0a:	90 95       	com	r25
 c0c:	8e 0f       	add	r24, r30
 c0e:	9f 1f       	adc	r25, r31
 c10:	08 95       	ret

00000c12 <memset>:
 c12:	dc 01       	movw	r26, r24
 c14:	01 c0       	rjmp	.+2      	; 0xc18 <memset+0x6>
 c16:	6d 93       	st	X+, r22
 c18:	41 50       	subi	r20, 0x01	; 1
 c1a:	50 40       	sbci	r21, 0x00	; 0
 c1c:	e0 f7       	brcc	.-8      	; 0xc16 <memset+0x4>
 c1e:	08 95       	ret

00000c20 <strnlen>:
 c20:	fc 01       	movw	r30, r24
 c22:	61 50       	subi	r22, 0x01	; 1
 c24:	70 40       	sbci	r23, 0x00	; 0
 c26:	01 90       	ld	r0, Z+
 c28:	01 10       	cpse	r0, r1
 c2a:	d8 f7       	brcc	.-10     	; 0xc22 <strnlen+0x2>
 c2c:	80 95       	com	r24
 c2e:	90 95       	com	r25
 c30:	8e 0f       	add	r24, r30
 c32:	9f 1f       	adc	r25, r31
 c34:	08 95       	ret

00000c36 <fputc>:
 c36:	0f 93       	push	r16
 c38:	1f 93       	push	r17
 c3a:	cf 93       	push	r28
 c3c:	df 93       	push	r29
 c3e:	18 2f       	mov	r17, r24
 c40:	09 2f       	mov	r16, r25
 c42:	eb 01       	movw	r28, r22
 c44:	8b 81       	ldd	r24, Y+3	; 0x03
 c46:	81 fd       	sbrc	r24, 1
 c48:	03 c0       	rjmp	.+6      	; 0xc50 <fputc+0x1a>
 c4a:	8f ef       	ldi	r24, 0xFF	; 255
 c4c:	9f ef       	ldi	r25, 0xFF	; 255
 c4e:	20 c0       	rjmp	.+64     	; 0xc90 <fputc+0x5a>
 c50:	82 ff       	sbrs	r24, 2
 c52:	10 c0       	rjmp	.+32     	; 0xc74 <fputc+0x3e>
 c54:	4e 81       	ldd	r20, Y+6	; 0x06
 c56:	5f 81       	ldd	r21, Y+7	; 0x07
 c58:	2c 81       	ldd	r18, Y+4	; 0x04
 c5a:	3d 81       	ldd	r19, Y+5	; 0x05
 c5c:	42 17       	cp	r20, r18
 c5e:	53 07       	cpc	r21, r19
 c60:	7c f4       	brge	.+30     	; 0xc80 <fputc+0x4a>
 c62:	e8 81       	ld	r30, Y
 c64:	f9 81       	ldd	r31, Y+1	; 0x01
 c66:	9f 01       	movw	r18, r30
 c68:	2f 5f       	subi	r18, 0xFF	; 255
 c6a:	3f 4f       	sbci	r19, 0xFF	; 255
 c6c:	39 83       	std	Y+1, r19	; 0x01
 c6e:	28 83       	st	Y, r18
 c70:	10 83       	st	Z, r17
 c72:	06 c0       	rjmp	.+12     	; 0xc80 <fputc+0x4a>
 c74:	e8 85       	ldd	r30, Y+8	; 0x08
 c76:	f9 85       	ldd	r31, Y+9	; 0x09
 c78:	81 2f       	mov	r24, r17
 c7a:	19 95       	eicall
 c7c:	89 2b       	or	r24, r25
 c7e:	29 f7       	brne	.-54     	; 0xc4a <fputc+0x14>
 c80:	2e 81       	ldd	r18, Y+6	; 0x06
 c82:	3f 81       	ldd	r19, Y+7	; 0x07
 c84:	2f 5f       	subi	r18, 0xFF	; 255
 c86:	3f 4f       	sbci	r19, 0xFF	; 255
 c88:	3f 83       	std	Y+7, r19	; 0x07
 c8a:	2e 83       	std	Y+6, r18	; 0x06
 c8c:	81 2f       	mov	r24, r17
 c8e:	90 2f       	mov	r25, r16
 c90:	df 91       	pop	r29
 c92:	cf 91       	pop	r28
 c94:	1f 91       	pop	r17
 c96:	0f 91       	pop	r16
 c98:	08 95       	ret

00000c9a <__ultoa_invert>:
 c9a:	fa 01       	movw	r30, r20
 c9c:	aa 27       	eor	r26, r26
 c9e:	28 30       	cpi	r18, 0x08	; 8
 ca0:	51 f1       	breq	.+84     	; 0xcf6 <__ultoa_invert+0x5c>
 ca2:	20 31       	cpi	r18, 0x10	; 16
 ca4:	81 f1       	breq	.+96     	; 0xd06 <__ultoa_invert+0x6c>
 ca6:	e8 94       	clt
 ca8:	6f 93       	push	r22
 caa:	6e 7f       	andi	r22, 0xFE	; 254
 cac:	6e 5f       	subi	r22, 0xFE	; 254
 cae:	7f 4f       	sbci	r23, 0xFF	; 255
 cb0:	8f 4f       	sbci	r24, 0xFF	; 255
 cb2:	9f 4f       	sbci	r25, 0xFF	; 255
 cb4:	af 4f       	sbci	r26, 0xFF	; 255
 cb6:	b1 e0       	ldi	r27, 0x01	; 1
 cb8:	3e d0       	rcall	.+124    	; 0xd36 <__ultoa_invert+0x9c>
 cba:	b4 e0       	ldi	r27, 0x04	; 4
 cbc:	3c d0       	rcall	.+120    	; 0xd36 <__ultoa_invert+0x9c>
 cbe:	67 0f       	add	r22, r23
 cc0:	78 1f       	adc	r23, r24
 cc2:	89 1f       	adc	r24, r25
 cc4:	9a 1f       	adc	r25, r26
 cc6:	a1 1d       	adc	r26, r1
 cc8:	68 0f       	add	r22, r24
 cca:	79 1f       	adc	r23, r25
 ccc:	8a 1f       	adc	r24, r26
 cce:	91 1d       	adc	r25, r1
 cd0:	a1 1d       	adc	r26, r1
 cd2:	6a 0f       	add	r22, r26
 cd4:	71 1d       	adc	r23, r1
 cd6:	81 1d       	adc	r24, r1
 cd8:	91 1d       	adc	r25, r1
 cda:	a1 1d       	adc	r26, r1
 cdc:	20 d0       	rcall	.+64     	; 0xd1e <__ultoa_invert+0x84>
 cde:	09 f4       	brne	.+2      	; 0xce2 <__ultoa_invert+0x48>
 ce0:	68 94       	set
 ce2:	3f 91       	pop	r19
 ce4:	2a e0       	ldi	r18, 0x0A	; 10
 ce6:	26 9f       	mul	r18, r22
 ce8:	11 24       	eor	r1, r1
 cea:	30 19       	sub	r19, r0
 cec:	30 5d       	subi	r19, 0xD0	; 208
 cee:	31 93       	st	Z+, r19
 cf0:	de f6       	brtc	.-74     	; 0xca8 <__ultoa_invert+0xe>
 cf2:	cf 01       	movw	r24, r30
 cf4:	08 95       	ret
 cf6:	46 2f       	mov	r20, r22
 cf8:	47 70       	andi	r20, 0x07	; 7
 cfa:	40 5d       	subi	r20, 0xD0	; 208
 cfc:	41 93       	st	Z+, r20
 cfe:	b3 e0       	ldi	r27, 0x03	; 3
 d00:	0f d0       	rcall	.+30     	; 0xd20 <__ultoa_invert+0x86>
 d02:	c9 f7       	brne	.-14     	; 0xcf6 <__ultoa_invert+0x5c>
 d04:	f6 cf       	rjmp	.-20     	; 0xcf2 <__ultoa_invert+0x58>
 d06:	46 2f       	mov	r20, r22
 d08:	4f 70       	andi	r20, 0x0F	; 15
 d0a:	40 5d       	subi	r20, 0xD0	; 208
 d0c:	4a 33       	cpi	r20, 0x3A	; 58
 d0e:	18 f0       	brcs	.+6      	; 0xd16 <__ultoa_invert+0x7c>
 d10:	49 5d       	subi	r20, 0xD9	; 217
 d12:	31 fd       	sbrc	r19, 1
 d14:	40 52       	subi	r20, 0x20	; 32
 d16:	41 93       	st	Z+, r20
 d18:	02 d0       	rcall	.+4      	; 0xd1e <__ultoa_invert+0x84>
 d1a:	a9 f7       	brne	.-22     	; 0xd06 <__ultoa_invert+0x6c>
 d1c:	ea cf       	rjmp	.-44     	; 0xcf2 <__ultoa_invert+0x58>
 d1e:	b4 e0       	ldi	r27, 0x04	; 4
 d20:	a6 95       	lsr	r26
 d22:	97 95       	ror	r25
 d24:	87 95       	ror	r24
 d26:	77 95       	ror	r23
 d28:	67 95       	ror	r22
 d2a:	ba 95       	dec	r27
 d2c:	c9 f7       	brne	.-14     	; 0xd20 <__ultoa_invert+0x86>
 d2e:	00 97       	sbiw	r24, 0x00	; 0
 d30:	61 05       	cpc	r22, r1
 d32:	71 05       	cpc	r23, r1
 d34:	08 95       	ret
 d36:	9b 01       	movw	r18, r22
 d38:	ac 01       	movw	r20, r24
 d3a:	0a 2e       	mov	r0, r26
 d3c:	06 94       	lsr	r0
 d3e:	57 95       	ror	r21
 d40:	47 95       	ror	r20
 d42:	37 95       	ror	r19
 d44:	27 95       	ror	r18
 d46:	ba 95       	dec	r27
 d48:	c9 f7       	brne	.-14     	; 0xd3c <__ultoa_invert+0xa2>
 d4a:	62 0f       	add	r22, r18
 d4c:	73 1f       	adc	r23, r19
 d4e:	84 1f       	adc	r24, r20
 d50:	95 1f       	adc	r25, r21
 d52:	a0 1d       	adc	r26, r0
 d54:	08 95       	ret

00000d56 <_exit>:
 d56:	f8 94       	cli

00000d58 <__stop_program>:
 d58:	ff cf       	rjmp	.-2      	; 0xd58 <__stop_program>
