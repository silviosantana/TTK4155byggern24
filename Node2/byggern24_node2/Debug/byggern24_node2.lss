
byggern24_node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800200  00000cea  00000d7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002b0  008002b0  00000e2e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001297  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000877  00000000  00000000  00002291  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bfd  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000364  00000000  00000000  00003708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000504  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a9e  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00004a0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	34 c1       	rjmp	.+616    	; 0x26e <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ee       	ldi	r30, 0xEA	; 234
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3b       	cpi	r26, 0xB0	; 176
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 eb       	ldi	r26, 0xB0	; 176
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3b       	cpi	r26, 0xBA	; 186
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	1b d1       	rcall	.+566    	; 0x356 <main>
 120:	e2 c5       	rjmp	.+3012   	; 0xce6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_controller_reset>:
	status = spi_read();

	PORTB |= ~(1<<CAN_CS);

	return status;
}
 124:	2f 98       	cbi	0x05, 7	; 5
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	33 d1       	rcall	.+614    	; 0x390 <spi_send>
 12a:	2f 9a       	sbi	0x05, 7	; 5
 12c:	8f e3       	ldi	r24, 0x3F	; 63
 12e:	9c e9       	ldi	r25, 0x9C	; 156
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <can_controller_reset+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <can_controller_reset+0x12>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <can_controller_read>:
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
 13e:	2f 98       	cbi	0x05, 7	; 5
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	26 d1       	rcall	.+588    	; 0x390 <spi_send>
 144:	8c 2f       	mov	r24, r28
 146:	24 d1       	rcall	.+584    	; 0x390 <spi_send>
 148:	25 d1       	rcall	.+586    	; 0x394 <spi_read>
 14a:	2f 9a       	sbi	0x05, 7	; 5
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <can_controller_bit_modify>:
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	18 2f       	mov	r17, r24
 158:	d6 2f       	mov	r29, r22
 15a:	c4 2f       	mov	r28, r20
 15c:	2f 98       	cbi	0x05, 7	; 5
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	17 d1       	rcall	.+558    	; 0x390 <spi_send>
 162:	81 2f       	mov	r24, r17
 164:	15 d1       	rcall	.+554    	; 0x390 <spi_send>
 166:	8d 2f       	mov	r24, r29
 168:	13 d1       	rcall	.+550    	; 0x390 <spi_send>
 16a:	8c 2f       	mov	r24, r28
 16c:	11 d1       	rcall	.+546    	; 0x390 <spi_send>
 16e:	2f 9a       	sbi	0x05, 7	; 5
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	08 95       	ret

00000178 <can_controller_set_mode>:
 178:	48 2f       	mov	r20, r24
 17a:	60 ee       	ldi	r22, 0xE0	; 224
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	e8 df       	rcall	.-48     	; 0x150 <can_controller_bit_modify>
 180:	8e e0       	ldi	r24, 0x0E	; 14
 182:	db df       	rcall	.-74     	; 0x13a <can_controller_read>
 184:	80 7e       	andi	r24, 0xE0	; 224
 186:	08 95       	ret

00000188 <can_controller_write>:

void can_controller_write(uint8_t address, uint8_t data)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	d8 2f       	mov	r29, r24
 18e:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
 190:	2f 98       	cbi	0x05, 7	; 5
	
	spi_send(MCP_WRITE);
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	fd d0       	rcall	.+506    	; 0x390 <spi_send>
	spi_send(address);
 196:	8d 2f       	mov	r24, r29
 198:	fb d0       	rcall	.+502    	; 0x390 <spi_send>
	spi_send(data);
 19a:	8c 2f       	mov	r24, r28
 19c:	f9 d0       	rcall	.+498    	; 0x390 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
 19e:	2f 9a       	sbi	0x05, 7	; 5
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <can_controller_init>:
uint8_t can_controller_init()
{
	uint8_t value;

	//spi_init(); // Initialize SPI
	can_controller_reset(); // Send reset-command
 1a6:	be df       	rcall	.-132    	; 0x124 <can_controller_reset>
	

	// Self-test
	value = can_controller_read(MCP_CANSTAT);
 1a8:	8e e0       	ldi	r24, 0x0E	; 14
 1aa:	c7 df       	rcall	.-114    	; 0x13a <can_controller_read>
	if ((value & MODE_MASK)  != MODE_CONFIG)
 1ac:	98 2f       	mov	r25, r24
 1ae:	90 7e       	andi	r25, 0xE0	; 224
 1b0:	90 38       	cpi	r25, 0x80	; 128
 1b2:	69 f0       	breq	.+26     	; 0x1ce <can_controller_init+0x28>
	{
		printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
 1b4:	1f 92       	push	r1
 1b6:	8f 93       	push	r24
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	9f 93       	push	r25
 1be:	8f 93       	push	r24
 1c0:	cc d2       	rcall	.+1432   	; 0x75a <printf>
		return 1;
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret
	}
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000001);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	6f ef       	ldi	r22, 0xFF	; 255
 1d2:	8b e2       	ldi	r24, 0x2B	; 43
 1d4:	bd df       	rcall	.-134    	; 0x150 <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100100, 0b01100100);
 1d6:	44 e6       	ldi	r20, 0x64	; 100
 1d8:	64 e6       	ldi	r22, 0x64	; 100
 1da:	80 e6       	ldi	r24, 0x60	; 96
 1dc:	b9 df       	rcall	.-142    	; 0x150 <can_controller_bit_modify>
	//printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
 1de:	40 e6       	ldi	r20, 0x60	; 96
 1e0:	60 e6       	ldi	r22, 0x60	; 96
 1e2:	80 e7       	ldi	r24, 0x70	; 112
 1e4:	b5 df       	rcall	.-150    	; 0x150 <can_controller_bit_modify>
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

	
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	82 e3       	ldi	r24, 0x32	; 50
 1ea:	ce df       	rcall	.-100    	; 0x188 <can_controller_write>
	return 0;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
}
 1ee:	08 95       	ret

000001f0 <can_init>:
	// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE));
	// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF));
	// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
	// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	c2 df       	rcall	.-124    	; 0x178 <can_controller_set_mode>
 1f4:	88 23       	and	r24, r24
 1f6:	39 f0       	breq	.+14     	; 0x206 <can_init+0x16>
 1f8:	83 e5       	ldi	r24, 0x53	; 83
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	9f 93       	push	r25
 1fe:	8f 93       	push	r24
 200:	ac d2       	rcall	.+1368   	; 0x75a <printf>
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	f8 94       	cli
 208:	e9 e6       	ldi	r30, 0x69	; 105
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	8e 7f       	andi	r24, 0xFE	; 254
 210:	80 83       	st	Z, r24
 212:	80 81       	ld	r24, Z
 214:	82 60       	ori	r24, 0x02	; 2
 216:	80 83       	st	Z, r24
 218:	e8 9a       	sbi	0x1d, 0	; 29
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8c e2       	ldi	r24, 0x2C	; 44
 21e:	b4 df       	rcall	.-152    	; 0x188 <can_controller_write>
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	8d e2       	ldi	r24, 0x2D	; 45
 224:	b1 df       	rcall	.-158    	; 0x188 <can_controller_write>
 226:	78 94       	sei
 228:	08 95       	ret

0000022a <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	eb 01       	movw	r28, r22

	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
 234:	18 2f       	mov	r17, r24
 236:	12 95       	swap	r17
 238:	10 7f       	andi	r17, 0xF0	; 240
 23a:	81 e6       	ldi	r24, 0x61	; 97
 23c:	81 0f       	add	r24, r17
 23e:	7d df       	rcall	.-262    	; 0x13a <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
 240:	85 e6       	ldi	r24, 0x65	; 101
 242:	81 0f       	add	r24, r17
 244:	7a df       	rcall	.-268    	; 0x13a <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
 246:	98 2f       	mov	r25, r24
 248:	9f 70       	andi	r25, 0x0F	; 15
 24a:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 24c:	88 23       	and	r24, r24
 24e:	51 f0       	breq	.+20     	; 0x264 <can_recieve_msg+0x3a>
 250:	1a 59       	subi	r17, 0x9A	; 154
 252:	22 96       	adiw	r28, 0x02	; 2
 254:	08 2f       	mov	r16, r24
 256:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
 258:	81 2f       	mov	r24, r17
 25a:	6f df       	rcall	.-290    	; 0x13a <can_controller_read>
 25c:	89 93       	st	Y+, r24
 25e:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
 260:	10 13       	cpse	r17, r16
 262:	fa cf       	rjmp	.-12     	; 0x258 <can_recieve_msg+0x2e>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}
	//can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
// 	can_controller_write(MCP_CANINTF, 0x00);
// 	can_controller_write(MCP_EFLG, 0x00);
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <__vector_1>:
#include "usart_driver.h"
#include "timer_driver.h"


ISR(INT0_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	0b b6       	in	r0, 0x3b	; 59
 27a:	0f 92       	push	r0
 27c:	ff 92       	push	r15
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
	cli();
 29e:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	e9 d0       	rcall	.+466    	; 0x478 <malloc>
 2a6:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	//printf("message INTERRUPTION recieved\n\r");
	//print(my_buf);
	uint8_t canInt = can_controller_read(MCP_CANINTF);
 2a8:	8c e2       	ldi	r24, 0x2C	; 44
 2aa:	47 df       	rcall	.-370    	; 0x13a <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
 2ac:	80 ff       	sbrs	r24, 0
 2ae:	32 c0       	rjmp	.+100    	; 0x314 <__vector_1+0xa6>
	{
		can_recieve_msg(0, msg);
 2b0:	be 01       	movw	r22, r28
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	ba df       	rcall	.-140    	; 0x22a <can_recieve_msg>
		
		//printf("X:\tY:\tLeft:\tRight:\tDirection:\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	88 23       	and	r24, r24
 2ba:	c1 f0       	breq	.+48     	; 0x2ec <__vector_1+0x7e>
 2bc:	f1 2c       	mov	r15, r1
			printf("%d \t", (int8_t) msg->data[byte]);
 2be:	0c e7       	ldi	r16, 0x7C	; 124
 2c0:	12 e0       	ldi	r17, 0x02	; 2
 2c2:	fe 01       	movw	r30, r28
 2c4:	ef 0d       	add	r30, r15
 2c6:	f1 1d       	adc	r31, r1
 2c8:	22 81       	ldd	r18, Z+2	; 0x02
 2ca:	82 2f       	mov	r24, r18
 2cc:	99 27       	eor	r25, r25
 2ce:	87 fd       	sbrc	r24, 7
 2d0:	90 95       	com	r25
 2d2:	9f 93       	push	r25
 2d4:	2f 93       	push	r18
 2d6:	1f 93       	push	r17
 2d8:	0f 93       	push	r16
 2da:	3f d2       	rcall	.+1150   	; 0x75a <printf>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
	{
		can_recieve_msg(0, msg);
		
		//printf("X:\tY:\tLeft:\tRight:\tDirection:\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 2dc:	f3 94       	inc	r15
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	f8 16       	cp	r15, r24
 2ea:	58 f3       	brcs	.-42     	; 0x2c2 <__vector_1+0x54>
			printf("%d \t", (int8_t) msg->data[byte]);
		}
		timer_driver_set_duty_cycle(msg->data[0]);
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	81 d0       	rcall	.+258    	; 0x3f4 <timer_driver_set_duty_cycle>
		printf("\n\r");
 2f2:	87 e9       	ldi	r24, 0x97	; 151
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	9f 93       	push	r25
 2f8:	8f 93       	push	r24
 2fa:	2f d2       	rcall	.+1118   	; 0x75a <printf>
		can_controller_write(MCP_CANINTF, 0x00);
		sei();
		return;
	}
	//printf("before:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	can_controller_write(MCP_CANINTF, 0x00);
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	8c e2       	ldi	r24, 0x2C	; 44
 300:	43 df       	rcall	.-378    	; 0x188 <can_controller_write>
	//can_controller_write(MCP_EFLG, 0x00);
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
 302:	ce 01       	movw	r24, r28
 304:	51 d1       	rcall	.+674    	; 0x5a8 <free>
	can_controller_write(MCP_CANINTF, 0x00);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	8c e2       	ldi	r24, 0x2C	; 44
 30a:	3e df       	rcall	.-388    	; 0x188 <can_controller_write>
	sei();
 30c:	78 94       	sei
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	09 c0       	rjmp	.+18     	; 0x326 <__vector_1+0xb8>
// 			printf("%d \n\r", msg->data[byte]);
// 		}
// 	}
	else
	{
		can_controller_write(MCP_CANINTF, 0x00);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	8c e2       	ldi	r24, 0x2C	; 44
 318:	37 df       	rcall	.-402    	; 0x188 <can_controller_write>
		//can_controller_write(MCP_EFLG, 0x00);
		free(msg);
 31a:	ce 01       	movw	r24, r28
 31c:	45 d1       	rcall	.+650    	; 0x5a8 <free>
		can_controller_write(MCP_CANINTF, 0x00);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	8c e2       	ldi	r24, 0x2C	; 44
 322:	32 df       	rcall	.-412    	; 0x188 <can_controller_write>
		sei();
 324:	78 94       	sei
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
	can_controller_write(MCP_CANINTF, 0x00);
	sei();
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	0f 90       	pop	r0
 34a:	0b be       	out	0x3b, r0	; 59
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <main>:
#include "can_driver.h"
#include "timer_driver.h";

int main(void)
{
	USART_Init(MYUBRR);
 356:	87 e6       	ldi	r24, 0x67	; 103
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	7e d0       	rcall	.+252    	; 0x458 <USART_Init>
	spi_init();
 35c:	17 d0       	rcall	.+46     	; 0x38c <spi_init>
	can_controller_init();
 35e:	23 df       	rcall	.-442    	; 0x1a6 <can_controller_init>
	can_init();
 360:	47 df       	rcall	.-370    	; 0x1f0 <can_init>
	
	printf("Hello from node 2!\n\r");
 362:	8a e9       	ldi	r24, 0x9A	; 154
 364:	92 e0       	ldi	r25, 0x02	; 2
 366:	9f 93       	push	r25
 368:	8f 93       	push	r24
 36a:	f7 d1       	rcall	.+1006   	; 0x75a <printf>

	//can_driver_test();
	timer_driver_init();
 36c:	17 d0       	rcall	.+46     	; 0x39c <timer_driver_init>
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	ff cf       	rjmp	.-2      	; 0x372 <main+0x1c>

00000374 <SPI_MasterInit>:
//TODO - define for register bit (reusable code)

void SPI_MasterInit(void)
{
	/* Set MOSI, SCK and SS output all others input */
	DDRB |= (1<<PB2)|(1<<PB1)|(1<<PB7)|(1<<PB0);
 374:	84 b1       	in	r24, 0x04	; 4
 376:	87 68       	ori	r24, 0x87	; 135
 378:	84 b9       	out	0x04, r24	; 4
	//Set MISO as input
	DDRB &= ~(1<<PB3);
 37a:	23 98       	cbi	0x04, 3	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 37c:	81 e5       	ldi	r24, 0x51	; 81
 37e:	8c bd       	out	0x2c, r24	; 44
 380:	08 95       	ret

00000382 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 382:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 384:	0d b4       	in	r0, 0x2d	; 45
 386:	07 fe       	sbrs	r0, 7
 388:	fd cf       	rjmp	.-6      	; 0x384 <SPI_MasterTransmit+0x2>
}
 38a:	08 95       	ret

0000038c <spi_init>:
// }


void spi_init()
{
	SPI_MasterInit();
 38c:	f3 cf       	rjmp	.-26     	; 0x374 <SPI_MasterInit>
 38e:	08 95       	ret

00000390 <spi_send>:
}

void spi_send(char data)
{
	SPI_MasterTransmit(data);
 390:	f8 cf       	rjmp	.-16     	; 0x382 <SPI_MasterTransmit>
 392:	08 95       	ret

00000394 <spi_read>:
	
}

char spi_read()
{
	SPI_MasterTransmit(0x00);
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	f5 df       	rcall	.-22     	; 0x382 <SPI_MasterTransmit>
	return SPDR;
 398:	8e b5       	in	r24, 0x2e	; 46
}
 39a:	08 95       	ret

0000039c <timer_driver_init>:
#include <avr/io.h>
#include "avr/interrupt.h"

void timer_driver_init()
{
	DDRB |= (1 << PB5);
 39c:	25 9a       	sbi	0x04, 5	; 4
	cli();
 39e:	f8 94       	cli
	//TOP = 16MHz/pre-scale/50Hz
	ICR1 = 39999;
 3a0:	8f e3       	ldi	r24, 0x3F	; 63
 3a2:	9c e9       	ldi	r25, 0x9C	; 156
 3a4:	90 93 87 00 	sts	0x0087, r25
 3a8:	80 93 86 00 	sts	0x0086, r24
	
	//duty_cycle
	OCR1A = 3999;
 3ac:	8f e9       	ldi	r24, 0x9F	; 159
 3ae:	9f e0       	ldi	r25, 0x0F	; 15
 3b0:	90 93 89 00 	sts	0x0089, r25
 3b4:	80 93 88 00 	sts	0x0088, r24
	
	//Set pre-scale to 8
	TCCR1B &= ~(1 << CS10);
 3b8:	a1 e8       	ldi	r26, 0x81	; 129
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	8c 91       	ld	r24, X
 3be:	8e 7f       	andi	r24, 0xFE	; 254
 3c0:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11);
 3c2:	8c 91       	ld	r24, X
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS12);
 3c8:	8c 91       	ld	r24, X
 3ca:	8b 7f       	andi	r24, 0xFB	; 251
 3cc:	8c 93       	st	X, r24
	
	//Set mode of operation to 14 (Fast PWM with ICRn)
	TCCR1A |= (1 << WGM11);
 3ce:	e0 e8       	ldi	r30, 0x80	; 128
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << WGM10);
 3d8:	80 81       	ld	r24, Z
 3da:	8e 7f       	andi	r24, 0xFE	; 254
 3dc:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 3de:	8c 91       	ld	r24, X
 3e0:	88 61       	ori	r24, 0x18	; 24
 3e2:	8c 93       	st	X, r24
	
	//Enable compare interruption on reg OCRnA
	TCCR1A |= (1 << COM1A1);
 3e4:	80 81       	ld	r24, Z
 3e6:	80 68       	ori	r24, 0x80	; 128
 3e8:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << COM1A0);
 3ea:	80 81       	ld	r24, Z
 3ec:	8f 7b       	andi	r24, 0xBF	; 191
 3ee:	80 83       	st	Z, r24

	sei();
 3f0:	78 94       	sei
 3f2:	08 95       	ret

000003f4 <timer_driver_set_duty_cycle>:
}

void timer_driver_set_duty_cycle(int8_t position)
{
	int duty_cycle = 10 * position + 2999;
 3f4:	99 27       	eor	r25, r25
 3f6:	87 fd       	sbrc	r24, 7
 3f8:	90 95       	com	r25
 3fa:	9c 01       	movw	r18, r24
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	82 0f       	add	r24, r18
 40e:	93 1f       	adc	r25, r19
 410:	89 54       	subi	r24, 0x49	; 73
 412:	94 4f       	sbci	r25, 0xF4	; 244
	
	if (duty_cycle < 1999)
 414:	8f 3c       	cpi	r24, 0xCF	; 207
 416:	27 e0       	ldi	r18, 0x07	; 7
 418:	92 07       	cpc	r25, r18
 41a:	3c f0       	brlt	.+14     	; 0x42a <timer_driver_set_duty_cycle+0x36>
 41c:	80 3a       	cpi	r24, 0xA0	; 160
 41e:	2f e0       	ldi	r18, 0x0F	; 15
 420:	92 07       	cpc	r25, r18
 422:	2c f0       	brlt	.+10     	; 0x42e <timer_driver_set_duty_cycle+0x3a>
 424:	8f e9       	ldi	r24, 0x9F	; 159
 426:	9f e0       	ldi	r25, 0x0F	; 15
 428:	02 c0       	rjmp	.+4      	; 0x42e <timer_driver_set_duty_cycle+0x3a>
		duty_cycle = 1999;
 42a:	8f ec       	ldi	r24, 0xCF	; 207
 42c:	97 e0       	ldi	r25, 0x07	; 7
	else if (duty_cycle > 3999)
		duty_cycle = 3999;
	
	OCR1A = (uint16_t) duty_cycle;
 42e:	90 93 89 00 	sts	0x0089, r25
 432:	80 93 88 00 	sts	0x0088, r24
 436:	08 95       	ret

00000438 <USART_Transmit>:
 438:	e0 ec       	ldi	r30, 0xC0	; 192
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	90 81       	ld	r25, Z
 43e:	95 ff       	sbrs	r25, 5
 440:	fd cf       	rjmp	.-6      	; 0x43c <USART_Transmit+0x4>
 442:	80 93 c6 00 	sts	0x00C6, r24
 446:	08 95       	ret

00000448 <USART_Receive>:
 448:	e0 ec       	ldi	r30, 0xC0	; 192
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	88 23       	and	r24, r24
 450:	ec f7       	brge	.-6      	; 0x44c <USART_Receive+0x4>
 452:	80 91 c6 00 	lds	r24, 0x00C6
 456:	08 95       	ret

00000458 <USART_Init>:
 458:	90 93 c5 00 	sts	0x00C5, r25
 45c:	80 93 c4 00 	sts	0x00C4, r24
 460:	88 e1       	ldi	r24, 0x18	; 24
 462:	80 93 c1 00 	sts	0x00C1, r24
 466:	8e e0       	ldi	r24, 0x0E	; 14
 468:	80 93 c2 00 	sts	0x00C2, r24
 46c:	64 e2       	ldi	r22, 0x24	; 36
 46e:	72 e0       	ldi	r23, 0x02	; 2
 470:	8c e1       	ldi	r24, 0x1C	; 28
 472:	92 e0       	ldi	r25, 0x02	; 2
 474:	28 c1       	rjmp	.+592    	; 0x6c6 <fdevopen>
 476:	08 95       	ret

00000478 <malloc>:
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	91 05       	cpc	r25, r1
 480:	10 f4       	brcc	.+4      	; 0x486 <malloc+0xe>
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	e0 91 b2 02 	lds	r30, 0x02B2
 48a:	f0 91 b3 02 	lds	r31, 0x02B3
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	a0 e0       	ldi	r26, 0x00	; 0
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	30 97       	sbiw	r30, 0x00	; 0
 498:	39 f1       	breq	.+78     	; 0x4e8 <malloc+0x70>
 49a:	40 81       	ld	r20, Z
 49c:	51 81       	ldd	r21, Z+1	; 0x01
 49e:	48 17       	cp	r20, r24
 4a0:	59 07       	cpc	r21, r25
 4a2:	b8 f0       	brcs	.+46     	; 0x4d2 <malloc+0x5a>
 4a4:	48 17       	cp	r20, r24
 4a6:	59 07       	cpc	r21, r25
 4a8:	71 f4       	brne	.+28     	; 0x4c6 <malloc+0x4e>
 4aa:	82 81       	ldd	r24, Z+2	; 0x02
 4ac:	93 81       	ldd	r25, Z+3	; 0x03
 4ae:	10 97       	sbiw	r26, 0x00	; 0
 4b0:	29 f0       	breq	.+10     	; 0x4bc <malloc+0x44>
 4b2:	13 96       	adiw	r26, 0x03	; 3
 4b4:	9c 93       	st	X, r25
 4b6:	8e 93       	st	-X, r24
 4b8:	12 97       	sbiw	r26, 0x02	; 2
 4ba:	2c c0       	rjmp	.+88     	; 0x514 <malloc+0x9c>
 4bc:	90 93 b3 02 	sts	0x02B3, r25
 4c0:	80 93 b2 02 	sts	0x02B2, r24
 4c4:	27 c0       	rjmp	.+78     	; 0x514 <malloc+0x9c>
 4c6:	21 15       	cp	r18, r1
 4c8:	31 05       	cpc	r19, r1
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <malloc+0x60>
 4cc:	42 17       	cp	r20, r18
 4ce:	53 07       	cpc	r21, r19
 4d0:	18 f0       	brcs	.+6      	; 0x4d8 <malloc+0x60>
 4d2:	a9 01       	movw	r20, r18
 4d4:	db 01       	movw	r26, r22
 4d6:	01 c0       	rjmp	.+2      	; 0x4da <malloc+0x62>
 4d8:	ef 01       	movw	r28, r30
 4da:	9a 01       	movw	r18, r20
 4dc:	bd 01       	movw	r22, r26
 4de:	df 01       	movw	r26, r30
 4e0:	02 80       	ldd	r0, Z+2	; 0x02
 4e2:	f3 81       	ldd	r31, Z+3	; 0x03
 4e4:	e0 2d       	mov	r30, r0
 4e6:	d7 cf       	rjmp	.-82     	; 0x496 <malloc+0x1e>
 4e8:	21 15       	cp	r18, r1
 4ea:	31 05       	cpc	r19, r1
 4ec:	f9 f0       	breq	.+62     	; 0x52c <malloc+0xb4>
 4ee:	28 1b       	sub	r18, r24
 4f0:	39 0b       	sbc	r19, r25
 4f2:	24 30       	cpi	r18, 0x04	; 4
 4f4:	31 05       	cpc	r19, r1
 4f6:	80 f4       	brcc	.+32     	; 0x518 <malloc+0xa0>
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	9b 81       	ldd	r25, Y+3	; 0x03
 4fc:	61 15       	cp	r22, r1
 4fe:	71 05       	cpc	r23, r1
 500:	21 f0       	breq	.+8      	; 0x50a <malloc+0x92>
 502:	fb 01       	movw	r30, r22
 504:	93 83       	std	Z+3, r25	; 0x03
 506:	82 83       	std	Z+2, r24	; 0x02
 508:	04 c0       	rjmp	.+8      	; 0x512 <malloc+0x9a>
 50a:	90 93 b3 02 	sts	0x02B3, r25
 50e:	80 93 b2 02 	sts	0x02B2, r24
 512:	fe 01       	movw	r30, r28
 514:	32 96       	adiw	r30, 0x02	; 2
 516:	44 c0       	rjmp	.+136    	; 0x5a0 <malloc+0x128>
 518:	fe 01       	movw	r30, r28
 51a:	e2 0f       	add	r30, r18
 51c:	f3 1f       	adc	r31, r19
 51e:	81 93       	st	Z+, r24
 520:	91 93       	st	Z+, r25
 522:	22 50       	subi	r18, 0x02	; 2
 524:	31 09       	sbc	r19, r1
 526:	39 83       	std	Y+1, r19	; 0x01
 528:	28 83       	st	Y, r18
 52a:	3a c0       	rjmp	.+116    	; 0x5a0 <malloc+0x128>
 52c:	20 91 b0 02 	lds	r18, 0x02B0
 530:	30 91 b1 02 	lds	r19, 0x02B1
 534:	23 2b       	or	r18, r19
 536:	41 f4       	brne	.+16     	; 0x548 <malloc+0xd0>
 538:	20 91 02 02 	lds	r18, 0x0202
 53c:	30 91 03 02 	lds	r19, 0x0203
 540:	30 93 b1 02 	sts	0x02B1, r19
 544:	20 93 b0 02 	sts	0x02B0, r18
 548:	20 91 00 02 	lds	r18, 0x0200
 54c:	30 91 01 02 	lds	r19, 0x0201
 550:	21 15       	cp	r18, r1
 552:	31 05       	cpc	r19, r1
 554:	41 f4       	brne	.+16     	; 0x566 <malloc+0xee>
 556:	2d b7       	in	r18, 0x3d	; 61
 558:	3e b7       	in	r19, 0x3e	; 62
 55a:	40 91 04 02 	lds	r20, 0x0204
 55e:	50 91 05 02 	lds	r21, 0x0205
 562:	24 1b       	sub	r18, r20
 564:	35 0b       	sbc	r19, r21
 566:	e0 91 b0 02 	lds	r30, 0x02B0
 56a:	f0 91 b1 02 	lds	r31, 0x02B1
 56e:	e2 17       	cp	r30, r18
 570:	f3 07       	cpc	r31, r19
 572:	a0 f4       	brcc	.+40     	; 0x59c <malloc+0x124>
 574:	2e 1b       	sub	r18, r30
 576:	3f 0b       	sbc	r19, r31
 578:	28 17       	cp	r18, r24
 57a:	39 07       	cpc	r19, r25
 57c:	78 f0       	brcs	.+30     	; 0x59c <malloc+0x124>
 57e:	ac 01       	movw	r20, r24
 580:	4e 5f       	subi	r20, 0xFE	; 254
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	24 17       	cp	r18, r20
 586:	35 07       	cpc	r19, r21
 588:	48 f0       	brcs	.+18     	; 0x59c <malloc+0x124>
 58a:	4e 0f       	add	r20, r30
 58c:	5f 1f       	adc	r21, r31
 58e:	50 93 b1 02 	sts	0x02B1, r21
 592:	40 93 b0 02 	sts	0x02B0, r20
 596:	81 93       	st	Z+, r24
 598:	91 93       	st	Z+, r25
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <malloc+0x128>
 59c:	e0 e0       	ldi	r30, 0x00	; 0
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	cf 01       	movw	r24, r30
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <free>:
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	00 97       	sbiw	r24, 0x00	; 0
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <free+0xa>
 5b0:	87 c0       	rjmp	.+270    	; 0x6c0 <free+0x118>
 5b2:	fc 01       	movw	r30, r24
 5b4:	32 97       	sbiw	r30, 0x02	; 2
 5b6:	13 82       	std	Z+3, r1	; 0x03
 5b8:	12 82       	std	Z+2, r1	; 0x02
 5ba:	c0 91 b2 02 	lds	r28, 0x02B2
 5be:	d0 91 b3 02 	lds	r29, 0x02B3
 5c2:	20 97       	sbiw	r28, 0x00	; 0
 5c4:	81 f4       	brne	.+32     	; 0x5e6 <free+0x3e>
 5c6:	20 81       	ld	r18, Z
 5c8:	31 81       	ldd	r19, Z+1	; 0x01
 5ca:	28 0f       	add	r18, r24
 5cc:	39 1f       	adc	r19, r25
 5ce:	80 91 b0 02 	lds	r24, 0x02B0
 5d2:	90 91 b1 02 	lds	r25, 0x02B1
 5d6:	82 17       	cp	r24, r18
 5d8:	93 07       	cpc	r25, r19
 5da:	79 f5       	brne	.+94     	; 0x63a <free+0x92>
 5dc:	f0 93 b1 02 	sts	0x02B1, r31
 5e0:	e0 93 b0 02 	sts	0x02B0, r30
 5e4:	6d c0       	rjmp	.+218    	; 0x6c0 <free+0x118>
 5e6:	de 01       	movw	r26, r28
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	ae 17       	cp	r26, r30
 5ee:	bf 07       	cpc	r27, r31
 5f0:	50 f4       	brcc	.+20     	; 0x606 <free+0x5e>
 5f2:	12 96       	adiw	r26, 0x02	; 2
 5f4:	4d 91       	ld	r20, X+
 5f6:	5c 91       	ld	r21, X
 5f8:	13 97       	sbiw	r26, 0x03	; 3
 5fa:	9d 01       	movw	r18, r26
 5fc:	41 15       	cp	r20, r1
 5fe:	51 05       	cpc	r21, r1
 600:	09 f1       	breq	.+66     	; 0x644 <free+0x9c>
 602:	da 01       	movw	r26, r20
 604:	f3 cf       	rjmp	.-26     	; 0x5ec <free+0x44>
 606:	b3 83       	std	Z+3, r27	; 0x03
 608:	a2 83       	std	Z+2, r26	; 0x02
 60a:	40 81       	ld	r20, Z
 60c:	51 81       	ldd	r21, Z+1	; 0x01
 60e:	84 0f       	add	r24, r20
 610:	95 1f       	adc	r25, r21
 612:	8a 17       	cp	r24, r26
 614:	9b 07       	cpc	r25, r27
 616:	71 f4       	brne	.+28     	; 0x634 <free+0x8c>
 618:	8d 91       	ld	r24, X+
 61a:	9c 91       	ld	r25, X
 61c:	11 97       	sbiw	r26, 0x01	; 1
 61e:	84 0f       	add	r24, r20
 620:	95 1f       	adc	r25, r21
 622:	02 96       	adiw	r24, 0x02	; 2
 624:	91 83       	std	Z+1, r25	; 0x01
 626:	80 83       	st	Z, r24
 628:	12 96       	adiw	r26, 0x02	; 2
 62a:	8d 91       	ld	r24, X+
 62c:	9c 91       	ld	r25, X
 62e:	13 97       	sbiw	r26, 0x03	; 3
 630:	93 83       	std	Z+3, r25	; 0x03
 632:	82 83       	std	Z+2, r24	; 0x02
 634:	21 15       	cp	r18, r1
 636:	31 05       	cpc	r19, r1
 638:	29 f4       	brne	.+10     	; 0x644 <free+0x9c>
 63a:	f0 93 b3 02 	sts	0x02B3, r31
 63e:	e0 93 b2 02 	sts	0x02B2, r30
 642:	3e c0       	rjmp	.+124    	; 0x6c0 <free+0x118>
 644:	d9 01       	movw	r26, r18
 646:	13 96       	adiw	r26, 0x03	; 3
 648:	fc 93       	st	X, r31
 64a:	ee 93       	st	-X, r30
 64c:	12 97       	sbiw	r26, 0x02	; 2
 64e:	4d 91       	ld	r20, X+
 650:	5d 91       	ld	r21, X+
 652:	a4 0f       	add	r26, r20
 654:	b5 1f       	adc	r27, r21
 656:	ea 17       	cp	r30, r26
 658:	fb 07       	cpc	r31, r27
 65a:	79 f4       	brne	.+30     	; 0x67a <free+0xd2>
 65c:	80 81       	ld	r24, Z
 65e:	91 81       	ldd	r25, Z+1	; 0x01
 660:	84 0f       	add	r24, r20
 662:	95 1f       	adc	r25, r21
 664:	02 96       	adiw	r24, 0x02	; 2
 666:	d9 01       	movw	r26, r18
 668:	11 96       	adiw	r26, 0x01	; 1
 66a:	9c 93       	st	X, r25
 66c:	8e 93       	st	-X, r24
 66e:	82 81       	ldd	r24, Z+2	; 0x02
 670:	93 81       	ldd	r25, Z+3	; 0x03
 672:	13 96       	adiw	r26, 0x03	; 3
 674:	9c 93       	st	X, r25
 676:	8e 93       	st	-X, r24
 678:	12 97       	sbiw	r26, 0x02	; 2
 67a:	e0 e0       	ldi	r30, 0x00	; 0
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	9b 81       	ldd	r25, Y+3	; 0x03
 682:	00 97       	sbiw	r24, 0x00	; 0
 684:	19 f0       	breq	.+6      	; 0x68c <free+0xe4>
 686:	fe 01       	movw	r30, r28
 688:	ec 01       	movw	r28, r24
 68a:	f9 cf       	rjmp	.-14     	; 0x67e <free+0xd6>
 68c:	ce 01       	movw	r24, r28
 68e:	02 96       	adiw	r24, 0x02	; 2
 690:	28 81       	ld	r18, Y
 692:	39 81       	ldd	r19, Y+1	; 0x01
 694:	82 0f       	add	r24, r18
 696:	93 1f       	adc	r25, r19
 698:	20 91 b0 02 	lds	r18, 0x02B0
 69c:	30 91 b1 02 	lds	r19, 0x02B1
 6a0:	28 17       	cp	r18, r24
 6a2:	39 07       	cpc	r19, r25
 6a4:	69 f4       	brne	.+26     	; 0x6c0 <free+0x118>
 6a6:	30 97       	sbiw	r30, 0x00	; 0
 6a8:	29 f4       	brne	.+10     	; 0x6b4 <free+0x10c>
 6aa:	10 92 b3 02 	sts	0x02B3, r1
 6ae:	10 92 b2 02 	sts	0x02B2, r1
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <free+0x110>
 6b4:	13 82       	std	Z+3, r1	; 0x03
 6b6:	12 82       	std	Z+2, r1	; 0x02
 6b8:	d0 93 b1 02 	sts	0x02B1, r29
 6bc:	c0 93 b0 02 	sts	0x02B0, r28
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <fdevopen>:
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	ec 01       	movw	r28, r24
 6d0:	8b 01       	movw	r16, r22
 6d2:	00 97       	sbiw	r24, 0x00	; 0
 6d4:	31 f4       	brne	.+12     	; 0x6e2 <fdevopen+0x1c>
 6d6:	61 15       	cp	r22, r1
 6d8:	71 05       	cpc	r23, r1
 6da:	19 f4       	brne	.+6      	; 0x6e2 <fdevopen+0x1c>
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	37 c0       	rjmp	.+110    	; 0x750 <fdevopen+0x8a>
 6e2:	6e e0       	ldi	r22, 0x0E	; 14
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	36 d2       	rcall	.+1132   	; 0xb58 <calloc>
 6ec:	fc 01       	movw	r30, r24
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	a9 f3       	breq	.-22     	; 0x6dc <fdevopen+0x16>
 6f2:	80 e8       	ldi	r24, 0x80	; 128
 6f4:	83 83       	std	Z+3, r24	; 0x03
 6f6:	01 15       	cp	r16, r1
 6f8:	11 05       	cpc	r17, r1
 6fa:	71 f0       	breq	.+28     	; 0x718 <fdevopen+0x52>
 6fc:	13 87       	std	Z+11, r17	; 0x0b
 6fe:	02 87       	std	Z+10, r16	; 0x0a
 700:	81 e8       	ldi	r24, 0x81	; 129
 702:	83 83       	std	Z+3, r24	; 0x03
 704:	80 91 b4 02 	lds	r24, 0x02B4
 708:	90 91 b5 02 	lds	r25, 0x02B5
 70c:	89 2b       	or	r24, r25
 70e:	21 f4       	brne	.+8      	; 0x718 <fdevopen+0x52>
 710:	f0 93 b5 02 	sts	0x02B5, r31
 714:	e0 93 b4 02 	sts	0x02B4, r30
 718:	20 97       	sbiw	r28, 0x00	; 0
 71a:	c9 f0       	breq	.+50     	; 0x74e <fdevopen+0x88>
 71c:	d1 87       	std	Z+9, r29	; 0x09
 71e:	c0 87       	std	Z+8, r28	; 0x08
 720:	83 81       	ldd	r24, Z+3	; 0x03
 722:	82 60       	ori	r24, 0x02	; 2
 724:	83 83       	std	Z+3, r24	; 0x03
 726:	80 91 b6 02 	lds	r24, 0x02B6
 72a:	90 91 b7 02 	lds	r25, 0x02B7
 72e:	89 2b       	or	r24, r25
 730:	71 f4       	brne	.+28     	; 0x74e <fdevopen+0x88>
 732:	f0 93 b7 02 	sts	0x02B7, r31
 736:	e0 93 b6 02 	sts	0x02B6, r30
 73a:	80 91 b8 02 	lds	r24, 0x02B8
 73e:	90 91 b9 02 	lds	r25, 0x02B9
 742:	89 2b       	or	r24, r25
 744:	21 f4       	brne	.+8      	; 0x74e <fdevopen+0x88>
 746:	f0 93 b9 02 	sts	0x02B9, r31
 74a:	e0 93 b8 02 	sts	0x02B8, r30
 74e:	cf 01       	movw	r24, r30
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	08 95       	ret

0000075a <printf>:
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
 762:	fe 01       	movw	r30, r28
 764:	36 96       	adiw	r30, 0x06	; 6
 766:	61 91       	ld	r22, Z+
 768:	71 91       	ld	r23, Z+
 76a:	af 01       	movw	r20, r30
 76c:	80 91 b6 02 	lds	r24, 0x02B6
 770:	90 91 b7 02 	lds	r25, 0x02B7
 774:	03 d0       	rcall	.+6      	; 0x77c <vfprintf>
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	08 95       	ret

0000077c <vfprintf>:
 77c:	2f 92       	push	r2
 77e:	3f 92       	push	r3
 780:	4f 92       	push	r4
 782:	5f 92       	push	r5
 784:	6f 92       	push	r6
 786:	7f 92       	push	r7
 788:	8f 92       	push	r8
 78a:	9f 92       	push	r9
 78c:	af 92       	push	r10
 78e:	bf 92       	push	r11
 790:	cf 92       	push	r12
 792:	df 92       	push	r13
 794:	ef 92       	push	r14
 796:	ff 92       	push	r15
 798:	0f 93       	push	r16
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	2c 97       	sbiw	r28, 0x0c	; 12
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	f8 94       	cli
 7aa:	de bf       	out	0x3e, r29	; 62
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	cd bf       	out	0x3d, r28	; 61
 7b0:	7c 01       	movw	r14, r24
 7b2:	6b 01       	movw	r12, r22
 7b4:	8a 01       	movw	r16, r20
 7b6:	fc 01       	movw	r30, r24
 7b8:	17 82       	std	Z+7, r1	; 0x07
 7ba:	16 82       	std	Z+6, r1	; 0x06
 7bc:	83 81       	ldd	r24, Z+3	; 0x03
 7be:	81 ff       	sbrs	r24, 1
 7c0:	b0 c1       	rjmp	.+864    	; 0xb22 <vfprintf+0x3a6>
 7c2:	ce 01       	movw	r24, r28
 7c4:	01 96       	adiw	r24, 0x01	; 1
 7c6:	4c 01       	movw	r8, r24
 7c8:	f7 01       	movw	r30, r14
 7ca:	93 81       	ldd	r25, Z+3	; 0x03
 7cc:	f6 01       	movw	r30, r12
 7ce:	93 fd       	sbrc	r25, 3
 7d0:	85 91       	lpm	r24, Z+
 7d2:	93 ff       	sbrs	r25, 3
 7d4:	81 91       	ld	r24, Z+
 7d6:	6f 01       	movw	r12, r30
 7d8:	88 23       	and	r24, r24
 7da:	09 f4       	brne	.+2      	; 0x7de <vfprintf+0x62>
 7dc:	9e c1       	rjmp	.+828    	; 0xb1a <vfprintf+0x39e>
 7de:	85 32       	cpi	r24, 0x25	; 37
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <vfprintf+0x74>
 7e2:	93 fd       	sbrc	r25, 3
 7e4:	85 91       	lpm	r24, Z+
 7e6:	93 ff       	sbrs	r25, 3
 7e8:	81 91       	ld	r24, Z+
 7ea:	6f 01       	movw	r12, r30
 7ec:	85 32       	cpi	r24, 0x25	; 37
 7ee:	21 f4       	brne	.+8      	; 0x7f8 <vfprintf+0x7c>
 7f0:	b7 01       	movw	r22, r14
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	e8 d1       	rcall	.+976    	; 0xbc6 <fputc>
 7f6:	e8 cf       	rjmp	.-48     	; 0x7c8 <vfprintf+0x4c>
 7f8:	51 2c       	mov	r5, r1
 7fa:	31 2c       	mov	r3, r1
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	20 32       	cpi	r18, 0x20	; 32
 800:	a0 f4       	brcc	.+40     	; 0x82a <vfprintf+0xae>
 802:	8b 32       	cpi	r24, 0x2B	; 43
 804:	69 f0       	breq	.+26     	; 0x820 <vfprintf+0xa4>
 806:	30 f4       	brcc	.+12     	; 0x814 <vfprintf+0x98>
 808:	80 32       	cpi	r24, 0x20	; 32
 80a:	59 f0       	breq	.+22     	; 0x822 <vfprintf+0xa6>
 80c:	83 32       	cpi	r24, 0x23	; 35
 80e:	69 f4       	brne	.+26     	; 0x82a <vfprintf+0xae>
 810:	20 61       	ori	r18, 0x10	; 16
 812:	2c c0       	rjmp	.+88     	; 0x86c <vfprintf+0xf0>
 814:	8d 32       	cpi	r24, 0x2D	; 45
 816:	39 f0       	breq	.+14     	; 0x826 <vfprintf+0xaa>
 818:	80 33       	cpi	r24, 0x30	; 48
 81a:	39 f4       	brne	.+14     	; 0x82a <vfprintf+0xae>
 81c:	21 60       	ori	r18, 0x01	; 1
 81e:	26 c0       	rjmp	.+76     	; 0x86c <vfprintf+0xf0>
 820:	22 60       	ori	r18, 0x02	; 2
 822:	24 60       	ori	r18, 0x04	; 4
 824:	23 c0       	rjmp	.+70     	; 0x86c <vfprintf+0xf0>
 826:	28 60       	ori	r18, 0x08	; 8
 828:	21 c0       	rjmp	.+66     	; 0x86c <vfprintf+0xf0>
 82a:	27 fd       	sbrc	r18, 7
 82c:	27 c0       	rjmp	.+78     	; 0x87c <vfprintf+0x100>
 82e:	30 ed       	ldi	r19, 0xD0	; 208
 830:	38 0f       	add	r19, r24
 832:	3a 30       	cpi	r19, 0x0A	; 10
 834:	78 f4       	brcc	.+30     	; 0x854 <vfprintf+0xd8>
 836:	26 ff       	sbrs	r18, 6
 838:	06 c0       	rjmp	.+12     	; 0x846 <vfprintf+0xca>
 83a:	fa e0       	ldi	r31, 0x0A	; 10
 83c:	5f 9e       	mul	r5, r31
 83e:	30 0d       	add	r19, r0
 840:	11 24       	eor	r1, r1
 842:	53 2e       	mov	r5, r19
 844:	13 c0       	rjmp	.+38     	; 0x86c <vfprintf+0xf0>
 846:	8a e0       	ldi	r24, 0x0A	; 10
 848:	38 9e       	mul	r3, r24
 84a:	30 0d       	add	r19, r0
 84c:	11 24       	eor	r1, r1
 84e:	33 2e       	mov	r3, r19
 850:	20 62       	ori	r18, 0x20	; 32
 852:	0c c0       	rjmp	.+24     	; 0x86c <vfprintf+0xf0>
 854:	8e 32       	cpi	r24, 0x2E	; 46
 856:	21 f4       	brne	.+8      	; 0x860 <vfprintf+0xe4>
 858:	26 fd       	sbrc	r18, 6
 85a:	5f c1       	rjmp	.+702    	; 0xb1a <vfprintf+0x39e>
 85c:	20 64       	ori	r18, 0x40	; 64
 85e:	06 c0       	rjmp	.+12     	; 0x86c <vfprintf+0xf0>
 860:	8c 36       	cpi	r24, 0x6C	; 108
 862:	11 f4       	brne	.+4      	; 0x868 <vfprintf+0xec>
 864:	20 68       	ori	r18, 0x80	; 128
 866:	02 c0       	rjmp	.+4      	; 0x86c <vfprintf+0xf0>
 868:	88 36       	cpi	r24, 0x68	; 104
 86a:	41 f4       	brne	.+16     	; 0x87c <vfprintf+0x100>
 86c:	f6 01       	movw	r30, r12
 86e:	93 fd       	sbrc	r25, 3
 870:	85 91       	lpm	r24, Z+
 872:	93 ff       	sbrs	r25, 3
 874:	81 91       	ld	r24, Z+
 876:	6f 01       	movw	r12, r30
 878:	81 11       	cpse	r24, r1
 87a:	c1 cf       	rjmp	.-126    	; 0x7fe <vfprintf+0x82>
 87c:	98 2f       	mov	r25, r24
 87e:	9f 7d       	andi	r25, 0xDF	; 223
 880:	95 54       	subi	r25, 0x45	; 69
 882:	93 30       	cpi	r25, 0x03	; 3
 884:	28 f4       	brcc	.+10     	; 0x890 <vfprintf+0x114>
 886:	0c 5f       	subi	r16, 0xFC	; 252
 888:	1f 4f       	sbci	r17, 0xFF	; 255
 88a:	ff e3       	ldi	r31, 0x3F	; 63
 88c:	f9 83       	std	Y+1, r31	; 0x01
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <vfprintf+0x12e>
 890:	83 36       	cpi	r24, 0x63	; 99
 892:	31 f0       	breq	.+12     	; 0x8a0 <vfprintf+0x124>
 894:	83 37       	cpi	r24, 0x73	; 115
 896:	71 f0       	breq	.+28     	; 0x8b4 <vfprintf+0x138>
 898:	83 35       	cpi	r24, 0x53	; 83
 89a:	09 f0       	breq	.+2      	; 0x89e <vfprintf+0x122>
 89c:	57 c0       	rjmp	.+174    	; 0x94c <vfprintf+0x1d0>
 89e:	21 c0       	rjmp	.+66     	; 0x8e2 <vfprintf+0x166>
 8a0:	f8 01       	movw	r30, r16
 8a2:	80 81       	ld	r24, Z
 8a4:	89 83       	std	Y+1, r24	; 0x01
 8a6:	0e 5f       	subi	r16, 0xFE	; 254
 8a8:	1f 4f       	sbci	r17, 0xFF	; 255
 8aa:	44 24       	eor	r4, r4
 8ac:	43 94       	inc	r4
 8ae:	51 2c       	mov	r5, r1
 8b0:	54 01       	movw	r10, r8
 8b2:	14 c0       	rjmp	.+40     	; 0x8dc <vfprintf+0x160>
 8b4:	38 01       	movw	r6, r16
 8b6:	f2 e0       	ldi	r31, 0x02	; 2
 8b8:	6f 0e       	add	r6, r31
 8ba:	71 1c       	adc	r7, r1
 8bc:	f8 01       	movw	r30, r16
 8be:	a0 80       	ld	r10, Z
 8c0:	b1 80       	ldd	r11, Z+1	; 0x01
 8c2:	26 ff       	sbrs	r18, 6
 8c4:	03 c0       	rjmp	.+6      	; 0x8cc <vfprintf+0x150>
 8c6:	65 2d       	mov	r22, r5
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <vfprintf+0x154>
 8cc:	6f ef       	ldi	r22, 0xFF	; 255
 8ce:	7f ef       	ldi	r23, 0xFF	; 255
 8d0:	c5 01       	movw	r24, r10
 8d2:	2c 87       	std	Y+12, r18	; 0x0c
 8d4:	6d d1       	rcall	.+730    	; 0xbb0 <strnlen>
 8d6:	2c 01       	movw	r4, r24
 8d8:	83 01       	movw	r16, r6
 8da:	2c 85       	ldd	r18, Y+12	; 0x0c
 8dc:	2f 77       	andi	r18, 0x7F	; 127
 8de:	22 2e       	mov	r2, r18
 8e0:	16 c0       	rjmp	.+44     	; 0x90e <vfprintf+0x192>
 8e2:	38 01       	movw	r6, r16
 8e4:	f2 e0       	ldi	r31, 0x02	; 2
 8e6:	6f 0e       	add	r6, r31
 8e8:	71 1c       	adc	r7, r1
 8ea:	f8 01       	movw	r30, r16
 8ec:	a0 80       	ld	r10, Z
 8ee:	b1 80       	ldd	r11, Z+1	; 0x01
 8f0:	26 ff       	sbrs	r18, 6
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <vfprintf+0x17e>
 8f4:	65 2d       	mov	r22, r5
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <vfprintf+0x182>
 8fa:	6f ef       	ldi	r22, 0xFF	; 255
 8fc:	7f ef       	ldi	r23, 0xFF	; 255
 8fe:	c5 01       	movw	r24, r10
 900:	2c 87       	std	Y+12, r18	; 0x0c
 902:	44 d1       	rcall	.+648    	; 0xb8c <strnlen_P>
 904:	2c 01       	movw	r4, r24
 906:	2c 85       	ldd	r18, Y+12	; 0x0c
 908:	20 68       	ori	r18, 0x80	; 128
 90a:	22 2e       	mov	r2, r18
 90c:	83 01       	movw	r16, r6
 90e:	23 fc       	sbrc	r2, 3
 910:	19 c0       	rjmp	.+50     	; 0x944 <vfprintf+0x1c8>
 912:	83 2d       	mov	r24, r3
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	48 16       	cp	r4, r24
 918:	59 06       	cpc	r5, r25
 91a:	a0 f4       	brcc	.+40     	; 0x944 <vfprintf+0x1c8>
 91c:	b7 01       	movw	r22, r14
 91e:	80 e2       	ldi	r24, 0x20	; 32
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	51 d1       	rcall	.+674    	; 0xbc6 <fputc>
 924:	3a 94       	dec	r3
 926:	f5 cf       	rjmp	.-22     	; 0x912 <vfprintf+0x196>
 928:	f5 01       	movw	r30, r10
 92a:	27 fc       	sbrc	r2, 7
 92c:	85 91       	lpm	r24, Z+
 92e:	27 fe       	sbrs	r2, 7
 930:	81 91       	ld	r24, Z+
 932:	5f 01       	movw	r10, r30
 934:	b7 01       	movw	r22, r14
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	46 d1       	rcall	.+652    	; 0xbc6 <fputc>
 93a:	31 10       	cpse	r3, r1
 93c:	3a 94       	dec	r3
 93e:	f1 e0       	ldi	r31, 0x01	; 1
 940:	4f 1a       	sub	r4, r31
 942:	51 08       	sbc	r5, r1
 944:	41 14       	cp	r4, r1
 946:	51 04       	cpc	r5, r1
 948:	79 f7       	brne	.-34     	; 0x928 <vfprintf+0x1ac>
 94a:	de c0       	rjmp	.+444    	; 0xb08 <vfprintf+0x38c>
 94c:	84 36       	cpi	r24, 0x64	; 100
 94e:	11 f0       	breq	.+4      	; 0x954 <vfprintf+0x1d8>
 950:	89 36       	cpi	r24, 0x69	; 105
 952:	31 f5       	brne	.+76     	; 0x9a0 <vfprintf+0x224>
 954:	f8 01       	movw	r30, r16
 956:	27 ff       	sbrs	r18, 7
 958:	07 c0       	rjmp	.+14     	; 0x968 <vfprintf+0x1ec>
 95a:	60 81       	ld	r22, Z
 95c:	71 81       	ldd	r23, Z+1	; 0x01
 95e:	82 81       	ldd	r24, Z+2	; 0x02
 960:	93 81       	ldd	r25, Z+3	; 0x03
 962:	0c 5f       	subi	r16, 0xFC	; 252
 964:	1f 4f       	sbci	r17, 0xFF	; 255
 966:	08 c0       	rjmp	.+16     	; 0x978 <vfprintf+0x1fc>
 968:	60 81       	ld	r22, Z
 96a:	71 81       	ldd	r23, Z+1	; 0x01
 96c:	88 27       	eor	r24, r24
 96e:	77 fd       	sbrc	r23, 7
 970:	80 95       	com	r24
 972:	98 2f       	mov	r25, r24
 974:	0e 5f       	subi	r16, 0xFE	; 254
 976:	1f 4f       	sbci	r17, 0xFF	; 255
 978:	2f 76       	andi	r18, 0x6F	; 111
 97a:	b2 2e       	mov	r11, r18
 97c:	97 ff       	sbrs	r25, 7
 97e:	09 c0       	rjmp	.+18     	; 0x992 <vfprintf+0x216>
 980:	90 95       	com	r25
 982:	80 95       	com	r24
 984:	70 95       	com	r23
 986:	61 95       	neg	r22
 988:	7f 4f       	sbci	r23, 0xFF	; 255
 98a:	8f 4f       	sbci	r24, 0xFF	; 255
 98c:	9f 4f       	sbci	r25, 0xFF	; 255
 98e:	20 68       	ori	r18, 0x80	; 128
 990:	b2 2e       	mov	r11, r18
 992:	2a e0       	ldi	r18, 0x0A	; 10
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	a4 01       	movw	r20, r8
 998:	48 d1       	rcall	.+656    	; 0xc2a <__ultoa_invert>
 99a:	a8 2e       	mov	r10, r24
 99c:	a8 18       	sub	r10, r8
 99e:	43 c0       	rjmp	.+134    	; 0xa26 <vfprintf+0x2aa>
 9a0:	85 37       	cpi	r24, 0x75	; 117
 9a2:	29 f4       	brne	.+10     	; 0x9ae <vfprintf+0x232>
 9a4:	2f 7e       	andi	r18, 0xEF	; 239
 9a6:	b2 2e       	mov	r11, r18
 9a8:	2a e0       	ldi	r18, 0x0A	; 10
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	25 c0       	rjmp	.+74     	; 0x9f8 <vfprintf+0x27c>
 9ae:	f2 2f       	mov	r31, r18
 9b0:	f9 7f       	andi	r31, 0xF9	; 249
 9b2:	bf 2e       	mov	r11, r31
 9b4:	8f 36       	cpi	r24, 0x6F	; 111
 9b6:	c1 f0       	breq	.+48     	; 0x9e8 <vfprintf+0x26c>
 9b8:	18 f4       	brcc	.+6      	; 0x9c0 <vfprintf+0x244>
 9ba:	88 35       	cpi	r24, 0x58	; 88
 9bc:	79 f0       	breq	.+30     	; 0x9dc <vfprintf+0x260>
 9be:	ad c0       	rjmp	.+346    	; 0xb1a <vfprintf+0x39e>
 9c0:	80 37       	cpi	r24, 0x70	; 112
 9c2:	19 f0       	breq	.+6      	; 0x9ca <vfprintf+0x24e>
 9c4:	88 37       	cpi	r24, 0x78	; 120
 9c6:	21 f0       	breq	.+8      	; 0x9d0 <vfprintf+0x254>
 9c8:	a8 c0       	rjmp	.+336    	; 0xb1a <vfprintf+0x39e>
 9ca:	2f 2f       	mov	r18, r31
 9cc:	20 61       	ori	r18, 0x10	; 16
 9ce:	b2 2e       	mov	r11, r18
 9d0:	b4 fe       	sbrs	r11, 4
 9d2:	0d c0       	rjmp	.+26     	; 0x9ee <vfprintf+0x272>
 9d4:	8b 2d       	mov	r24, r11
 9d6:	84 60       	ori	r24, 0x04	; 4
 9d8:	b8 2e       	mov	r11, r24
 9da:	09 c0       	rjmp	.+18     	; 0x9ee <vfprintf+0x272>
 9dc:	24 ff       	sbrs	r18, 4
 9de:	0a c0       	rjmp	.+20     	; 0x9f4 <vfprintf+0x278>
 9e0:	9f 2f       	mov	r25, r31
 9e2:	96 60       	ori	r25, 0x06	; 6
 9e4:	b9 2e       	mov	r11, r25
 9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <vfprintf+0x278>
 9e8:	28 e0       	ldi	r18, 0x08	; 8
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <vfprintf+0x27c>
 9ee:	20 e1       	ldi	r18, 0x10	; 16
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <vfprintf+0x27c>
 9f4:	20 e1       	ldi	r18, 0x10	; 16
 9f6:	32 e0       	ldi	r19, 0x02	; 2
 9f8:	f8 01       	movw	r30, r16
 9fa:	b7 fe       	sbrs	r11, 7
 9fc:	07 c0       	rjmp	.+14     	; 0xa0c <vfprintf+0x290>
 9fe:	60 81       	ld	r22, Z
 a00:	71 81       	ldd	r23, Z+1	; 0x01
 a02:	82 81       	ldd	r24, Z+2	; 0x02
 a04:	93 81       	ldd	r25, Z+3	; 0x03
 a06:	0c 5f       	subi	r16, 0xFC	; 252
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <vfprintf+0x29c>
 a0c:	60 81       	ld	r22, Z
 a0e:	71 81       	ldd	r23, Z+1	; 0x01
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 5f       	subi	r16, 0xFE	; 254
 a16:	1f 4f       	sbci	r17, 0xFF	; 255
 a18:	a4 01       	movw	r20, r8
 a1a:	07 d1       	rcall	.+526    	; 0xc2a <__ultoa_invert>
 a1c:	a8 2e       	mov	r10, r24
 a1e:	a8 18       	sub	r10, r8
 a20:	fb 2d       	mov	r31, r11
 a22:	ff 77       	andi	r31, 0x7F	; 127
 a24:	bf 2e       	mov	r11, r31
 a26:	b6 fe       	sbrs	r11, 6
 a28:	0b c0       	rjmp	.+22     	; 0xa40 <vfprintf+0x2c4>
 a2a:	2b 2d       	mov	r18, r11
 a2c:	2e 7f       	andi	r18, 0xFE	; 254
 a2e:	a5 14       	cp	r10, r5
 a30:	50 f4       	brcc	.+20     	; 0xa46 <vfprintf+0x2ca>
 a32:	b4 fe       	sbrs	r11, 4
 a34:	0a c0       	rjmp	.+20     	; 0xa4a <vfprintf+0x2ce>
 a36:	b2 fc       	sbrc	r11, 2
 a38:	08 c0       	rjmp	.+16     	; 0xa4a <vfprintf+0x2ce>
 a3a:	2b 2d       	mov	r18, r11
 a3c:	2e 7e       	andi	r18, 0xEE	; 238
 a3e:	05 c0       	rjmp	.+10     	; 0xa4a <vfprintf+0x2ce>
 a40:	7a 2c       	mov	r7, r10
 a42:	2b 2d       	mov	r18, r11
 a44:	03 c0       	rjmp	.+6      	; 0xa4c <vfprintf+0x2d0>
 a46:	7a 2c       	mov	r7, r10
 a48:	01 c0       	rjmp	.+2      	; 0xa4c <vfprintf+0x2d0>
 a4a:	75 2c       	mov	r7, r5
 a4c:	24 ff       	sbrs	r18, 4
 a4e:	0d c0       	rjmp	.+26     	; 0xa6a <vfprintf+0x2ee>
 a50:	fe 01       	movw	r30, r28
 a52:	ea 0d       	add	r30, r10
 a54:	f1 1d       	adc	r31, r1
 a56:	80 81       	ld	r24, Z
 a58:	80 33       	cpi	r24, 0x30	; 48
 a5a:	11 f4       	brne	.+4      	; 0xa60 <vfprintf+0x2e4>
 a5c:	29 7e       	andi	r18, 0xE9	; 233
 a5e:	09 c0       	rjmp	.+18     	; 0xa72 <vfprintf+0x2f6>
 a60:	22 ff       	sbrs	r18, 2
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x2f4>
 a64:	73 94       	inc	r7
 a66:	73 94       	inc	r7
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <vfprintf+0x2f6>
 a6a:	82 2f       	mov	r24, r18
 a6c:	86 78       	andi	r24, 0x86	; 134
 a6e:	09 f0       	breq	.+2      	; 0xa72 <vfprintf+0x2f6>
 a70:	73 94       	inc	r7
 a72:	23 fd       	sbrc	r18, 3
 a74:	12 c0       	rjmp	.+36     	; 0xa9a <vfprintf+0x31e>
 a76:	20 ff       	sbrs	r18, 0
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <vfprintf+0x30a>
 a7a:	5a 2c       	mov	r5, r10
 a7c:	73 14       	cp	r7, r3
 a7e:	18 f4       	brcc	.+6      	; 0xa86 <vfprintf+0x30a>
 a80:	53 0c       	add	r5, r3
 a82:	57 18       	sub	r5, r7
 a84:	73 2c       	mov	r7, r3
 a86:	73 14       	cp	r7, r3
 a88:	60 f4       	brcc	.+24     	; 0xaa2 <vfprintf+0x326>
 a8a:	b7 01       	movw	r22, r14
 a8c:	80 e2       	ldi	r24, 0x20	; 32
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	2c 87       	std	Y+12, r18	; 0x0c
 a92:	99 d0       	rcall	.+306    	; 0xbc6 <fputc>
 a94:	73 94       	inc	r7
 a96:	2c 85       	ldd	r18, Y+12	; 0x0c
 a98:	f6 cf       	rjmp	.-20     	; 0xa86 <vfprintf+0x30a>
 a9a:	73 14       	cp	r7, r3
 a9c:	10 f4       	brcc	.+4      	; 0xaa2 <vfprintf+0x326>
 a9e:	37 18       	sub	r3, r7
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <vfprintf+0x328>
 aa2:	31 2c       	mov	r3, r1
 aa4:	24 ff       	sbrs	r18, 4
 aa6:	11 c0       	rjmp	.+34     	; 0xaca <vfprintf+0x34e>
 aa8:	b7 01       	movw	r22, r14
 aaa:	80 e3       	ldi	r24, 0x30	; 48
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	2c 87       	std	Y+12, r18	; 0x0c
 ab0:	8a d0       	rcall	.+276    	; 0xbc6 <fputc>
 ab2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ab4:	22 ff       	sbrs	r18, 2
 ab6:	16 c0       	rjmp	.+44     	; 0xae4 <vfprintf+0x368>
 ab8:	21 ff       	sbrs	r18, 1
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <vfprintf+0x346>
 abc:	88 e5       	ldi	r24, 0x58	; 88
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0x34a>
 ac2:	88 e7       	ldi	r24, 0x78	; 120
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	b7 01       	movw	r22, r14
 ac8:	0c c0       	rjmp	.+24     	; 0xae2 <vfprintf+0x366>
 aca:	82 2f       	mov	r24, r18
 acc:	86 78       	andi	r24, 0x86	; 134
 ace:	51 f0       	breq	.+20     	; 0xae4 <vfprintf+0x368>
 ad0:	21 fd       	sbrc	r18, 1
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <vfprintf+0x35c>
 ad4:	80 e2       	ldi	r24, 0x20	; 32
 ad6:	01 c0       	rjmp	.+2      	; 0xada <vfprintf+0x35e>
 ad8:	8b e2       	ldi	r24, 0x2B	; 43
 ada:	27 fd       	sbrc	r18, 7
 adc:	8d e2       	ldi	r24, 0x2D	; 45
 ade:	b7 01       	movw	r22, r14
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	71 d0       	rcall	.+226    	; 0xbc6 <fputc>
 ae4:	a5 14       	cp	r10, r5
 ae6:	30 f4       	brcc	.+12     	; 0xaf4 <vfprintf+0x378>
 ae8:	b7 01       	movw	r22, r14
 aea:	80 e3       	ldi	r24, 0x30	; 48
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	6b d0       	rcall	.+214    	; 0xbc6 <fputc>
 af0:	5a 94       	dec	r5
 af2:	f8 cf       	rjmp	.-16     	; 0xae4 <vfprintf+0x368>
 af4:	aa 94       	dec	r10
 af6:	f4 01       	movw	r30, r8
 af8:	ea 0d       	add	r30, r10
 afa:	f1 1d       	adc	r31, r1
 afc:	80 81       	ld	r24, Z
 afe:	b7 01       	movw	r22, r14
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	61 d0       	rcall	.+194    	; 0xbc6 <fputc>
 b04:	a1 10       	cpse	r10, r1
 b06:	f6 cf       	rjmp	.-20     	; 0xaf4 <vfprintf+0x378>
 b08:	33 20       	and	r3, r3
 b0a:	09 f4       	brne	.+2      	; 0xb0e <vfprintf+0x392>
 b0c:	5d ce       	rjmp	.-838    	; 0x7c8 <vfprintf+0x4c>
 b0e:	b7 01       	movw	r22, r14
 b10:	80 e2       	ldi	r24, 0x20	; 32
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	58 d0       	rcall	.+176    	; 0xbc6 <fputc>
 b16:	3a 94       	dec	r3
 b18:	f7 cf       	rjmp	.-18     	; 0xb08 <vfprintf+0x38c>
 b1a:	f7 01       	movw	r30, r14
 b1c:	86 81       	ldd	r24, Z+6	; 0x06
 b1e:	97 81       	ldd	r25, Z+7	; 0x07
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x3aa>
 b22:	8f ef       	ldi	r24, 0xFF	; 255
 b24:	9f ef       	ldi	r25, 0xFF	; 255
 b26:	2c 96       	adiw	r28, 0x0c	; 12
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	f8 94       	cli
 b2c:	de bf       	out	0x3e, r29	; 62
 b2e:	0f be       	out	0x3f, r0	; 63
 b30:	cd bf       	out	0x3d, r28	; 61
 b32:	df 91       	pop	r29
 b34:	cf 91       	pop	r28
 b36:	1f 91       	pop	r17
 b38:	0f 91       	pop	r16
 b3a:	ff 90       	pop	r15
 b3c:	ef 90       	pop	r14
 b3e:	df 90       	pop	r13
 b40:	cf 90       	pop	r12
 b42:	bf 90       	pop	r11
 b44:	af 90       	pop	r10
 b46:	9f 90       	pop	r9
 b48:	8f 90       	pop	r8
 b4a:	7f 90       	pop	r7
 b4c:	6f 90       	pop	r6
 b4e:	5f 90       	pop	r5
 b50:	4f 90       	pop	r4
 b52:	3f 90       	pop	r3
 b54:	2f 90       	pop	r2
 b56:	08 95       	ret

00000b58 <calloc>:
 b58:	0f 93       	push	r16
 b5a:	1f 93       	push	r17
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	86 9f       	mul	r24, r22
 b62:	80 01       	movw	r16, r0
 b64:	87 9f       	mul	r24, r23
 b66:	10 0d       	add	r17, r0
 b68:	96 9f       	mul	r25, r22
 b6a:	10 0d       	add	r17, r0
 b6c:	11 24       	eor	r1, r1
 b6e:	c8 01       	movw	r24, r16
 b70:	83 dc       	rcall	.-1786   	; 0x478 <malloc>
 b72:	ec 01       	movw	r28, r24
 b74:	00 97       	sbiw	r24, 0x00	; 0
 b76:	21 f0       	breq	.+8      	; 0xb80 <calloc+0x28>
 b78:	a8 01       	movw	r20, r16
 b7a:	60 e0       	ldi	r22, 0x00	; 0
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	11 d0       	rcall	.+34     	; 0xba2 <memset>
 b80:	ce 01       	movw	r24, r28
 b82:	df 91       	pop	r29
 b84:	cf 91       	pop	r28
 b86:	1f 91       	pop	r17
 b88:	0f 91       	pop	r16
 b8a:	08 95       	ret

00000b8c <strnlen_P>:
 b8c:	fc 01       	movw	r30, r24
 b8e:	05 90       	lpm	r0, Z+
 b90:	61 50       	subi	r22, 0x01	; 1
 b92:	70 40       	sbci	r23, 0x00	; 0
 b94:	01 10       	cpse	r0, r1
 b96:	d8 f7       	brcc	.-10     	; 0xb8e <strnlen_P+0x2>
 b98:	80 95       	com	r24
 b9a:	90 95       	com	r25
 b9c:	8e 0f       	add	r24, r30
 b9e:	9f 1f       	adc	r25, r31
 ba0:	08 95       	ret

00000ba2 <memset>:
 ba2:	dc 01       	movw	r26, r24
 ba4:	01 c0       	rjmp	.+2      	; 0xba8 <memset+0x6>
 ba6:	6d 93       	st	X+, r22
 ba8:	41 50       	subi	r20, 0x01	; 1
 baa:	50 40       	sbci	r21, 0x00	; 0
 bac:	e0 f7       	brcc	.-8      	; 0xba6 <memset+0x4>
 bae:	08 95       	ret

00000bb0 <strnlen>:
 bb0:	fc 01       	movw	r30, r24
 bb2:	61 50       	subi	r22, 0x01	; 1
 bb4:	70 40       	sbci	r23, 0x00	; 0
 bb6:	01 90       	ld	r0, Z+
 bb8:	01 10       	cpse	r0, r1
 bba:	d8 f7       	brcc	.-10     	; 0xbb2 <strnlen+0x2>
 bbc:	80 95       	com	r24
 bbe:	90 95       	com	r25
 bc0:	8e 0f       	add	r24, r30
 bc2:	9f 1f       	adc	r25, r31
 bc4:	08 95       	ret

00000bc6 <fputc>:
 bc6:	0f 93       	push	r16
 bc8:	1f 93       	push	r17
 bca:	cf 93       	push	r28
 bcc:	df 93       	push	r29
 bce:	18 2f       	mov	r17, r24
 bd0:	09 2f       	mov	r16, r25
 bd2:	eb 01       	movw	r28, r22
 bd4:	8b 81       	ldd	r24, Y+3	; 0x03
 bd6:	81 fd       	sbrc	r24, 1
 bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <fputc+0x1a>
 bda:	8f ef       	ldi	r24, 0xFF	; 255
 bdc:	9f ef       	ldi	r25, 0xFF	; 255
 bde:	20 c0       	rjmp	.+64     	; 0xc20 <fputc+0x5a>
 be0:	82 ff       	sbrs	r24, 2
 be2:	10 c0       	rjmp	.+32     	; 0xc04 <fputc+0x3e>
 be4:	4e 81       	ldd	r20, Y+6	; 0x06
 be6:	5f 81       	ldd	r21, Y+7	; 0x07
 be8:	2c 81       	ldd	r18, Y+4	; 0x04
 bea:	3d 81       	ldd	r19, Y+5	; 0x05
 bec:	42 17       	cp	r20, r18
 bee:	53 07       	cpc	r21, r19
 bf0:	7c f4       	brge	.+30     	; 0xc10 <fputc+0x4a>
 bf2:	e8 81       	ld	r30, Y
 bf4:	f9 81       	ldd	r31, Y+1	; 0x01
 bf6:	9f 01       	movw	r18, r30
 bf8:	2f 5f       	subi	r18, 0xFF	; 255
 bfa:	3f 4f       	sbci	r19, 0xFF	; 255
 bfc:	39 83       	std	Y+1, r19	; 0x01
 bfe:	28 83       	st	Y, r18
 c00:	10 83       	st	Z, r17
 c02:	06 c0       	rjmp	.+12     	; 0xc10 <fputc+0x4a>
 c04:	e8 85       	ldd	r30, Y+8	; 0x08
 c06:	f9 85       	ldd	r31, Y+9	; 0x09
 c08:	81 2f       	mov	r24, r17
 c0a:	19 95       	eicall
 c0c:	89 2b       	or	r24, r25
 c0e:	29 f7       	brne	.-54     	; 0xbda <fputc+0x14>
 c10:	2e 81       	ldd	r18, Y+6	; 0x06
 c12:	3f 81       	ldd	r19, Y+7	; 0x07
 c14:	2f 5f       	subi	r18, 0xFF	; 255
 c16:	3f 4f       	sbci	r19, 0xFF	; 255
 c18:	3f 83       	std	Y+7, r19	; 0x07
 c1a:	2e 83       	std	Y+6, r18	; 0x06
 c1c:	81 2f       	mov	r24, r17
 c1e:	90 2f       	mov	r25, r16
 c20:	df 91       	pop	r29
 c22:	cf 91       	pop	r28
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	08 95       	ret

00000c2a <__ultoa_invert>:
 c2a:	fa 01       	movw	r30, r20
 c2c:	aa 27       	eor	r26, r26
 c2e:	28 30       	cpi	r18, 0x08	; 8
 c30:	51 f1       	breq	.+84     	; 0xc86 <__ultoa_invert+0x5c>
 c32:	20 31       	cpi	r18, 0x10	; 16
 c34:	81 f1       	breq	.+96     	; 0xc96 <__ultoa_invert+0x6c>
 c36:	e8 94       	clt
 c38:	6f 93       	push	r22
 c3a:	6e 7f       	andi	r22, 0xFE	; 254
 c3c:	6e 5f       	subi	r22, 0xFE	; 254
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	af 4f       	sbci	r26, 0xFF	; 255
 c46:	b1 e0       	ldi	r27, 0x01	; 1
 c48:	3e d0       	rcall	.+124    	; 0xcc6 <__ultoa_invert+0x9c>
 c4a:	b4 e0       	ldi	r27, 0x04	; 4
 c4c:	3c d0       	rcall	.+120    	; 0xcc6 <__ultoa_invert+0x9c>
 c4e:	67 0f       	add	r22, r23
 c50:	78 1f       	adc	r23, r24
 c52:	89 1f       	adc	r24, r25
 c54:	9a 1f       	adc	r25, r26
 c56:	a1 1d       	adc	r26, r1
 c58:	68 0f       	add	r22, r24
 c5a:	79 1f       	adc	r23, r25
 c5c:	8a 1f       	adc	r24, r26
 c5e:	91 1d       	adc	r25, r1
 c60:	a1 1d       	adc	r26, r1
 c62:	6a 0f       	add	r22, r26
 c64:	71 1d       	adc	r23, r1
 c66:	81 1d       	adc	r24, r1
 c68:	91 1d       	adc	r25, r1
 c6a:	a1 1d       	adc	r26, r1
 c6c:	20 d0       	rcall	.+64     	; 0xcae <__ultoa_invert+0x84>
 c6e:	09 f4       	brne	.+2      	; 0xc72 <__ultoa_invert+0x48>
 c70:	68 94       	set
 c72:	3f 91       	pop	r19
 c74:	2a e0       	ldi	r18, 0x0A	; 10
 c76:	26 9f       	mul	r18, r22
 c78:	11 24       	eor	r1, r1
 c7a:	30 19       	sub	r19, r0
 c7c:	30 5d       	subi	r19, 0xD0	; 208
 c7e:	31 93       	st	Z+, r19
 c80:	de f6       	brtc	.-74     	; 0xc38 <__ultoa_invert+0xe>
 c82:	cf 01       	movw	r24, r30
 c84:	08 95       	ret
 c86:	46 2f       	mov	r20, r22
 c88:	47 70       	andi	r20, 0x07	; 7
 c8a:	40 5d       	subi	r20, 0xD0	; 208
 c8c:	41 93       	st	Z+, r20
 c8e:	b3 e0       	ldi	r27, 0x03	; 3
 c90:	0f d0       	rcall	.+30     	; 0xcb0 <__ultoa_invert+0x86>
 c92:	c9 f7       	brne	.-14     	; 0xc86 <__ultoa_invert+0x5c>
 c94:	f6 cf       	rjmp	.-20     	; 0xc82 <__ultoa_invert+0x58>
 c96:	46 2f       	mov	r20, r22
 c98:	4f 70       	andi	r20, 0x0F	; 15
 c9a:	40 5d       	subi	r20, 0xD0	; 208
 c9c:	4a 33       	cpi	r20, 0x3A	; 58
 c9e:	18 f0       	brcs	.+6      	; 0xca6 <__ultoa_invert+0x7c>
 ca0:	49 5d       	subi	r20, 0xD9	; 217
 ca2:	31 fd       	sbrc	r19, 1
 ca4:	40 52       	subi	r20, 0x20	; 32
 ca6:	41 93       	st	Z+, r20
 ca8:	02 d0       	rcall	.+4      	; 0xcae <__ultoa_invert+0x84>
 caa:	a9 f7       	brne	.-22     	; 0xc96 <__ultoa_invert+0x6c>
 cac:	ea cf       	rjmp	.-44     	; 0xc82 <__ultoa_invert+0x58>
 cae:	b4 e0       	ldi	r27, 0x04	; 4
 cb0:	a6 95       	lsr	r26
 cb2:	97 95       	ror	r25
 cb4:	87 95       	ror	r24
 cb6:	77 95       	ror	r23
 cb8:	67 95       	ror	r22
 cba:	ba 95       	dec	r27
 cbc:	c9 f7       	brne	.-14     	; 0xcb0 <__ultoa_invert+0x86>
 cbe:	00 97       	sbiw	r24, 0x00	; 0
 cc0:	61 05       	cpc	r22, r1
 cc2:	71 05       	cpc	r23, r1
 cc4:	08 95       	ret
 cc6:	9b 01       	movw	r18, r22
 cc8:	ac 01       	movw	r20, r24
 cca:	0a 2e       	mov	r0, r26
 ccc:	06 94       	lsr	r0
 cce:	57 95       	ror	r21
 cd0:	47 95       	ror	r20
 cd2:	37 95       	ror	r19
 cd4:	27 95       	ror	r18
 cd6:	ba 95       	dec	r27
 cd8:	c9 f7       	brne	.-14     	; 0xccc <__ultoa_invert+0xa2>
 cda:	62 0f       	add	r22, r18
 cdc:	73 1f       	adc	r23, r19
 cde:	84 1f       	adc	r24, r20
 ce0:	95 1f       	adc	r25, r21
 ce2:	a0 1d       	adc	r26, r0
 ce4:	08 95       	ret

00000ce6 <_exit>:
 ce6:	f8 94       	cli

00000ce8 <__stop_program>:
 ce8:	ff cf       	rjmp	.-2      	; 0xce8 <__stop_program>
