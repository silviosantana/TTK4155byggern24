
byggern24_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  0000262e  000026c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000262e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008002c0  008002c0  00002882  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002882  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  000028de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004d1a  00000000  00000000  00002c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000165e  00000000  00000000  00007960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014d2  00000000  00000000  00008fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a50  00000000  00000000  0000a490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a10  00000000  00000000  0000aee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002b19  00000000  00000000  0000b8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000390  00000000  00000000  0000e409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 04 	jmp	0x810	; 0x810 <__ctors_end>
       4:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
       8:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__vector_2>
       c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      10:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      14:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      18:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      1c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      20:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      24:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      28:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      2c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      30:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      34:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      38:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      3c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      40:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      44:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      48:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      4c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      50:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      54:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      58:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      5c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      60:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      64:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      68:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      6c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	88 d8       	rcall	.-3824   	; 0xfffff182 <__eeprom_end+0xff7ef182>
      72:	7c 3f       	cpi	r23, 0xFC	; 252
      74:	3f 7c       	andi	r19, 0xCF	; 207
      76:	d8 88       	ldd	r13, Y+16	; 0x10
      78:	18 3c       	cpi	r17, 0xC8	; 200
      7a:	7e ff       	.word	0xff7e	; ????
      7c:	ff 7e       	andi	r31, 0xEF	; 239
      7e:	3c 18       	sub	r3, r12
      80:	1e 3f       	cpi	r17, 0xFE	; 254
      82:	7e fc       	.word	0xfc7e	; ????
      84:	fc 7e       	andi	r31, 0xEC	; 236
      86:	3f 1e       	adc	r3, r31
      88:	ff cf       	rjmp	.-2      	; 0x88 <__trampolines_end+0x18>
      8a:	9b bf       	out	0x3b, r25	; 59
      8c:	bf 9b       	sbis	0x17, 7	; 23
      8e:	cf ff       	.word	0xffcf	; ????
      90:	ff fb       	.word	0xfbff	; ????
      92:	fb df       	rcall	.-10     	; 0x8a <__trampolines_end+0x1a>
      94:	df fb       	.word	0xfbdf	; ????
      96:	fb ff       	.word	0xfffb	; ????
      98:	18 3c       	cpi	r17, 0xC8	; 200
      9a:	3c 7e       	andi	r19, 0xEC	; 236
      9c:	ff 3c       	cpi	r31, 0xCF	; 207
      9e:	3c 3c       	cpi	r19, 0xCC	; 204
      a0:	e0 38       	cpi	r30, 0x80	; 128
      a2:	0c 3e       	cpi	r16, 0xEC	; 236
      a4:	f2 33       	cpi	r31, 0x32	; 50
      a6:	19 1f       	adc	r17, r25
      a8:	1f 19       	sub	r17, r15
      aa:	33 f2       	brvs	.-116    	; 0x38 <__zero_reg__+0x37>
      ac:	3e 0c       	add	r3, r14
      ae:	38 e0       	ldi	r19, 0x08	; 8
      b0:	07 0e       	add	r0, r23
      b2:	7e 9f       	mul	r23, r30
      b4:	87 86       	std	Z+15, r8	; 0x0f
      b6:	9c 84       	ldd	r9, Y+12	; 0x0c
      b8:	84 9c       	mul	r8, r4
      ba:	86 87       	std	Z+14, r24	; 0x0e
      bc:	9f 7e       	andi	r25, 0xEF	; 239
      be:	0e 07       	cpc	r16, r30
      c0:	00 00       	nop
      c2:	c0 c0       	rjmp	.+384    	; 0x244 <font4+0x84>
      c4:	f0 f0       	brcs	.+60     	; 0x102 <__trampolines_end+0x92>
      c6:	fc fc       	.word	0xfcfc	; ????
      c8:	0c 0c       	add	r0, r12
      ca:	0f 0f       	add	r16, r31
      cc:	c3 c3       	rjmp	.+1926   	; 0x854 <ADC_read+0x6>
      ce:	ff ff       	.word	0xffff	; ????
      d0:	ff ff       	.word	0xffff	; ????
      d2:	c3 c3       	rjmp	.+1926   	; 0x85a <ADC_read+0xc>
      d4:	0f 0f       	add	r16, r31
      d6:	0c 0c       	add	r0, r12
      d8:	fc fc       	.word	0xfcfc	; ????
      da:	f0 f0       	brcs	.+60     	; 0x118 <__trampolines_end+0xa8>
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <font4+0x9e>
      de:	00 00       	nop
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	0f 0f       	add	r16, r31
      e4:	00 00       	nop
      e6:	0f 0f       	add	r16, r31
      e8:	ff ff       	.word	0xffff	; ????
      ea:	0f 0f       	add	r16, r31
      ec:	03 03       	mulsu	r16, r19
      ee:	03 03       	mulsu	r16, r19
      f0:	03 03       	mulsu	r16, r19
      f2:	03 03       	mulsu	r16, r19
      f4:	0f 0f       	add	r16, r31
      f6:	ff ff       	.word	0xffff	; ????
      f8:	0f 0f       	add	r16, r31
      fa:	00 00       	nop
      fc:	0f 0f       	add	r16, r31
      fe:	fc fc       	.word	0xfcfc	; ????
     100:	3f 3f       	cpi	r19, 0xFF	; 255
     102:	fc fc       	.word	0xfcfc	; ????
     104:	fc fc       	.word	0xfcfc	; ????
     106:	ff ff       	.word	0xffff	; ????
     108:	3f 3f       	cpi	r19, 0xFF	; 255
     10a:	3c 3c       	cpi	r19, 0xCC	; 204
     10c:	f0 f0       	brcs	.+60     	; 0x14a <__trampolines_end+0xda>
     10e:	30 30       	cpi	r19, 0x00	; 0
     110:	30 30       	cpi	r19, 0x00	; 0
     112:	f0 f0       	brcs	.+60     	; 0x150 <__trampolines_end+0xe0>
     114:	3c 3c       	cpi	r19, 0xCC	; 204
     116:	3f 3f       	cpi	r19, 0xFF	; 255
     118:	ff ff       	.word	0xffff	; ????
     11a:	fc fc       	.word	0xfcfc	; ????
     11c:	fc fc       	.word	0xfcfc	; ????
     11e:	3f 3f       	cpi	r19, 0xFF	; 255
     120:	00 00       	nop
     122:	00 00       	nop
     124:	3f 3f       	cpi	r19, 0xFF	; 255
     126:	c3 c3       	rjmp	.+1926   	; 0x8ae <send_multi_board+0xc>
     128:	c0 c0       	rjmp	.+384    	; 0x2aa <font4+0xea>
     12a:	c0 c0       	rjmp	.+384    	; 0x2ac <font4+0xec>
     12c:	c3 c3       	rjmp	.+1926   	; 0x8b4 <send_multi_board+0x12>
     12e:	c0 c0       	rjmp	.+384    	; 0x2b0 <font4+0xf0>
     130:	c0 c0       	rjmp	.+384    	; 0x2b2 <font4+0xf2>
     132:	c3 c3       	rjmp	.+1926   	; 0x8ba <send_multi_board+0x18>
     134:	c0 c0       	rjmp	.+384    	; 0x2b6 <font4+0xf6>
     136:	c0 c0       	rjmp	.+384    	; 0x2b8 <font4+0xf8>
     138:	c3 c3       	rjmp	.+1926   	; 0x8c0 <send_multi_board+0x1e>
     13a:	3f 3f       	cpi	r19, 0xFF	; 255
     13c:	00 00       	nop
     13e:	00 00       	nop
     140:	f8 fc       	.word	0xfcf8	; ????
     142:	fe ff       	.word	0xfffe	; ????
     144:	ff ff       	.word	0xffff	; ????
     146:	3f 3f       	cpi	r19, 0xFF	; 255
     148:	3f 3f       	cpi	r19, 0xFF	; 255
     14a:	3f 3f       	cpi	r19, 0xFF	; 255
     14c:	3f bf       	out	0x3f, r19	; 63
     14e:	bf bf       	out	0x3f, r27	; 63
     150:	bf bf       	out	0x3f, r27	; 63
     152:	bf 3f       	cpi	r27, 0xFF	; 255
     154:	3f 3f       	cpi	r19, 0xFF	; 255
     156:	3f 3f       	cpi	r19, 0xFF	; 255
     158:	3f 3f       	cpi	r19, 0xFF	; 255
     15a:	ff ff       	.word	0xffff	; ????
     15c:	ff fe       	.word	0xfeff	; ????
     15e:	fc f8       	.word	0xf8fc	; ????
     160:	ff ff       	.word	0xffff	; ????
     162:	ff ff       	.word	0xffff	; ????
     164:	ff ff       	.word	0xffff	; ????
     166:	00 e0       	ldi	r16, 0x00	; 0
     168:	fc fe       	.word	0xfefc	; ????
     16a:	ff ff       	.word	0xffff	; ????
     16c:	ff ff       	.word	0xffff	; ????
     16e:	ff ff       	.word	0xffff	; ????
     170:	ff ff       	.word	0xffff	; ????
     172:	ff ff       	.word	0xffff	; ????
     174:	ff ff       	.word	0xffff	; ????
     176:	fe fc       	.word	0xfcfe	; ????
     178:	e0 00       	.word	0x00e0	; ????
     17a:	ff ff       	.word	0xffff	; ????
     17c:	ff ff       	.word	0xffff	; ????
     17e:	ff ff       	.word	0xffff	; ????
     180:	ff ff       	.word	0xffff	; ????
     182:	ff ff       	.word	0xffff	; ????
     184:	ff ff       	.word	0xffff	; ????
     186:	00 07       	cpc	r16, r16
     188:	3f 7f       	andi	r19, 0xFF	; 255
     18a:	ff ff       	.word	0xffff	; ????
     18c:	ff ff       	.word	0xffff	; ????
     18e:	ff ff       	.word	0xffff	; ????
     190:	ff ff       	.word	0xffff	; ????
     192:	ff ff       	.word	0xffff	; ????
     194:	ff ff       	.word	0xffff	; ????
     196:	7f 3f       	cpi	r23, 0xFF	; 255
     198:	07 00       	.word	0x0007	; ????
     19a:	ff ff       	.word	0xffff	; ????
     19c:	ff ff       	.word	0xffff	; ????
     19e:	ff ff       	.word	0xffff	; ????
     1a0:	1f 3f       	cpi	r17, 0xFF	; 255
     1a2:	7f ff       	.word	0xff7f	; ????
     1a4:	ff ff       	.word	0xffff	; ????
     1a6:	fc fc       	.word	0xfcfc	; ????
     1a8:	fc fc       	.word	0xfcfc	; ????
     1aa:	fc fc       	.word	0xfcfc	; ????
     1ac:	fc fd       	.word	0xfdfc	; ????
     1ae:	fd fd       	.word	0xfdfd	; ????
     1b0:	fd fd       	.word	0xfdfd	; ????
     1b2:	fd fc       	.word	0xfcfd	; ????
     1b4:	fc fc       	.word	0xfcfc	; ????
     1b6:	fc fc       	.word	0xfcfc	; ????
     1b8:	fc fc       	.word	0xfcfc	; ????
     1ba:	ff ff       	.word	0xffff	; ????
     1bc:	ff 7f       	andi	r31, 0xFF	; 255
     1be:	3f 1f       	adc	r19, r31

000001c0 <font4>:
     1c0:	00 00 00 00 00 5c 00 00 0c 00 0c 00 7c 28 7c 28     .....\......|(|(
     1d0:	58 dc 68 00 24 10 48 00 28 54 28 40 00 0c 00 00     X.h.$.H.(T(@....
     1e0:	00 78 84 00 84 78 00 00 54 38 54 00 10 7c 10 00     .x...x..T8T..|..
     1f0:	80 40 00 00 10 10 10 00 00 40 00 00 60 10 0c 00     .@.......@..`...
     200:	38 54 38 00 48 7c 40 00 48 64 58 00 44 54 2c 00     8T8.H|@.HdX.DT,.
     210:	1c 10 7c 00 5c 54 24 00 38 54 24 00 64 14 0c 00     ..|.\T$.8T$.d...
     220:	68 54 2c 00 48 54 38 00 00 48 00 00 80 48 00 00     hT,.HT8..H...H..
     230:	10 28 44 00 28 28 28 00 44 28 10 00 04 54 08 00     .(D.(((.D(...T..
     240:	38 44 5c 00 78 14 78 00 7c 54 28 00 38 44 28 00     8D\.x.x.|T(.8D(.
     250:	7c 44 38 00 7c 54 44 00 7c 14 04 00 38 44 74 00     |D8.|TD.|...8Dt.
     260:	7c 10 7c 00 44 7c 44 00 20 40 3c 00 7c 10 6c 00     |.|.D|D. @<.|.l.
     270:	7c 40 40 00 7c 18 7c 00 78 10 3c 00 38 44 38 00     |@@.|.|.x.<.8D8.
     280:	7c 14 08 00 38 44 b8 00 7c 14 68 00 48 54 24 00     |...8D..|.h.HT$.
     290:	04 7c 04 00 7c 40 7c 00 3c 60 3c 00 7c 30 7c 00     .|..|@|.<`<.|0|.
     2a0:	6c 10 6c 00 0c 70 0c 00 64 54 4c 00 00 7c 44 00     l.l..p..dTL..|D.
     2b0:	0c 10 60 00 44 7c 00 00 08 04 08 00 80 80 80 00     ..`.D|..........
     2c0:	00 04 08 00 30 48 78 00 7c 48 30 00 30 48 48 00     ....0Hx.|H0.0HH.
     2d0:	30 48 7c 00 30 68 50 00 10 78 14 00 90 a8 78 00     0H|.0hP..x....x.
     2e0:	7c 08 70 00 50 74 40 00 80 80 74 00 7c 10 68 00     |.p.Pt@...t.|.h.
     2f0:	44 7c 40 00 78 10 78 00 78 08 70 00 30 48 30 00     D|@.x.x.x.p.0H0.
     300:	f8 28 10 00 30 48 f8 00 78 10 08 00 50 58 28 00     .(..0H..x...PX(.
     310:	08 3c 48 00 38 40 78 00 38 40 38 00 78 20 78 00     .<H.8@x.8@8.x x.
     320:	48 30 48 00 98 a0 78 00 48 68 58 00 10 78 84 00     H0H...x.HhX..x..
     330:	00 7c 00 00 84 78 10 00 08 04 08 04                 .|...x......

0000033c <font5>:
     33c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     34c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     35c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     36c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     37c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     38c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     39c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     3ac:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     3bc:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     3cc:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     3dc:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     3ec:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     3fc:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     40c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     41c:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     42c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     43c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     44c:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     45c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     46c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     47c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     48c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     49c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     4ac:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     4bc:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     4cc:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     4dc:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     4ec:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     4fc:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     50c:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

00000517 <font8>:
	...
     51f:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     52f:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     53f:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     54f:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     55f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     56f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     57f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     58f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     59f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     5af:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     5bf:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     5cf:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     5df:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     5ef:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     5ff:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     60f:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     61f:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     62f:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     63f:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     64f:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     65f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     66f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     67f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     68f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     69f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     6af:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     6bf:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     6cf:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     6df:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     6ef:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     6ff:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     70f:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     71f:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     72f:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     73f:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     74f:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     75f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     76f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     77f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     78f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     79f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     7af:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     7bf:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     7cf:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     7df:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     7ef:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     7ff:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000810 <__ctors_end>:
     810:	11 24       	eor	r1, r1
     812:	1f be       	out	0x3f, r1	; 63
     814:	cf ef       	ldi	r28, 0xFF	; 255
     816:	d4 e0       	ldi	r29, 0x04	; 4
     818:	de bf       	out	0x3e, r29	; 62
     81a:	cd bf       	out	0x3d, r28	; 61

0000081c <__do_copy_data>:
     81c:	12 e0       	ldi	r17, 0x02	; 2
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b1 e0       	ldi	r27, 0x01	; 1
     822:	ee e2       	ldi	r30, 0x2E	; 46
     824:	f6 e2       	ldi	r31, 0x26	; 38
     826:	02 c0       	rjmp	.+4      	; 0x82c <__do_copy_data+0x10>
     828:	05 90       	lpm	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	a0 3c       	cpi	r26, 0xC0	; 192
     82e:	b1 07       	cpc	r27, r17
     830:	d9 f7       	brne	.-10     	; 0x828 <__do_copy_data+0xc>

00000832 <__do_clear_bss>:
     832:	22 e0       	ldi	r18, 0x02	; 2
     834:	a0 ec       	ldi	r26, 0xC0	; 192
     836:	b2 e0       	ldi	r27, 0x02	; 2
     838:	01 c0       	rjmp	.+2      	; 0x83c <.do_clear_bss_start>

0000083a <.do_clear_bss_loop>:
     83a:	1d 92       	st	X+, r1

0000083c <.do_clear_bss_start>:
     83c:	a1 3d       	cpi	r26, 0xD1	; 209
     83e:	b2 07       	cpc	r27, r18
     840:	e1 f7       	brne	.-8      	; 0x83a <.do_clear_bss_loop>
     842:	0e 94 da 09 	call	0x13b4	; 0x13b4 <main>
     846:	0c 94 15 13 	jmp	0x262a	; 0x262a <_exit>

0000084a <__bad_interrupt>:
     84a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000084e <ADC_read>:
	{
		return 0;
	} else 
	{
		volatile char *ext_adc = (char *) 0x1400; // Start address for the SRAM
		uint8_t val = chn + 3;
     84e:	8d 5f       	subi	r24, 0xFD	; 253
		
		ext_adc[0] = val;
     850:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     854:	85 ef       	ldi	r24, 0xF5	; 245
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <ADC_read+0xa>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <ADC_read+0x10>
     85e:	00 00       	nop
		_delay_us(200);
		return ext_adc[0];
     860:	80 91 00 14 	lds	r24, 0x1400
	}
	

     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 95       	ret

00000868 <send_input_info>:
#include "joystick.h"
#include "can_driver.h"
#include "oled_driver.h"

void send_input_info()
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	2a 97       	sbiw	r28, 0x0a	; 10
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	msg.id = 1;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	89 83       	std	Y+1, r24	; 0x01
	msg.data[0] = gamemode;
     880:	90 91 c4 02 	lds	r25, 0x02C4
     884:	9b 83       	std	Y+3, r25	; 0x03
	msg.length = 1;
     886:	8a 83       	std	Y+2, r24	; 0x02
	
	can_send_msg(&msg);
     888:	ce 01       	movw	r24, r28
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	0e 94 f8 07 	call	0xff0	; 0xff0 <can_send_msg>
}
     890:	2a 96       	adiw	r28, 0x0a	; 10
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <send_multi_board>:

void send_multi_board()
{
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	2a 97       	sbiw	r28, 0x0a	; 10
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
	struct Position j_pos;
	uint8_t sliderL;
	uint8_t sliderR = 0;
	uint8_t r_button, l_button;
	
	j_pos = get_joystick_position();
     8c2:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <get_joystick_position>
     8c6:	c6 2e       	mov	r12, r22
     8c8:	d8 2e       	mov	r13, r24
	sliderL = get_left_slider();
     8ca:	0e 94 a5 09 	call	0x134a	; 0x134a <get_left_slider>
     8ce:	e8 2e       	mov	r14, r24
	sliderR = get_right_slider();
     8d0:	0e 94 bd 09 	call	0x137a	; 0x137a <get_right_slider>
     8d4:	f8 2e       	mov	r15, r24
	direction dir = get_joystick_direction();
     8d6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <get_joystick_direction>
     8da:	08 2f       	mov	r16, r24
	r_button = get_joystick_right_button();
     8dc:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <get_joystick_right_button>
     8e0:	18 2f       	mov	r17, r24
	l_button = get_joystick_left_button();
     8e2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <get_joystick_left_button>
	can_message msg;
	msg.id = 1;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	89 83       	std	Y+1, r24	; 0x01
	msg.data[0] = j_pos.x;
     8ea:	cb 82       	std	Y+3, r12	; 0x03
	msg.data[1] = j_pos.y;
     8ec:	dc 82       	std	Y+4, r13	; 0x04
	uint8_t sliderL;
	uint8_t sliderR = 0;
	uint8_t r_button, l_button;
	
	j_pos = get_joystick_position();
	sliderL = get_left_slider();
     8ee:	ed 82       	std	Y+5, r14	; 0x05
	sliderR = get_right_slider();
     8f0:	fe 82       	std	Y+6, r15	; 0x06
	direction dir = get_joystick_direction();
     8f2:	0f 83       	std	Y+7, r16	; 0x07
	r_button = get_joystick_right_button();
     8f4:	18 87       	std	Y+8, r17	; 0x08
	msg.data[1] = j_pos.y;
	msg.data[2] = sliderL;
	msg.data[3] = sliderR;
	msg.data[4] = dir;
	msg.data[5] = r_button;
	msg.length = 6;
     8f6:	86 e0       	ldi	r24, 0x06	; 6
     8f8:	8a 83       	std	Y+2, r24	; 0x02
	
	can_send_msg(&msg);
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	0e 94 f8 07 	call	0xff0	; 0xff0 <can_send_msg>
}
     902:	2a 96       	adiw	r28, 0x0a	; 10
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	08 95       	ret

00000920 <music_init>:
	oled_ingame_display(score);
}

void music_init()
{
	set_bit(DDRB, PB2);
     920:	ba 9a       	sbi	0x17, 2	; 23
	set_bit(DDRB, PB3);
     922:	bb 9a       	sbi	0x17, 3	; 23
	clear_bit(PORTB, PB2);
     924:	c2 98       	cbi	0x18, 2	; 24
	clear_bit(PORTB, PB3);
     926:	c3 98       	cbi	0x18, 3	; 24
     928:	08 95       	ret

0000092a <play_music>:
}

void play_music(int song)
{
	if (song == 0)
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	11 f4       	brne	.+4      	; 0x932 <play_music+0x8>
		clear_bit(PORTB, PB2);
     92e:	c2 98       	cbi	0x18, 2	; 24
     930:	03 c0       	rjmp	.+6      	; 0x938 <play_music+0xe>
	else if (song == 1)
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	11 f4       	brne	.+4      	; 0x93a <play_music+0x10>
		set_bit(PORTB, PB2);
     936:	c2 9a       	sbi	0x18, 2	; 24
	else return;
	set_bit(PORTB, PB3);
     938:	c3 9a       	sbi	0x18, 3	; 24
     93a:	08 95       	ret

0000093c <menu_set_state>:
	}
}

//set state of menu
void menu_set_state(menu* current_state, int* arrow_max, int* arrow_pos)
{
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	7b 01       	movw	r14, r22
     94c:	8a 01       	movw	r16, r20
	printf("Setting up state!\n\r");
     94e:	80 e1       	ldi	r24, 0x10	; 16
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
	oled_reset();
     95a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <oled_reset>
	int s = current_state->val;
	
	switch (s)
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	88 81       	ld	r24, Y
     964:	99 81       	ldd	r25, Y+1	; 0x01
     966:	83 30       	cpi	r24, 0x03	; 3
     968:	91 05       	cpc	r25, r1
     96a:	09 f4       	brne	.+2      	; 0x96e <menu_set_state+0x32>
     96c:	7a c0       	rjmp	.+244    	; 0xa62 <menu_set_state+0x126>
     96e:	3c f4       	brge	.+14     	; 0x97e <menu_set_state+0x42>
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	91 05       	cpc	r25, r1
     974:	61 f0       	breq	.+24     	; 0x98e <menu_set_state+0x52>
     976:	02 97       	sbiw	r24, 0x02	; 2
     978:	09 f4       	brne	.+2      	; 0x97c <menu_set_state+0x40>
     97a:	4f c0       	rjmp	.+158    	; 0xa1a <menu_set_state+0xde>
     97c:	c8 c0       	rjmp	.+400    	; 0xb0e <menu_set_state+0x1d2>
     97e:	84 30       	cpi	r24, 0x04	; 4
     980:	91 05       	cpc	r25, r1
     982:	09 f4       	brne	.+2      	; 0x986 <menu_set_state+0x4a>
     984:	99 c0       	rjmp	.+306    	; 0xab8 <menu_set_state+0x17c>
     986:	05 97       	sbiw	r24, 0x05	; 5
     988:	09 f4       	brne	.+2      	; 0x98c <menu_set_state+0x50>
     98a:	ac c0       	rjmp	.+344    	; 0xae4 <menu_set_state+0x1a8>
     98c:	c0 c0       	rjmp	.+384    	; 0xb0e <menu_set_state+0x1d2>
	{
		case 1: // Menu
			printf("Menu on %d,100 for %s \n\r", *arrow_pos, current_state->name);
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	8f 93       	push	r24
     992:	8a 81       	ldd	r24, Y+2	; 0x02
     994:	8f 93       	push	r24
     996:	f8 01       	movw	r30, r16
     998:	81 81       	ldd	r24, Z+1	; 0x01
     99a:	8f 93       	push	r24
     99c:	80 81       	ld	r24, Z
     99e:	8f 93       	push	r24
     9a0:	84 e2       	ldi	r24, 0x24	; 36
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	9f 93       	push	r25
     9a6:	8f 93       	push	r24
     9a8:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
			oled_pos(*arrow_pos,100);
     9ac:	64 e6       	ldi	r22, 0x64	; 100
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 81       	ld	r24, Z
     9b2:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print_special_char(5);
     9b6:	85 e0       	ldi	r24, 0x05	; 5
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
			oled_pos(0,0);
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(current_state->name, 3);
     9c6:	63 e0       	ldi	r22, 0x03	; 3
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	9b 81       	ldd	r25, Y+3	; 0x03
     9ce:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			oled_pos(2,0);
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(current_state->children[0]->name, 2);
     9da:	ee 81       	ldd	r30, Y+6	; 0x06
     9dc:	ff 81       	ldd	r31, Y+7	; 0x07
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	82 81       	ldd	r24, Z+2	; 0x02
     9e4:	93 81       	ldd	r25, Z+3	; 0x03
     9e6:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			oled_pos(3,0);
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(current_state->children[1]->name, 2);
     9f2:	e8 85       	ldd	r30, Y+8	; 0x08
     9f4:	f9 85       	ldd	r31, Y+9	; 0x09
     9f6:	62 e0       	ldi	r22, 0x02	; 2
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	82 81       	ldd	r24, Z+2	; 0x02
     9fc:	93 81       	ldd	r25, Z+3	; 0x03
     9fe:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			*arrow_max = 3;
     a02:	83 e0       	ldi	r24, 0x03	; 3
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	f7 01       	movw	r30, r14
     a08:	91 83       	std	Z+1, r25	; 0x01
     a0a:	80 83       	st	Z, r24
			break;
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	82 c0       	rjmp	.+260    	; 0xb1e <menu_set_state+0x1e2>
		
		case 2: // Start Game
			send_input_info();
     a1a:	0e 94 34 04 	call	0x868	; 0x868 <send_input_info>
		  	oled_animate_ntnu();
     a1e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <oled_animate_ntnu>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a22:	ff ef       	ldi	r31, 0xFF	; 255
     a24:	2f ef       	ldi	r18, 0xFF	; 255
     a26:	8e e0       	ldi	r24, 0x0E	; 14
     a28:	f1 50       	subi	r31, 0x01	; 1
     a2a:	20 40       	sbci	r18, 0x00	; 0
     a2c:	80 40       	sbci	r24, 0x00	; 0
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <menu_set_state+0xec>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <menu_set_state+0xf6>
     a32:	00 00       	nop
		 	_delay_ms(1000);
		 	play_music(1);
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 95 04 	call	0x92a	; 0x92a <play_music>
		  	oled_animate_mario_large();
     a3c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <oled_animate_mario_large>
		  	play_music(0);
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 95 04 	call	0x92a	; 0x92a <play_music>
			printf("Start Game\n\r");
     a48:	8d e3       	ldi	r24, 0x3D	; 61
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	9f 93       	push	r25
     a4e:	8f 93       	push	r24
     a50:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
			oled_ingame_display(0);
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 a7 0c 	call	0x194e	; 0x194e <oled_ingame_display>
			break;
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	5e c0       	rjmp	.+188    	; 0xb1e <menu_set_state+0x1e2>
		
		case 3: // Set Mode
			printf("Set Mode\n\r");
     a62:	8a e4       	ldi	r24, 0x4A	; 74
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	9f 93       	push	r25
     a68:	8f 93       	push	r24
     a6a:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
			oled_pos(0,0);
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(current_state->name, 3);
     a76:	63 e0       	ldi	r22, 0x03	; 3
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	9b 81       	ldd	r25, Y+3	; 0x03
     a7e:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			oled_pos(2,0);
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(current_state->children[0]->name, 2);
     a8a:	ee 81       	ldd	r30, Y+6	; 0x06
     a8c:	ff 81       	ldd	r31, Y+7	; 0x07
     a8e:	62 e0       	ldi	r22, 0x02	; 2
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			oled_pos(3,0);
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(current_state->children[1]->name, 2);
     aa2:	e8 85       	ldd	r30, Y+8	; 0x08
     aa4:	f9 85       	ldd	r31, Y+9	; 0x09
     aa6:	62 e0       	ldi	r22, 0x02	; 2
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	82 81       	ldd	r24, Z+2	; 0x02
     aac:	93 81       	ldd	r25, Z+3	; 0x03
     aae:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			break;
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	33 c0       	rjmp	.+102    	; 0xb1e <menu_set_state+0x1e2>
		
		case 4: // Use Slider
			gamemode = 1;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 c4 02 	sts	0x02C4, r24
			printf("Use Slider\n\r");
     abe:	85 e5       	ldi	r24, 0x55	; 85
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	9f 93       	push	r25
     ac4:	8f 93       	push	r24
     ac6:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
			oled_pos(0,0);
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(current_state->name, 3);
     ad2:	63 e0       	ldi	r22, 0x03	; 3
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	9b 81       	ldd	r25, Y+3	; 0x03
     ada:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			break;
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	1d c0       	rjmp	.+58     	; 0xb1e <menu_set_state+0x1e2>
		
		case 5: // Use Joystick
			gamemode = 0;
     ae4:	10 92 c4 02 	sts	0x02C4, r1
			printf("Use Joystick\n\r");
     ae8:	82 e6       	ldi	r24, 0x62	; 98
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	9f 93       	push	r25
     aee:	8f 93       	push	r24
     af0:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
			oled_pos(0,0);
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(current_state->name, 3);
     afc:	63 e0       	ldi	r22, 0x03	; 3
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
     b02:	9b 81       	ldd	r25, Y+3	; 0x03
     b04:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			break;
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	08 c0       	rjmp	.+16     	; 0xb1e <menu_set_state+0x1e2>
		
		default:
			printf("No state \n\r");
     b0e:	81 e7       	ldi	r24, 0x71	; 113
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	9f 93       	push	r25
     b14:	8f 93       	push	r24
     b16:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
			break;
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
	}
	main_state = current_state;
     b1e:	d0 93 c6 02 	sts	0x02C6, r29
     b22:	c0 93 c5 02 	sts	0x02C5, r28
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	08 95       	ret

00000b34 <menu_state_machine_setup>:
	
	can_send_msg(&msg);
}

void menu_state_machine_setup(int* arrow_max, int* arrow_pos)
{
     b34:	8f 92       	push	r8
     b36:	9f 92       	push	r9
     b38:	af 92       	push	r10
     b3a:	bf 92       	push	r11
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	6c 01       	movw	r12, r24
     b4e:	5b 01       	movw	r10, r22
	menu* state2 = NULL; // Start Game
	menu* state3 = NULL; // Set Mode
	menu* state4 = NULL; // Use Slider
	menu* state5 = NULL; // Use Joystick
	
	state1 = (menu*) malloc(sizeof(menu));
     b50:	80 e1       	ldi	r24, 0x10	; 16
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <malloc>
     b58:	ec 01       	movw	r28, r24
	state2 = (menu*) malloc(sizeof(menu));
     b5a:	80 e1       	ldi	r24, 0x10	; 16
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <malloc>
     b62:	7c 01       	movw	r14, r24
	state3 = (menu*) malloc(sizeof(menu));
     b64:	80 e1       	ldi	r24, 0x10	; 16
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <malloc>
     b6c:	8c 01       	movw	r16, r24
	state4 = (menu*) malloc(sizeof(menu));
     b6e:	80 e1       	ldi	r24, 0x10	; 16
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <malloc>
     b76:	4c 01       	movw	r8, r24
	state5 = (menu*) malloc(sizeof(menu));
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <malloc>
     b80:	fc 01       	movw	r30, r24

	state1->name = "Menu";
     b82:	8d e7       	ldi	r24, 0x7D	; 125
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	9b 83       	std	Y+3, r25	; 0x03
     b88:	8a 83       	std	Y+2, r24	; 0x02
	state1->val = 1;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	99 83       	std	Y+1, r25	; 0x01
     b90:	88 83       	st	Y, r24
	state1->parent = state1;
     b92:	dd 83       	std	Y+5, r29	; 0x05
     b94:	cc 83       	std	Y+4, r28	; 0x04
	state1->children[0] = state2;
     b96:	ff 82       	std	Y+7, r15	; 0x07
     b98:	ee 82       	std	Y+6, r14	; 0x06
	state1->children[1] = state3;
     b9a:	19 87       	std	Y+9, r17	; 0x09
     b9c:	08 87       	std	Y+8, r16	; 0x08
	
	state2->name = "Start Game";
     b9e:	82 e8       	ldi	r24, 0x82	; 130
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	d7 01       	movw	r26, r14
     ba4:	13 96       	adiw	r26, 0x03	; 3
     ba6:	9c 93       	st	X, r25
     ba8:	8e 93       	st	-X, r24
     baa:	12 97       	sbiw	r26, 0x02	; 2
	state2->val = 2;
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	9c 93       	st	X, r25
     bb4:	8e 93       	st	-X, r24
	state2->parent = state2;
     bb6:	15 96       	adiw	r26, 0x05	; 5
     bb8:	fc 92       	st	X, r15
     bba:	ee 92       	st	-X, r14
     bbc:	14 97       	sbiw	r26, 0x04	; 4
	state2->children[0] = state2;
     bbe:	17 96       	adiw	r26, 0x07	; 7
     bc0:	fc 92       	st	X, r15
     bc2:	ee 92       	st	-X, r14
     bc4:	16 97       	sbiw	r26, 0x06	; 6
	
	state3->name = "Set Motor Controller";
     bc6:	8d e8       	ldi	r24, 0x8D	; 141
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	d8 01       	movw	r26, r16
     bcc:	13 96       	adiw	r26, 0x03	; 3
     bce:	9c 93       	st	X, r25
     bd0:	8e 93       	st	-X, r24
     bd2:	12 97       	sbiw	r26, 0x02	; 2
	state3->val = 3;
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	11 96       	adiw	r26, 0x01	; 1
     bda:	9c 93       	st	X, r25
     bdc:	8e 93       	st	-X, r24
	state3->parent = state1;
     bde:	15 96       	adiw	r26, 0x05	; 5
     be0:	dc 93       	st	X, r29
     be2:	ce 93       	st	-X, r28
     be4:	14 97       	sbiw	r26, 0x04	; 4
	state3->children[0] = state4;
     be6:	17 96       	adiw	r26, 0x07	; 7
     be8:	9c 92       	st	X, r9
     bea:	8e 92       	st	-X, r8
     bec:	16 97       	sbiw	r26, 0x06	; 6
	state3->children[1] = state5;
     bee:	19 96       	adiw	r26, 0x09	; 9
     bf0:	fc 93       	st	X, r31
     bf2:	ee 93       	st	-X, r30
     bf4:	18 97       	sbiw	r26, 0x08	; 8
	
	state4->name = "Slider";
     bf6:	82 ea       	ldi	r24, 0xA2	; 162
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	d4 01       	movw	r26, r8
     bfc:	13 96       	adiw	r26, 0x03	; 3
     bfe:	9c 93       	st	X, r25
     c00:	8e 93       	st	-X, r24
     c02:	12 97       	sbiw	r26, 0x02	; 2
	state4->val = 4;
     c04:	84 e0       	ldi	r24, 0x04	; 4
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	9c 93       	st	X, r25
     c0c:	8e 93       	st	-X, r24
	state4->parent = state3;
     c0e:	15 96       	adiw	r26, 0x05	; 5
     c10:	1c 93       	st	X, r17
     c12:	0e 93       	st	-X, r16
     c14:	14 97       	sbiw	r26, 0x04	; 4
	
	state5->name = "Joystick";
     c16:	89 ea       	ldi	r24, 0xA9	; 169
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	93 83       	std	Z+3, r25	; 0x03
     c1c:	82 83       	std	Z+2, r24	; 0x02
	state5->val = 5;
     c1e:	85 e0       	ldi	r24, 0x05	; 5
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	91 83       	std	Z+1, r25	; 0x01
     c24:	80 83       	st	Z, r24
	state5->parent = state3;
     c26:	15 83       	std	Z+5, r17	; 0x05
     c28:	04 83       	std	Z+4, r16	; 0x04
	
	menu_set_state(state1, arrow_max, arrow_pos);
     c2a:	a5 01       	movw	r20, r10
     c2c:	b6 01       	movw	r22, r12
     c2e:	ce 01       	movw	r24, r28
     c30:	0e 94 9e 04 	call	0x93c	; 0x93c <menu_set_state>
}
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	08 95       	ret

00000c4e <menu_move_arrow>:
	main_state = current_state;
}

//move menu arrow to navigate among menu levels
void menu_move_arrow(direction* dir, int* arrow_max, int* arrow_pos)
{
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	8b 01       	movw	r16, r22
     c58:	ea 01       	movw	r28, r20
	//printf("direction %d\n\r", *dir);
	direction s = *dir;
	switch (s)
     c5a:	fc 01       	movw	r30, r24
     c5c:	80 81       	ld	r24, Z
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	59 f1       	breq	.+86     	; 0xcb8 <menu_move_arrow+0x6a>
     c62:	18 f4       	brcc	.+6      	; 0xc6a <menu_move_arrow+0x1c>
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	41 f0       	breq	.+16     	; 0xc78 <menu_move_arrow+0x2a>
     c68:	8f c0       	rjmp	.+286    	; 0xd88 <menu_move_arrow+0x13a>
     c6a:	83 30       	cpi	r24, 0x03	; 3
     c6c:	09 f4       	brne	.+2      	; 0xc70 <menu_move_arrow+0x22>
     c6e:	4a c0       	rjmp	.+148    	; 0xd04 <menu_move_arrow+0xb6>
     c70:	84 30       	cpi	r24, 0x04	; 4
     c72:	09 f4       	brne	.+2      	; 0xc76 <menu_move_arrow+0x28>
     c74:	66 c0       	rjmp	.+204    	; 0xd42 <menu_move_arrow+0xf4>
     c76:	88 c0       	rjmp	.+272    	; 0xd88 <menu_move_arrow+0x13a>
	{
		case LEFT:
			menu_set_state(main_state->parent, *arrow_max, *arrow_pos);
     c78:	48 81       	ld	r20, Y
     c7a:	59 81       	ldd	r21, Y+1	; 0x01
     c7c:	fb 01       	movw	r30, r22
     c7e:	60 81       	ld	r22, Z
     c80:	71 81       	ldd	r23, Z+1	; 0x01
     c82:	e0 91 c5 02 	lds	r30, 0x02C5
     c86:	f0 91 c6 02 	lds	r31, 0x02C6
     c8a:	84 81       	ldd	r24, Z+4	; 0x04
     c8c:	95 81       	ldd	r25, Z+5	; 0x05
     c8e:	0e 94 9e 04 	call	0x93c	; 0x93c <menu_set_state>
			printf("%s\n\r", main_state->name);
     c92:	e0 91 c5 02 	lds	r30, 0x02C5
     c96:	f0 91 c6 02 	lds	r31, 0x02C6
     c9a:	83 81       	ldd	r24, Z+3	; 0x03
     c9c:	8f 93       	push	r24
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	8f 93       	push	r24
     ca2:	82 eb       	ldi	r24, 0xB2	; 178
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
			break;
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	68 c0       	rjmp	.+208    	; 0xd88 <menu_move_arrow+0x13a>
		case RIGHT:
			menu_set_state(main_state->children[*arrow_pos - 2], *arrow_max, *arrow_pos);
     cb8:	48 81       	ld	r20, Y
     cba:	59 81       	ldd	r21, Y+1	; 0x01
     cbc:	fb 01       	movw	r30, r22
     cbe:	60 81       	ld	r22, Z
     cc0:	71 81       	ldd	r23, Z+1	; 0x01
     cc2:	80 91 c5 02 	lds	r24, 0x02C5
     cc6:	90 91 c6 02 	lds	r25, 0x02C6
     cca:	fa 01       	movw	r30, r20
     ccc:	31 96       	adiw	r30, 0x01	; 1
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	e8 0f       	add	r30, r24
     cd4:	f9 1f       	adc	r31, r25
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	0e 94 9e 04 	call	0x93c	; 0x93c <menu_set_state>
			printf("%s\n\r", main_state->name);
     cde:	e0 91 c5 02 	lds	r30, 0x02C5
     ce2:	f0 91 c6 02 	lds	r31, 0x02C6
     ce6:	83 81       	ldd	r24, Z+3	; 0x03
     ce8:	8f 93       	push	r24
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	8f 93       	push	r24
     cee:	82 eb       	ldi	r24, 0xB2	; 178
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	9f 93       	push	r25
     cf4:	8f 93       	push	r24
     cf6:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
			break;
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	42 c0       	rjmp	.+132    	; 0xd88 <menu_move_arrow+0x13a>
		case UP:
			oled_pos(*arrow_pos,100);
     d04:	64 e6       	ldi	r22, 0x64	; 100
     d06:	88 81       	ld	r24, Y
     d08:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(" ", 3);
     d0c:	63 e0       	ldi	r22, 0x03	; 3
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	87 eb       	ldi	r24, 0xB7	; 183
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			(*arrow_pos)--;
     d18:	88 81       	ld	r24, Y
     d1a:	99 81       	ldd	r25, Y+1	; 0x01
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	99 83       	std	Y+1, r25	; 0x01
     d20:	88 83       	st	Y, r24
			if (*arrow_pos == 1)
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	29 f4       	brne	.+10     	; 0xd30 <menu_move_arrow+0xe2>
			{
				*arrow_pos = *arrow_max;
     d26:	f8 01       	movw	r30, r16
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	99 83       	std	Y+1, r25	; 0x01
     d2e:	88 83       	st	Y, r24
			}
			oled_pos(*arrow_pos,100);
     d30:	64 e6       	ldi	r22, 0x64	; 100
     d32:	88 81       	ld	r24, Y
     d34:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print_special_char(5);
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
			break;
     d40:	23 c0       	rjmp	.+70     	; 0xd88 <menu_move_arrow+0x13a>
		case DOWN:
			oled_pos(*arrow_pos,100);
     d42:	64 e6       	ldi	r22, 0x64	; 100
     d44:	88 81       	ld	r24, Y
     d46:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print(" ", 3);
     d4a:	63 e0       	ldi	r22, 0x03	; 3
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	87 eb       	ldi	r24, 0xB7	; 183
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
			(*arrow_pos)++;
     d56:	88 81       	ld	r24, Y
     d58:	99 81       	ldd	r25, Y+1	; 0x01
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	99 83       	std	Y+1, r25	; 0x01
     d5e:	88 83       	st	Y, r24
			if (*arrow_pos == *arrow_max + 1)
     d60:	f8 01       	movw	r30, r16
     d62:	20 81       	ld	r18, Z
     d64:	31 81       	ldd	r19, Z+1	; 0x01
     d66:	2f 5f       	subi	r18, 0xFF	; 255
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	82 17       	cp	r24, r18
     d6c:	93 07       	cpc	r25, r19
     d6e:	21 f4       	brne	.+8      	; 0xd78 <menu_move_arrow+0x12a>
			{
				*arrow_pos = 2;
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	99 83       	std	Y+1, r25	; 0x01
     d76:	88 83       	st	Y, r24
			}
			oled_pos(*arrow_pos,100);
     d78:	64 e6       	ldi	r22, 0x64	; 100
     d7a:	88 81       	ld	r24, Y
     d7c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
			oled_print_special_char(5);
     d80:	85 e0       	ldi	r24, 0x05	; 5
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
			break;
		default:
			break;
	}
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	08 95       	ret

00000d92 <menu_state_machine>:
	
	menu_set_state(state1, arrow_max, arrow_pos);
}

void menu_state_machine(direction* old_dir, direction* dir, int* arrow_max, int* arrow_pos)
{
     d92:	af 92       	push	r10
     d94:	bf 92       	push	r11
     d96:	cf 92       	push	r12
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	7c 01       	movw	r14, r24
     da8:	8b 01       	movw	r16, r22
     daa:	5a 01       	movw	r10, r20
     dac:	69 01       	movw	r12, r18
	int s = main_state->val;
     dae:	e0 91 c5 02 	lds	r30, 0x02C5
     db2:	f0 91 c6 02 	lds	r31, 0x02C6
     db6:	c0 81       	ld	r28, Z
     db8:	d1 81       	ldd	r29, Z+1	; 0x01
	printf("state %d\n\r", s);
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	e9 eb       	ldi	r30, 0xB9	; 185
     dc0:	f1 e0       	ldi	r31, 0x01	; 1
     dc2:	ff 93       	push	r31
     dc4:	ef 93       	push	r30
     dc6:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
	
	switch (s)
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	c3 30       	cpi	r28, 0x03	; 3
     dd4:	d1 05       	cpc	r29, r1
     dd6:	39 f1       	breq	.+78     	; 0xe26 <menu_state_machine+0x94>
     dd8:	34 f4       	brge	.+12     	; 0xde6 <menu_state_machine+0x54>
     dda:	c1 30       	cpi	r28, 0x01	; 1
     ddc:	d1 05       	cpc	r29, r1
     dde:	51 f0       	breq	.+20     	; 0xdf4 <menu_state_machine+0x62>
     de0:	22 97       	sbiw	r28, 0x02	; 2
     de2:	d1 f0       	breq	.+52     	; 0xe18 <menu_state_machine+0x86>
     de4:	55 c0       	rjmp	.+170    	; 0xe90 <menu_state_machine+0xfe>
     de6:	c4 30       	cpi	r28, 0x04	; 4
     de8:	d1 05       	cpc	r29, r1
     dea:	79 f1       	breq	.+94     	; 0xe4a <menu_state_machine+0xb8>
     dec:	25 97       	sbiw	r28, 0x05	; 5
     dee:	09 f4       	brne	.+2      	; 0xdf2 <menu_state_machine+0x60>
     df0:	3e c0       	rjmp	.+124    	; 0xe6e <menu_state_machine+0xdc>
     df2:	4e c0       	rjmp	.+156    	; 0xe90 <menu_state_machine+0xfe>
	{
		case 1: // Menu
			*old_dir = *dir;
     df4:	f8 01       	movw	r30, r16
     df6:	80 81       	ld	r24, Z
     df8:	f7 01       	movw	r30, r14
     dfa:	80 83       	st	Z, r24
			*dir = get_joystick_direction();
     dfc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <get_joystick_direction>
     e00:	f8 01       	movw	r30, r16
     e02:	80 83       	st	Z, r24
			//printf("direction %d,%d\n\r", *old_dir, *dir);
			if (*old_dir == NEUTRAL){
     e04:	f7 01       	movw	r30, r14
     e06:	80 81       	ld	r24, Z
     e08:	81 11       	cpse	r24, r1
     e0a:	42 c0       	rjmp	.+132    	; 0xe90 <menu_state_machine+0xfe>
				menu_move_arrow(dir, arrow_max, arrow_pos);}
     e0c:	a6 01       	movw	r20, r12
     e0e:	b5 01       	movw	r22, r10
     e10:	c8 01       	movw	r24, r16
     e12:	0e 94 27 06 	call	0xc4e	; 0xc4e <menu_move_arrow>
     e16:	3c c0       	rjmp	.+120    	; 0xe90 <menu_state_machine+0xfe>
			break;
		
		case 2: // Start Game
			send_multi_board();
     e18:	0e 94 51 04 	call	0x8a2	; 0x8a2 <send_multi_board>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 ef       	ldi	r25, 0xF0	; 240
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <menu_state_machine+0x8e>
     e24:	35 c0       	rjmp	.+106    	; 0xe90 <menu_state_machine+0xfe>
			_delay_ms(50);
			break;
		
		case 3: // Set Mode
			*old_dir = *dir;
     e26:	f8 01       	movw	r30, r16
     e28:	80 81       	ld	r24, Z
     e2a:	f7 01       	movw	r30, r14
     e2c:	80 83       	st	Z, r24
			*dir = get_joystick_direction();
     e2e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <get_joystick_direction>
     e32:	f8 01       	movw	r30, r16
     e34:	80 83       	st	Z, r24
			if (*old_dir == NEUTRAL){
     e36:	f7 01       	movw	r30, r14
     e38:	80 81       	ld	r24, Z
     e3a:	81 11       	cpse	r24, r1
     e3c:	29 c0       	rjmp	.+82     	; 0xe90 <menu_state_machine+0xfe>
				menu_move_arrow(dir, arrow_max, arrow_pos);}
     e3e:	a6 01       	movw	r20, r12
     e40:	b5 01       	movw	r22, r10
     e42:	c8 01       	movw	r24, r16
     e44:	0e 94 27 06 	call	0xc4e	; 0xc4e <menu_move_arrow>
     e48:	23 c0       	rjmp	.+70     	; 0xe90 <menu_state_machine+0xfe>
			break;
		
		case 4: // Use Slider
			*old_dir = *dir;
     e4a:	f8 01       	movw	r30, r16
     e4c:	80 81       	ld	r24, Z
     e4e:	f7 01       	movw	r30, r14
     e50:	80 83       	st	Z, r24
			*dir = get_joystick_direction();
     e52:	0e 94 51 09 	call	0x12a2	; 0x12a2 <get_joystick_direction>
     e56:	f8 01       	movw	r30, r16
     e58:	80 83       	st	Z, r24
			if (*old_dir == NEUTRAL){
     e5a:	f7 01       	movw	r30, r14
     e5c:	80 81       	ld	r24, Z
     e5e:	81 11       	cpse	r24, r1
     e60:	17 c0       	rjmp	.+46     	; 0xe90 <menu_state_machine+0xfe>
				menu_move_arrow(dir, arrow_max, arrow_pos);}
     e62:	a6 01       	movw	r20, r12
     e64:	b5 01       	movw	r22, r10
     e66:	c8 01       	movw	r24, r16
     e68:	0e 94 27 06 	call	0xc4e	; 0xc4e <menu_move_arrow>
     e6c:	11 c0       	rjmp	.+34     	; 0xe90 <menu_state_machine+0xfe>
			break;
		
		case 5: // Use Joystick
			*old_dir = *dir;
     e6e:	f8 01       	movw	r30, r16
     e70:	80 81       	ld	r24, Z
     e72:	f7 01       	movw	r30, r14
     e74:	80 83       	st	Z, r24
			*dir = get_joystick_direction();
     e76:	0e 94 51 09 	call	0x12a2	; 0x12a2 <get_joystick_direction>
     e7a:	f8 01       	movw	r30, r16
     e7c:	80 83       	st	Z, r24
			if (*old_dir == NEUTRAL){
     e7e:	f7 01       	movw	r30, r14
     e80:	80 81       	ld	r24, Z
     e82:	81 11       	cpse	r24, r1
     e84:	05 c0       	rjmp	.+10     	; 0xe90 <menu_state_machine+0xfe>
				menu_move_arrow(dir, arrow_max, arrow_pos);}
     e86:	a6 01       	movw	r20, r12
     e88:	b5 01       	movw	r22, r10
     e8a:	c8 01       	movw	r24, r16
     e8c:	0e 94 27 06 	call	0xc4e	; 0xc4e <menu_move_arrow>
			break;
		
		default:
		break;
	}
}
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	af 90       	pop	r10
     ea4:	08 95       	ret

00000ea6 <stop_music>:
	set_bit(PORTB, PB3);
}

void stop_music()
{
	clear_bit(PORTB, PB3);
     ea6:	c3 98       	cbi	0x18, 3	; 24
     ea8:	08 95       	ret

00000eaa <can_controller_reset>:

#define CAN_CS PB4

void can_controller_reset()
{
	clear_bit(PORTB, CAN_CS); // Select CAN-controller
     eaa:	c4 98       	cbi	0x18, 4	; 24
	spi_send(MCP_RESET);
     eac:	80 ec       	ldi	r24, 0xC0	; 192
     eae:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>
	set_bit(PORTB, CAN_CS); // Deselect CAN-controller
     eb2:	c4 9a       	sbi	0x18, 4	; 24
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	9f e2       	ldi	r25, 0x2F	; 47
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <can_controller_reset+0xe>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <can_controller_reset+0x14>
     ebe:	00 00       	nop
     ec0:	08 95       	ret

00000ec2 <can_controller_read>:
	can_controller_write(MCP_TXB0SIDL, 0x00);	
    return 0;
}

uint8_t can_controller_read(uint8_t address)
{
     ec2:	cf 93       	push	r28
     ec4:	c8 2f       	mov	r28, r24
	uint8_t result;

	clear_bit(PORTB, CAN_CS); // Select CAN-controller
     ec6:	c4 98       	cbi	0x18, 4	; 24

	spi_send(MCP_READ); // Send read instruction
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>
	spi_send(address); // Send address
     ece:	8c 2f       	mov	r24, r28
     ed0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>
	result = spi_read(); // Read result
     ed4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <spi_read>

	set_bit(PORTB, CAN_CS); // Deselect CAN-controller
     ed8:	c4 9a       	sbi	0x18, 4	; 24

	return result;
}
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <can_controller_request_to_send>:
	return (modestat & MODE_MASK);
}

void can_controller_request_to_send()
{
		clear_bit(PORTB, CAN_CS); // Select CAN-controller
     ede:	c4 98       	cbi	0x18, 4	; 24
		
		// The buffer types are MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 and MCP_RTS_ALL
		spi_send(MCP_RTS_TX0);
     ee0:	81 e8       	ldi	r24, 0x81	; 129
     ee2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>

		PORTB |= ~(1<<CAN_CS);
     ee6:	88 b3       	in	r24, 0x18	; 24
     ee8:	8f 6e       	ori	r24, 0xEF	; 239
     eea:	88 bb       	out	0x18, r24	; 24
     eec:	08 95       	ret

00000eee <can_controller_bit_modify>:
}

void can_controller_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	18 2f       	mov	r17, r24
     ef6:	d6 2f       	mov	r29, r22
     ef8:	c4 2f       	mov	r28, r20
		clear_bit(PORTB, CAN_CS); // Select CAN-controller
     efa:	c4 98       	cbi	0x18, 4	; 24

		spi_send(MCP_BITMOD); // Send read instruction
     efc:	85 e0       	ldi	r24, 0x05	; 5
     efe:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>
		spi_send(address); // Send address
     f02:	81 2f       	mov	r24, r17
     f04:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>
		spi_send(mask); // Send mask,
     f08:	8d 2f       	mov	r24, r29
     f0a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>
		spi_send(data); // Send data
     f0e:	8c 2f       	mov	r24, r28
     f10:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>
		
		set_bit(PORTB, CAN_CS); // Deselect CAN-controller
     f14:	c4 9a       	sbi	0x18, 4	; 24
}
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	08 95       	ret

00000f1e <can_controller_set_mode>:
}

uint8_t can_controller_set_mode(uint8_t mode)
{
	uint8_t modestat;
	can_controller_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     f1e:	48 2f       	mov	r20, r24
     f20:	60 ee       	ldi	r22, 0xE0	; 224
     f22:	8f e0       	ldi	r24, 0x0F	; 15
     f24:	0e 94 77 07 	call	0xeee	; 0xeee <can_controller_bit_modify>
	modestat = can_controller_read(MCP_CANSTAT);
     f28:	8e e0       	ldi	r24, 0x0E	; 14
     f2a:	0e 94 61 07 	call	0xec2	; 0xec2 <can_controller_read>
	return (modestat & MODE_MASK);
}
     f2e:	80 7e       	andi	r24, 0xE0	; 224
     f30:	08 95       	ret

00000f32 <can_controller_write>:

	return status;
}

void can_controller_write(uint8_t address, uint8_t data)
{
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	d8 2f       	mov	r29, r24
     f38:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, CAN_CS); // Select CAN-controller
     f3a:	c4 98       	cbi	0x18, 4	; 24
	
	spi_send(MCP_WRITE);
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>
	spi_send(address);
     f42:	8d 2f       	mov	r24, r29
     f44:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>
	spi_send(data);
     f48:	8c 2f       	mov	r24, r28
     f4a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <spi_send>

	set_bit(PORTB, CAN_CS); // Deselect CAN-controller
     f4e:	c4 9a       	sbi	0x18, 4	; 24
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <can_controller_init>:
uint8_t can_controller_init()
{
    uint8_t value;

    //spi_init(); // Initialize SPI
    can_controller_reset(); // Send reset-command
     f56:	0e 94 55 07 	call	0xeaa	; 0xeaa <can_controller_reset>
	
    // Self-test
    value = can_controller_read(MCP_CANSTAT);
     f5a:	8e e0       	ldi	r24, 0x0E	; 14
     f5c:	0e 94 61 07 	call	0xec2	; 0xec2 <can_controller_read>
    if ((value & MODE_MASK)  != MODE_CONFIG) 
     f60:	98 2f       	mov	r25, r24
     f62:	90 7e       	andi	r25, 0xE0	; 224
     f64:	90 38       	cpi	r25, 0x80	; 128
     f66:	71 f0       	breq	.+28     	; 0xf84 <can_controller_init+0x2e>
    {
        printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
     f68:	1f 92       	push	r1
     f6a:	8f 93       	push	r24
     f6c:	84 ec       	ldi	r24, 0xC4	; 196
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
        return 1;
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	08 95       	ret
    }
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000011);
     f84:	43 e0       	ldi	r20, 0x03	; 3
     f86:	6f ef       	ldi	r22, 0xFF	; 255
     f88:	8b e2       	ldi	r24, 0x2B	; 43
     f8a:	0e 94 77 07 	call	0xeee	; 0xeee <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100100, 0b01100100);
     f8e:	44 e6       	ldi	r20, 0x64	; 100
     f90:	64 e6       	ldi	r22, 0x64	; 100
     f92:	80 e6       	ldi	r24, 0x60	; 96
     f94:	0e 94 77 07 	call	0xeee	; 0xeee <can_controller_bit_modify>
	//printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
     f98:	40 e6       	ldi	r20, 0x60	; 96
     f9a:	60 e6       	ldi	r22, 0x60	; 96
     f9c:	80 e7       	ldi	r24, 0x70	; 112
     f9e:	0e 94 77 07 	call	0xeee	; 0xeee <can_controller_bit_modify>
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

    
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);	
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	82 e3       	ldi	r24, 0x32	; 50
     fa6:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
    return 0;
     faa:	80 e0       	ldi	r24, 0x00	; 0
}
     fac:	08 95       	ret

00000fae <can_init>:
}

void can_init ()
{
	//set loopback mode
	uint8_t mode = can_controller_set_mode(MODE_NORMAL);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <can_controller_set_mode>
	if (mode != MODE_NORMAL)
     fb4:	88 23       	and	r24, r24
     fb6:	41 f0       	breq	.+16     	; 0xfc8 <can_init+0x1a>
	{
		printf("Could not set normal mode! I am sorry!\n\r");
     fb8:	81 e1       	ldi	r24, 0x11	; 17
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	9f 93       	push	r25
     fbe:	8f 93       	push	r24
     fc0:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
	}
	cli();
     fc8:	f8 94       	cli
	set_bit(MCUCR, ISC11);
     fca:	85 b7       	in	r24, 0x35	; 53
     fcc:	88 60       	ori	r24, 0x08	; 8
     fce:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10); //interrupt on the falling edge
     fd0:	85 b7       	in	r24, 0x35	; 53
     fd2:	8b 7f       	andi	r24, 0xFB	; 251
     fd4:	85 bf       	out	0x35, r24	; 53
	can_controller_write(MCP_CANINTF, 0x00);
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	8c e2       	ldi	r24, 0x2C	; 44
     fda:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
	can_controller_write(MCP_EFLG, 0x00);
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	8d e2       	ldi	r24, 0x2D	; 45
     fe2:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
	set_bit(GICR, INT1);						//enable external interrupt INT1
     fe6:	8b b7       	in	r24, 0x3b	; 59
     fe8:	80 68       	ori	r24, 0x80	; 128
     fea:	8b bf       	out	0x3b, r24	; 59
	sei();									//enable Global Interrupt
     fec:	78 94       	sei
     fee:	08 95       	ret

00000ff0 <can_send_msg>:
}

uint8_t can_send_msg(can_message* msg)
{
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
	//writhe higher id
	can_controller_write(MCP_TXB0SIDH, msg->id);
     ffa:	68 81       	ld	r22, Y
     ffc:	81 e3       	ldi	r24, 0x31	; 49
     ffe:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
	
	// Define data length of message
	uint8_t data_length = msg->length;
    1002:	09 81       	ldd	r16, Y+1	; 0x01
	can_controller_write(MCP_TXB0DLC, msg->length);
    1004:	60 2f       	mov	r22, r16
    1006:	85 e3       	ldi	r24, 0x35	; 53
    1008:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
    100c:	22 96       	adiw	r28, 0x02	; 2
	for (uint8_t byte = 0; byte < data_length; byte++) {
    100e:	00 23       	and	r16, r16
    1010:	49 f0       	breq	.+18     	; 0x1024 <can_send_msg+0x34>
    1012:	0a 5c       	subi	r16, 0xCA	; 202
    1014:	16 e3       	ldi	r17, 0x36	; 54
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
    1016:	69 91       	ld	r22, Y+
    1018:	81 2f       	mov	r24, r17
    101a:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
    101e:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = msg->length;
	can_controller_write(MCP_TXB0DLC, msg->length);
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
    1020:	10 13       	cpse	r17, r16
    1022:	f9 cf       	rjmp	.-14     	; 0x1016 <can_send_msg+0x26>
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
	}

	// Request to send message, send if successful
	can_controller_request_to_send();
    1024:	0e 94 6f 07 	call	0xede	; 0xede <can_controller_request_to_send>
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 ef       	ldi	r25, 0xF0	; 240
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <can_send_msg+0x3c>
	_delay_ms(50);
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	08 95       	ret

0000103a <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	eb 01       	movw	r28, r22
	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
    1044:	18 2f       	mov	r17, r24
    1046:	12 95       	swap	r17
    1048:	10 7f       	andi	r17, 0xF0	; 240
    104a:	81 e6       	ldi	r24, 0x61	; 97
    104c:	81 0f       	add	r24, r17
    104e:	0e 94 61 07 	call	0xec2	; 0xec2 <can_controller_read>
	uint8_t mask;

	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
    1052:	85 e6       	ldi	r24, 0x65	; 101
    1054:	81 0f       	add	r24, r17
    1056:	0e 94 61 07 	call	0xec2	; 0xec2 <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
    105a:	98 2f       	mov	r25, r24
    105c:	9f 70       	andi	r25, 0x0F	; 15
    105e:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
    1060:	88 23       	and	r24, r24
    1062:	59 f0       	breq	.+22     	; 0x107a <can_recieve_msg+0x40>
    1064:	1a 59       	subi	r17, 0x9A	; 154
    1066:	22 96       	adiw	r28, 0x02	; 2
    1068:	08 2f       	mov	r16, r24
    106a:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
    106c:	81 2f       	mov	r24, r17
    106e:	0e 94 61 07 	call	0xec2	; 0xec2 <can_controller_read>
    1072:	89 93       	st	Y+, r24
    1074:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
    1076:	10 13       	cpse	r17, r16
    1078:	f9 cf       	rjmp	.-14     	; 0x106c <can_recieve_msg+0x32>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	08 95       	ret

00001084 <__vector_2>:
#include "can_controller_driver.h"
#include "MCP2515.h"
#include "game.h"

ISR(INT1_vect)
{
    1084:	1f 92       	push	r1
    1086:	0f 92       	push	r0
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	0f 92       	push	r0
    108c:	11 24       	eor	r1, r1
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
	cli();
    10b0:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
    10b2:	8a e0       	ldi	r24, 0x0A	; 10
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <malloc>
    10ba:	ec 01       	movw	r28, r24
	//printf("message INTERRUPTION recieved\n\r");
	uint8_t canInt = can_controller_read(MCP_CANINTF);
    10bc:	8c e2       	ldi	r24, 0x2C	; 44
    10be:	0e 94 61 07 	call	0xec2	; 0xec2 <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
    10c2:	80 ff       	sbrs	r24, 0
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <__vector_2+0x54>
	{
		can_recieve_msg(0, msg);
    10c6:	be 01       	movw	r22, r28
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	0e 94 1d 08 	call	0x103a	; 0x103a <can_recieve_msg>
		int score = (int) msg->data[0];
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
		oled_ingame_display(score);
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 a7 0c 	call	0x194e	; 0x194e <oled_ingame_display>
    10d6:	34 c0       	rjmp	.+104    	; 0x1140 <__vector_2+0xbc>
	} else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
    10d8:	81 ff       	sbrs	r24, 1
    10da:	25 c0       	rjmp	.+74     	; 0x1126 <__vector_2+0xa2>
	{
		can_recieve_msg(1, msg);
    10dc:	be 01       	movw	r22, r28
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 1d 08 	call	0x103a	; 0x103a <can_recieve_msg>
		printf("DATA ON RX1\n\r");
    10e4:	8a e3       	ldi	r24, 0x3A	; 58
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	9f 93       	push	r25
    10ea:	8f 93       	push	r24
    10ec:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	88 23       	and	r24, r24
    10f8:	19 f1       	breq	.+70     	; 0x1140 <__vector_2+0xbc>
    10fa:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
    10fc:	08 e4       	ldi	r16, 0x48	; 72
    10fe:	12 e0       	ldi	r17, 0x02	; 2
    1100:	fe 01       	movw	r30, r28
    1102:	ef 0d       	add	r30, r15
    1104:	f1 1d       	adc	r31, r1
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	1f 92       	push	r1
    110a:	8f 93       	push	r24
    110c:	1f 93       	push	r17
    110e:	0f 93       	push	r16
    1110:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
		oled_ingame_display(score);
	} else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
	{
		can_recieve_msg(1, msg);
		printf("DATA ON RX1\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
    1114:	f3 94       	inc	r15
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	f8 16       	cp	r15, r24
    1122:	70 f3       	brcs	.-36     	; 0x1100 <__vector_2+0x7c>
    1124:	0d c0       	rjmp	.+26     	; 0x1140 <__vector_2+0xbc>
			printf("%d \n\r", msg->data[byte]);
		}
	} else
	{
		can_controller_write(MCP_CANINTF, 0x00);
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	8c e2       	ldi	r24, 0x2C	; 44
    112a:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
		//can_controller_write(MCP_EFLG, 0x00);
		free(msg);
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <free>
		can_controller_write(MCP_CANINTF, 0x00);
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	8c e2       	ldi	r24, 0x2C	; 44
    1138:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
		sei();
    113c:	78 94       	sei
		return;
    113e:	0c c0       	rjmp	.+24     	; 0x1158 <__vector_2+0xd4>
	}
	can_controller_write(MCP_CANINTF, 0x00);
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	8c e2       	ldi	r24, 0x2C	; 44
    1144:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
	free(msg);
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <free>
	can_controller_write(MCP_CANINTF, 0x00);
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	8c e2       	ldi	r24, 0x2C	; 44
    1152:	0e 94 99 07 	call	0xf32	; 0xf32 <can_controller_write>
	sei();
    1156:	78 94       	sei
}
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	bf 91       	pop	r27
    1162:	af 91       	pop	r26
    1164:	9f 91       	pop	r25
    1166:	8f 91       	pop	r24
    1168:	7f 91       	pop	r23
    116a:	6f 91       	pop	r22
    116c:	5f 91       	pop	r21
    116e:	4f 91       	pop	r20
    1170:	3f 91       	pop	r19
    1172:	2f 91       	pop	r18
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	0f 90       	pop	r0
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	0f 90       	pop	r0
    1180:	1f 90       	pop	r1
    1182:	18 95       	reti

00001184 <joystick_init>:
static int x_middle_pos;
static int y_middle_pos;

void joystick_init()
{
	x_middle_pos = ADC_read(2);
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
    118c:	90 93 c3 02 	sts	0x02C3, r25
    1190:	80 93 c2 02 	sts	0x02C2, r24
	y_middle_pos = ADC_read(1);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
    119c:	90 93 c1 02 	sts	0x02C1, r25
    11a0:	80 93 c0 02 	sts	0x02C0, r24
    11a4:	08 95       	ret

000011a6 <get_joystick_position>:
}

struct Position get_joystick_position()
{
    11a6:	8f 92       	push	r8
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
	struct Position j_position;
	
	float x_step = (255.0 - x_middle_pos)/100.0;
    11ba:	60 91 c2 02 	lds	r22, 0x02C2
    11be:	70 91 c3 02 	lds	r23, 0x02C3
    11c2:	88 27       	eor	r24, r24
    11c4:	77 fd       	sbrc	r23, 7
    11c6:	80 95       	com	r24
    11c8:	98 2f       	mov	r25, r24
    11ca:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__floatsisf>
    11ce:	9b 01       	movw	r18, r22
    11d0:	ac 01       	movw	r20, r24
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	8f e7       	ldi	r24, 0x7F	; 127
    11d8:	93 e4       	ldi	r25, 0x43	; 67
    11da:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__subsf3>
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	48 ec       	ldi	r20, 0xC8	; 200
    11e4:	52 e4       	ldi	r21, 0x42	; 66
    11e6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
    11ea:	4b 01       	movw	r8, r22
    11ec:	5c 01       	movw	r10, r24
	float y_step = (255.0 - y_middle_pos)/100.0;
    11ee:	60 91 c0 02 	lds	r22, 0x02C0
    11f2:	70 91 c1 02 	lds	r23, 0x02C1
    11f6:	88 27       	eor	r24, r24
    11f8:	77 fd       	sbrc	r23, 7
    11fa:	80 95       	com	r24
    11fc:	98 2f       	mov	r25, r24
    11fe:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__floatsisf>
    1202:	9b 01       	movw	r18, r22
    1204:	ac 01       	movw	r20, r24
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	8f e7       	ldi	r24, 0x7F	; 127
    120c:	93 e4       	ldi	r25, 0x43	; 67
    120e:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__subsf3>
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	48 ec       	ldi	r20, 0xC8	; 200
    1218:	52 e4       	ldi	r21, 0x42	; 66
    121a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
    121e:	6b 01       	movw	r12, r22
    1220:	7c 01       	movw	r14, r24
	
	int x_range = ADC_read(2);
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
    122a:	ec 01       	movw	r28, r24
	int y_range = ADC_read(1);
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>

	j_position.x = (int) ((x_range - x_middle_pos)/x_step);
	j_position.y = (int) ((y_range - y_middle_pos)/y_step);
    1234:	20 91 c0 02 	lds	r18, 0x02C0
    1238:	30 91 c1 02 	lds	r19, 0x02C1
    123c:	82 1b       	sub	r24, r18
    123e:	93 0b       	sbc	r25, r19
    1240:	bc 01       	movw	r22, r24
    1242:	88 27       	eor	r24, r24
    1244:	77 fd       	sbrc	r23, 7
    1246:	80 95       	com	r24
    1248:	98 2f       	mov	r25, r24
    124a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__floatsisf>
    124e:	a7 01       	movw	r20, r14
    1250:	96 01       	movw	r18, r12
    1252:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
    1256:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fixsfsi>
    125a:	6b 01       	movw	r12, r22
    125c:	7c 01       	movw	r14, r24
	float y_step = (255.0 - y_middle_pos)/100.0;
	
	int x_range = ADC_read(2);
	int y_range = ADC_read(1);

	j_position.x = (int) ((x_range - x_middle_pos)/x_step);
    125e:	80 91 c2 02 	lds	r24, 0x02C2
    1262:	90 91 c3 02 	lds	r25, 0x02C3
    1266:	be 01       	movw	r22, r28
    1268:	68 1b       	sub	r22, r24
    126a:	79 0b       	sbc	r23, r25
    126c:	88 27       	eor	r24, r24
    126e:	77 fd       	sbrc	r23, 7
    1270:	80 95       	com	r24
    1272:	98 2f       	mov	r25, r24
    1274:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__floatsisf>
    1278:	a5 01       	movw	r20, r10
    127a:	94 01       	movw	r18, r8
    127c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
    1280:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fixsfsi>
    1284:	4b 01       	movw	r8, r22
    1286:	5c 01       	movw	r10, r24
	j_position.y = (int) ((y_range - y_middle_pos)/y_step);
	
	return j_position;
    1288:	b4 01       	movw	r22, r8
    128a:	c6 01       	movw	r24, r12
}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	08 95       	ret

000012a2 <get_joystick_direction>:

int get_joystick_direction(){
	struct Position j_pos;
	
	j_pos = get_joystick_position();
    12a2:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <get_joystick_position>
    12a6:	9b 01       	movw	r18, r22
    12a8:	ac 01       	movw	r20, r24
	
	if (j_pos.x >= -10 && j_pos.x <= 10 && j_pos.y >= -10 && j_pos.y <= 10)
    12aa:	fb 01       	movw	r30, r22
    12ac:	3a 96       	adiw	r30, 0x0a	; 10
    12ae:	75 97       	sbiw	r30, 0x15	; 21
    12b0:	20 f4       	brcc	.+8      	; 0x12ba <get_joystick_direction+0x18>
    12b2:	fc 01       	movw	r30, r24
    12b4:	3a 96       	adiw	r30, 0x0a	; 10
    12b6:	75 97       	sbiw	r30, 0x15	; 21
    12b8:	c8 f1       	brcs	.+114    	; 0x132c <get_joystick_direction+0x8a>
	{
		return NEUTRAL;
	} else if (j_pos.x < -10 && abs(j_pos.x) >= abs(j_pos.y))
    12ba:	26 3f       	cpi	r18, 0xF6	; 246
    12bc:	ef ef       	ldi	r30, 0xFF	; 255
    12be:	3e 07       	cpc	r19, r30
    12c0:	8c f4       	brge	.+34     	; 0x12e4 <get_joystick_direction+0x42>
    12c2:	db 01       	movw	r26, r22
    12c4:	33 23       	and	r19, r19
    12c6:	24 f4       	brge	.+8      	; 0x12d0 <get_joystick_direction+0x2e>
    12c8:	aa 27       	eor	r26, r26
    12ca:	bb 27       	eor	r27, r27
    12cc:	a6 1b       	sub	r26, r22
    12ce:	b7 0b       	sbc	r27, r23
    12d0:	fc 01       	movw	r30, r24
    12d2:	55 23       	and	r21, r21
    12d4:	24 f4       	brge	.+8      	; 0x12de <get_joystick_direction+0x3c>
    12d6:	ee 27       	eor	r30, r30
    12d8:	ff 27       	eor	r31, r31
    12da:	e8 1b       	sub	r30, r24
    12dc:	f9 0b       	sbc	r31, r25
    12de:	ae 17       	cp	r26, r30
    12e0:	bf 07       	cpc	r27, r31
    12e2:	3c f5       	brge	.+78     	; 0x1332 <get_joystick_direction+0x90>
	{
		return LEFT;
	} else if (j_pos.x > 10 && j_pos.x >= abs(j_pos.y))
    12e4:	2b 30       	cpi	r18, 0x0B	; 11
    12e6:	31 05       	cpc	r19, r1
    12e8:	54 f0       	brlt	.+20     	; 0x12fe <get_joystick_direction+0x5c>
    12ea:	fc 01       	movw	r30, r24
    12ec:	55 23       	and	r21, r21
    12ee:	24 f4       	brge	.+8      	; 0x12f8 <get_joystick_direction+0x56>
    12f0:	ee 27       	eor	r30, r30
    12f2:	ff 27       	eor	r31, r31
    12f4:	e8 1b       	sub	r30, r24
    12f6:	f9 0b       	sbc	r31, r25
    12f8:	2e 17       	cp	r18, r30
    12fa:	3f 07       	cpc	r19, r31
    12fc:	ec f4       	brge	.+58     	; 0x1338 <get_joystick_direction+0x96>
	{
		return RIGHT;
	} else if (j_pos.y < -10 && abs(j_pos.y) > abs(j_pos.x))
    12fe:	46 3f       	cpi	r20, 0xF6	; 246
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	ec f4       	brge	.+58     	; 0x133e <get_joystick_direction+0x9c>
    1304:	ac 01       	movw	r20, r24
    1306:	99 23       	and	r25, r25
    1308:	24 f4       	brge	.+8      	; 0x1312 <get_joystick_direction+0x70>
    130a:	44 27       	eor	r20, r20
    130c:	55 27       	eor	r21, r21
    130e:	48 1b       	sub	r20, r24
    1310:	59 0b       	sbc	r21, r25
    1312:	9b 01       	movw	r18, r22
    1314:	77 23       	and	r23, r23
    1316:	24 f4       	brge	.+8      	; 0x1320 <get_joystick_direction+0x7e>
    1318:	22 27       	eor	r18, r18
    131a:	33 27       	eor	r19, r19
    131c:	26 1b       	sub	r18, r22
    131e:	37 0b       	sbc	r19, r23
    1320:	24 17       	cp	r18, r20
    1322:	35 07       	cpc	r19, r21
    1324:	7c f0       	brlt	.+30     	; 0x1344 <get_joystick_direction+0xa2>
	{
		return DOWN;
	}else 
	{
		return UP;
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	08 95       	ret
	
	j_pos = get_joystick_position();
	
	if (j_pos.x >= -10 && j_pos.x <= 10 && j_pos.y >= -10 && j_pos.y <= 10)
	{
		return NEUTRAL;
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	08 95       	ret
	} else if (j_pos.x < -10 && abs(j_pos.x) >= abs(j_pos.y))
	{
		return LEFT;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	08 95       	ret
	} else if (j_pos.x > 10 && j_pos.x >= abs(j_pos.y))
	{
		return RIGHT;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	08 95       	ret
	} else if (j_pos.y < -10 && abs(j_pos.y) > abs(j_pos.x))
	{
		return DOWN;
	}else 
	{
		return UP;
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	08 95       	ret
	} else if (j_pos.x > 10 && j_pos.x >= abs(j_pos.y))
	{
		return RIGHT;
	} else if (j_pos.y < -10 && abs(j_pos.y) > abs(j_pos.x))
	{
		return DOWN;
    1344:	84 e0       	ldi	r24, 0x04	; 4
    1346:	90 e0       	ldi	r25, 0x00	; 0
	}else 
	{
		return UP;
	}
}
    1348:	08 95       	ret

0000134a <get_left_slider>:

int get_left_slider()
{
	int range = ADC_read(3);
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
	
	return (int) ((255 - range)/2.55);
    1352:	6f ef       	ldi	r22, 0xFF	; 255
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	68 1b       	sub	r22, r24
    1358:	79 0b       	sbc	r23, r25
    135a:	88 27       	eor	r24, r24
    135c:	77 fd       	sbrc	r23, 7
    135e:	80 95       	com	r24
    1360:	98 2f       	mov	r25, r24
    1362:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__floatsisf>
    1366:	23 e3       	ldi	r18, 0x33	; 51
    1368:	33 e3       	ldi	r19, 0x33	; 51
    136a:	43 e2       	ldi	r20, 0x23	; 35
    136c:	50 e4       	ldi	r21, 0x40	; 64
    136e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
    1372:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fixsfsi>
}
    1376:	cb 01       	movw	r24, r22
    1378:	08 95       	ret

0000137a <get_right_slider>:

int get_right_slider()
{
	int range = ADC_read(4);
    137a:	84 e0       	ldi	r24, 0x04	; 4
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
	
	return (int) (range/2.55);
    1382:	bc 01       	movw	r22, r24
    1384:	88 27       	eor	r24, r24
    1386:	77 fd       	sbrc	r23, 7
    1388:	80 95       	com	r24
    138a:	98 2f       	mov	r25, r24
    138c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__floatsisf>
    1390:	23 e3       	ldi	r18, 0x33	; 51
    1392:	33 e3       	ldi	r19, 0x33	; 51
    1394:	43 e2       	ldi	r20, 0x23	; 35
    1396:	50 e4       	ldi	r21, 0x40	; 64
    1398:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
    139c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fixsfsi>
}
    13a0:	cb 01       	movw	r24, r22
    13a2:	08 95       	ret

000013a4 <get_joystick_right_button>:

int get_joystick_right_button()
{
	uint8_t push = (PINB & 0b00000001);
    13a4:	86 b3       	in	r24, 0x16	; 22
	
	return push;
}
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	08 95       	ret

000013ac <get_joystick_left_button>:

int get_joystick_left_button()
{
	uint8_t push = (PINB & 0b00000010);
    13ac:	86 b3       	in	r24, 0x16	; 22
    13ae:	82 70       	andi	r24, 0x02	; 2
	
	return push;
}
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	08 95       	ret

000013b4 <main>:
	PORTA = 0b00000000;            // PC0 = Low = 0v
	_delay_ms(1000);                // wait 500 milliseconds
}

int main(void)
{
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <main+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <main+0x8>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <main+0xa>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	// Initializations
	USART_Init(MYUBRR);
    13c2:	8f e1       	ldi	r24, 0x1F	; 31
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <USART_Init>
	SRAM_init();
    13ca:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <SRAM_init>
	joystick_init();
    13ce:	0e 94 c2 08 	call	0x1184	; 0x1184 <joystick_init>
	oled_init();
    13d2:	0e 94 1d 0a 	call	0x143a	; 0x143a <oled_init>
	spi_init();
    13d6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <spi_init>
	can_controller_init();
    13da:	0e 94 ab 07 	call	0xf56	; 0xf56 <can_controller_init>
	can_init();
    13de:	0e 94 d7 07 	call	0xfae	; 0xfae <can_init>
	music_init();
    13e2:	0e 94 90 04 	call	0x920	; 0x920 <music_init>
	stop_music();
    13e6:	0e 94 53 07 	call	0xea6	; 0xea6 <stop_music>
	printf("START ============================\n\r");
    13ea:	8e e4       	ldi	r24, 0x4E	; 78
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	9f 93       	push	r25
    13f0:	8f 93       	push	r24
    13f2:	0e 94 0d 10 	call	0x201a	; 0x201a <printf>
	
	int arrow_pos = 2;
    13f6:	82 e0       	ldi	r24, 0x02	; 2
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01
	int arrow_max = 2;
    13fe:	9c 83       	std	Y+4, r25	; 0x04
    1400:	8b 83       	std	Y+3, r24	; 0x03
	gamemode = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 c4 02 	sts	0x02C4, r24
	menu_state_machine_setup(&arrow_max, &arrow_pos);
    1408:	be 01       	movw	r22, r28
    140a:	6f 5f       	subi	r22, 0xFF	; 255
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	ce 01       	movw	r24, r28
    1410:	03 96       	adiw	r24, 0x03	; 3
    1412:	0e 94 9a 05 	call	0xb34	; 0xb34 <menu_state_machine_setup>
	
	direction dir = NEUTRAL;
    1416:	1d 82       	std	Y+5, r1	; 0x05
	direction old_dir = NEUTRAL;
    1418:	1e 82       	std	Y+6, r1	; 0x06
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0

	while (1)
	{
		menu_state_machine(&old_dir, &dir, &arrow_max, &arrow_pos);
    141e:	9e 01       	movw	r18, r28
    1420:	2f 5f       	subi	r18, 0xFF	; 255
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	ae 01       	movw	r20, r28
    1426:	4d 5f       	subi	r20, 0xFD	; 253
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	be 01       	movw	r22, r28
    142c:	6b 5f       	subi	r22, 0xFB	; 251
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	ce 01       	movw	r24, r28
    1432:	06 96       	adiw	r24, 0x06	; 6
    1434:	0e 94 c9 06 	call	0xd92	; 0xd92 <menu_state_machine>
    1438:	f2 cf       	rjmp	.-28     	; 0x141e <main+0x6a>

0000143a <oled_init>:
}

void oled_write_cmd(unsigned char ins_c)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_MEM; // OLED Command
	ext_oled[0] = ins_c;
    143a:	e0 e0       	ldi	r30, 0x00	; 0
    143c:	f0 e1       	ldi	r31, 0x10	; 16
    143e:	8e ea       	ldi	r24, 0xAE	; 174
    1440:	80 83       	st	Z, r24
    1442:	81 ea       	ldi	r24, 0xA1	; 161
    1444:	80 83       	st	Z, r24
    1446:	8a ed       	ldi	r24, 0xDA	; 218
    1448:	80 83       	st	Z, r24
    144a:	82 e1       	ldi	r24, 0x12	; 18
    144c:	80 83       	st	Z, r24
    144e:	88 ec       	ldi	r24, 0xC8	; 200
    1450:	80 83       	st	Z, r24
    1452:	88 ea       	ldi	r24, 0xA8	; 168
    1454:	80 83       	st	Z, r24
    1456:	8f e3       	ldi	r24, 0x3F	; 63
    1458:	80 83       	st	Z, r24
    145a:	85 ed       	ldi	r24, 0xD5	; 213
    145c:	80 83       	st	Z, r24
    145e:	80 e8       	ldi	r24, 0x80	; 128
    1460:	80 83       	st	Z, r24
    1462:	81 e8       	ldi	r24, 0x81	; 129
    1464:	80 83       	st	Z, r24
    1466:	80 e5       	ldi	r24, 0x50	; 80
    1468:	80 83       	st	Z, r24
    146a:	89 ed       	ldi	r24, 0xD9	; 217
    146c:	80 83       	st	Z, r24
    146e:	81 e2       	ldi	r24, 0x21	; 33
    1470:	80 83       	st	Z, r24
    1472:	80 e2       	ldi	r24, 0x20	; 32
    1474:	80 83       	st	Z, r24
    1476:	10 82       	st	Z, r1
    1478:	8b ed       	ldi	r24, 0xDB	; 219
    147a:	80 83       	st	Z, r24
    147c:	80 e3       	ldi	r24, 0x30	; 48
    147e:	80 83       	st	Z, r24
    1480:	8d ea       	ldi	r24, 0xAD	; 173
    1482:	80 83       	st	Z, r24
    1484:	10 82       	st	Z, r1
    1486:	84 ea       	ldi	r24, 0xA4	; 164
    1488:	80 83       	st	Z, r24
    148a:	86 ea       	ldi	r24, 0xA6	; 166
    148c:	80 83       	st	Z, r24
    148e:	8f ea       	ldi	r24, 0xAF	; 175
    1490:	80 83       	st	Z, r24
    1492:	08 95       	ret

00001494 <oled_goto_line>:
    1494:	e0 e0       	ldi	r30, 0x00	; 0
    1496:	f0 e1       	ldi	r31, 0x10	; 16
    1498:	92 e2       	ldi	r25, 0x22	; 34
    149a:	90 83       	st	Z, r25
    149c:	80 83       	st	Z, r24
    149e:	87 e0       	ldi	r24, 0x07	; 7
    14a0:	80 83       	st	Z, r24
    14a2:	08 95       	ret

000014a4 <oled_goto_column>:
    14a4:	e0 e0       	ldi	r30, 0x00	; 0
    14a6:	f0 e1       	ldi	r31, 0x10	; 16
    14a8:	91 e2       	ldi	r25, 0x21	; 33
    14aa:	90 83       	st	Z, r25
    14ac:	80 83       	st	Z, r24
    14ae:	8f e7       	ldi	r24, 0x7F	; 127
    14b0:	80 83       	st	Z, r24
    14b2:	08 95       	ret

000014b4 <oled_reset>:
}

//clear OLED screen
void oled_reset()
{
	oled_goto_line(0);
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <oled_goto_line>
	oled_goto_column(0);
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <oled_goto_column>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	94 e0       	ldi	r25, 0x04	; 4
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    14c4:	e0 e0       	ldi	r30, 0x00	; 0
    14c6:	f2 e1       	ldi	r31, 0x12	; 18
    14c8:	10 82       	st	Z, r1
    14ca:	01 97       	sbiw	r24, 0x01	; 1
//clear OLED screen
void oled_reset()
{
	oled_goto_line(0);
	oled_goto_column(0);
	for(int i = 0; i < 1024; i++)
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <oled_reset+0x14>
	{
		oled_write_data(0x00);
	}
}
    14d0:	08 95       	ret

000014d2 <oled_pos>:
	}
}

//go to page and column (0 - 7 | 0 - 127)
void oled_pos(uint8_t row,uint8_t column)
{
    14d2:	cf 93       	push	r28
    14d4:	c6 2f       	mov	r28, r22
	oled_goto_line(row);
    14d6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <oled_goto_line>
	oled_goto_column(column);
    14da:	8c 2f       	mov	r24, r28
    14dc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <oled_goto_column>
}
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <oled_print_char>:
//print a character on the current position
//size: 1 - small | 2 - medium | 3 - large
void oled_print_char(char character, int size)
{
	char mychar;
	int code = ((int) character) - 32;
    14e4:	e8 2f       	mov	r30, r24
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	b0 97       	sbiw	r30, 0x20	; 32
	
	if (size == 3)
    14ea:	63 30       	cpi	r22, 0x03	; 3
    14ec:	71 05       	cpc	r23, r1
    14ee:	a1 f4       	brne	.+40     	; 0x1518 <oled_print_char+0x34>
    14f0:	ee 0f       	add	r30, r30
    14f2:	ff 1f       	adc	r31, r31
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	ee 0f       	add	r30, r30
    14fa:	ff 1f       	adc	r31, r31
    14fc:	e9 5e       	subi	r30, 0xE9	; 233
    14fe:	fa 4f       	sbci	r31, 0xFA	; 250
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	b2 e1       	ldi	r27, 0x12	; 18
	
	if (size == 3)
	{
		for (int k = 0; k < 8; k++)
		{
			mychar =  pgm_read_byte_near(font8[code] + k);
    1508:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    150a:	2c 93       	st	X, r18
	char mychar;
	int code = ((int) character) - 32;
	
	if (size == 3)
	{
		for (int k = 0; k < 8; k++)
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	31 96       	adiw	r30, 0x01	; 1
    1510:	88 30       	cpi	r24, 0x08	; 8
    1512:	91 05       	cpc	r25, r1
    1514:	c9 f7       	brne	.-14     	; 0x1508 <oled_print_char+0x24>
    1516:	08 95       	ret
		{
			mychar =  pgm_read_byte_near(font8[code] + k);
			mychar = mychar;
			oled_write_data(mychar);
		}
	}else if (size == 2)
    1518:	62 30       	cpi	r22, 0x02	; 2
    151a:	71 05       	cpc	r23, r1
    151c:	a9 f4       	brne	.+42     	; 0x1548 <oled_print_char+0x64>
    151e:	cf 01       	movw	r24, r30
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	e8 0f       	add	r30, r24
    152a:	f9 1f       	adc	r31, r25
    152c:	e4 5c       	subi	r30, 0xC4	; 196
    152e:	fc 4f       	sbci	r31, 0xFC	; 252
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1534:	a0 e0       	ldi	r26, 0x00	; 0
    1536:	b2 e1       	ldi	r27, 0x12	; 18
		}
	}else if (size == 2)
	{
		for (int k = 0; k < 5; k++)
		{
			mychar =  pgm_read_byte_near(font5[code] + k);
    1538:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    153a:	2c 93       	st	X, r18
			mychar = mychar;
			oled_write_data(mychar);
		}
	}else if (size == 2)
	{
		for (int k = 0; k < 5; k++)
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	31 96       	adiw	r30, 0x01	; 1
    1540:	85 30       	cpi	r24, 0x05	; 5
    1542:	91 05       	cpc	r25, r1
    1544:	c9 f7       	brne	.-14     	; 0x1538 <oled_print_char+0x54>
    1546:	08 95       	ret
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	e0 54       	subi	r30, 0x40	; 64
    1552:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			mychar =  pgm_read_byte_near(font8[code] + k);
			mychar = mychar;
			oled_write_data(mychar);
		}
	}else if (size == 2)
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	b2 e1       	ldi	r27, 0x12	; 18
		}
	}else 
	{
		for (int k = 0; k < 4; k++)
		{
			mychar =  pgm_read_byte_near(font4[code] + k);
    155c:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    155e:	2c 93       	st	X, r18
			mychar =  pgm_read_byte_near(font5[code] + k);
			oled_write_data(mychar);
		}
	}else 
	{
		for (int k = 0; k < 4; k++)
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	31 96       	adiw	r30, 0x01	; 1
    1564:	84 30       	cpi	r24, 0x04	; 4
    1566:	91 05       	cpc	r25, r1
    1568:	c9 f7       	brne	.-14     	; 0x155c <oled_print_char+0x78>
    156a:	08 95       	ret

0000156c <oled_print>:
}

//print a string starting on the current position
//size: 1 - small | 2 - medium | 3 - large 
void oled_print(char* name, int size)
{
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	8c 01       	movw	r16, r24
    157e:	6b 01       	movw	r12, r22
    1580:	7c 01       	movw	r14, r24
	for (int i = 0; i < strlen(name); i++)
    1582:	c0 e0       	ldi	r28, 0x00	; 0
    1584:	d0 e0       	ldi	r29, 0x00	; 0
    1586:	08 c0       	rjmp	.+16     	; 0x1598 <oled_print+0x2c>
	{
		oled_print_char(name[i], size);
    1588:	f7 01       	movw	r30, r14
    158a:	81 91       	ld	r24, Z+
    158c:	7f 01       	movw	r14, r30
    158e:	b6 01       	movw	r22, r12
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <oled_print_char>

//print a string starting on the current position
//size: 1 - small | 2 - medium | 3 - large 
void oled_print(char* name, int size)
{
	for (int i = 0; i < strlen(name); i++)
    1596:	21 96       	adiw	r28, 0x01	; 1
    1598:	f8 01       	movw	r30, r16
    159a:	01 90       	ld	r0, Z+
    159c:	00 20       	and	r0, r0
    159e:	e9 f7       	brne	.-6      	; 0x159a <oled_print+0x2e>
    15a0:	31 97       	sbiw	r30, 0x01	; 1
    15a2:	e0 1b       	sub	r30, r16
    15a4:	f1 0b       	sbc	r31, r17
    15a6:	ce 17       	cp	r28, r30
    15a8:	df 07       	cpc	r29, r31
    15aa:	70 f3       	brcs	.-36     	; 0x1588 <oled_print+0x1c>
	{
		oled_print_char(name[i], size);
	}
}
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	ef 90       	pop	r14
    15b8:	df 90       	pop	r13
    15ba:	cf 90       	pop	r12
    15bc:	08 95       	ret

000015be <oled_print_special_char>:
		}
	}
}

void oled_print_special_char (int code)
{
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	fc 01       	movw	r30, r24
    15cc:	e0 59       	subi	r30, 0x90	; 144
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	88 58       	subi	r24, 0x88	; 136
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b2 e1       	ldi	r27, 0x12	; 18
{
	char mychar;
	
	for (int k = 0; k < 8; k++)
	{
		mychar =  pgm_read_byte_near(specialChar[code] + k);
    15d8:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    15da:	2c 93       	st	X, r18
    15dc:	31 96       	adiw	r30, 0x01	; 1

void oled_print_special_char (int code)
{
	char mychar;
	
	for (int k = 0; k < 8; k++)
    15de:	e8 17       	cp	r30, r24
    15e0:	f9 07       	cpc	r31, r25
    15e2:	d1 f7       	brne	.-12     	; 0x15d8 <oled_print_special_char+0x1a>
	{
		mychar =  pgm_read_byte_near(specialChar[code] + k);
		oled_write_data(mychar);
	}
}
    15e4:	08 95       	ret

000015e6 <oled_print_mario_large>:
		_delay_ms(100);	
	}	
}

void oled_print_mario_large(uint8_t row,uint8_t column)
{
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	c8 2f       	mov	r28, r24
    15ec:	d6 2f       	mov	r29, r22
	oled_pos(row, column);
    15ee:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print_special_char(10);
    15f2:	8a e0       	ldi	r24, 0x0A	; 10
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(11);
    15fa:	8b e0       	ldi	r24, 0x0B	; 11
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(12);
    1602:	8c e0       	ldi	r24, 0x0C	; 12
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(13);
    160a:	8d e0       	ldi	r24, 0x0D	; 13
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_pos(row+1, column);
    1612:	6d 2f       	mov	r22, r29
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	8c 0f       	add	r24, r28
    1618:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print_special_char(14);
    161c:	8e e0       	ldi	r24, 0x0E	; 14
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(15);
    1624:	8f e0       	ldi	r24, 0x0F	; 15
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(16);
    162c:	80 e1       	ldi	r24, 0x10	; 16
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(17);
    1634:	81 e1       	ldi	r24, 0x11	; 17
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_pos(row+2, column);
    163c:	6d 2f       	mov	r22, r29
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	8c 0f       	add	r24, r28
    1642:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print_special_char(18);
    1646:	82 e1       	ldi	r24, 0x12	; 18
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(19);
    164e:	83 e1       	ldi	r24, 0x13	; 19
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(20);
    1656:	84 e1       	ldi	r24, 0x14	; 20
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(21);
    165e:	85 e1       	ldi	r24, 0x15	; 21
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_pos(row+3, column);
    1666:	6d 2f       	mov	r22, r29
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	8c 0f       	add	r24, r28
    166c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print_special_char(22);
    1670:	86 e1       	ldi	r24, 0x16	; 22
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(23);
    1678:	87 e1       	ldi	r24, 0x17	; 23
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(24);
    1680:	88 e1       	ldi	r24, 0x18	; 24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(25);
    1688:	89 e1       	ldi	r24, 0x19	; 25
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <oled_animate_mario_large>:
		}
	}
}

void oled_animate_mario_large()
{
    1696:	cf 93       	push	r28
    1698:	c0 e0       	ldi	r28, 0x00	; 0
	int i, j;
	
	//oled_reset();
	for (i = 0; i < 5; i++)
	{
		oled_print_mario_large(i,0);
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	8c 2f       	mov	r24, r28
    169e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <oled_print_mario_large>
    16a2:	2f ef       	ldi	r18, 0xFF	; 255
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	95 e0       	ldi	r25, 0x05	; 5
    16a8:	21 50       	subi	r18, 0x01	; 1
    16aa:	80 40       	sbci	r24, 0x00	; 0
    16ac:	90 40       	sbci	r25, 0x00	; 0
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <oled_animate_mario_large+0x12>
    16b0:	00 c0       	rjmp	.+0      	; 0x16b2 <oled_animate_mario_large+0x1c>
    16b2:	00 c0       	rjmp	.+0      	; 0x16b4 <oled_animate_mario_large+0x1e>
		_delay_ms(400);
		oled_reset();
    16b4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <oled_reset>
    16b8:	cf 5f       	subi	r28, 0xFF	; 255
	int row = 0;
	int clm = 0;
	int i, j;
	
	//oled_reset();
	for (i = 0; i < 5; i++)
    16ba:	c5 30       	cpi	r28, 0x05	; 5
    16bc:	71 f7       	brne	.-36     	; 0x169a <oled_animate_mario_large+0x4>
    16be:	c0 e0       	ldi	r28, 0x00	; 0
		oled_reset();
	}
	i--;
	for (j = 0; j < 96; j = j+3)
	{
		oled_reset();
    16c0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <oled_reset>
		oled_print_mario_large(i,j);
    16c4:	6c 2f       	mov	r22, r28
    16c6:	84 e0       	ldi	r24, 0x04	; 4
    16c8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <oled_print_mario_large>
    16cc:	2f ef       	ldi	r18, 0xFF	; 255
    16ce:	8f e7       	ldi	r24, 0x7F	; 127
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	21 50       	subi	r18, 0x01	; 1
    16d4:	80 40       	sbci	r24, 0x00	; 0
    16d6:	90 40       	sbci	r25, 0x00	; 0
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <oled_animate_mario_large+0x3c>
    16da:	00 c0       	rjmp	.+0      	; 0x16dc <oled_animate_mario_large+0x46>
    16dc:	00 c0       	rjmp	.+0      	; 0x16de <oled_animate_mario_large+0x48>
    16de:	cd 5f       	subi	r28, 0xFD	; 253
		oled_print_mario_large(i,0);
		_delay_ms(400);
		oled_reset();
	}
	i--;
	for (j = 0; j < 96; j = j+3)
    16e0:	c0 36       	cpi	r28, 0x60	; 96
    16e2:	71 f7       	brne	.-36     	; 0x16c0 <oled_animate_mario_large+0x2a>
	{
		oled_reset();
		oled_print_mario_large(i,j);
		_delay_ms(100);	
	}	
}
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <oled_print_4th_part_ntnu_logo>:
	oled_print_4th_part_ntnu_logo(row + 3, column);	
}

void oled_print_4th_part_ntnu_logo(uint8_t row, uint8_t column)
{
	oled_pos(row, column);
    16e8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print_special_char(38);
    16ec:	86 e2       	ldi	r24, 0x26	; 38
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(39);
    16f4:	87 e2       	ldi	r24, 0x27	; 39
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(40);
    16fc:	88 e2       	ldi	r24, 0x28	; 40
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(41);
    1704:	89 e2       	ldi	r24, 0x29	; 41
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
    170c:	08 95       	ret

0000170e <oled_print_3rd_part_ntnu_logo>:
}

void oled_print_3rd_part_ntnu_logo(uint8_t row, uint8_t column)
{
	oled_pos(row, column);
    170e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print_special_char(34);
    1712:	82 e2       	ldi	r24, 0x22	; 34
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(35);
    171a:	83 e2       	ldi	r24, 0x23	; 35
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(36);
    1722:	84 e2       	ldi	r24, 0x24	; 36
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(37);
    172a:	85 e2       	ldi	r24, 0x25	; 37
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
    1732:	08 95       	ret

00001734 <oled_print_2nd_part_ntnu_logo>:
}

void oled_print_2nd_part_ntnu_logo(uint8_t row, uint8_t column)
{
	oled_pos(row, column);
    1734:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print_special_char(30);
    1738:	8e e1       	ldi	r24, 0x1E	; 30
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(31);
    1740:	8f e1       	ldi	r24, 0x1F	; 31
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(32);
    1748:	80 e2       	ldi	r24, 0x20	; 32
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(33);
    1750:	81 e2       	ldi	r24, 0x21	; 33
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
    1758:	08 95       	ret

0000175a <oled_print_1st_part_ntnu_logo>:
}

void oled_print_1st_part_ntnu_logo(uint8_t row, uint8_t column)
{
	oled_pos(row, column);
    175a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print_special_char(26);
    175e:	8a e1       	ldi	r24, 0x1A	; 26
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(27);
    1766:	8b e1       	ldi	r24, 0x1B	; 27
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(28);
    176e:	8c e1       	ldi	r24, 0x1C	; 28
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
	oled_print_special_char(29);
    1776:	8d e1       	ldi	r24, 0x1D	; 29
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_print_special_char>
    177e:	08 95       	ret

00001780 <oled_print_ntnu_logo>:
	oled_reset();
	oled_animate_mario_large();
}

void oled_print_ntnu_logo(uint8_t row, uint8_t column)
{
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
	oled_print_1st_part_ntnu_logo(row, column);
    1788:	06 2f       	mov	r16, r22
    178a:	10 e0       	ldi	r17, 0x00	; 0
    178c:	c8 2f       	mov	r28, r24
    178e:	d0 e0       	ldi	r29, 0x00	; 0
    1790:	b8 01       	movw	r22, r16
    1792:	ce 01       	movw	r24, r28
    1794:	0e 94 ad 0b 	call	0x175a	; 0x175a <oled_print_1st_part_ntnu_logo>
	oled_print_2nd_part_ntnu_logo(row + 1, column);
    1798:	b8 01       	movw	r22, r16
    179a:	ce 01       	movw	r24, r28
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <oled_print_2nd_part_ntnu_logo>
	oled_print_3rd_part_ntnu_logo(row + 2, column);
    17a2:	b8 01       	movw	r22, r16
    17a4:	ce 01       	movw	r24, r28
    17a6:	02 96       	adiw	r24, 0x02	; 2
    17a8:	0e 94 87 0b 	call	0x170e	; 0x170e <oled_print_3rd_part_ntnu_logo>
	oled_print_4th_part_ntnu_logo(row + 3, column);	
    17ac:	b8 01       	movw	r22, r16
    17ae:	ce 01       	movw	r24, r28
    17b0:	03 96       	adiw	r24, 0x03	; 3
    17b2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print_4th_part_ntnu_logo>
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	08 95       	ret

000017c0 <oled_animate_ntnu>:

void oled_animate_ntnu()
{
	int row = 0, column = 0;
	
	oled_reset();
    17c0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <oled_reset>
	oled_print_4th_part_ntnu_logo(row, column);
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print_4th_part_ntnu_logo>
    17cc:	2f ef       	ldi	r18, 0xFF	; 255
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	21 50       	subi	r18, 0x01	; 1
    17d4:	80 40       	sbci	r24, 0x00	; 0
    17d6:	90 40       	sbci	r25, 0x00	; 0
    17d8:	e1 f7       	brne	.-8      	; 0x17d2 <oled_animate_ntnu+0x12>
    17da:	00 c0       	rjmp	.+0      	; 0x17dc <oled_animate_ntnu+0x1c>
    17dc:	00 c0       	rjmp	.+0      	; 0x17de <oled_animate_ntnu+0x1e>
	_delay_ms(200);
	
	oled_reset();
    17de:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <oled_reset>
	oled_print_3rd_part_ntnu_logo(row, column);
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	0e 94 87 0b 	call	0x170e	; 0x170e <oled_print_3rd_part_ntnu_logo>
	oled_print_4th_part_ntnu_logo(row + 1, column);
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print_4th_part_ntnu_logo>
    17f2:	2f ef       	ldi	r18, 0xFF	; 255
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	21 50       	subi	r18, 0x01	; 1
    17fa:	80 40       	sbci	r24, 0x00	; 0
    17fc:	90 40       	sbci	r25, 0x00	; 0
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <oled_animate_ntnu+0x38>
    1800:	00 c0       	rjmp	.+0      	; 0x1802 <oled_animate_ntnu+0x42>
    1802:	00 c0       	rjmp	.+0      	; 0x1804 <oled_animate_ntnu+0x44>
	_delay_ms(200);
	
	oled_reset();
    1804:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <oled_reset>
	oled_print_2nd_part_ntnu_logo(row, column);
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <oled_print_2nd_part_ntnu_logo>
	oled_print_3rd_part_ntnu_logo(row + 1, column);
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0e 94 87 0b 	call	0x170e	; 0x170e <oled_print_3rd_part_ntnu_logo>
	oled_print_4th_part_ntnu_logo(row + 2, column);
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_print_4th_part_ntnu_logo>
    1820:	2f ef       	ldi	r18, 0xFF	; 255
    1822:	8f ef       	ldi	r24, 0xFF	; 255
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	21 50       	subi	r18, 0x01	; 1
    1828:	80 40       	sbci	r24, 0x00	; 0
    182a:	90 40       	sbci	r25, 0x00	; 0
    182c:	e1 f7       	brne	.-8      	; 0x1826 <oled_animate_ntnu+0x66>
    182e:	00 c0       	rjmp	.+0      	; 0x1830 <oled_animate_ntnu+0x70>
    1830:	00 c0       	rjmp	.+0      	; 0x1832 <oled_animate_ntnu+0x72>
	_delay_ms(200);
	
	oled_reset();
    1832:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <oled_reset>
	oled_print_ntnu_logo(row, column);
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <oled_print_ntnu_logo>
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	9b e0       	ldi	r25, 0x0B	; 11
    1844:	21 50       	subi	r18, 0x01	; 1
    1846:	80 40       	sbci	r24, 0x00	; 0
    1848:	90 40       	sbci	r25, 0x00	; 0
    184a:	e1 f7       	brne	.-8      	; 0x1844 <oled_animate_ntnu+0x84>
    184c:	00 c0       	rjmp	.+0      	; 0x184e <oled_animate_ntnu+0x8e>
    184e:	00 c0       	rjmp	.+0      	; 0x1850 <oled_animate_ntnu+0x90>
	_delay_ms(800);
	
	
	row = 5;
	oled_pos(row, column);
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	85 e0       	ldi	r24, 0x05	; 5
    1854:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print("NTNU", 3);
    1858:	63 e0       	ldi	r22, 0x03	; 3
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	81 e9       	ldi	r24, 0x91	; 145
    185e:	92 e0       	ldi	r25, 0x02	; 2
    1860:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
    1864:	2f ef       	ldi	r18, 0xFF	; 255
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	9b e0       	ldi	r25, 0x0B	; 11
    186a:	21 50       	subi	r18, 0x01	; 1
    186c:	80 40       	sbci	r24, 0x00	; 0
    186e:	90 40       	sbci	r25, 0x00	; 0
    1870:	e1 f7       	brne	.-8      	; 0x186a <oled_animate_ntnu+0xaa>
    1872:	00 c0       	rjmp	.+0      	; 0x1874 <oled_animate_ntnu+0xb4>
    1874:	00 c0       	rjmp	.+0      	; 0x1876 <oled_animate_ntnu+0xb6>
	_delay_ms(800);
	
	row = 4;
	column = 40;
	oled_pos(row, column);
    1876:	68 e2       	ldi	r22, 0x28	; 40
    1878:	84 e0       	ldi	r24, 0x04	; 4
    187a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print("CHALLENGE", 3);
    187e:	63 e0       	ldi	r22, 0x03	; 3
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	86 e9       	ldi	r24, 0x96	; 150
    1884:	92 e0       	ldi	r25, 0x02	; 2
    1886:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
	row = 5;
	oled_pos(row, column);
    188a:	68 e2       	ldi	r22, 0x28	; 40
    188c:	85 e0       	ldi	r24, 0x05	; 5
    188e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print("THE OCEAN", 3);
    1892:	63 e0       	ldi	r22, 0x03	; 3
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	80 ea       	ldi	r24, 0xA0	; 160
    1898:	92 e0       	ldi	r25, 0x02	; 2
    189a:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
    189e:	2f ef       	ldi	r18, 0xFF	; 255
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	9b e0       	ldi	r25, 0x0B	; 11
    18a4:	21 50       	subi	r18, 0x01	; 1
    18a6:	80 40       	sbci	r24, 0x00	; 0
    18a8:	90 40       	sbci	r25, 0x00	; 0
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <oled_animate_ntnu+0xe4>
    18ac:	00 c0       	rjmp	.+0      	; 0x18ae <oled_animate_ntnu+0xee>
    18ae:	00 c0       	rjmp	.+0      	; 0x18b0 <oled_animate_ntnu+0xf0>
	_delay_ms(800);
	oled_pos(row, column);
    18b0:	68 e2       	ldi	r22, 0x28	; 40
    18b2:	85 e0       	ldi	r24, 0x05	; 5
    18b4:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print("POLLUTION", 3);
    18b8:	63 e0       	ldi	r22, 0x03	; 3
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	8a ea       	ldi	r24, 0xAA	; 170
    18be:	92 e0       	ldi	r25, 0x02	; 2
    18c0:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
    18c4:	2f ef       	ldi	r18, 0xFF	; 255
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	9b e0       	ldi	r25, 0x0B	; 11
    18ca:	21 50       	subi	r18, 0x01	; 1
    18cc:	80 40       	sbci	r24, 0x00	; 0
    18ce:	90 40       	sbci	r25, 0x00	; 0
    18d0:	e1 f7       	brne	.-8      	; 0x18ca <oled_animate_ntnu+0x10a>
    18d2:	00 c0       	rjmp	.+0      	; 0x18d4 <oled_animate_ntnu+0x114>
    18d4:	00 c0       	rjmp	.+0      	; 0x18d6 <oled_animate_ntnu+0x116>
	_delay_ms(800);
	oled_pos(row, column);
    18d6:	68 e2       	ldi	r22, 0x28	; 40
    18d8:	85 e0       	ldi	r24, 0x05	; 5
    18da:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print("PING PONG", 3);
    18de:	63 e0       	ldi	r22, 0x03	; 3
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	84 eb       	ldi	r24, 0xB4	; 180
    18e4:	92 e0       	ldi	r25, 0x02	; 2
    18e6:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
    18ea:	2f ef       	ldi	r18, 0xFF	; 255
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	9e e0       	ldi	r25, 0x0E	; 14
    18f0:	21 50       	subi	r18, 0x01	; 1
    18f2:	80 40       	sbci	r24, 0x00	; 0
    18f4:	90 40       	sbci	r25, 0x00	; 0
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <oled_animate_ntnu+0x130>
    18f8:	00 c0       	rjmp	.+0      	; 0x18fa <oled_animate_ntnu+0x13a>
    18fa:	00 00       	nop
	_delay_ms(1000);
	
	row = 1;
	column = 40;
	oled_pos(row, column);
    18fc:	68 e2       	ldi	r22, 0x28	; 40
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print("?", 3);
    1904:	63 e0       	ldi	r22, 0x03	; 3
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	8e eb       	ldi	r24, 0xBE	; 190
    190a:	92 e0       	ldi	r25, 0x02	; 2
    190c:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
    1910:	8f ef       	ldi	r24, 0xFF	; 255
    1912:	9f e2       	ldi	r25, 0x2F	; 47
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <oled_animate_ntnu+0x154>
    1918:	00 c0       	rjmp	.+0      	; 0x191a <oled_animate_ntnu+0x15a>
    191a:	00 00       	nop
	_delay_ms(10);
	column = 48;
	oled_print("?", 3);
    191c:	63 e0       	ldi	r22, 0x03	; 3
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	8e eb       	ldi	r24, 0xBE	; 190
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
    1928:	8f ef       	ldi	r24, 0xFF	; 255
    192a:	9f e2       	ldi	r25, 0x2F	; 47
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <oled_animate_ntnu+0x16c>
    1930:	00 c0       	rjmp	.+0      	; 0x1932 <oled_animate_ntnu+0x172>
    1932:	00 00       	nop
	_delay_ms(10);
	column = 54;
	oled_print("?", 3);
    1934:	63 e0       	ldi	r22, 0x03	; 3
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	8e eb       	ldi	r24, 0xBE	; 190
    193a:	92 e0       	ldi	r25, 0x02	; 2
    193c:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	9f e2       	ldi	r25, 0x2F	; 47
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <oled_animate_ntnu+0x184>
    1948:	00 c0       	rjmp	.+0      	; 0x194a <oled_animate_ntnu+0x18a>
    194a:	00 00       	nop
    194c:	08 95       	ret

0000194e <oled_ingame_display>:
	_delay_ms(10);
}

void oled_ingame_display(int score)
{
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	2a 97       	sbiw	r28, 0x0a	; 10
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	18 2f       	mov	r17, r24
    1968:	09 2f       	mov	r16, r25
	oled_reset();
    196a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <oled_reset>
	int row = 2, column = 8;
	char text[10];
	sprintf(text, "SCORE %d\0", score);
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	86 e0       	ldi	r24, 0x06	; 6
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	9f 93       	push	r25
    1978:	8f 93       	push	r24
    197a:	8e 01       	movw	r16, r28
    197c:	0f 5f       	subi	r16, 0xFF	; 255
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	1f 93       	push	r17
    1982:	0f 93       	push	r16
    1984:	0e 94 21 10 	call	0x2042	; 0x2042 <sprintf>
	oled_pos(row, column);
    1988:	68 e0       	ldi	r22, 0x08	; 8
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <oled_pos>
	oled_print(text, 3);
    1990:	63 e0       	ldi	r22, 0x03	; 3
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	c8 01       	movw	r24, r16
    1996:	0e 94 b6 0a 	call	0x156c	; 0x156c <oled_print>
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	2a 96       	adiw	r28, 0x0a	; 10
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	08 95       	ret

000019bc <SPI_MasterInit>:
//TODO - define for register bit (reusable code)

void SPI_MasterInit(void)
{
    /* Set MOSI, SCK output and SS all others input */
    DDRB = (1<<DDB5)|(1<<DDB7)|(1<<DDB4);
    19bc:	80 eb       	ldi	r24, 0xB0	; 176
    19be:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input 
	clear_bit(DDRB, DDB6);
    19c0:	be 98       	cbi	0x17, 6	; 23
	
    /* Enable SPI, Master, set clock rate fck/16 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    19c2:	81 e5       	ldi	r24, 0x51	; 81
    19c4:	8d b9       	out	0x0d, r24	; 13
    19c6:	08 95       	ret

000019c8 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
    /* Start transmission */
    SPDR = cData;
    19c8:	8f b9       	out	0x0f, r24	; 15
    /* Wait for transmission complete */
    while(!(SPSR & (1<<SPIF)));
    19ca:	77 9b       	sbis	0x0e, 7	; 14
    19cc:	fe cf       	rjmp	.-4      	; 0x19ca <SPI_MasterTransmit+0x2>
}
    19ce:	08 95       	ret

000019d0 <spi_init>:

void spi_init()
{
	SPI_MasterInit();
    19d0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <SPI_MasterInit>
    19d4:	08 95       	ret

000019d6 <spi_send>:
}

void spi_send(char data)
{
	SPI_MasterTransmit(data);	
    19d6:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <SPI_MasterTransmit>
    19da:	08 95       	ret

000019dc <spi_read>:
	
}

char spi_read()
{
	SPI_MasterTransmit(0x00);
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <SPI_MasterTransmit>
	return SPDR;
    19e2:	8f b1       	in	r24, 0x0f	; 15
}
    19e4:	08 95       	ret

000019e6 <SRAM_init>:
#include "avr/io.h" 

void SRAM_init()
{
	//Enable XMEM
	set_bit(MCUCR, SRE);
    19e6:	85 b7       	in	r24, 0x35	; 53
    19e8:	80 68       	ori	r24, 0x80	; 128
    19ea:	85 bf       	out	0x35, r24	; 53
	
	//Mask JTAG pins
	SFIOR |= (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    19ec:	80 b7       	in	r24, 0x30	; 48
    19ee:	80 62       	ori	r24, 0x20	; 32
    19f0:	80 bf       	out	0x30, r24	; 48
    19f2:	08 95       	ret

000019f4 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    19f4:	5d 9b       	sbis	0x0b, 5	; 11
    19f6:	fe cf       	rjmp	.-4      	; 0x19f4 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    19f8:	8c b9       	out	0x0c, r24	; 12
    19fa:	08 95       	ret

000019fc <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
    19fc:	5f 9b       	sbis	0x0b, 7	; 11
    19fe:	fe cf       	rjmp	.-4      	; 0x19fc <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
    1a00:	8c b1       	in	r24, 0x0c	; 12
}
    1a02:	08 95       	ret

00001a04 <USART_Init>:
#include "avr/io.h"

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr >> 8);
    1a04:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
    1a06:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    1a08:	88 e1       	ldi	r24, 0x18	; 24
    1a0a:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0)|(3 << UCSZ00);
    1a0c:	8e e8       	ldi	r24, 0x8E	; 142
    1a0e:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_Transmit, USART_Receive);
    1a10:	6e ef       	ldi	r22, 0xFE	; 254
    1a12:	7c e0       	ldi	r23, 0x0C	; 12
    1a14:	8a ef       	ldi	r24, 0xFA	; 250
    1a16:	9c e0       	ldi	r25, 0x0C	; 12
    1a18:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <fdevopen>
    1a1c:	08 95       	ret

00001a1e <__subsf3>:
    1a1e:	50 58       	subi	r21, 0x80	; 128

00001a20 <__addsf3>:
    1a20:	bb 27       	eor	r27, r27
    1a22:	aa 27       	eor	r26, r26
    1a24:	0e d0       	rcall	.+28     	; 0x1a42 <__addsf3x>
    1a26:	4d c1       	rjmp	.+666    	; 0x1cc2 <__fp_round>
    1a28:	3e d1       	rcall	.+636    	; 0x1ca6 <__fp_pscA>
    1a2a:	30 f0       	brcs	.+12     	; 0x1a38 <__addsf3+0x18>
    1a2c:	43 d1       	rcall	.+646    	; 0x1cb4 <__fp_pscB>
    1a2e:	20 f0       	brcs	.+8      	; 0x1a38 <__addsf3+0x18>
    1a30:	31 f4       	brne	.+12     	; 0x1a3e <__addsf3+0x1e>
    1a32:	9f 3f       	cpi	r25, 0xFF	; 255
    1a34:	11 f4       	brne	.+4      	; 0x1a3a <__addsf3+0x1a>
    1a36:	1e f4       	brtc	.+6      	; 0x1a3e <__addsf3+0x1e>
    1a38:	33 c1       	rjmp	.+614    	; 0x1ca0 <__fp_nan>
    1a3a:	0e f4       	brtc	.+2      	; 0x1a3e <__addsf3+0x1e>
    1a3c:	e0 95       	com	r30
    1a3e:	e7 fb       	bst	r30, 7
    1a40:	29 c1       	rjmp	.+594    	; 0x1c94 <__fp_inf>

00001a42 <__addsf3x>:
    1a42:	e9 2f       	mov	r30, r25
    1a44:	4f d1       	rcall	.+670    	; 0x1ce4 <__fp_split3>
    1a46:	80 f3       	brcs	.-32     	; 0x1a28 <__addsf3+0x8>
    1a48:	ba 17       	cp	r27, r26
    1a4a:	62 07       	cpc	r22, r18
    1a4c:	73 07       	cpc	r23, r19
    1a4e:	84 07       	cpc	r24, r20
    1a50:	95 07       	cpc	r25, r21
    1a52:	18 f0       	brcs	.+6      	; 0x1a5a <__addsf3x+0x18>
    1a54:	71 f4       	brne	.+28     	; 0x1a72 <__addsf3x+0x30>
    1a56:	9e f5       	brtc	.+102    	; 0x1abe <__addsf3x+0x7c>
    1a58:	67 c1       	rjmp	.+718    	; 0x1d28 <__fp_zero>
    1a5a:	0e f4       	brtc	.+2      	; 0x1a5e <__addsf3x+0x1c>
    1a5c:	e0 95       	com	r30
    1a5e:	0b 2e       	mov	r0, r27
    1a60:	ba 2f       	mov	r27, r26
    1a62:	a0 2d       	mov	r26, r0
    1a64:	0b 01       	movw	r0, r22
    1a66:	b9 01       	movw	r22, r18
    1a68:	90 01       	movw	r18, r0
    1a6a:	0c 01       	movw	r0, r24
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	a0 01       	movw	r20, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	ff 27       	eor	r31, r31
    1a74:	59 1b       	sub	r21, r25
    1a76:	99 f0       	breq	.+38     	; 0x1a9e <__addsf3x+0x5c>
    1a78:	59 3f       	cpi	r21, 0xF9	; 249
    1a7a:	50 f4       	brcc	.+20     	; 0x1a90 <__addsf3x+0x4e>
    1a7c:	50 3e       	cpi	r21, 0xE0	; 224
    1a7e:	68 f1       	brcs	.+90     	; 0x1ada <__addsf3x+0x98>
    1a80:	1a 16       	cp	r1, r26
    1a82:	f0 40       	sbci	r31, 0x00	; 0
    1a84:	a2 2f       	mov	r26, r18
    1a86:	23 2f       	mov	r18, r19
    1a88:	34 2f       	mov	r19, r20
    1a8a:	44 27       	eor	r20, r20
    1a8c:	58 5f       	subi	r21, 0xF8	; 248
    1a8e:	f3 cf       	rjmp	.-26     	; 0x1a76 <__addsf3x+0x34>
    1a90:	46 95       	lsr	r20
    1a92:	37 95       	ror	r19
    1a94:	27 95       	ror	r18
    1a96:	a7 95       	ror	r26
    1a98:	f0 40       	sbci	r31, 0x00	; 0
    1a9a:	53 95       	inc	r21
    1a9c:	c9 f7       	brne	.-14     	; 0x1a90 <__addsf3x+0x4e>
    1a9e:	7e f4       	brtc	.+30     	; 0x1abe <__addsf3x+0x7c>
    1aa0:	1f 16       	cp	r1, r31
    1aa2:	ba 0b       	sbc	r27, r26
    1aa4:	62 0b       	sbc	r22, r18
    1aa6:	73 0b       	sbc	r23, r19
    1aa8:	84 0b       	sbc	r24, r20
    1aaa:	ba f0       	brmi	.+46     	; 0x1ada <__addsf3x+0x98>
    1aac:	91 50       	subi	r25, 0x01	; 1
    1aae:	a1 f0       	breq	.+40     	; 0x1ad8 <__addsf3x+0x96>
    1ab0:	ff 0f       	add	r31, r31
    1ab2:	bb 1f       	adc	r27, r27
    1ab4:	66 1f       	adc	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	c2 f7       	brpl	.-16     	; 0x1aac <__addsf3x+0x6a>
    1abc:	0e c0       	rjmp	.+28     	; 0x1ada <__addsf3x+0x98>
    1abe:	ba 0f       	add	r27, r26
    1ac0:	62 1f       	adc	r22, r18
    1ac2:	73 1f       	adc	r23, r19
    1ac4:	84 1f       	adc	r24, r20
    1ac6:	48 f4       	brcc	.+18     	; 0x1ada <__addsf3x+0x98>
    1ac8:	87 95       	ror	r24
    1aca:	77 95       	ror	r23
    1acc:	67 95       	ror	r22
    1ace:	b7 95       	ror	r27
    1ad0:	f7 95       	ror	r31
    1ad2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <__addsf3x+0x96>
    1ad6:	b3 cf       	rjmp	.-154    	; 0x1a3e <__addsf3+0x1e>
    1ad8:	93 95       	inc	r25
    1ada:	88 0f       	add	r24, r24
    1adc:	08 f0       	brcs	.+2      	; 0x1ae0 <__addsf3x+0x9e>
    1ade:	99 27       	eor	r25, r25
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	97 95       	ror	r25
    1ae4:	87 95       	ror	r24
    1ae6:	08 95       	ret

00001ae8 <__divsf3>:
    1ae8:	0c d0       	rcall	.+24     	; 0x1b02 <__divsf3x>
    1aea:	eb c0       	rjmp	.+470    	; 0x1cc2 <__fp_round>
    1aec:	e3 d0       	rcall	.+454    	; 0x1cb4 <__fp_pscB>
    1aee:	40 f0       	brcs	.+16     	; 0x1b00 <__divsf3+0x18>
    1af0:	da d0       	rcall	.+436    	; 0x1ca6 <__fp_pscA>
    1af2:	30 f0       	brcs	.+12     	; 0x1b00 <__divsf3+0x18>
    1af4:	21 f4       	brne	.+8      	; 0x1afe <__divsf3+0x16>
    1af6:	5f 3f       	cpi	r21, 0xFF	; 255
    1af8:	19 f0       	breq	.+6      	; 0x1b00 <__divsf3+0x18>
    1afa:	cc c0       	rjmp	.+408    	; 0x1c94 <__fp_inf>
    1afc:	51 11       	cpse	r21, r1
    1afe:	15 c1       	rjmp	.+554    	; 0x1d2a <__fp_szero>
    1b00:	cf c0       	rjmp	.+414    	; 0x1ca0 <__fp_nan>

00001b02 <__divsf3x>:
    1b02:	f0 d0       	rcall	.+480    	; 0x1ce4 <__fp_split3>
    1b04:	98 f3       	brcs	.-26     	; 0x1aec <__divsf3+0x4>

00001b06 <__divsf3_pse>:
    1b06:	99 23       	and	r25, r25
    1b08:	c9 f3       	breq	.-14     	; 0x1afc <__divsf3+0x14>
    1b0a:	55 23       	and	r21, r21
    1b0c:	b1 f3       	breq	.-20     	; 0x1afa <__divsf3+0x12>
    1b0e:	95 1b       	sub	r25, r21
    1b10:	55 0b       	sbc	r21, r21
    1b12:	bb 27       	eor	r27, r27
    1b14:	aa 27       	eor	r26, r26
    1b16:	62 17       	cp	r22, r18
    1b18:	73 07       	cpc	r23, r19
    1b1a:	84 07       	cpc	r24, r20
    1b1c:	38 f0       	brcs	.+14     	; 0x1b2c <__divsf3_pse+0x26>
    1b1e:	9f 5f       	subi	r25, 0xFF	; 255
    1b20:	5f 4f       	sbci	r21, 0xFF	; 255
    1b22:	22 0f       	add	r18, r18
    1b24:	33 1f       	adc	r19, r19
    1b26:	44 1f       	adc	r20, r20
    1b28:	aa 1f       	adc	r26, r26
    1b2a:	a9 f3       	breq	.-22     	; 0x1b16 <__divsf3_pse+0x10>
    1b2c:	33 d0       	rcall	.+102    	; 0x1b94 <__divsf3_pse+0x8e>
    1b2e:	0e 2e       	mov	r0, r30
    1b30:	3a f0       	brmi	.+14     	; 0x1b40 <__divsf3_pse+0x3a>
    1b32:	e0 e8       	ldi	r30, 0x80	; 128
    1b34:	30 d0       	rcall	.+96     	; 0x1b96 <__divsf3_pse+0x90>
    1b36:	91 50       	subi	r25, 0x01	; 1
    1b38:	50 40       	sbci	r21, 0x00	; 0
    1b3a:	e6 95       	lsr	r30
    1b3c:	00 1c       	adc	r0, r0
    1b3e:	ca f7       	brpl	.-14     	; 0x1b32 <__divsf3_pse+0x2c>
    1b40:	29 d0       	rcall	.+82     	; 0x1b94 <__divsf3_pse+0x8e>
    1b42:	fe 2f       	mov	r31, r30
    1b44:	27 d0       	rcall	.+78     	; 0x1b94 <__divsf3_pse+0x8e>
    1b46:	66 0f       	add	r22, r22
    1b48:	77 1f       	adc	r23, r23
    1b4a:	88 1f       	adc	r24, r24
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	26 17       	cp	r18, r22
    1b50:	37 07       	cpc	r19, r23
    1b52:	48 07       	cpc	r20, r24
    1b54:	ab 07       	cpc	r26, r27
    1b56:	b0 e8       	ldi	r27, 0x80	; 128
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <__divsf3_pse+0x56>
    1b5a:	bb 0b       	sbc	r27, r27
    1b5c:	80 2d       	mov	r24, r0
    1b5e:	bf 01       	movw	r22, r30
    1b60:	ff 27       	eor	r31, r31
    1b62:	93 58       	subi	r25, 0x83	; 131
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	2a f0       	brmi	.+10     	; 0x1b72 <__divsf3_pse+0x6c>
    1b68:	9e 3f       	cpi	r25, 0xFE	; 254
    1b6a:	51 05       	cpc	r21, r1
    1b6c:	68 f0       	brcs	.+26     	; 0x1b88 <__divsf3_pse+0x82>
    1b6e:	92 c0       	rjmp	.+292    	; 0x1c94 <__fp_inf>
    1b70:	dc c0       	rjmp	.+440    	; 0x1d2a <__fp_szero>
    1b72:	5f 3f       	cpi	r21, 0xFF	; 255
    1b74:	ec f3       	brlt	.-6      	; 0x1b70 <__divsf3_pse+0x6a>
    1b76:	98 3e       	cpi	r25, 0xE8	; 232
    1b78:	dc f3       	brlt	.-10     	; 0x1b70 <__divsf3_pse+0x6a>
    1b7a:	86 95       	lsr	r24
    1b7c:	77 95       	ror	r23
    1b7e:	67 95       	ror	r22
    1b80:	b7 95       	ror	r27
    1b82:	f7 95       	ror	r31
    1b84:	9f 5f       	subi	r25, 0xFF	; 255
    1b86:	c9 f7       	brne	.-14     	; 0x1b7a <__divsf3_pse+0x74>
    1b88:	88 0f       	add	r24, r24
    1b8a:	91 1d       	adc	r25, r1
    1b8c:	96 95       	lsr	r25
    1b8e:	87 95       	ror	r24
    1b90:	97 f9       	bld	r25, 7
    1b92:	08 95       	ret
    1b94:	e1 e0       	ldi	r30, 0x01	; 1
    1b96:	66 0f       	add	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	88 1f       	adc	r24, r24
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	62 17       	cp	r22, r18
    1ba0:	73 07       	cpc	r23, r19
    1ba2:	84 07       	cpc	r24, r20
    1ba4:	ba 07       	cpc	r27, r26
    1ba6:	20 f0       	brcs	.+8      	; 0x1bb0 <__divsf3_pse+0xaa>
    1ba8:	62 1b       	sub	r22, r18
    1baa:	73 0b       	sbc	r23, r19
    1bac:	84 0b       	sbc	r24, r20
    1bae:	ba 0b       	sbc	r27, r26
    1bb0:	ee 1f       	adc	r30, r30
    1bb2:	88 f7       	brcc	.-30     	; 0x1b96 <__divsf3_pse+0x90>
    1bb4:	e0 95       	com	r30
    1bb6:	08 95       	ret

00001bb8 <__fixsfsi>:
    1bb8:	04 d0       	rcall	.+8      	; 0x1bc2 <__fixunssfsi>
    1bba:	68 94       	set
    1bbc:	b1 11       	cpse	r27, r1
    1bbe:	b5 c0       	rjmp	.+362    	; 0x1d2a <__fp_szero>
    1bc0:	08 95       	ret

00001bc2 <__fixunssfsi>:
    1bc2:	98 d0       	rcall	.+304    	; 0x1cf4 <__fp_splitA>
    1bc4:	88 f0       	brcs	.+34     	; 0x1be8 <__fixunssfsi+0x26>
    1bc6:	9f 57       	subi	r25, 0x7F	; 127
    1bc8:	90 f0       	brcs	.+36     	; 0x1bee <__fixunssfsi+0x2c>
    1bca:	b9 2f       	mov	r27, r25
    1bcc:	99 27       	eor	r25, r25
    1bce:	b7 51       	subi	r27, 0x17	; 23
    1bd0:	a0 f0       	brcs	.+40     	; 0x1bfa <__fixunssfsi+0x38>
    1bd2:	d1 f0       	breq	.+52     	; 0x1c08 <__fixunssfsi+0x46>
    1bd4:	66 0f       	add	r22, r22
    1bd6:	77 1f       	adc	r23, r23
    1bd8:	88 1f       	adc	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	1a f0       	brmi	.+6      	; 0x1be4 <__fixunssfsi+0x22>
    1bde:	ba 95       	dec	r27
    1be0:	c9 f7       	brne	.-14     	; 0x1bd4 <__fixunssfsi+0x12>
    1be2:	12 c0       	rjmp	.+36     	; 0x1c08 <__fixunssfsi+0x46>
    1be4:	b1 30       	cpi	r27, 0x01	; 1
    1be6:	81 f0       	breq	.+32     	; 0x1c08 <__fixunssfsi+0x46>
    1be8:	9f d0       	rcall	.+318    	; 0x1d28 <__fp_zero>
    1bea:	b1 e0       	ldi	r27, 0x01	; 1
    1bec:	08 95       	ret
    1bee:	9c c0       	rjmp	.+312    	; 0x1d28 <__fp_zero>
    1bf0:	67 2f       	mov	r22, r23
    1bf2:	78 2f       	mov	r23, r24
    1bf4:	88 27       	eor	r24, r24
    1bf6:	b8 5f       	subi	r27, 0xF8	; 248
    1bf8:	39 f0       	breq	.+14     	; 0x1c08 <__fixunssfsi+0x46>
    1bfa:	b9 3f       	cpi	r27, 0xF9	; 249
    1bfc:	cc f3       	brlt	.-14     	; 0x1bf0 <__fixunssfsi+0x2e>
    1bfe:	86 95       	lsr	r24
    1c00:	77 95       	ror	r23
    1c02:	67 95       	ror	r22
    1c04:	b3 95       	inc	r27
    1c06:	d9 f7       	brne	.-10     	; 0x1bfe <__fixunssfsi+0x3c>
    1c08:	3e f4       	brtc	.+14     	; 0x1c18 <__fixunssfsi+0x56>
    1c0a:	90 95       	com	r25
    1c0c:	80 95       	com	r24
    1c0e:	70 95       	com	r23
    1c10:	61 95       	neg	r22
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	8f 4f       	sbci	r24, 0xFF	; 255
    1c16:	9f 4f       	sbci	r25, 0xFF	; 255
    1c18:	08 95       	ret

00001c1a <__floatunsisf>:
    1c1a:	e8 94       	clt
    1c1c:	09 c0       	rjmp	.+18     	; 0x1c30 <__floatsisf+0x12>

00001c1e <__floatsisf>:
    1c1e:	97 fb       	bst	r25, 7
    1c20:	3e f4       	brtc	.+14     	; 0x1c30 <__floatsisf+0x12>
    1c22:	90 95       	com	r25
    1c24:	80 95       	com	r24
    1c26:	70 95       	com	r23
    1c28:	61 95       	neg	r22
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c30:	99 23       	and	r25, r25
    1c32:	a9 f0       	breq	.+42     	; 0x1c5e <__floatsisf+0x40>
    1c34:	f9 2f       	mov	r31, r25
    1c36:	96 e9       	ldi	r25, 0x96	; 150
    1c38:	bb 27       	eor	r27, r27
    1c3a:	93 95       	inc	r25
    1c3c:	f6 95       	lsr	r31
    1c3e:	87 95       	ror	r24
    1c40:	77 95       	ror	r23
    1c42:	67 95       	ror	r22
    1c44:	b7 95       	ror	r27
    1c46:	f1 11       	cpse	r31, r1
    1c48:	f8 cf       	rjmp	.-16     	; 0x1c3a <__floatsisf+0x1c>
    1c4a:	fa f4       	brpl	.+62     	; 0x1c8a <__floatsisf+0x6c>
    1c4c:	bb 0f       	add	r27, r27
    1c4e:	11 f4       	brne	.+4      	; 0x1c54 <__floatsisf+0x36>
    1c50:	60 ff       	sbrs	r22, 0
    1c52:	1b c0       	rjmp	.+54     	; 0x1c8a <__floatsisf+0x6c>
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	16 c0       	rjmp	.+44     	; 0x1c8a <__floatsisf+0x6c>
    1c5e:	88 23       	and	r24, r24
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <__floatsisf+0x48>
    1c62:	96 e9       	ldi	r25, 0x96	; 150
    1c64:	11 c0       	rjmp	.+34     	; 0x1c88 <__floatsisf+0x6a>
    1c66:	77 23       	and	r23, r23
    1c68:	21 f0       	breq	.+8      	; 0x1c72 <__floatsisf+0x54>
    1c6a:	9e e8       	ldi	r25, 0x8E	; 142
    1c6c:	87 2f       	mov	r24, r23
    1c6e:	76 2f       	mov	r23, r22
    1c70:	05 c0       	rjmp	.+10     	; 0x1c7c <__floatsisf+0x5e>
    1c72:	66 23       	and	r22, r22
    1c74:	71 f0       	breq	.+28     	; 0x1c92 <__floatsisf+0x74>
    1c76:	96 e8       	ldi	r25, 0x86	; 134
    1c78:	86 2f       	mov	r24, r22
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	2a f0       	brmi	.+10     	; 0x1c8a <__floatsisf+0x6c>
    1c80:	9a 95       	dec	r25
    1c82:	66 0f       	add	r22, r22
    1c84:	77 1f       	adc	r23, r23
    1c86:	88 1f       	adc	r24, r24
    1c88:	da f7       	brpl	.-10     	; 0x1c80 <__floatsisf+0x62>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	96 95       	lsr	r25
    1c8e:	87 95       	ror	r24
    1c90:	97 f9       	bld	r25, 7
    1c92:	08 95       	ret

00001c94 <__fp_inf>:
    1c94:	97 f9       	bld	r25, 7
    1c96:	9f 67       	ori	r25, 0x7F	; 127
    1c98:	80 e8       	ldi	r24, 0x80	; 128
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	08 95       	ret

00001ca0 <__fp_nan>:
    1ca0:	9f ef       	ldi	r25, 0xFF	; 255
    1ca2:	80 ec       	ldi	r24, 0xC0	; 192
    1ca4:	08 95       	ret

00001ca6 <__fp_pscA>:
    1ca6:	00 24       	eor	r0, r0
    1ca8:	0a 94       	dec	r0
    1caa:	16 16       	cp	r1, r22
    1cac:	17 06       	cpc	r1, r23
    1cae:	18 06       	cpc	r1, r24
    1cb0:	09 06       	cpc	r0, r25
    1cb2:	08 95       	ret

00001cb4 <__fp_pscB>:
    1cb4:	00 24       	eor	r0, r0
    1cb6:	0a 94       	dec	r0
    1cb8:	12 16       	cp	r1, r18
    1cba:	13 06       	cpc	r1, r19
    1cbc:	14 06       	cpc	r1, r20
    1cbe:	05 06       	cpc	r0, r21
    1cc0:	08 95       	ret

00001cc2 <__fp_round>:
    1cc2:	09 2e       	mov	r0, r25
    1cc4:	03 94       	inc	r0
    1cc6:	00 0c       	add	r0, r0
    1cc8:	11 f4       	brne	.+4      	; 0x1cce <__fp_round+0xc>
    1cca:	88 23       	and	r24, r24
    1ccc:	52 f0       	brmi	.+20     	; 0x1ce2 <__fp_round+0x20>
    1cce:	bb 0f       	add	r27, r27
    1cd0:	40 f4       	brcc	.+16     	; 0x1ce2 <__fp_round+0x20>
    1cd2:	bf 2b       	or	r27, r31
    1cd4:	11 f4       	brne	.+4      	; 0x1cda <__fp_round+0x18>
    1cd6:	60 ff       	sbrs	r22, 0
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <__fp_round+0x20>
    1cda:	6f 5f       	subi	r22, 0xFF	; 255
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	08 95       	ret

00001ce4 <__fp_split3>:
    1ce4:	57 fd       	sbrc	r21, 7
    1ce6:	90 58       	subi	r25, 0x80	; 128
    1ce8:	44 0f       	add	r20, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	59 f0       	breq	.+22     	; 0x1d04 <__fp_splitA+0x10>
    1cee:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf0:	71 f0       	breq	.+28     	; 0x1d0e <__fp_splitA+0x1a>
    1cf2:	47 95       	ror	r20

00001cf4 <__fp_splitA>:
    1cf4:	88 0f       	add	r24, r24
    1cf6:	97 fb       	bst	r25, 7
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	61 f0       	breq	.+24     	; 0x1d14 <__fp_splitA+0x20>
    1cfc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cfe:	79 f0       	breq	.+30     	; 0x1d1e <__fp_splitA+0x2a>
    1d00:	87 95       	ror	r24
    1d02:	08 95       	ret
    1d04:	12 16       	cp	r1, r18
    1d06:	13 06       	cpc	r1, r19
    1d08:	14 06       	cpc	r1, r20
    1d0a:	55 1f       	adc	r21, r21
    1d0c:	f2 cf       	rjmp	.-28     	; 0x1cf2 <__fp_split3+0xe>
    1d0e:	46 95       	lsr	r20
    1d10:	f1 df       	rcall	.-30     	; 0x1cf4 <__fp_splitA>
    1d12:	08 c0       	rjmp	.+16     	; 0x1d24 <__fp_splitA+0x30>
    1d14:	16 16       	cp	r1, r22
    1d16:	17 06       	cpc	r1, r23
    1d18:	18 06       	cpc	r1, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	f1 cf       	rjmp	.-30     	; 0x1d00 <__fp_splitA+0xc>
    1d1e:	86 95       	lsr	r24
    1d20:	71 05       	cpc	r23, r1
    1d22:	61 05       	cpc	r22, r1
    1d24:	08 94       	sec
    1d26:	08 95       	ret

00001d28 <__fp_zero>:
    1d28:	e8 94       	clt

00001d2a <__fp_szero>:
    1d2a:	bb 27       	eor	r27, r27
    1d2c:	66 27       	eor	r22, r22
    1d2e:	77 27       	eor	r23, r23
    1d30:	cb 01       	movw	r24, r22
    1d32:	97 f9       	bld	r25, 7
    1d34:	08 95       	ret

00001d36 <malloc>:
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	82 30       	cpi	r24, 0x02	; 2
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	10 f4       	brcc	.+4      	; 0x1d44 <malloc+0xe>
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	e0 91 c9 02 	lds	r30, 0x02C9
    1d48:	f0 91 ca 02 	lds	r31, 0x02CA
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	a0 e0       	ldi	r26, 0x00	; 0
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	30 97       	sbiw	r30, 0x00	; 0
    1d56:	39 f1       	breq	.+78     	; 0x1da6 <malloc+0x70>
    1d58:	40 81       	ld	r20, Z
    1d5a:	51 81       	ldd	r21, Z+1	; 0x01
    1d5c:	48 17       	cp	r20, r24
    1d5e:	59 07       	cpc	r21, r25
    1d60:	b8 f0       	brcs	.+46     	; 0x1d90 <malloc+0x5a>
    1d62:	48 17       	cp	r20, r24
    1d64:	59 07       	cpc	r21, r25
    1d66:	71 f4       	brne	.+28     	; 0x1d84 <malloc+0x4e>
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	10 97       	sbiw	r26, 0x00	; 0
    1d6e:	29 f0       	breq	.+10     	; 0x1d7a <malloc+0x44>
    1d70:	13 96       	adiw	r26, 0x03	; 3
    1d72:	9c 93       	st	X, r25
    1d74:	8e 93       	st	-X, r24
    1d76:	12 97       	sbiw	r26, 0x02	; 2
    1d78:	2c c0       	rjmp	.+88     	; 0x1dd2 <malloc+0x9c>
    1d7a:	90 93 ca 02 	sts	0x02CA, r25
    1d7e:	80 93 c9 02 	sts	0x02C9, r24
    1d82:	27 c0       	rjmp	.+78     	; 0x1dd2 <malloc+0x9c>
    1d84:	21 15       	cp	r18, r1
    1d86:	31 05       	cpc	r19, r1
    1d88:	31 f0       	breq	.+12     	; 0x1d96 <malloc+0x60>
    1d8a:	42 17       	cp	r20, r18
    1d8c:	53 07       	cpc	r21, r19
    1d8e:	18 f0       	brcs	.+6      	; 0x1d96 <malloc+0x60>
    1d90:	a9 01       	movw	r20, r18
    1d92:	db 01       	movw	r26, r22
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <malloc+0x62>
    1d96:	ef 01       	movw	r28, r30
    1d98:	9a 01       	movw	r18, r20
    1d9a:	bd 01       	movw	r22, r26
    1d9c:	df 01       	movw	r26, r30
    1d9e:	02 80       	ldd	r0, Z+2	; 0x02
    1da0:	f3 81       	ldd	r31, Z+3	; 0x03
    1da2:	e0 2d       	mov	r30, r0
    1da4:	d7 cf       	rjmp	.-82     	; 0x1d54 <malloc+0x1e>
    1da6:	21 15       	cp	r18, r1
    1da8:	31 05       	cpc	r19, r1
    1daa:	f9 f0       	breq	.+62     	; 0x1dea <malloc+0xb4>
    1dac:	28 1b       	sub	r18, r24
    1dae:	39 0b       	sbc	r19, r25
    1db0:	24 30       	cpi	r18, 0x04	; 4
    1db2:	31 05       	cpc	r19, r1
    1db4:	80 f4       	brcc	.+32     	; 0x1dd6 <malloc+0xa0>
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dba:	61 15       	cp	r22, r1
    1dbc:	71 05       	cpc	r23, r1
    1dbe:	21 f0       	breq	.+8      	; 0x1dc8 <malloc+0x92>
    1dc0:	fb 01       	movw	r30, r22
    1dc2:	93 83       	std	Z+3, r25	; 0x03
    1dc4:	82 83       	std	Z+2, r24	; 0x02
    1dc6:	04 c0       	rjmp	.+8      	; 0x1dd0 <malloc+0x9a>
    1dc8:	90 93 ca 02 	sts	0x02CA, r25
    1dcc:	80 93 c9 02 	sts	0x02C9, r24
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	32 96       	adiw	r30, 0x02	; 2
    1dd4:	44 c0       	rjmp	.+136    	; 0x1e5e <malloc+0x128>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e2 0f       	add	r30, r18
    1dda:	f3 1f       	adc	r31, r19
    1ddc:	81 93       	st	Z+, r24
    1dde:	91 93       	st	Z+, r25
    1de0:	22 50       	subi	r18, 0x02	; 2
    1de2:	31 09       	sbc	r19, r1
    1de4:	39 83       	std	Y+1, r19	; 0x01
    1de6:	28 83       	st	Y, r18
    1de8:	3a c0       	rjmp	.+116    	; 0x1e5e <malloc+0x128>
    1dea:	20 91 c7 02 	lds	r18, 0x02C7
    1dee:	30 91 c8 02 	lds	r19, 0x02C8
    1df2:	23 2b       	or	r18, r19
    1df4:	41 f4       	brne	.+16     	; 0x1e06 <malloc+0xd0>
    1df6:	20 91 02 01 	lds	r18, 0x0102
    1dfa:	30 91 03 01 	lds	r19, 0x0103
    1dfe:	30 93 c8 02 	sts	0x02C8, r19
    1e02:	20 93 c7 02 	sts	0x02C7, r18
    1e06:	20 91 00 01 	lds	r18, 0x0100
    1e0a:	30 91 01 01 	lds	r19, 0x0101
    1e0e:	21 15       	cp	r18, r1
    1e10:	31 05       	cpc	r19, r1
    1e12:	41 f4       	brne	.+16     	; 0x1e24 <malloc+0xee>
    1e14:	2d b7       	in	r18, 0x3d	; 61
    1e16:	3e b7       	in	r19, 0x3e	; 62
    1e18:	40 91 04 01 	lds	r20, 0x0104
    1e1c:	50 91 05 01 	lds	r21, 0x0105
    1e20:	24 1b       	sub	r18, r20
    1e22:	35 0b       	sbc	r19, r21
    1e24:	e0 91 c7 02 	lds	r30, 0x02C7
    1e28:	f0 91 c8 02 	lds	r31, 0x02C8
    1e2c:	e2 17       	cp	r30, r18
    1e2e:	f3 07       	cpc	r31, r19
    1e30:	a0 f4       	brcc	.+40     	; 0x1e5a <malloc+0x124>
    1e32:	2e 1b       	sub	r18, r30
    1e34:	3f 0b       	sbc	r19, r31
    1e36:	28 17       	cp	r18, r24
    1e38:	39 07       	cpc	r19, r25
    1e3a:	78 f0       	brcs	.+30     	; 0x1e5a <malloc+0x124>
    1e3c:	ac 01       	movw	r20, r24
    1e3e:	4e 5f       	subi	r20, 0xFE	; 254
    1e40:	5f 4f       	sbci	r21, 0xFF	; 255
    1e42:	24 17       	cp	r18, r20
    1e44:	35 07       	cpc	r19, r21
    1e46:	48 f0       	brcs	.+18     	; 0x1e5a <malloc+0x124>
    1e48:	4e 0f       	add	r20, r30
    1e4a:	5f 1f       	adc	r21, r31
    1e4c:	50 93 c8 02 	sts	0x02C8, r21
    1e50:	40 93 c7 02 	sts	0x02C7, r20
    1e54:	81 93       	st	Z+, r24
    1e56:	91 93       	st	Z+, r25
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <malloc+0x128>
    1e5a:	e0 e0       	ldi	r30, 0x00	; 0
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	cf 01       	movw	r24, r30
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <free>:
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <free+0xa>
    1e6e:	87 c0       	rjmp	.+270    	; 0x1f7e <free+0x118>
    1e70:	fc 01       	movw	r30, r24
    1e72:	32 97       	sbiw	r30, 0x02	; 2
    1e74:	13 82       	std	Z+3, r1	; 0x03
    1e76:	12 82       	std	Z+2, r1	; 0x02
    1e78:	c0 91 c9 02 	lds	r28, 0x02C9
    1e7c:	d0 91 ca 02 	lds	r29, 0x02CA
    1e80:	20 97       	sbiw	r28, 0x00	; 0
    1e82:	81 f4       	brne	.+32     	; 0x1ea4 <free+0x3e>
    1e84:	20 81       	ld	r18, Z
    1e86:	31 81       	ldd	r19, Z+1	; 0x01
    1e88:	28 0f       	add	r18, r24
    1e8a:	39 1f       	adc	r19, r25
    1e8c:	80 91 c7 02 	lds	r24, 0x02C7
    1e90:	90 91 c8 02 	lds	r25, 0x02C8
    1e94:	82 17       	cp	r24, r18
    1e96:	93 07       	cpc	r25, r19
    1e98:	79 f5       	brne	.+94     	; 0x1ef8 <free+0x92>
    1e9a:	f0 93 c8 02 	sts	0x02C8, r31
    1e9e:	e0 93 c7 02 	sts	0x02C7, r30
    1ea2:	6d c0       	rjmp	.+218    	; 0x1f7e <free+0x118>
    1ea4:	de 01       	movw	r26, r28
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	ae 17       	cp	r26, r30
    1eac:	bf 07       	cpc	r27, r31
    1eae:	50 f4       	brcc	.+20     	; 0x1ec4 <free+0x5e>
    1eb0:	12 96       	adiw	r26, 0x02	; 2
    1eb2:	4d 91       	ld	r20, X+
    1eb4:	5c 91       	ld	r21, X
    1eb6:	13 97       	sbiw	r26, 0x03	; 3
    1eb8:	9d 01       	movw	r18, r26
    1eba:	41 15       	cp	r20, r1
    1ebc:	51 05       	cpc	r21, r1
    1ebe:	09 f1       	breq	.+66     	; 0x1f02 <free+0x9c>
    1ec0:	da 01       	movw	r26, r20
    1ec2:	f3 cf       	rjmp	.-26     	; 0x1eaa <free+0x44>
    1ec4:	b3 83       	std	Z+3, r27	; 0x03
    1ec6:	a2 83       	std	Z+2, r26	; 0x02
    1ec8:	40 81       	ld	r20, Z
    1eca:	51 81       	ldd	r21, Z+1	; 0x01
    1ecc:	84 0f       	add	r24, r20
    1ece:	95 1f       	adc	r25, r21
    1ed0:	8a 17       	cp	r24, r26
    1ed2:	9b 07       	cpc	r25, r27
    1ed4:	71 f4       	brne	.+28     	; 0x1ef2 <free+0x8c>
    1ed6:	8d 91       	ld	r24, X+
    1ed8:	9c 91       	ld	r25, X
    1eda:	11 97       	sbiw	r26, 0x01	; 1
    1edc:	84 0f       	add	r24, r20
    1ede:	95 1f       	adc	r25, r21
    1ee0:	02 96       	adiw	r24, 0x02	; 2
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	80 83       	st	Z, r24
    1ee6:	12 96       	adiw	r26, 0x02	; 2
    1ee8:	8d 91       	ld	r24, X+
    1eea:	9c 91       	ld	r25, X
    1eec:	13 97       	sbiw	r26, 0x03	; 3
    1eee:	93 83       	std	Z+3, r25	; 0x03
    1ef0:	82 83       	std	Z+2, r24	; 0x02
    1ef2:	21 15       	cp	r18, r1
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	29 f4       	brne	.+10     	; 0x1f02 <free+0x9c>
    1ef8:	f0 93 ca 02 	sts	0x02CA, r31
    1efc:	e0 93 c9 02 	sts	0x02C9, r30
    1f00:	3e c0       	rjmp	.+124    	; 0x1f7e <free+0x118>
    1f02:	d9 01       	movw	r26, r18
    1f04:	13 96       	adiw	r26, 0x03	; 3
    1f06:	fc 93       	st	X, r31
    1f08:	ee 93       	st	-X, r30
    1f0a:	12 97       	sbiw	r26, 0x02	; 2
    1f0c:	4d 91       	ld	r20, X+
    1f0e:	5d 91       	ld	r21, X+
    1f10:	a4 0f       	add	r26, r20
    1f12:	b5 1f       	adc	r27, r21
    1f14:	ea 17       	cp	r30, r26
    1f16:	fb 07       	cpc	r31, r27
    1f18:	79 f4       	brne	.+30     	; 0x1f38 <free+0xd2>
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	84 0f       	add	r24, r20
    1f20:	95 1f       	adc	r25, r21
    1f22:	02 96       	adiw	r24, 0x02	; 2
    1f24:	d9 01       	movw	r26, r18
    1f26:	11 96       	adiw	r26, 0x01	; 1
    1f28:	9c 93       	st	X, r25
    1f2a:	8e 93       	st	-X, r24
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	13 96       	adiw	r26, 0x03	; 3
    1f32:	9c 93       	st	X, r25
    1f34:	8e 93       	st	-X, r24
    1f36:	12 97       	sbiw	r26, 0x02	; 2
    1f38:	e0 e0       	ldi	r30, 0x00	; 0
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	19 f0       	breq	.+6      	; 0x1f4a <free+0xe4>
    1f44:	fe 01       	movw	r30, r28
    1f46:	ec 01       	movw	r28, r24
    1f48:	f9 cf       	rjmp	.-14     	; 0x1f3c <free+0xd6>
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	02 96       	adiw	r24, 0x02	; 2
    1f4e:	28 81       	ld	r18, Y
    1f50:	39 81       	ldd	r19, Y+1	; 0x01
    1f52:	82 0f       	add	r24, r18
    1f54:	93 1f       	adc	r25, r19
    1f56:	20 91 c7 02 	lds	r18, 0x02C7
    1f5a:	30 91 c8 02 	lds	r19, 0x02C8
    1f5e:	28 17       	cp	r18, r24
    1f60:	39 07       	cpc	r19, r25
    1f62:	69 f4       	brne	.+26     	; 0x1f7e <free+0x118>
    1f64:	30 97       	sbiw	r30, 0x00	; 0
    1f66:	29 f4       	brne	.+10     	; 0x1f72 <free+0x10c>
    1f68:	10 92 ca 02 	sts	0x02CA, r1
    1f6c:	10 92 c9 02 	sts	0x02C9, r1
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <free+0x110>
    1f72:	13 82       	std	Z+3, r1	; 0x03
    1f74:	12 82       	std	Z+2, r1	; 0x02
    1f76:	d0 93 c8 02 	sts	0x02C8, r29
    1f7a:	c0 93 c7 02 	sts	0x02C7, r28
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	08 95       	ret

00001f84 <fdevopen>:
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	ec 01       	movw	r28, r24
    1f8e:	8b 01       	movw	r16, r22
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	31 f4       	brne	.+12     	; 0x1fa0 <fdevopen+0x1c>
    1f94:	61 15       	cp	r22, r1
    1f96:	71 05       	cpc	r23, r1
    1f98:	19 f4       	brne	.+6      	; 0x1fa0 <fdevopen+0x1c>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	38 c0       	rjmp	.+112    	; 0x2010 <fdevopen+0x8c>
    1fa0:	6e e0       	ldi	r22, 0x0E	; 14
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 15 12 	call	0x242a	; 0x242a <calloc>
    1fac:	fc 01       	movw	r30, r24
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	a1 f3       	breq	.-24     	; 0x1f9a <fdevopen+0x16>
    1fb2:	80 e8       	ldi	r24, 0x80	; 128
    1fb4:	83 83       	std	Z+3, r24	; 0x03
    1fb6:	01 15       	cp	r16, r1
    1fb8:	11 05       	cpc	r17, r1
    1fba:	71 f0       	breq	.+28     	; 0x1fd8 <fdevopen+0x54>
    1fbc:	13 87       	std	Z+11, r17	; 0x0b
    1fbe:	02 87       	std	Z+10, r16	; 0x0a
    1fc0:	81 e8       	ldi	r24, 0x81	; 129
    1fc2:	83 83       	std	Z+3, r24	; 0x03
    1fc4:	80 91 cb 02 	lds	r24, 0x02CB
    1fc8:	90 91 cc 02 	lds	r25, 0x02CC
    1fcc:	89 2b       	or	r24, r25
    1fce:	21 f4       	brne	.+8      	; 0x1fd8 <fdevopen+0x54>
    1fd0:	f0 93 cc 02 	sts	0x02CC, r31
    1fd4:	e0 93 cb 02 	sts	0x02CB, r30
    1fd8:	20 97       	sbiw	r28, 0x00	; 0
    1fda:	c9 f0       	breq	.+50     	; 0x200e <fdevopen+0x8a>
    1fdc:	d1 87       	std	Z+9, r29	; 0x09
    1fde:	c0 87       	std	Z+8, r28	; 0x08
    1fe0:	83 81       	ldd	r24, Z+3	; 0x03
    1fe2:	82 60       	ori	r24, 0x02	; 2
    1fe4:	83 83       	std	Z+3, r24	; 0x03
    1fe6:	80 91 cd 02 	lds	r24, 0x02CD
    1fea:	90 91 ce 02 	lds	r25, 0x02CE
    1fee:	89 2b       	or	r24, r25
    1ff0:	71 f4       	brne	.+28     	; 0x200e <fdevopen+0x8a>
    1ff2:	f0 93 ce 02 	sts	0x02CE, r31
    1ff6:	e0 93 cd 02 	sts	0x02CD, r30
    1ffa:	80 91 cf 02 	lds	r24, 0x02CF
    1ffe:	90 91 d0 02 	lds	r25, 0x02D0
    2002:	89 2b       	or	r24, r25
    2004:	21 f4       	brne	.+8      	; 0x200e <fdevopen+0x8a>
    2006:	f0 93 d0 02 	sts	0x02D0, r31
    200a:	e0 93 cf 02 	sts	0x02CF, r30
    200e:	cf 01       	movw	r24, r30
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	08 95       	ret

0000201a <printf>:
    201a:	a0 e0       	ldi	r26, 0x00	; 0
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e3 e1       	ldi	r30, 0x13	; 19
    2020:	f0 e1       	ldi	r31, 0x10	; 16
    2022:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__prologue_saves__+0x20>
    2026:	fe 01       	movw	r30, r28
    2028:	35 96       	adiw	r30, 0x05	; 5
    202a:	61 91       	ld	r22, Z+
    202c:	71 91       	ld	r23, Z+
    202e:	af 01       	movw	r20, r30
    2030:	80 91 cd 02 	lds	r24, 0x02CD
    2034:	90 91 ce 02 	lds	r25, 0x02CE
    2038:	0e 94 43 10 	call	0x2086	; 0x2086 <vfprintf>
    203c:	e2 e0       	ldi	r30, 0x02	; 2
    203e:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x20>

00002042 <sprintf>:
    2042:	ae e0       	ldi	r26, 0x0E	; 14
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e7 e2       	ldi	r30, 0x27	; 39
    2048:	f0 e1       	ldi	r31, 0x10	; 16
    204a:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__prologue_saves__+0x1c>
    204e:	0d 89       	ldd	r16, Y+21	; 0x15
    2050:	1e 89       	ldd	r17, Y+22	; 0x16
    2052:	86 e0       	ldi	r24, 0x06	; 6
    2054:	8c 83       	std	Y+4, r24	; 0x04
    2056:	1a 83       	std	Y+2, r17	; 0x02
    2058:	09 83       	std	Y+1, r16	; 0x01
    205a:	8f ef       	ldi	r24, 0xFF	; 255
    205c:	9f e7       	ldi	r25, 0x7F	; 127
    205e:	9e 83       	std	Y+6, r25	; 0x06
    2060:	8d 83       	std	Y+5, r24	; 0x05
    2062:	ae 01       	movw	r20, r28
    2064:	47 5e       	subi	r20, 0xE7	; 231
    2066:	5f 4f       	sbci	r21, 0xFF	; 255
    2068:	6f 89       	ldd	r22, Y+23	; 0x17
    206a:	78 8d       	ldd	r23, Y+24	; 0x18
    206c:	ce 01       	movw	r24, r28
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	0e 94 43 10 	call	0x2086	; 0x2086 <vfprintf>
    2074:	ef 81       	ldd	r30, Y+7	; 0x07
    2076:	f8 85       	ldd	r31, Y+8	; 0x08
    2078:	e0 0f       	add	r30, r16
    207a:	f1 1f       	adc	r31, r17
    207c:	10 82       	st	Z, r1
    207e:	2e 96       	adiw	r28, 0x0e	; 14
    2080:	e4 e0       	ldi	r30, 0x04	; 4
    2082:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__epilogue_restores__+0x1c>

00002086 <vfprintf>:
    2086:	ac e0       	ldi	r26, 0x0C	; 12
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e9 e4       	ldi	r30, 0x49	; 73
    208c:	f0 e1       	ldi	r31, 0x10	; 16
    208e:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__prologue_saves__>
    2092:	7c 01       	movw	r14, r24
    2094:	6b 01       	movw	r12, r22
    2096:	8a 01       	movw	r16, r20
    2098:	fc 01       	movw	r30, r24
    209a:	17 82       	std	Z+7, r1	; 0x07
    209c:	16 82       	std	Z+6, r1	; 0x06
    209e:	83 81       	ldd	r24, Z+3	; 0x03
    20a0:	81 ff       	sbrs	r24, 1
    20a2:	bd c1       	rjmp	.+890    	; 0x241e <vfprintf+0x398>
    20a4:	ce 01       	movw	r24, r28
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	4c 01       	movw	r8, r24
    20aa:	f7 01       	movw	r30, r14
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	f6 01       	movw	r30, r12
    20b0:	93 fd       	sbrc	r25, 3
    20b2:	85 91       	lpm	r24, Z+
    20b4:	93 ff       	sbrs	r25, 3
    20b6:	81 91       	ld	r24, Z+
    20b8:	6f 01       	movw	r12, r30
    20ba:	88 23       	and	r24, r24
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <vfprintf+0x3a>
    20be:	ab c1       	rjmp	.+854    	; 0x2416 <vfprintf+0x390>
    20c0:	85 32       	cpi	r24, 0x25	; 37
    20c2:	39 f4       	brne	.+14     	; 0x20d2 <vfprintf+0x4c>
    20c4:	93 fd       	sbrc	r25, 3
    20c6:	85 91       	lpm	r24, Z+
    20c8:	93 ff       	sbrs	r25, 3
    20ca:	81 91       	ld	r24, Z+
    20cc:	6f 01       	movw	r12, r30
    20ce:	85 32       	cpi	r24, 0x25	; 37
    20d0:	29 f4       	brne	.+10     	; 0x20dc <vfprintf+0x56>
    20d2:	b7 01       	movw	r22, r14
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 4e 12 	call	0x249c	; 0x249c <fputc>
    20da:	e7 cf       	rjmp	.-50     	; 0x20aa <vfprintf+0x24>
    20dc:	51 2c       	mov	r5, r1
    20de:	31 2c       	mov	r3, r1
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	20 32       	cpi	r18, 0x20	; 32
    20e4:	a0 f4       	brcc	.+40     	; 0x210e <vfprintf+0x88>
    20e6:	8b 32       	cpi	r24, 0x2B	; 43
    20e8:	69 f0       	breq	.+26     	; 0x2104 <vfprintf+0x7e>
    20ea:	30 f4       	brcc	.+12     	; 0x20f8 <vfprintf+0x72>
    20ec:	80 32       	cpi	r24, 0x20	; 32
    20ee:	59 f0       	breq	.+22     	; 0x2106 <vfprintf+0x80>
    20f0:	83 32       	cpi	r24, 0x23	; 35
    20f2:	69 f4       	brne	.+26     	; 0x210e <vfprintf+0x88>
    20f4:	20 61       	ori	r18, 0x10	; 16
    20f6:	2c c0       	rjmp	.+88     	; 0x2150 <vfprintf+0xca>
    20f8:	8d 32       	cpi	r24, 0x2D	; 45
    20fa:	39 f0       	breq	.+14     	; 0x210a <vfprintf+0x84>
    20fc:	80 33       	cpi	r24, 0x30	; 48
    20fe:	39 f4       	brne	.+14     	; 0x210e <vfprintf+0x88>
    2100:	21 60       	ori	r18, 0x01	; 1
    2102:	26 c0       	rjmp	.+76     	; 0x2150 <vfprintf+0xca>
    2104:	22 60       	ori	r18, 0x02	; 2
    2106:	24 60       	ori	r18, 0x04	; 4
    2108:	23 c0       	rjmp	.+70     	; 0x2150 <vfprintf+0xca>
    210a:	28 60       	ori	r18, 0x08	; 8
    210c:	21 c0       	rjmp	.+66     	; 0x2150 <vfprintf+0xca>
    210e:	27 fd       	sbrc	r18, 7
    2110:	27 c0       	rjmp	.+78     	; 0x2160 <vfprintf+0xda>
    2112:	30 ed       	ldi	r19, 0xD0	; 208
    2114:	38 0f       	add	r19, r24
    2116:	3a 30       	cpi	r19, 0x0A	; 10
    2118:	78 f4       	brcc	.+30     	; 0x2138 <vfprintf+0xb2>
    211a:	26 ff       	sbrs	r18, 6
    211c:	06 c0       	rjmp	.+12     	; 0x212a <vfprintf+0xa4>
    211e:	fa e0       	ldi	r31, 0x0A	; 10
    2120:	5f 9e       	mul	r5, r31
    2122:	30 0d       	add	r19, r0
    2124:	11 24       	eor	r1, r1
    2126:	53 2e       	mov	r5, r19
    2128:	13 c0       	rjmp	.+38     	; 0x2150 <vfprintf+0xca>
    212a:	8a e0       	ldi	r24, 0x0A	; 10
    212c:	38 9e       	mul	r3, r24
    212e:	30 0d       	add	r19, r0
    2130:	11 24       	eor	r1, r1
    2132:	33 2e       	mov	r3, r19
    2134:	20 62       	ori	r18, 0x20	; 32
    2136:	0c c0       	rjmp	.+24     	; 0x2150 <vfprintf+0xca>
    2138:	8e 32       	cpi	r24, 0x2E	; 46
    213a:	21 f4       	brne	.+8      	; 0x2144 <vfprintf+0xbe>
    213c:	26 fd       	sbrc	r18, 6
    213e:	6b c1       	rjmp	.+726    	; 0x2416 <vfprintf+0x390>
    2140:	20 64       	ori	r18, 0x40	; 64
    2142:	06 c0       	rjmp	.+12     	; 0x2150 <vfprintf+0xca>
    2144:	8c 36       	cpi	r24, 0x6C	; 108
    2146:	11 f4       	brne	.+4      	; 0x214c <vfprintf+0xc6>
    2148:	20 68       	ori	r18, 0x80	; 128
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <vfprintf+0xca>
    214c:	88 36       	cpi	r24, 0x68	; 104
    214e:	41 f4       	brne	.+16     	; 0x2160 <vfprintf+0xda>
    2150:	f6 01       	movw	r30, r12
    2152:	93 fd       	sbrc	r25, 3
    2154:	85 91       	lpm	r24, Z+
    2156:	93 ff       	sbrs	r25, 3
    2158:	81 91       	ld	r24, Z+
    215a:	6f 01       	movw	r12, r30
    215c:	81 11       	cpse	r24, r1
    215e:	c1 cf       	rjmp	.-126    	; 0x20e2 <vfprintf+0x5c>
    2160:	98 2f       	mov	r25, r24
    2162:	9f 7d       	andi	r25, 0xDF	; 223
    2164:	95 54       	subi	r25, 0x45	; 69
    2166:	93 30       	cpi	r25, 0x03	; 3
    2168:	28 f4       	brcc	.+10     	; 0x2174 <vfprintf+0xee>
    216a:	0c 5f       	subi	r16, 0xFC	; 252
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
    216e:	ff e3       	ldi	r31, 0x3F	; 63
    2170:	f9 83       	std	Y+1, r31	; 0x01
    2172:	0d c0       	rjmp	.+26     	; 0x218e <vfprintf+0x108>
    2174:	83 36       	cpi	r24, 0x63	; 99
    2176:	31 f0       	breq	.+12     	; 0x2184 <vfprintf+0xfe>
    2178:	83 37       	cpi	r24, 0x73	; 115
    217a:	71 f0       	breq	.+28     	; 0x2198 <vfprintf+0x112>
    217c:	83 35       	cpi	r24, 0x53	; 83
    217e:	09 f0       	breq	.+2      	; 0x2182 <vfprintf+0xfc>
    2180:	5b c0       	rjmp	.+182    	; 0x2238 <vfprintf+0x1b2>
    2182:	22 c0       	rjmp	.+68     	; 0x21c8 <vfprintf+0x142>
    2184:	f8 01       	movw	r30, r16
    2186:	80 81       	ld	r24, Z
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	0e 5f       	subi	r16, 0xFE	; 254
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	44 24       	eor	r4, r4
    2190:	43 94       	inc	r4
    2192:	51 2c       	mov	r5, r1
    2194:	54 01       	movw	r10, r8
    2196:	15 c0       	rjmp	.+42     	; 0x21c2 <vfprintf+0x13c>
    2198:	38 01       	movw	r6, r16
    219a:	f2 e0       	ldi	r31, 0x02	; 2
    219c:	6f 0e       	add	r6, r31
    219e:	71 1c       	adc	r7, r1
    21a0:	f8 01       	movw	r30, r16
    21a2:	a0 80       	ld	r10, Z
    21a4:	b1 80       	ldd	r11, Z+1	; 0x01
    21a6:	26 ff       	sbrs	r18, 6
    21a8:	03 c0       	rjmp	.+6      	; 0x21b0 <vfprintf+0x12a>
    21aa:	65 2d       	mov	r22, r5
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <vfprintf+0x12e>
    21b0:	6f ef       	ldi	r22, 0xFF	; 255
    21b2:	7f ef       	ldi	r23, 0xFF	; 255
    21b4:	c5 01       	movw	r24, r10
    21b6:	2c 87       	std	Y+12, r18	; 0x0c
    21b8:	0e 94 43 12 	call	0x2486	; 0x2486 <strnlen>
    21bc:	2c 01       	movw	r4, r24
    21be:	83 01       	movw	r16, r6
    21c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    21c2:	2f 77       	andi	r18, 0x7F	; 127
    21c4:	22 2e       	mov	r2, r18
    21c6:	17 c0       	rjmp	.+46     	; 0x21f6 <vfprintf+0x170>
    21c8:	38 01       	movw	r6, r16
    21ca:	f2 e0       	ldi	r31, 0x02	; 2
    21cc:	6f 0e       	add	r6, r31
    21ce:	71 1c       	adc	r7, r1
    21d0:	f8 01       	movw	r30, r16
    21d2:	a0 80       	ld	r10, Z
    21d4:	b1 80       	ldd	r11, Z+1	; 0x01
    21d6:	26 ff       	sbrs	r18, 6
    21d8:	03 c0       	rjmp	.+6      	; 0x21e0 <vfprintf+0x15a>
    21da:	65 2d       	mov	r22, r5
    21dc:	70 e0       	ldi	r23, 0x00	; 0
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <vfprintf+0x15e>
    21e0:	6f ef       	ldi	r22, 0xFF	; 255
    21e2:	7f ef       	ldi	r23, 0xFF	; 255
    21e4:	c5 01       	movw	r24, r10
    21e6:	2c 87       	std	Y+12, r18	; 0x0c
    21e8:	0e 94 31 12 	call	0x2462	; 0x2462 <strnlen_P>
    21ec:	2c 01       	movw	r4, r24
    21ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    21f0:	20 68       	ori	r18, 0x80	; 128
    21f2:	22 2e       	mov	r2, r18
    21f4:	83 01       	movw	r16, r6
    21f6:	23 fc       	sbrc	r2, 3
    21f8:	1b c0       	rjmp	.+54     	; 0x2230 <vfprintf+0x1aa>
    21fa:	83 2d       	mov	r24, r3
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	48 16       	cp	r4, r24
    2200:	59 06       	cpc	r5, r25
    2202:	b0 f4       	brcc	.+44     	; 0x2230 <vfprintf+0x1aa>
    2204:	b7 01       	movw	r22, r14
    2206:	80 e2       	ldi	r24, 0x20	; 32
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 4e 12 	call	0x249c	; 0x249c <fputc>
    220e:	3a 94       	dec	r3
    2210:	f4 cf       	rjmp	.-24     	; 0x21fa <vfprintf+0x174>
    2212:	f5 01       	movw	r30, r10
    2214:	27 fc       	sbrc	r2, 7
    2216:	85 91       	lpm	r24, Z+
    2218:	27 fe       	sbrs	r2, 7
    221a:	81 91       	ld	r24, Z+
    221c:	5f 01       	movw	r10, r30
    221e:	b7 01       	movw	r22, r14
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 94 4e 12 	call	0x249c	; 0x249c <fputc>
    2226:	31 10       	cpse	r3, r1
    2228:	3a 94       	dec	r3
    222a:	f1 e0       	ldi	r31, 0x01	; 1
    222c:	4f 1a       	sub	r4, r31
    222e:	51 08       	sbc	r5, r1
    2230:	41 14       	cp	r4, r1
    2232:	51 04       	cpc	r5, r1
    2234:	71 f7       	brne	.-36     	; 0x2212 <vfprintf+0x18c>
    2236:	e5 c0       	rjmp	.+458    	; 0x2402 <vfprintf+0x37c>
    2238:	84 36       	cpi	r24, 0x64	; 100
    223a:	11 f0       	breq	.+4      	; 0x2240 <vfprintf+0x1ba>
    223c:	89 36       	cpi	r24, 0x69	; 105
    223e:	39 f5       	brne	.+78     	; 0x228e <vfprintf+0x208>
    2240:	f8 01       	movw	r30, r16
    2242:	27 ff       	sbrs	r18, 7
    2244:	07 c0       	rjmp	.+14     	; 0x2254 <vfprintf+0x1ce>
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	0c 5f       	subi	r16, 0xFC	; 252
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <vfprintf+0x1de>
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	88 27       	eor	r24, r24
    225a:	77 fd       	sbrc	r23, 7
    225c:	80 95       	com	r24
    225e:	98 2f       	mov	r25, r24
    2260:	0e 5f       	subi	r16, 0xFE	; 254
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	2f 76       	andi	r18, 0x6F	; 111
    2266:	b2 2e       	mov	r11, r18
    2268:	97 ff       	sbrs	r25, 7
    226a:	09 c0       	rjmp	.+18     	; 0x227e <vfprintf+0x1f8>
    226c:	90 95       	com	r25
    226e:	80 95       	com	r24
    2270:	70 95       	com	r23
    2272:	61 95       	neg	r22
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	8f 4f       	sbci	r24, 0xFF	; 255
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	20 68       	ori	r18, 0x80	; 128
    227c:	b2 2e       	mov	r11, r18
    227e:	2a e0       	ldi	r18, 0x0A	; 10
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	a4 01       	movw	r20, r8
    2284:	0e 94 80 12 	call	0x2500	; 0x2500 <__ultoa_invert>
    2288:	a8 2e       	mov	r10, r24
    228a:	a8 18       	sub	r10, r8
    228c:	44 c0       	rjmp	.+136    	; 0x2316 <vfprintf+0x290>
    228e:	85 37       	cpi	r24, 0x75	; 117
    2290:	29 f4       	brne	.+10     	; 0x229c <vfprintf+0x216>
    2292:	2f 7e       	andi	r18, 0xEF	; 239
    2294:	b2 2e       	mov	r11, r18
    2296:	2a e0       	ldi	r18, 0x0A	; 10
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	25 c0       	rjmp	.+74     	; 0x22e6 <vfprintf+0x260>
    229c:	f2 2f       	mov	r31, r18
    229e:	f9 7f       	andi	r31, 0xF9	; 249
    22a0:	bf 2e       	mov	r11, r31
    22a2:	8f 36       	cpi	r24, 0x6F	; 111
    22a4:	c1 f0       	breq	.+48     	; 0x22d6 <vfprintf+0x250>
    22a6:	18 f4       	brcc	.+6      	; 0x22ae <vfprintf+0x228>
    22a8:	88 35       	cpi	r24, 0x58	; 88
    22aa:	79 f0       	breq	.+30     	; 0x22ca <vfprintf+0x244>
    22ac:	b4 c0       	rjmp	.+360    	; 0x2416 <vfprintf+0x390>
    22ae:	80 37       	cpi	r24, 0x70	; 112
    22b0:	19 f0       	breq	.+6      	; 0x22b8 <vfprintf+0x232>
    22b2:	88 37       	cpi	r24, 0x78	; 120
    22b4:	21 f0       	breq	.+8      	; 0x22be <vfprintf+0x238>
    22b6:	af c0       	rjmp	.+350    	; 0x2416 <vfprintf+0x390>
    22b8:	2f 2f       	mov	r18, r31
    22ba:	20 61       	ori	r18, 0x10	; 16
    22bc:	b2 2e       	mov	r11, r18
    22be:	b4 fe       	sbrs	r11, 4
    22c0:	0d c0       	rjmp	.+26     	; 0x22dc <vfprintf+0x256>
    22c2:	8b 2d       	mov	r24, r11
    22c4:	84 60       	ori	r24, 0x04	; 4
    22c6:	b8 2e       	mov	r11, r24
    22c8:	09 c0       	rjmp	.+18     	; 0x22dc <vfprintf+0x256>
    22ca:	24 ff       	sbrs	r18, 4
    22cc:	0a c0       	rjmp	.+20     	; 0x22e2 <vfprintf+0x25c>
    22ce:	9f 2f       	mov	r25, r31
    22d0:	96 60       	ori	r25, 0x06	; 6
    22d2:	b9 2e       	mov	r11, r25
    22d4:	06 c0       	rjmp	.+12     	; 0x22e2 <vfprintf+0x25c>
    22d6:	28 e0       	ldi	r18, 0x08	; 8
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	05 c0       	rjmp	.+10     	; 0x22e6 <vfprintf+0x260>
    22dc:	20 e1       	ldi	r18, 0x10	; 16
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <vfprintf+0x260>
    22e2:	20 e1       	ldi	r18, 0x10	; 16
    22e4:	32 e0       	ldi	r19, 0x02	; 2
    22e6:	f8 01       	movw	r30, r16
    22e8:	b7 fe       	sbrs	r11, 7
    22ea:	07 c0       	rjmp	.+14     	; 0x22fa <vfprintf+0x274>
    22ec:	60 81       	ld	r22, Z
    22ee:	71 81       	ldd	r23, Z+1	; 0x01
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	0c 5f       	subi	r16, 0xFC	; 252
    22f6:	1f 4f       	sbci	r17, 0xFF	; 255
    22f8:	06 c0       	rjmp	.+12     	; 0x2306 <vfprintf+0x280>
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 5f       	subi	r16, 0xFE	; 254
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	a4 01       	movw	r20, r8
    2308:	0e 94 80 12 	call	0x2500	; 0x2500 <__ultoa_invert>
    230c:	a8 2e       	mov	r10, r24
    230e:	a8 18       	sub	r10, r8
    2310:	fb 2d       	mov	r31, r11
    2312:	ff 77       	andi	r31, 0x7F	; 127
    2314:	bf 2e       	mov	r11, r31
    2316:	b6 fe       	sbrs	r11, 6
    2318:	0b c0       	rjmp	.+22     	; 0x2330 <vfprintf+0x2aa>
    231a:	2b 2d       	mov	r18, r11
    231c:	2e 7f       	andi	r18, 0xFE	; 254
    231e:	a5 14       	cp	r10, r5
    2320:	50 f4       	brcc	.+20     	; 0x2336 <vfprintf+0x2b0>
    2322:	b4 fe       	sbrs	r11, 4
    2324:	0a c0       	rjmp	.+20     	; 0x233a <vfprintf+0x2b4>
    2326:	b2 fc       	sbrc	r11, 2
    2328:	08 c0       	rjmp	.+16     	; 0x233a <vfprintf+0x2b4>
    232a:	2b 2d       	mov	r18, r11
    232c:	2e 7e       	andi	r18, 0xEE	; 238
    232e:	05 c0       	rjmp	.+10     	; 0x233a <vfprintf+0x2b4>
    2330:	7a 2c       	mov	r7, r10
    2332:	2b 2d       	mov	r18, r11
    2334:	03 c0       	rjmp	.+6      	; 0x233c <vfprintf+0x2b6>
    2336:	7a 2c       	mov	r7, r10
    2338:	01 c0       	rjmp	.+2      	; 0x233c <vfprintf+0x2b6>
    233a:	75 2c       	mov	r7, r5
    233c:	24 ff       	sbrs	r18, 4
    233e:	0d c0       	rjmp	.+26     	; 0x235a <vfprintf+0x2d4>
    2340:	fe 01       	movw	r30, r28
    2342:	ea 0d       	add	r30, r10
    2344:	f1 1d       	adc	r31, r1
    2346:	80 81       	ld	r24, Z
    2348:	80 33       	cpi	r24, 0x30	; 48
    234a:	11 f4       	brne	.+4      	; 0x2350 <vfprintf+0x2ca>
    234c:	29 7e       	andi	r18, 0xE9	; 233
    234e:	09 c0       	rjmp	.+18     	; 0x2362 <vfprintf+0x2dc>
    2350:	22 ff       	sbrs	r18, 2
    2352:	06 c0       	rjmp	.+12     	; 0x2360 <vfprintf+0x2da>
    2354:	73 94       	inc	r7
    2356:	73 94       	inc	r7
    2358:	04 c0       	rjmp	.+8      	; 0x2362 <vfprintf+0x2dc>
    235a:	82 2f       	mov	r24, r18
    235c:	86 78       	andi	r24, 0x86	; 134
    235e:	09 f0       	breq	.+2      	; 0x2362 <vfprintf+0x2dc>
    2360:	73 94       	inc	r7
    2362:	23 fd       	sbrc	r18, 3
    2364:	13 c0       	rjmp	.+38     	; 0x238c <vfprintf+0x306>
    2366:	20 ff       	sbrs	r18, 0
    2368:	06 c0       	rjmp	.+12     	; 0x2376 <vfprintf+0x2f0>
    236a:	5a 2c       	mov	r5, r10
    236c:	73 14       	cp	r7, r3
    236e:	18 f4       	brcc	.+6      	; 0x2376 <vfprintf+0x2f0>
    2370:	53 0c       	add	r5, r3
    2372:	57 18       	sub	r5, r7
    2374:	73 2c       	mov	r7, r3
    2376:	73 14       	cp	r7, r3
    2378:	68 f4       	brcc	.+26     	; 0x2394 <vfprintf+0x30e>
    237a:	b7 01       	movw	r22, r14
    237c:	80 e2       	ldi	r24, 0x20	; 32
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	2c 87       	std	Y+12, r18	; 0x0c
    2382:	0e 94 4e 12 	call	0x249c	; 0x249c <fputc>
    2386:	73 94       	inc	r7
    2388:	2c 85       	ldd	r18, Y+12	; 0x0c
    238a:	f5 cf       	rjmp	.-22     	; 0x2376 <vfprintf+0x2f0>
    238c:	73 14       	cp	r7, r3
    238e:	10 f4       	brcc	.+4      	; 0x2394 <vfprintf+0x30e>
    2390:	37 18       	sub	r3, r7
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <vfprintf+0x310>
    2394:	31 2c       	mov	r3, r1
    2396:	24 ff       	sbrs	r18, 4
    2398:	12 c0       	rjmp	.+36     	; 0x23be <vfprintf+0x338>
    239a:	b7 01       	movw	r22, r14
    239c:	80 e3       	ldi	r24, 0x30	; 48
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	2c 87       	std	Y+12, r18	; 0x0c
    23a2:	0e 94 4e 12 	call	0x249c	; 0x249c <fputc>
    23a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    23a8:	22 ff       	sbrs	r18, 2
    23aa:	17 c0       	rjmp	.+46     	; 0x23da <vfprintf+0x354>
    23ac:	21 ff       	sbrs	r18, 1
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <vfprintf+0x330>
    23b0:	88 e5       	ldi	r24, 0x58	; 88
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <vfprintf+0x334>
    23b6:	88 e7       	ldi	r24, 0x78	; 120
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	b7 01       	movw	r22, r14
    23bc:	0c c0       	rjmp	.+24     	; 0x23d6 <vfprintf+0x350>
    23be:	82 2f       	mov	r24, r18
    23c0:	86 78       	andi	r24, 0x86	; 134
    23c2:	59 f0       	breq	.+22     	; 0x23da <vfprintf+0x354>
    23c4:	21 fd       	sbrc	r18, 1
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <vfprintf+0x346>
    23c8:	80 e2       	ldi	r24, 0x20	; 32
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <vfprintf+0x348>
    23cc:	8b e2       	ldi	r24, 0x2B	; 43
    23ce:	27 fd       	sbrc	r18, 7
    23d0:	8d e2       	ldi	r24, 0x2D	; 45
    23d2:	b7 01       	movw	r22, r14
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 4e 12 	call	0x249c	; 0x249c <fputc>
    23da:	a5 14       	cp	r10, r5
    23dc:	38 f4       	brcc	.+14     	; 0x23ec <vfprintf+0x366>
    23de:	b7 01       	movw	r22, r14
    23e0:	80 e3       	ldi	r24, 0x30	; 48
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 4e 12 	call	0x249c	; 0x249c <fputc>
    23e8:	5a 94       	dec	r5
    23ea:	f7 cf       	rjmp	.-18     	; 0x23da <vfprintf+0x354>
    23ec:	aa 94       	dec	r10
    23ee:	f4 01       	movw	r30, r8
    23f0:	ea 0d       	add	r30, r10
    23f2:	f1 1d       	adc	r31, r1
    23f4:	80 81       	ld	r24, Z
    23f6:	b7 01       	movw	r22, r14
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 4e 12 	call	0x249c	; 0x249c <fputc>
    23fe:	a1 10       	cpse	r10, r1
    2400:	f5 cf       	rjmp	.-22     	; 0x23ec <vfprintf+0x366>
    2402:	33 20       	and	r3, r3
    2404:	09 f4       	brne	.+2      	; 0x2408 <vfprintf+0x382>
    2406:	51 ce       	rjmp	.-862    	; 0x20aa <vfprintf+0x24>
    2408:	b7 01       	movw	r22, r14
    240a:	80 e2       	ldi	r24, 0x20	; 32
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 4e 12 	call	0x249c	; 0x249c <fputc>
    2412:	3a 94       	dec	r3
    2414:	f6 cf       	rjmp	.-20     	; 0x2402 <vfprintf+0x37c>
    2416:	f7 01       	movw	r30, r14
    2418:	86 81       	ldd	r24, Z+6	; 0x06
    241a:	97 81       	ldd	r25, Z+7	; 0x07
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <vfprintf+0x39c>
    241e:	8f ef       	ldi	r24, 0xFF	; 255
    2420:	9f ef       	ldi	r25, 0xFF	; 255
    2422:	2c 96       	adiw	r28, 0x0c	; 12
    2424:	e2 e1       	ldi	r30, 0x12	; 18
    2426:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__epilogue_restores__>

0000242a <calloc>:
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	86 9f       	mul	r24, r22
    2434:	80 01       	movw	r16, r0
    2436:	87 9f       	mul	r24, r23
    2438:	10 0d       	add	r17, r0
    243a:	96 9f       	mul	r25, r22
    243c:	10 0d       	add	r17, r0
    243e:	11 24       	eor	r1, r1
    2440:	c8 01       	movw	r24, r16
    2442:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <malloc>
    2446:	ec 01       	movw	r28, r24
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	29 f0       	breq	.+10     	; 0x2456 <calloc+0x2c>
    244c:	a8 01       	movw	r20, r16
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	70 e0       	ldi	r23, 0x00	; 0
    2452:	0e 94 3c 12 	call	0x2478	; 0x2478 <memset>
    2456:	ce 01       	movw	r24, r28
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	08 95       	ret

00002462 <strnlen_P>:
    2462:	fc 01       	movw	r30, r24
    2464:	05 90       	lpm	r0, Z+
    2466:	61 50       	subi	r22, 0x01	; 1
    2468:	70 40       	sbci	r23, 0x00	; 0
    246a:	01 10       	cpse	r0, r1
    246c:	d8 f7       	brcc	.-10     	; 0x2464 <strnlen_P+0x2>
    246e:	80 95       	com	r24
    2470:	90 95       	com	r25
    2472:	8e 0f       	add	r24, r30
    2474:	9f 1f       	adc	r25, r31
    2476:	08 95       	ret

00002478 <memset>:
    2478:	dc 01       	movw	r26, r24
    247a:	01 c0       	rjmp	.+2      	; 0x247e <memset+0x6>
    247c:	6d 93       	st	X+, r22
    247e:	41 50       	subi	r20, 0x01	; 1
    2480:	50 40       	sbci	r21, 0x00	; 0
    2482:	e0 f7       	brcc	.-8      	; 0x247c <memset+0x4>
    2484:	08 95       	ret

00002486 <strnlen>:
    2486:	fc 01       	movw	r30, r24
    2488:	61 50       	subi	r22, 0x01	; 1
    248a:	70 40       	sbci	r23, 0x00	; 0
    248c:	01 90       	ld	r0, Z+
    248e:	01 10       	cpse	r0, r1
    2490:	d8 f7       	brcc	.-10     	; 0x2488 <strnlen+0x2>
    2492:	80 95       	com	r24
    2494:	90 95       	com	r25
    2496:	8e 0f       	add	r24, r30
    2498:	9f 1f       	adc	r25, r31
    249a:	08 95       	ret

0000249c <fputc>:
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	18 2f       	mov	r17, r24
    24a6:	09 2f       	mov	r16, r25
    24a8:	eb 01       	movw	r28, r22
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	81 fd       	sbrc	r24, 1
    24ae:	03 c0       	rjmp	.+6      	; 0x24b6 <fputc+0x1a>
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
    24b2:	9f ef       	ldi	r25, 0xFF	; 255
    24b4:	20 c0       	rjmp	.+64     	; 0x24f6 <fputc+0x5a>
    24b6:	82 ff       	sbrs	r24, 2
    24b8:	10 c0       	rjmp	.+32     	; 0x24da <fputc+0x3e>
    24ba:	4e 81       	ldd	r20, Y+6	; 0x06
    24bc:	5f 81       	ldd	r21, Y+7	; 0x07
    24be:	2c 81       	ldd	r18, Y+4	; 0x04
    24c0:	3d 81       	ldd	r19, Y+5	; 0x05
    24c2:	42 17       	cp	r20, r18
    24c4:	53 07       	cpc	r21, r19
    24c6:	7c f4       	brge	.+30     	; 0x24e6 <fputc+0x4a>
    24c8:	e8 81       	ld	r30, Y
    24ca:	f9 81       	ldd	r31, Y+1	; 0x01
    24cc:	9f 01       	movw	r18, r30
    24ce:	2f 5f       	subi	r18, 0xFF	; 255
    24d0:	3f 4f       	sbci	r19, 0xFF	; 255
    24d2:	39 83       	std	Y+1, r19	; 0x01
    24d4:	28 83       	st	Y, r18
    24d6:	10 83       	st	Z, r17
    24d8:	06 c0       	rjmp	.+12     	; 0x24e6 <fputc+0x4a>
    24da:	e8 85       	ldd	r30, Y+8	; 0x08
    24dc:	f9 85       	ldd	r31, Y+9	; 0x09
    24de:	81 2f       	mov	r24, r17
    24e0:	09 95       	icall
    24e2:	89 2b       	or	r24, r25
    24e4:	29 f7       	brne	.-54     	; 0x24b0 <fputc+0x14>
    24e6:	2e 81       	ldd	r18, Y+6	; 0x06
    24e8:	3f 81       	ldd	r19, Y+7	; 0x07
    24ea:	2f 5f       	subi	r18, 0xFF	; 255
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	3f 83       	std	Y+7, r19	; 0x07
    24f0:	2e 83       	std	Y+6, r18	; 0x06
    24f2:	81 2f       	mov	r24, r17
    24f4:	90 2f       	mov	r25, r16
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	08 95       	ret

00002500 <__ultoa_invert>:
    2500:	fa 01       	movw	r30, r20
    2502:	aa 27       	eor	r26, r26
    2504:	28 30       	cpi	r18, 0x08	; 8
    2506:	51 f1       	breq	.+84     	; 0x255c <__ultoa_invert+0x5c>
    2508:	20 31       	cpi	r18, 0x10	; 16
    250a:	81 f1       	breq	.+96     	; 0x256c <__ultoa_invert+0x6c>
    250c:	e8 94       	clt
    250e:	6f 93       	push	r22
    2510:	6e 7f       	andi	r22, 0xFE	; 254
    2512:	6e 5f       	subi	r22, 0xFE	; 254
    2514:	7f 4f       	sbci	r23, 0xFF	; 255
    2516:	8f 4f       	sbci	r24, 0xFF	; 255
    2518:	9f 4f       	sbci	r25, 0xFF	; 255
    251a:	af 4f       	sbci	r26, 0xFF	; 255
    251c:	b1 e0       	ldi	r27, 0x01	; 1
    251e:	3e d0       	rcall	.+124    	; 0x259c <__ultoa_invert+0x9c>
    2520:	b4 e0       	ldi	r27, 0x04	; 4
    2522:	3c d0       	rcall	.+120    	; 0x259c <__ultoa_invert+0x9c>
    2524:	67 0f       	add	r22, r23
    2526:	78 1f       	adc	r23, r24
    2528:	89 1f       	adc	r24, r25
    252a:	9a 1f       	adc	r25, r26
    252c:	a1 1d       	adc	r26, r1
    252e:	68 0f       	add	r22, r24
    2530:	79 1f       	adc	r23, r25
    2532:	8a 1f       	adc	r24, r26
    2534:	91 1d       	adc	r25, r1
    2536:	a1 1d       	adc	r26, r1
    2538:	6a 0f       	add	r22, r26
    253a:	71 1d       	adc	r23, r1
    253c:	81 1d       	adc	r24, r1
    253e:	91 1d       	adc	r25, r1
    2540:	a1 1d       	adc	r26, r1
    2542:	20 d0       	rcall	.+64     	; 0x2584 <__ultoa_invert+0x84>
    2544:	09 f4       	brne	.+2      	; 0x2548 <__ultoa_invert+0x48>
    2546:	68 94       	set
    2548:	3f 91       	pop	r19
    254a:	2a e0       	ldi	r18, 0x0A	; 10
    254c:	26 9f       	mul	r18, r22
    254e:	11 24       	eor	r1, r1
    2550:	30 19       	sub	r19, r0
    2552:	30 5d       	subi	r19, 0xD0	; 208
    2554:	31 93       	st	Z+, r19
    2556:	de f6       	brtc	.-74     	; 0x250e <__ultoa_invert+0xe>
    2558:	cf 01       	movw	r24, r30
    255a:	08 95       	ret
    255c:	46 2f       	mov	r20, r22
    255e:	47 70       	andi	r20, 0x07	; 7
    2560:	40 5d       	subi	r20, 0xD0	; 208
    2562:	41 93       	st	Z+, r20
    2564:	b3 e0       	ldi	r27, 0x03	; 3
    2566:	0f d0       	rcall	.+30     	; 0x2586 <__ultoa_invert+0x86>
    2568:	c9 f7       	brne	.-14     	; 0x255c <__ultoa_invert+0x5c>
    256a:	f6 cf       	rjmp	.-20     	; 0x2558 <__ultoa_invert+0x58>
    256c:	46 2f       	mov	r20, r22
    256e:	4f 70       	andi	r20, 0x0F	; 15
    2570:	40 5d       	subi	r20, 0xD0	; 208
    2572:	4a 33       	cpi	r20, 0x3A	; 58
    2574:	18 f0       	brcs	.+6      	; 0x257c <__ultoa_invert+0x7c>
    2576:	49 5d       	subi	r20, 0xD9	; 217
    2578:	31 fd       	sbrc	r19, 1
    257a:	40 52       	subi	r20, 0x20	; 32
    257c:	41 93       	st	Z+, r20
    257e:	02 d0       	rcall	.+4      	; 0x2584 <__ultoa_invert+0x84>
    2580:	a9 f7       	brne	.-22     	; 0x256c <__ultoa_invert+0x6c>
    2582:	ea cf       	rjmp	.-44     	; 0x2558 <__ultoa_invert+0x58>
    2584:	b4 e0       	ldi	r27, 0x04	; 4
    2586:	a6 95       	lsr	r26
    2588:	97 95       	ror	r25
    258a:	87 95       	ror	r24
    258c:	77 95       	ror	r23
    258e:	67 95       	ror	r22
    2590:	ba 95       	dec	r27
    2592:	c9 f7       	brne	.-14     	; 0x2586 <__ultoa_invert+0x86>
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	61 05       	cpc	r22, r1
    2598:	71 05       	cpc	r23, r1
    259a:	08 95       	ret
    259c:	9b 01       	movw	r18, r22
    259e:	ac 01       	movw	r20, r24
    25a0:	0a 2e       	mov	r0, r26
    25a2:	06 94       	lsr	r0
    25a4:	57 95       	ror	r21
    25a6:	47 95       	ror	r20
    25a8:	37 95       	ror	r19
    25aa:	27 95       	ror	r18
    25ac:	ba 95       	dec	r27
    25ae:	c9 f7       	brne	.-14     	; 0x25a2 <__ultoa_invert+0xa2>
    25b0:	62 0f       	add	r22, r18
    25b2:	73 1f       	adc	r23, r19
    25b4:	84 1f       	adc	r24, r20
    25b6:	95 1f       	adc	r25, r21
    25b8:	a0 1d       	adc	r26, r0
    25ba:	08 95       	ret

000025bc <__prologue_saves__>:
    25bc:	2f 92       	push	r2
    25be:	3f 92       	push	r3
    25c0:	4f 92       	push	r4
    25c2:	5f 92       	push	r5
    25c4:	6f 92       	push	r6
    25c6:	7f 92       	push	r7
    25c8:	8f 92       	push	r8
    25ca:	9f 92       	push	r9
    25cc:	af 92       	push	r10
    25ce:	bf 92       	push	r11
    25d0:	cf 92       	push	r12
    25d2:	df 92       	push	r13
    25d4:	ef 92       	push	r14
    25d6:	ff 92       	push	r15
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	ca 1b       	sub	r28, r26
    25e6:	db 0b       	sbc	r29, r27
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
    25f2:	09 94       	ijmp

000025f4 <__epilogue_restores__>:
    25f4:	2a 88       	ldd	r2, Y+18	; 0x12
    25f6:	39 88       	ldd	r3, Y+17	; 0x11
    25f8:	48 88       	ldd	r4, Y+16	; 0x10
    25fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    25fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    25fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2600:	8c 84       	ldd	r8, Y+12	; 0x0c
    2602:	9b 84       	ldd	r9, Y+11	; 0x0b
    2604:	aa 84       	ldd	r10, Y+10	; 0x0a
    2606:	b9 84       	ldd	r11, Y+9	; 0x09
    2608:	c8 84       	ldd	r12, Y+8	; 0x08
    260a:	df 80       	ldd	r13, Y+7	; 0x07
    260c:	ee 80       	ldd	r14, Y+6	; 0x06
    260e:	fd 80       	ldd	r15, Y+5	; 0x05
    2610:	0c 81       	ldd	r16, Y+4	; 0x04
    2612:	1b 81       	ldd	r17, Y+3	; 0x03
    2614:	aa 81       	ldd	r26, Y+2	; 0x02
    2616:	b9 81       	ldd	r27, Y+1	; 0x01
    2618:	ce 0f       	add	r28, r30
    261a:	d1 1d       	adc	r29, r1
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	ed 01       	movw	r28, r26
    2628:	08 95       	ret

0000262a <_exit>:
    262a:	f8 94       	cli

0000262c <__stop_program>:
    262c:	ff cf       	rjmp	.-2      	; 0x262c <__stop_program>
