
byggern24_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800100  00000e02  00000e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008002bc  008002bc  00001052  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d0  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003440  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010bf  00000000  00000000  000047be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fc9  00000000  00000000  0000587d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000848  00000000  00000000  00006848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008c2  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000022be  00000000  00000000  00007952  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  00009c10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e0       	ldi	r30, 0x02	; 2
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 3b       	cpi	r26, 0xBC	; 188
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ac eb       	ldi	r26, 0xBC	; 188
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 3c       	cpi	r26, 0xCA	; 202
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
  a6:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_read>:
  ae:	8d 5f       	subi	r24, 0xFD	; 253
  b0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <ADC_read+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <ADC_read+0xe>
  bc:	80 91 00 14 	lds	r24, 0x1400
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	08 95       	ret

000000c4 <can_controller_reset>:

#define CAN_CS PB4

void can_controller_reset()
{
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
  c4:	c4 98       	cbi	0x18, 4	; 24
	spi_send(MCP_RESET);
  c6:	80 ec       	ldi	r24, 0xC0	; 192
  c8:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>
	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
  cc:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <can_controller_reset+0xe>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <can_controller_reset+0x14>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <can_controller_read>:
	can_controller_write(MCP_TXB0SIDL, 0x00);	
    return 0;
}

uint8_t can_controller_read(uint8_t address)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	uint8_t result;

	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
  e0:	c4 98       	cbi	0x18, 4	; 24

	spi_send(MCP_READ); // Send read instruction
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>
	spi_send(address); // Send address
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>
	result = spi_read(); // Read result
  ee:	0e 94 86 02 	call	0x50c	; 0x50c <spi_read>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
  f2:	c4 9a       	sbi	0x18, 4	; 24

	return result;
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <can_controller_request_to_send>:
	return (modestat & MODE_MASK);
}

void can_controller_request_to_send()
{
		PORTB &= ~(1<<CAN_CS);
  f8:	c4 98       	cbi	0x18, 4	; 24
		
		// The buffer types are MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 and MCP_RTS_ALL
		spi_send(MCP_RTS_TX0);
  fa:	81 e8       	ldi	r24, 0x81	; 129
  fc:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>

		PORTB |= ~(1<<CAN_CS);
 100:	88 b3       	in	r24, 0x18	; 24
 102:	8f 6e       	ori	r24, 0xEF	; 239
 104:	88 bb       	out	0x18, r24	; 24
 106:	08 95       	ret

00000108 <can_controller_bit_modify>:
}

void can_controller_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	18 2f       	mov	r17, r24
 110:	d6 2f       	mov	r29, r22
 112:	c4 2f       	mov	r28, r20
		PORTB &= ~(1<<CAN_CS); // Select CAN-controller
 114:	c4 98       	cbi	0x18, 4	; 24

		spi_send(MCP_BITMOD); // Send read instruction
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>
		spi_send(address); // Send address
 11c:	81 2f       	mov	r24, r17
 11e:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>
		spi_send(mask); // Send mask,
 122:	8d 2f       	mov	r24, r29
 124:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>
		spi_send(data); // Send data
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>

		PORTB |= (1<<CAN_CS); // Deselect CAN-controller
 12e:	c4 9a       	sbi	0x18, 4	; 24
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	08 95       	ret

00000138 <can_controller_set_mode>:
}

uint8_t can_controller_set_mode(uint8_t mode)
{
	uint8_t modestat;
	can_controller_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
 138:	48 2f       	mov	r20, r24
 13a:	60 ee       	ldi	r22, 0xE0	; 224
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	modestat = can_controller_read(MCP_CANSTAT);
 142:	8e e0       	ldi	r24, 0x0E	; 14
 144:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	return (modestat & MODE_MASK);
}
 148:	80 7e       	andi	r24, 0xE0	; 224
 14a:	08 95       	ret

0000014c <can_controller_write>:

	return status;
}

void can_controller_write(uint8_t address, uint8_t data)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	d8 2f       	mov	r29, r24
 152:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
 154:	c4 98       	cbi	0x18, 4	; 24
	
	spi_send(MCP_WRITE);
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>
	spi_send(address);
 15c:	8d 2f       	mov	r24, r29
 15e:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>
	spi_send(data);
 162:	8c 2f       	mov	r24, r28
 164:	0e 94 83 02 	call	0x506	; 0x506 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
 168:	c4 9a       	sbi	0x18, 4	; 24
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <can_controller_init>:
uint8_t can_controller_init()
{
    uint8_t value;

    //spi_init(); // Initialize SPI
    can_controller_reset(); // Send reset-command
 170:	0e 94 62 00 	call	0xc4	; 0xc4 <can_controller_reset>
	

    // Self-test
    value = can_controller_read(MCP_CANSTAT);
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
    if ((value & MODE_MASK)  != MODE_CONFIG) 
 17a:	98 2f       	mov	r25, r24
 17c:	90 7e       	andi	r25, 0xE0	; 224
 17e:	90 38       	cpi	r25, 0x80	; 128
 180:	71 f0       	breq	.+28     	; 0x19e <can_controller_init+0x2e>
    {
        printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
 182:	1f 92       	push	r1
 184:	8f 93       	push	r24
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	9f 93       	push	r25
 18c:	8f 93       	push	r24
 18e:	0e 94 19 04 	call	0x832	; 0x832 <printf>
        return 1;
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	08 95       	ret
    }
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000001);
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	6f ef       	ldi	r22, 0xFF	; 255
 1a2:	8b e2       	ldi	r24, 0x2B	; 43
 1a4:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000);
 1a8:	40 e6       	ldi	r20, 0x60	; 96
 1aa:	60 e6       	ldi	r22, 0x60	; 96
 1ac:	80 e6       	ldi	r24, 0x60	; 96
 1ae:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	//can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

    
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);	
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	82 e3       	ldi	r24, 0x32	; 50
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
    return 0;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
}
 1bc:	08 95       	ret

000001be <can_init>:
}

void can_init ()
{
	//set loopback mode
	uint8_t mode = can_controller_set_mode(MODE_NORMAL);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 9c 00 	call	0x138	; 0x138 <can_controller_set_mode>
	if (mode != MODE_NORMAL)
 1c4:	88 23       	and	r24, r24
 1c6:	41 f0       	breq	.+16     	; 0x1d8 <can_init+0x1a>
	{
		printf("Could not set normal mode! I am sorry!\n\r");
 1c8:	83 e5       	ldi	r24, 0x53	; 83
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	9f 93       	push	r25
 1ce:	8f 93       	push	r24
 1d0:	0e 94 19 04 	call	0x832	; 0x832 <printf>
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
	}
		
	//enable RX interrupts
	can_controller_bit_modify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
 1d8:	43 e0       	ldi	r20, 0x03	; 3
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	8b e2       	ldi	r24, 0x2B	; 43
 1de:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	//can_controller_write(MCP_CANINTE, MCP_RX_INT);
	
	// SET UP INTERRUPTION TO RECIEVE MESSAGE
	DDRD &= ~(1<<PD3);
 1e2:	8b 98       	cbi	0x11, 3	; 17
	cli();
 1e4:	f8 94       	cli
	GICR |= (1 << INT1);						//enable external interrupt INT1
 1e6:	8b b7       	in	r24, 0x3b	; 59
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11);
 1ec:	85 b7       	in	r24, 0x35	; 53
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);	//interrupt on the falling edge
 1f2:	85 b7       	in	r24, 0x35	; 53
 1f4:	8b 7f       	andi	r24, 0xFB	; 251
 1f6:	85 bf       	out	0x35, r24	; 53
	sei();									//enable Global Interrupt
 1f8:	78 94       	sei
 1fa:	08 95       	ret

000001fc <can_send_msg>:
}

uint8_t can_send_msg(can_message* msg)
{
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24


	//writhe higher id
	can_controller_write(MCP_TXB0SIDH, msg->id);
 206:	68 81       	ld	r22, Y
 208:	81 e3       	ldi	r24, 0x31	; 49
 20a:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
    
	// Define data length of message
	uint8_t data_length = msg->length;
 20e:	09 81       	ldd	r16, Y+1	; 0x01
	can_controller_write(MCP_TXB0DLC, msg->length);
 210:	60 2f       	mov	r22, r16
 212:	85 e3       	ldi	r24, 0x35	; 53
 214:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
 218:	22 96       	adiw	r28, 0x02	; 2
	for (uint8_t byte = 0; byte < data_length; byte++) {
 21a:	00 23       	and	r16, r16
 21c:	49 f0       	breq	.+18     	; 0x230 <can_send_msg+0x34>
 21e:	0a 5c       	subi	r16, 0xCA	; 202
 220:	16 e3       	ldi	r17, 0x36	; 54
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
 222:	69 91       	ld	r22, Y+
 224:	81 2f       	mov	r24, r17
 226:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
 22a:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = msg->length;
	can_controller_write(MCP_TXB0DLC, msg->length);
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
 22c:	10 13       	cpse	r17, r16
 22e:	f9 cf       	rjmp	.-14     	; 0x222 <can_send_msg+0x26>
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
	}
	
	while((can_controller_read(MCP_TXB0CTRL) & 0x08) != 0);
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 236:	83 fd       	sbrc	r24, 3
 238:	fb cf       	rjmp	.-10     	; 0x230 <can_send_msg+0x34>
	
	// Request to send message, send if successful
	can_controller_request_to_send();
 23a:	0e 94 7c 00 	call	0xf8	; 0xf8 <can_controller_request_to_send>
// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE)); 
// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF)); 
// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	08 95       	ret

00000248 <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	eb 01       	movw	r28, r22
	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
    uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
 252:	18 2f       	mov	r17, r24
 254:	12 95       	swap	r17
 256:	10 7f       	andi	r17, 0xF0	; 240
 258:	81 e6       	ldi	r24, 0x61	; 97
 25a:	81 0f       	add	r24, r17
 25c:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
 260:	85 e6       	ldi	r24, 0x65	; 101
 262:	81 0f       	add	r24, r17
 264:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
 268:	98 2f       	mov	r25, r24
 26a:	9f 70       	andi	r25, 0x0F	; 15
 26c:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)	
	for (uint8_t byte = 0; byte < data_length; byte++) {
 26e:	88 23       	and	r24, r24
 270:	59 f0       	breq	.+22     	; 0x288 <can_recieve_msg+0x40>
 272:	1a 59       	subi	r17, 0x9A	; 154
 274:	22 96       	adiw	r28, 0x02	; 2
 276:	08 2f       	mov	r16, r24
 278:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
 27a:	81 2f       	mov	r24, r17
 27c:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 280:	89 93       	st	Y+, r24
 282:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)	
	for (uint8_t byte = 0; byte < data_length; byte++) {
 284:	10 13       	cpse	r17, r16
 286:	f9 cf       	rjmp	.-14     	; 0x27a <can_recieve_msg+0x32>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
    }
    can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	8c e2       	ldi	r24, 0x2C	; 44
 28e:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <__vector_2>:
#include "util.h"
#include "can_controller_driver.h"


ISR(INT1_vect)
{
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	cli();
 2c8:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 2ca:	8a e0       	ldi	r24, 0x0A	; 10
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 a7 02 	call	0x54e	; 0x54e <malloc>
 2d2:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	printf("message INTERRUPTION recieved\n\r");
 2d4:	8c e7       	ldi	r24, 0x7C	; 124
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	9f 93       	push	r25
 2da:	8f 93       	push	r24
 2dc:	0e 94 19 04 	call	0x832	; 0x832 <printf>
	uint8_t canInt = can_controller_read(MCP_CANINTF);
 2e0:	8c e2       	ldi	r24, 0x2C	; 44
 2e2:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	80 ff       	sbrs	r24, 0
 2ec:	26 c0       	rjmp	.+76     	; 0x33a <__vector_2+0x9e>
	{
		can_recieve_msg(0, msg);
 2ee:	be 01       	movw	r22, r28
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 24 01 	call	0x248	; 0x248 <can_recieve_msg>
		
		printf("DATA ON RX0\n\r");
 2f6:	8c e9       	ldi	r24, 0x9C	; 156
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	9f 93       	push	r25
 2fc:	8f 93       	push	r24
 2fe:	0e 94 19 04 	call	0x832	; 0x832 <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	88 23       	and	r24, r24
 30a:	09 f4       	brne	.+2      	; 0x30e <__vector_2+0x72>
 30c:	4a c0       	rjmp	.+148    	; 0x3a2 <__vector_2+0x106>
 30e:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
 310:	0a ea       	ldi	r16, 0xAA	; 170
 312:	11 e0       	ldi	r17, 0x01	; 1
 314:	fe 01       	movw	r30, r28
 316:	ef 0d       	add	r30, r15
 318:	f1 1d       	adc	r31, r1
 31a:	82 81       	ldd	r24, Z+2	; 0x02
 31c:	1f 92       	push	r1
 31e:	8f 93       	push	r24
 320:	1f 93       	push	r17
 322:	0f 93       	push	r16
 324:	0e 94 19 04 	call	0x832	; 0x832 <printf>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
	{
		can_recieve_msg(0, msg);
		
		printf("DATA ON RX0\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 328:	f3 94       	inc	r15
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	f8 16       	cp	r15, r24
 336:	70 f3       	brcs	.-36     	; 0x314 <__vector_2+0x78>
 338:	34 c0       	rjmp	.+104    	; 0x3a2 <__vector_2+0x106>
			printf("%d \n\r", msg->data[byte]);
		}
		
	}else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
 33a:	81 ff       	sbrs	r24, 1
 33c:	2a c0       	rjmp	.+84     	; 0x392 <__vector_2+0xf6>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	8c e2       	ldi	r24, 0x2C	; 44
 344:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
		can_recieve_msg(1, msg);
 348:	be 01       	movw	r22, r28
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 24 01 	call	0x248	; 0x248 <can_recieve_msg>
		
		printf("DATA ON RX1\n\r");
 350:	80 eb       	ldi	r24, 0xB0	; 176
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	9f 93       	push	r25
 356:	8f 93       	push	r24
 358:	0e 94 19 04 	call	0x832	; 0x832 <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	88 23       	and	r24, r24
 364:	f1 f0       	breq	.+60     	; 0x3a2 <__vector_2+0x106>
 366:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
 368:	0a ea       	ldi	r16, 0xAA	; 170
 36a:	11 e0       	ldi	r17, 0x01	; 1
 36c:	fe 01       	movw	r30, r28
 36e:	ef 0d       	add	r30, r15
 370:	f1 1d       	adc	r31, r1
 372:	82 81       	ldd	r24, Z+2	; 0x02
 374:	1f 92       	push	r1
 376:	8f 93       	push	r24
 378:	1f 93       	push	r17
 37a:	0f 93       	push	r16
 37c:	0e 94 19 04 	call	0x832	; 0x832 <printf>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
		can_recieve_msg(1, msg);
		
		printf("DATA ON RX1\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 380:	f3 94       	inc	r15
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	f8 16       	cp	r15, r24
 38e:	70 f3       	brcs	.-36     	; 0x36c <__vector_2+0xd0>
 390:	08 c0       	rjmp	.+16     	; 0x3a2 <__vector_2+0x106>
			printf("%d \n\r", msg->data[byte]);
		}
	}else
	{
		printf("No message available on the CAN REX BUFFERs\n\r");
 392:	8e eb       	ldi	r24, 0xBE	; 190
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	9f 93       	push	r25
 398:	8f 93       	push	r24
 39a:	0e 94 19 04 	call	0x832	; 0x832 <printf>
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
	}
	printf("===========================================\n\r");
 3a2:	8c ee       	ldi	r24, 0xEC	; 236
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	9f 93       	push	r25
 3a8:	8f 93       	push	r24
 3aa:	0e 94 19 04 	call	0x832	; 0x832 <printf>
	free(msg);
 3ae:	ce 01       	movw	r24, r28
 3b0:	0e 94 3f 03 	call	0x67e	; 0x67e <free>
	sei();
 3b4:	78 94       	sei
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
	
}
 3ba:	ff 91       	pop	r31
 3bc:	ef 91       	pop	r30
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <can_driver_test>:
    can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
	
}

void can_driver_test()
{
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 3ea:	8a e0       	ldi	r24, 0x0A	; 10
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 a7 02 	call	0x54e	; 0x54e <malloc>
 3f2:	ec 01       	movw	r28, r24
	printf("enter can driver test \n\r");
 3f4:	8a e1       	ldi	r24, 0x1A	; 26
 3f6:	92 e0       	ldi	r25, 0x02	; 2
 3f8:	9f 93       	push	r25
 3fa:	8f 93       	push	r24
 3fc:	0e 94 19 04 	call	0x832	; 0x832 <printf>
	msg->id = 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	88 83       	st	Y, r24
	msg->data[0] = 25;
 404:	89 e1       	ldi	r24, 0x19	; 25
 406:	8a 83       	std	Y+2, r24	; 0x02
	msg->data[1] = 38;
 408:	86 e2       	ldi	r24, 0x26	; 38
 40a:	8b 83       	std	Y+3, r24	; 0x03
	msg->data[2] = 95;
 40c:	8f e5       	ldi	r24, 0x5F	; 95
 40e:	8c 83       	std	Y+4, r24	; 0x04
	msg->length = 3;
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	89 83       	std	Y+1, r24	; 0x01
	can_send_msg(msg);
 414:	ce 01       	movw	r24, r28
 416:	0e 94 fe 00 	call	0x1fc	; 0x1fc <can_send_msg>
	
	msg->id = 5;
 41a:	85 e0       	ldi	r24, 0x05	; 5
 41c:	88 83       	st	Y, r24
	msg->data[0] = 72;
 41e:	88 e4       	ldi	r24, 0x48	; 72
 420:	8a 83       	std	Y+2, r24	; 0x02
	msg->data[1] = 58;
 422:	8a e3       	ldi	r24, 0x3A	; 58
 424:	8b 83       	std	Y+3, r24	; 0x03

	msg->length = 2;
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	89 83       	std	Y+1, r24	; 0x01
	can_send_msg(msg);
 42a:	ce 01       	movw	r24, r28
 42c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <can_send_msg>
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <joystick_init>:
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
 442:	90 93 bf 02 	sts	0x02BF, r25
 446:	80 93 be 02 	sts	0x02BE, r24
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
 452:	90 93 bd 02 	sts	0x02BD, r25
 456:	80 93 bc 02 	sts	0x02BC, r24
 45a:	08 95       	ret

0000045c <main>:
}

int main(void)
{
	// Initializations
	USART_Init(MYUBRR);
 45c:	8f e1       	ldi	r24, 0x1F	; 31
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 9a 02 	call	0x534	; 0x534 <USART_Init>
	SRAM_init();
 464:	0e 94 8b 02 	call	0x516	; 0x516 <SRAM_init>
	joystick_init();
 468:	0e 94 1d 02 	call	0x43a	; 0x43a <joystick_init>
	oled_init();
 46c:	0e 94 49 02 	call	0x492	; 0x492 <oled_init>
	spi_init();
 470:	0e 94 80 02 	call	0x500	; 0x500 <spi_init>
	can_controller_init();
 474:	0e 94 b8 00 	call	0x170	; 0x170 <can_controller_init>
	can_init();
 478:	0e 94 df 00 	call	0x1be	; 0x1be <can_init>
	
	printf("START============================\n\r");
 47c:	88 e9       	ldi	r24, 0x98	; 152
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	9f 93       	push	r25
 482:	8f 93       	push	r24
 484:	0e 94 19 04 	call	0x832	; 0x832 <printf>
	
	can_driver_test();
 488:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <can_driver_test>
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	ff cf       	rjmp	.-2      	; 0x490 <main+0x34>

00000492 <oled_init>:
 492:	e0 e0       	ldi	r30, 0x00	; 0
 494:	f0 e1       	ldi	r31, 0x10	; 16
 496:	8e ea       	ldi	r24, 0xAE	; 174
 498:	80 83       	st	Z, r24
 49a:	81 ea       	ldi	r24, 0xA1	; 161
 49c:	80 83       	st	Z, r24
 49e:	8a ed       	ldi	r24, 0xDA	; 218
 4a0:	80 83       	st	Z, r24
 4a2:	82 e1       	ldi	r24, 0x12	; 18
 4a4:	80 83       	st	Z, r24
 4a6:	88 ec       	ldi	r24, 0xC8	; 200
 4a8:	80 83       	st	Z, r24
 4aa:	88 ea       	ldi	r24, 0xA8	; 168
 4ac:	80 83       	st	Z, r24
 4ae:	8f e3       	ldi	r24, 0x3F	; 63
 4b0:	80 83       	st	Z, r24
 4b2:	85 ed       	ldi	r24, 0xD5	; 213
 4b4:	80 83       	st	Z, r24
 4b6:	80 e8       	ldi	r24, 0x80	; 128
 4b8:	80 83       	st	Z, r24
 4ba:	81 e8       	ldi	r24, 0x81	; 129
 4bc:	80 83       	st	Z, r24
 4be:	80 e5       	ldi	r24, 0x50	; 80
 4c0:	80 83       	st	Z, r24
 4c2:	89 ed       	ldi	r24, 0xD9	; 217
 4c4:	80 83       	st	Z, r24
 4c6:	81 e2       	ldi	r24, 0x21	; 33
 4c8:	80 83       	st	Z, r24
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	80 83       	st	Z, r24
 4ce:	10 82       	st	Z, r1
 4d0:	8b ed       	ldi	r24, 0xDB	; 219
 4d2:	80 83       	st	Z, r24
 4d4:	80 e3       	ldi	r24, 0x30	; 48
 4d6:	80 83       	st	Z, r24
 4d8:	8d ea       	ldi	r24, 0xAD	; 173
 4da:	80 83       	st	Z, r24
 4dc:	10 82       	st	Z, r1
 4de:	84 ea       	ldi	r24, 0xA4	; 164
 4e0:	80 83       	st	Z, r24
 4e2:	86 ea       	ldi	r24, 0xA6	; 166
 4e4:	80 83       	st	Z, r24
 4e6:	8f ea       	ldi	r24, 0xAF	; 175
 4e8:	80 83       	st	Z, r24
 4ea:	08 95       	ret

000004ec <SPI_MasterInit>:
 4ec:	80 eb       	ldi	r24, 0xB0	; 176
 4ee:	87 bb       	out	0x17, r24	; 23
 4f0:	be 98       	cbi	0x17, 6	; 23
 4f2:	81 e5       	ldi	r24, 0x51	; 81
 4f4:	8d b9       	out	0x0d, r24	; 13
 4f6:	08 95       	ret

000004f8 <SPI_MasterTransmit>:
 4f8:	8f b9       	out	0x0f, r24	; 15
 4fa:	77 9b       	sbis	0x0e, 7	; 14
 4fc:	fe cf       	rjmp	.-4      	; 0x4fa <SPI_MasterTransmit+0x2>
 4fe:	08 95       	ret

00000500 <spi_init>:
 500:	0e 94 76 02 	call	0x4ec	; 0x4ec <SPI_MasterInit>
 504:	08 95       	ret

00000506 <spi_send>:
 506:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <SPI_MasterTransmit>
 50a:	08 95       	ret

0000050c <spi_read>:
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <SPI_MasterTransmit>
 512:	8f b1       	in	r24, 0x0f	; 15
 514:	08 95       	ret

00000516 <SRAM_init>:
 516:	85 b7       	in	r24, 0x35	; 53
 518:	80 68       	ori	r24, 0x80	; 128
 51a:	85 bf       	out	0x35, r24	; 53
 51c:	80 b7       	in	r24, 0x30	; 48
 51e:	80 62       	ori	r24, 0x20	; 32
 520:	80 bf       	out	0x30, r24	; 48
 522:	08 95       	ret

00000524 <USART_Transmit>:
 524:	5d 9b       	sbis	0x0b, 5	; 11
 526:	fe cf       	rjmp	.-4      	; 0x524 <USART_Transmit>
 528:	8c b9       	out	0x0c, r24	; 12
 52a:	08 95       	ret

0000052c <USART_Receive>:
 52c:	5f 9b       	sbis	0x0b, 7	; 11
 52e:	fe cf       	rjmp	.-4      	; 0x52c <USART_Receive>
 530:	8c b1       	in	r24, 0x0c	; 12
 532:	08 95       	ret

00000534 <USART_Init>:
 534:	90 bd       	out	0x20, r25	; 32
 536:	89 b9       	out	0x09, r24	; 9
 538:	88 e1       	ldi	r24, 0x18	; 24
 53a:	8a b9       	out	0x0a, r24	; 10
 53c:	8e e8       	ldi	r24, 0x8E	; 142
 53e:	80 bd       	out	0x20, r24	; 32
 540:	66 e9       	ldi	r22, 0x96	; 150
 542:	72 e0       	ldi	r23, 0x02	; 2
 544:	82 e9       	ldi	r24, 0x92	; 146
 546:	92 e0       	ldi	r25, 0x02	; 2
 548:	0e 94 ce 03 	call	0x79c	; 0x79c <fdevopen>
 54c:	08 95       	ret

0000054e <malloc>:
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	91 05       	cpc	r25, r1
 556:	10 f4       	brcc	.+4      	; 0x55c <malloc+0xe>
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	e0 91 c2 02 	lds	r30, 0x02C2
 560:	f0 91 c3 02 	lds	r31, 0x02C3
 564:	20 e0       	ldi	r18, 0x00	; 0
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	a0 e0       	ldi	r26, 0x00	; 0
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	30 97       	sbiw	r30, 0x00	; 0
 56e:	39 f1       	breq	.+78     	; 0x5be <malloc+0x70>
 570:	40 81       	ld	r20, Z
 572:	51 81       	ldd	r21, Z+1	; 0x01
 574:	48 17       	cp	r20, r24
 576:	59 07       	cpc	r21, r25
 578:	b8 f0       	brcs	.+46     	; 0x5a8 <malloc+0x5a>
 57a:	48 17       	cp	r20, r24
 57c:	59 07       	cpc	r21, r25
 57e:	71 f4       	brne	.+28     	; 0x59c <malloc+0x4e>
 580:	82 81       	ldd	r24, Z+2	; 0x02
 582:	93 81       	ldd	r25, Z+3	; 0x03
 584:	10 97       	sbiw	r26, 0x00	; 0
 586:	29 f0       	breq	.+10     	; 0x592 <malloc+0x44>
 588:	13 96       	adiw	r26, 0x03	; 3
 58a:	9c 93       	st	X, r25
 58c:	8e 93       	st	-X, r24
 58e:	12 97       	sbiw	r26, 0x02	; 2
 590:	2c c0       	rjmp	.+88     	; 0x5ea <malloc+0x9c>
 592:	90 93 c3 02 	sts	0x02C3, r25
 596:	80 93 c2 02 	sts	0x02C2, r24
 59a:	27 c0       	rjmp	.+78     	; 0x5ea <malloc+0x9c>
 59c:	21 15       	cp	r18, r1
 59e:	31 05       	cpc	r19, r1
 5a0:	31 f0       	breq	.+12     	; 0x5ae <malloc+0x60>
 5a2:	42 17       	cp	r20, r18
 5a4:	53 07       	cpc	r21, r19
 5a6:	18 f0       	brcs	.+6      	; 0x5ae <malloc+0x60>
 5a8:	a9 01       	movw	r20, r18
 5aa:	db 01       	movw	r26, r22
 5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <malloc+0x62>
 5ae:	ef 01       	movw	r28, r30
 5b0:	9a 01       	movw	r18, r20
 5b2:	bd 01       	movw	r22, r26
 5b4:	df 01       	movw	r26, r30
 5b6:	02 80       	ldd	r0, Z+2	; 0x02
 5b8:	f3 81       	ldd	r31, Z+3	; 0x03
 5ba:	e0 2d       	mov	r30, r0
 5bc:	d7 cf       	rjmp	.-82     	; 0x56c <malloc+0x1e>
 5be:	21 15       	cp	r18, r1
 5c0:	31 05       	cpc	r19, r1
 5c2:	f9 f0       	breq	.+62     	; 0x602 <malloc+0xb4>
 5c4:	28 1b       	sub	r18, r24
 5c6:	39 0b       	sbc	r19, r25
 5c8:	24 30       	cpi	r18, 0x04	; 4
 5ca:	31 05       	cpc	r19, r1
 5cc:	80 f4       	brcc	.+32     	; 0x5ee <malloc+0xa0>
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	9b 81       	ldd	r25, Y+3	; 0x03
 5d2:	61 15       	cp	r22, r1
 5d4:	71 05       	cpc	r23, r1
 5d6:	21 f0       	breq	.+8      	; 0x5e0 <malloc+0x92>
 5d8:	fb 01       	movw	r30, r22
 5da:	93 83       	std	Z+3, r25	; 0x03
 5dc:	82 83       	std	Z+2, r24	; 0x02
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <malloc+0x9a>
 5e0:	90 93 c3 02 	sts	0x02C3, r25
 5e4:	80 93 c2 02 	sts	0x02C2, r24
 5e8:	fe 01       	movw	r30, r28
 5ea:	32 96       	adiw	r30, 0x02	; 2
 5ec:	44 c0       	rjmp	.+136    	; 0x676 <malloc+0x128>
 5ee:	fe 01       	movw	r30, r28
 5f0:	e2 0f       	add	r30, r18
 5f2:	f3 1f       	adc	r31, r19
 5f4:	81 93       	st	Z+, r24
 5f6:	91 93       	st	Z+, r25
 5f8:	22 50       	subi	r18, 0x02	; 2
 5fa:	31 09       	sbc	r19, r1
 5fc:	39 83       	std	Y+1, r19	; 0x01
 5fe:	28 83       	st	Y, r18
 600:	3a c0       	rjmp	.+116    	; 0x676 <malloc+0x128>
 602:	20 91 c0 02 	lds	r18, 0x02C0
 606:	30 91 c1 02 	lds	r19, 0x02C1
 60a:	23 2b       	or	r18, r19
 60c:	41 f4       	brne	.+16     	; 0x61e <malloc+0xd0>
 60e:	20 91 02 01 	lds	r18, 0x0102
 612:	30 91 03 01 	lds	r19, 0x0103
 616:	30 93 c1 02 	sts	0x02C1, r19
 61a:	20 93 c0 02 	sts	0x02C0, r18
 61e:	20 91 00 01 	lds	r18, 0x0100
 622:	30 91 01 01 	lds	r19, 0x0101
 626:	21 15       	cp	r18, r1
 628:	31 05       	cpc	r19, r1
 62a:	41 f4       	brne	.+16     	; 0x63c <malloc+0xee>
 62c:	2d b7       	in	r18, 0x3d	; 61
 62e:	3e b7       	in	r19, 0x3e	; 62
 630:	40 91 04 01 	lds	r20, 0x0104
 634:	50 91 05 01 	lds	r21, 0x0105
 638:	24 1b       	sub	r18, r20
 63a:	35 0b       	sbc	r19, r21
 63c:	e0 91 c0 02 	lds	r30, 0x02C0
 640:	f0 91 c1 02 	lds	r31, 0x02C1
 644:	e2 17       	cp	r30, r18
 646:	f3 07       	cpc	r31, r19
 648:	a0 f4       	brcc	.+40     	; 0x672 <malloc+0x124>
 64a:	2e 1b       	sub	r18, r30
 64c:	3f 0b       	sbc	r19, r31
 64e:	28 17       	cp	r18, r24
 650:	39 07       	cpc	r19, r25
 652:	78 f0       	brcs	.+30     	; 0x672 <malloc+0x124>
 654:	ac 01       	movw	r20, r24
 656:	4e 5f       	subi	r20, 0xFE	; 254
 658:	5f 4f       	sbci	r21, 0xFF	; 255
 65a:	24 17       	cp	r18, r20
 65c:	35 07       	cpc	r19, r21
 65e:	48 f0       	brcs	.+18     	; 0x672 <malloc+0x124>
 660:	4e 0f       	add	r20, r30
 662:	5f 1f       	adc	r21, r31
 664:	50 93 c1 02 	sts	0x02C1, r21
 668:	40 93 c0 02 	sts	0x02C0, r20
 66c:	81 93       	st	Z+, r24
 66e:	91 93       	st	Z+, r25
 670:	02 c0       	rjmp	.+4      	; 0x676 <malloc+0x128>
 672:	e0 e0       	ldi	r30, 0x00	; 0
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	cf 01       	movw	r24, r30
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <free>:
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	00 97       	sbiw	r24, 0x00	; 0
 684:	09 f4       	brne	.+2      	; 0x688 <free+0xa>
 686:	87 c0       	rjmp	.+270    	; 0x796 <free+0x118>
 688:	fc 01       	movw	r30, r24
 68a:	32 97       	sbiw	r30, 0x02	; 2
 68c:	13 82       	std	Z+3, r1	; 0x03
 68e:	12 82       	std	Z+2, r1	; 0x02
 690:	c0 91 c2 02 	lds	r28, 0x02C2
 694:	d0 91 c3 02 	lds	r29, 0x02C3
 698:	20 97       	sbiw	r28, 0x00	; 0
 69a:	81 f4       	brne	.+32     	; 0x6bc <free+0x3e>
 69c:	20 81       	ld	r18, Z
 69e:	31 81       	ldd	r19, Z+1	; 0x01
 6a0:	28 0f       	add	r18, r24
 6a2:	39 1f       	adc	r19, r25
 6a4:	80 91 c0 02 	lds	r24, 0x02C0
 6a8:	90 91 c1 02 	lds	r25, 0x02C1
 6ac:	82 17       	cp	r24, r18
 6ae:	93 07       	cpc	r25, r19
 6b0:	79 f5       	brne	.+94     	; 0x710 <free+0x92>
 6b2:	f0 93 c1 02 	sts	0x02C1, r31
 6b6:	e0 93 c0 02 	sts	0x02C0, r30
 6ba:	6d c0       	rjmp	.+218    	; 0x796 <free+0x118>
 6bc:	de 01       	movw	r26, r28
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	ae 17       	cp	r26, r30
 6c4:	bf 07       	cpc	r27, r31
 6c6:	50 f4       	brcc	.+20     	; 0x6dc <free+0x5e>
 6c8:	12 96       	adiw	r26, 0x02	; 2
 6ca:	4d 91       	ld	r20, X+
 6cc:	5c 91       	ld	r21, X
 6ce:	13 97       	sbiw	r26, 0x03	; 3
 6d0:	9d 01       	movw	r18, r26
 6d2:	41 15       	cp	r20, r1
 6d4:	51 05       	cpc	r21, r1
 6d6:	09 f1       	breq	.+66     	; 0x71a <free+0x9c>
 6d8:	da 01       	movw	r26, r20
 6da:	f3 cf       	rjmp	.-26     	; 0x6c2 <free+0x44>
 6dc:	b3 83       	std	Z+3, r27	; 0x03
 6de:	a2 83       	std	Z+2, r26	; 0x02
 6e0:	40 81       	ld	r20, Z
 6e2:	51 81       	ldd	r21, Z+1	; 0x01
 6e4:	84 0f       	add	r24, r20
 6e6:	95 1f       	adc	r25, r21
 6e8:	8a 17       	cp	r24, r26
 6ea:	9b 07       	cpc	r25, r27
 6ec:	71 f4       	brne	.+28     	; 0x70a <free+0x8c>
 6ee:	8d 91       	ld	r24, X+
 6f0:	9c 91       	ld	r25, X
 6f2:	11 97       	sbiw	r26, 0x01	; 1
 6f4:	84 0f       	add	r24, r20
 6f6:	95 1f       	adc	r25, r21
 6f8:	02 96       	adiw	r24, 0x02	; 2
 6fa:	91 83       	std	Z+1, r25	; 0x01
 6fc:	80 83       	st	Z, r24
 6fe:	12 96       	adiw	r26, 0x02	; 2
 700:	8d 91       	ld	r24, X+
 702:	9c 91       	ld	r25, X
 704:	13 97       	sbiw	r26, 0x03	; 3
 706:	93 83       	std	Z+3, r25	; 0x03
 708:	82 83       	std	Z+2, r24	; 0x02
 70a:	21 15       	cp	r18, r1
 70c:	31 05       	cpc	r19, r1
 70e:	29 f4       	brne	.+10     	; 0x71a <free+0x9c>
 710:	f0 93 c3 02 	sts	0x02C3, r31
 714:	e0 93 c2 02 	sts	0x02C2, r30
 718:	3e c0       	rjmp	.+124    	; 0x796 <free+0x118>
 71a:	d9 01       	movw	r26, r18
 71c:	13 96       	adiw	r26, 0x03	; 3
 71e:	fc 93       	st	X, r31
 720:	ee 93       	st	-X, r30
 722:	12 97       	sbiw	r26, 0x02	; 2
 724:	4d 91       	ld	r20, X+
 726:	5d 91       	ld	r21, X+
 728:	a4 0f       	add	r26, r20
 72a:	b5 1f       	adc	r27, r21
 72c:	ea 17       	cp	r30, r26
 72e:	fb 07       	cpc	r31, r27
 730:	79 f4       	brne	.+30     	; 0x750 <free+0xd2>
 732:	80 81       	ld	r24, Z
 734:	91 81       	ldd	r25, Z+1	; 0x01
 736:	84 0f       	add	r24, r20
 738:	95 1f       	adc	r25, r21
 73a:	02 96       	adiw	r24, 0x02	; 2
 73c:	d9 01       	movw	r26, r18
 73e:	11 96       	adiw	r26, 0x01	; 1
 740:	9c 93       	st	X, r25
 742:	8e 93       	st	-X, r24
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	93 81       	ldd	r25, Z+3	; 0x03
 748:	13 96       	adiw	r26, 0x03	; 3
 74a:	9c 93       	st	X, r25
 74c:	8e 93       	st	-X, r24
 74e:	12 97       	sbiw	r26, 0x02	; 2
 750:	e0 e0       	ldi	r30, 0x00	; 0
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	9b 81       	ldd	r25, Y+3	; 0x03
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	19 f0       	breq	.+6      	; 0x762 <free+0xe4>
 75c:	fe 01       	movw	r30, r28
 75e:	ec 01       	movw	r28, r24
 760:	f9 cf       	rjmp	.-14     	; 0x754 <free+0xd6>
 762:	ce 01       	movw	r24, r28
 764:	02 96       	adiw	r24, 0x02	; 2
 766:	28 81       	ld	r18, Y
 768:	39 81       	ldd	r19, Y+1	; 0x01
 76a:	82 0f       	add	r24, r18
 76c:	93 1f       	adc	r25, r19
 76e:	20 91 c0 02 	lds	r18, 0x02C0
 772:	30 91 c1 02 	lds	r19, 0x02C1
 776:	28 17       	cp	r18, r24
 778:	39 07       	cpc	r19, r25
 77a:	69 f4       	brne	.+26     	; 0x796 <free+0x118>
 77c:	30 97       	sbiw	r30, 0x00	; 0
 77e:	29 f4       	brne	.+10     	; 0x78a <free+0x10c>
 780:	10 92 c3 02 	sts	0x02C3, r1
 784:	10 92 c2 02 	sts	0x02C2, r1
 788:	02 c0       	rjmp	.+4      	; 0x78e <free+0x110>
 78a:	13 82       	std	Z+3, r1	; 0x03
 78c:	12 82       	std	Z+2, r1	; 0x02
 78e:	d0 93 c1 02 	sts	0x02C1, r29
 792:	c0 93 c0 02 	sts	0x02C0, r28
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	08 95       	ret

0000079c <fdevopen>:
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	ec 01       	movw	r28, r24
 7a6:	8b 01       	movw	r16, r22
 7a8:	00 97       	sbiw	r24, 0x00	; 0
 7aa:	31 f4       	brne	.+12     	; 0x7b8 <fdevopen+0x1c>
 7ac:	61 15       	cp	r22, r1
 7ae:	71 05       	cpc	r23, r1
 7b0:	19 f4       	brne	.+6      	; 0x7b8 <fdevopen+0x1c>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	38 c0       	rjmp	.+112    	; 0x828 <fdevopen+0x8c>
 7b8:	6e e0       	ldi	r22, 0x0E	; 14
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 ff 05 	call	0xbfe	; 0xbfe <calloc>
 7c4:	fc 01       	movw	r30, r24
 7c6:	00 97       	sbiw	r24, 0x00	; 0
 7c8:	a1 f3       	breq	.-24     	; 0x7b2 <fdevopen+0x16>
 7ca:	80 e8       	ldi	r24, 0x80	; 128
 7cc:	83 83       	std	Z+3, r24	; 0x03
 7ce:	01 15       	cp	r16, r1
 7d0:	11 05       	cpc	r17, r1
 7d2:	71 f0       	breq	.+28     	; 0x7f0 <fdevopen+0x54>
 7d4:	13 87       	std	Z+11, r17	; 0x0b
 7d6:	02 87       	std	Z+10, r16	; 0x0a
 7d8:	81 e8       	ldi	r24, 0x81	; 129
 7da:	83 83       	std	Z+3, r24	; 0x03
 7dc:	80 91 c4 02 	lds	r24, 0x02C4
 7e0:	90 91 c5 02 	lds	r25, 0x02C5
 7e4:	89 2b       	or	r24, r25
 7e6:	21 f4       	brne	.+8      	; 0x7f0 <fdevopen+0x54>
 7e8:	f0 93 c5 02 	sts	0x02C5, r31
 7ec:	e0 93 c4 02 	sts	0x02C4, r30
 7f0:	20 97       	sbiw	r28, 0x00	; 0
 7f2:	c9 f0       	breq	.+50     	; 0x826 <fdevopen+0x8a>
 7f4:	d1 87       	std	Z+9, r29	; 0x09
 7f6:	c0 87       	std	Z+8, r28	; 0x08
 7f8:	83 81       	ldd	r24, Z+3	; 0x03
 7fa:	82 60       	ori	r24, 0x02	; 2
 7fc:	83 83       	std	Z+3, r24	; 0x03
 7fe:	80 91 c6 02 	lds	r24, 0x02C6
 802:	90 91 c7 02 	lds	r25, 0x02C7
 806:	89 2b       	or	r24, r25
 808:	71 f4       	brne	.+28     	; 0x826 <fdevopen+0x8a>
 80a:	f0 93 c7 02 	sts	0x02C7, r31
 80e:	e0 93 c6 02 	sts	0x02C6, r30
 812:	80 91 c8 02 	lds	r24, 0x02C8
 816:	90 91 c9 02 	lds	r25, 0x02C9
 81a:	89 2b       	or	r24, r25
 81c:	21 f4       	brne	.+8      	; 0x826 <fdevopen+0x8a>
 81e:	f0 93 c9 02 	sts	0x02C9, r31
 822:	e0 93 c8 02 	sts	0x02C8, r30
 826:	cf 01       	movw	r24, r30
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	1f 91       	pop	r17
 82e:	0f 91       	pop	r16
 830:	08 95       	ret

00000832 <printf>:
 832:	a0 e0       	ldi	r26, 0x00	; 0
 834:	b0 e0       	ldi	r27, 0x00	; 0
 836:	ef e1       	ldi	r30, 0x1F	; 31
 838:	f4 e0       	ldi	r31, 0x04	; 4
 83a:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__prologue_saves__+0x20>
 83e:	fe 01       	movw	r30, r28
 840:	35 96       	adiw	r30, 0x05	; 5
 842:	61 91       	ld	r22, Z+
 844:	71 91       	ld	r23, Z+
 846:	af 01       	movw	r20, r30
 848:	80 91 c6 02 	lds	r24, 0x02C6
 84c:	90 91 c7 02 	lds	r25, 0x02C7
 850:	0e 94 2d 04 	call	0x85a	; 0x85a <vfprintf>
 854:	e2 e0       	ldi	r30, 0x02	; 2
 856:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__epilogue_restores__+0x20>

0000085a <vfprintf>:
 85a:	ac e0       	ldi	r26, 0x0C	; 12
 85c:	b0 e0       	ldi	r27, 0x00	; 0
 85e:	e3 e3       	ldi	r30, 0x33	; 51
 860:	f4 e0       	ldi	r31, 0x04	; 4
 862:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__prologue_saves__>
 866:	7c 01       	movw	r14, r24
 868:	6b 01       	movw	r12, r22
 86a:	8a 01       	movw	r16, r20
 86c:	fc 01       	movw	r30, r24
 86e:	17 82       	std	Z+7, r1	; 0x07
 870:	16 82       	std	Z+6, r1	; 0x06
 872:	83 81       	ldd	r24, Z+3	; 0x03
 874:	81 ff       	sbrs	r24, 1
 876:	bd c1       	rjmp	.+890    	; 0xbf2 <vfprintf+0x398>
 878:	ce 01       	movw	r24, r28
 87a:	01 96       	adiw	r24, 0x01	; 1
 87c:	4c 01       	movw	r8, r24
 87e:	f7 01       	movw	r30, r14
 880:	93 81       	ldd	r25, Z+3	; 0x03
 882:	f6 01       	movw	r30, r12
 884:	93 fd       	sbrc	r25, 3
 886:	85 91       	lpm	r24, Z+
 888:	93 ff       	sbrs	r25, 3
 88a:	81 91       	ld	r24, Z+
 88c:	6f 01       	movw	r12, r30
 88e:	88 23       	and	r24, r24
 890:	09 f4       	brne	.+2      	; 0x894 <vfprintf+0x3a>
 892:	ab c1       	rjmp	.+854    	; 0xbea <vfprintf+0x390>
 894:	85 32       	cpi	r24, 0x25	; 37
 896:	39 f4       	brne	.+14     	; 0x8a6 <vfprintf+0x4c>
 898:	93 fd       	sbrc	r25, 3
 89a:	85 91       	lpm	r24, Z+
 89c:	93 ff       	sbrs	r25, 3
 89e:	81 91       	ld	r24, Z+
 8a0:	6f 01       	movw	r12, r30
 8a2:	85 32       	cpi	r24, 0x25	; 37
 8a4:	29 f4       	brne	.+10     	; 0x8b0 <vfprintf+0x56>
 8a6:	b7 01       	movw	r22, r14
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 8ae:	e7 cf       	rjmp	.-50     	; 0x87e <vfprintf+0x24>
 8b0:	51 2c       	mov	r5, r1
 8b2:	31 2c       	mov	r3, r1
 8b4:	20 e0       	ldi	r18, 0x00	; 0
 8b6:	20 32       	cpi	r18, 0x20	; 32
 8b8:	a0 f4       	brcc	.+40     	; 0x8e2 <vfprintf+0x88>
 8ba:	8b 32       	cpi	r24, 0x2B	; 43
 8bc:	69 f0       	breq	.+26     	; 0x8d8 <vfprintf+0x7e>
 8be:	30 f4       	brcc	.+12     	; 0x8cc <vfprintf+0x72>
 8c0:	80 32       	cpi	r24, 0x20	; 32
 8c2:	59 f0       	breq	.+22     	; 0x8da <vfprintf+0x80>
 8c4:	83 32       	cpi	r24, 0x23	; 35
 8c6:	69 f4       	brne	.+26     	; 0x8e2 <vfprintf+0x88>
 8c8:	20 61       	ori	r18, 0x10	; 16
 8ca:	2c c0       	rjmp	.+88     	; 0x924 <vfprintf+0xca>
 8cc:	8d 32       	cpi	r24, 0x2D	; 45
 8ce:	39 f0       	breq	.+14     	; 0x8de <vfprintf+0x84>
 8d0:	80 33       	cpi	r24, 0x30	; 48
 8d2:	39 f4       	brne	.+14     	; 0x8e2 <vfprintf+0x88>
 8d4:	21 60       	ori	r18, 0x01	; 1
 8d6:	26 c0       	rjmp	.+76     	; 0x924 <vfprintf+0xca>
 8d8:	22 60       	ori	r18, 0x02	; 2
 8da:	24 60       	ori	r18, 0x04	; 4
 8dc:	23 c0       	rjmp	.+70     	; 0x924 <vfprintf+0xca>
 8de:	28 60       	ori	r18, 0x08	; 8
 8e0:	21 c0       	rjmp	.+66     	; 0x924 <vfprintf+0xca>
 8e2:	27 fd       	sbrc	r18, 7
 8e4:	27 c0       	rjmp	.+78     	; 0x934 <vfprintf+0xda>
 8e6:	30 ed       	ldi	r19, 0xD0	; 208
 8e8:	38 0f       	add	r19, r24
 8ea:	3a 30       	cpi	r19, 0x0A	; 10
 8ec:	78 f4       	brcc	.+30     	; 0x90c <vfprintf+0xb2>
 8ee:	26 ff       	sbrs	r18, 6
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <vfprintf+0xa4>
 8f2:	fa e0       	ldi	r31, 0x0A	; 10
 8f4:	5f 9e       	mul	r5, r31
 8f6:	30 0d       	add	r19, r0
 8f8:	11 24       	eor	r1, r1
 8fa:	53 2e       	mov	r5, r19
 8fc:	13 c0       	rjmp	.+38     	; 0x924 <vfprintf+0xca>
 8fe:	8a e0       	ldi	r24, 0x0A	; 10
 900:	38 9e       	mul	r3, r24
 902:	30 0d       	add	r19, r0
 904:	11 24       	eor	r1, r1
 906:	33 2e       	mov	r3, r19
 908:	20 62       	ori	r18, 0x20	; 32
 90a:	0c c0       	rjmp	.+24     	; 0x924 <vfprintf+0xca>
 90c:	8e 32       	cpi	r24, 0x2E	; 46
 90e:	21 f4       	brne	.+8      	; 0x918 <vfprintf+0xbe>
 910:	26 fd       	sbrc	r18, 6
 912:	6b c1       	rjmp	.+726    	; 0xbea <vfprintf+0x390>
 914:	20 64       	ori	r18, 0x40	; 64
 916:	06 c0       	rjmp	.+12     	; 0x924 <vfprintf+0xca>
 918:	8c 36       	cpi	r24, 0x6C	; 108
 91a:	11 f4       	brne	.+4      	; 0x920 <vfprintf+0xc6>
 91c:	20 68       	ori	r18, 0x80	; 128
 91e:	02 c0       	rjmp	.+4      	; 0x924 <vfprintf+0xca>
 920:	88 36       	cpi	r24, 0x68	; 104
 922:	41 f4       	brne	.+16     	; 0x934 <vfprintf+0xda>
 924:	f6 01       	movw	r30, r12
 926:	93 fd       	sbrc	r25, 3
 928:	85 91       	lpm	r24, Z+
 92a:	93 ff       	sbrs	r25, 3
 92c:	81 91       	ld	r24, Z+
 92e:	6f 01       	movw	r12, r30
 930:	81 11       	cpse	r24, r1
 932:	c1 cf       	rjmp	.-126    	; 0x8b6 <vfprintf+0x5c>
 934:	98 2f       	mov	r25, r24
 936:	9f 7d       	andi	r25, 0xDF	; 223
 938:	95 54       	subi	r25, 0x45	; 69
 93a:	93 30       	cpi	r25, 0x03	; 3
 93c:	28 f4       	brcc	.+10     	; 0x948 <vfprintf+0xee>
 93e:	0c 5f       	subi	r16, 0xFC	; 252
 940:	1f 4f       	sbci	r17, 0xFF	; 255
 942:	ff e3       	ldi	r31, 0x3F	; 63
 944:	f9 83       	std	Y+1, r31	; 0x01
 946:	0d c0       	rjmp	.+26     	; 0x962 <vfprintf+0x108>
 948:	83 36       	cpi	r24, 0x63	; 99
 94a:	31 f0       	breq	.+12     	; 0x958 <vfprintf+0xfe>
 94c:	83 37       	cpi	r24, 0x73	; 115
 94e:	71 f0       	breq	.+28     	; 0x96c <vfprintf+0x112>
 950:	83 35       	cpi	r24, 0x53	; 83
 952:	09 f0       	breq	.+2      	; 0x956 <vfprintf+0xfc>
 954:	5b c0       	rjmp	.+182    	; 0xa0c <vfprintf+0x1b2>
 956:	22 c0       	rjmp	.+68     	; 0x99c <vfprintf+0x142>
 958:	f8 01       	movw	r30, r16
 95a:	80 81       	ld	r24, Z
 95c:	89 83       	std	Y+1, r24	; 0x01
 95e:	0e 5f       	subi	r16, 0xFE	; 254
 960:	1f 4f       	sbci	r17, 0xFF	; 255
 962:	44 24       	eor	r4, r4
 964:	43 94       	inc	r4
 966:	51 2c       	mov	r5, r1
 968:	54 01       	movw	r10, r8
 96a:	15 c0       	rjmp	.+42     	; 0x996 <vfprintf+0x13c>
 96c:	38 01       	movw	r6, r16
 96e:	f2 e0       	ldi	r31, 0x02	; 2
 970:	6f 0e       	add	r6, r31
 972:	71 1c       	adc	r7, r1
 974:	f8 01       	movw	r30, r16
 976:	a0 80       	ld	r10, Z
 978:	b1 80       	ldd	r11, Z+1	; 0x01
 97a:	26 ff       	sbrs	r18, 6
 97c:	03 c0       	rjmp	.+6      	; 0x984 <vfprintf+0x12a>
 97e:	65 2d       	mov	r22, r5
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	02 c0       	rjmp	.+4      	; 0x988 <vfprintf+0x12e>
 984:	6f ef       	ldi	r22, 0xFF	; 255
 986:	7f ef       	ldi	r23, 0xFF	; 255
 988:	c5 01       	movw	r24, r10
 98a:	2c 87       	std	Y+12, r18	; 0x0c
 98c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strnlen>
 990:	2c 01       	movw	r4, r24
 992:	83 01       	movw	r16, r6
 994:	2c 85       	ldd	r18, Y+12	; 0x0c
 996:	2f 77       	andi	r18, 0x7F	; 127
 998:	22 2e       	mov	r2, r18
 99a:	17 c0       	rjmp	.+46     	; 0x9ca <vfprintf+0x170>
 99c:	38 01       	movw	r6, r16
 99e:	f2 e0       	ldi	r31, 0x02	; 2
 9a0:	6f 0e       	add	r6, r31
 9a2:	71 1c       	adc	r7, r1
 9a4:	f8 01       	movw	r30, r16
 9a6:	a0 80       	ld	r10, Z
 9a8:	b1 80       	ldd	r11, Z+1	; 0x01
 9aa:	26 ff       	sbrs	r18, 6
 9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <vfprintf+0x15a>
 9ae:	65 2d       	mov	r22, r5
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <vfprintf+0x15e>
 9b4:	6f ef       	ldi	r22, 0xFF	; 255
 9b6:	7f ef       	ldi	r23, 0xFF	; 255
 9b8:	c5 01       	movw	r24, r10
 9ba:	2c 87       	std	Y+12, r18	; 0x0c
 9bc:	0e 94 1b 06 	call	0xc36	; 0xc36 <strnlen_P>
 9c0:	2c 01       	movw	r4, r24
 9c2:	2c 85       	ldd	r18, Y+12	; 0x0c
 9c4:	20 68       	ori	r18, 0x80	; 128
 9c6:	22 2e       	mov	r2, r18
 9c8:	83 01       	movw	r16, r6
 9ca:	23 fc       	sbrc	r2, 3
 9cc:	1b c0       	rjmp	.+54     	; 0xa04 <vfprintf+0x1aa>
 9ce:	83 2d       	mov	r24, r3
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	48 16       	cp	r4, r24
 9d4:	59 06       	cpc	r5, r25
 9d6:	b0 f4       	brcc	.+44     	; 0xa04 <vfprintf+0x1aa>
 9d8:	b7 01       	movw	r22, r14
 9da:	80 e2       	ldi	r24, 0x20	; 32
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 9e2:	3a 94       	dec	r3
 9e4:	f4 cf       	rjmp	.-24     	; 0x9ce <vfprintf+0x174>
 9e6:	f5 01       	movw	r30, r10
 9e8:	27 fc       	sbrc	r2, 7
 9ea:	85 91       	lpm	r24, Z+
 9ec:	27 fe       	sbrs	r2, 7
 9ee:	81 91       	ld	r24, Z+
 9f0:	5f 01       	movw	r10, r30
 9f2:	b7 01       	movw	r22, r14
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 9fa:	31 10       	cpse	r3, r1
 9fc:	3a 94       	dec	r3
 9fe:	f1 e0       	ldi	r31, 0x01	; 1
 a00:	4f 1a       	sub	r4, r31
 a02:	51 08       	sbc	r5, r1
 a04:	41 14       	cp	r4, r1
 a06:	51 04       	cpc	r5, r1
 a08:	71 f7       	brne	.-36     	; 0x9e6 <vfprintf+0x18c>
 a0a:	e5 c0       	rjmp	.+458    	; 0xbd6 <vfprintf+0x37c>
 a0c:	84 36       	cpi	r24, 0x64	; 100
 a0e:	11 f0       	breq	.+4      	; 0xa14 <vfprintf+0x1ba>
 a10:	89 36       	cpi	r24, 0x69	; 105
 a12:	39 f5       	brne	.+78     	; 0xa62 <vfprintf+0x208>
 a14:	f8 01       	movw	r30, r16
 a16:	27 ff       	sbrs	r18, 7
 a18:	07 c0       	rjmp	.+14     	; 0xa28 <vfprintf+0x1ce>
 a1a:	60 81       	ld	r22, Z
 a1c:	71 81       	ldd	r23, Z+1	; 0x01
 a1e:	82 81       	ldd	r24, Z+2	; 0x02
 a20:	93 81       	ldd	r25, Z+3	; 0x03
 a22:	0c 5f       	subi	r16, 0xFC	; 252
 a24:	1f 4f       	sbci	r17, 0xFF	; 255
 a26:	08 c0       	rjmp	.+16     	; 0xa38 <vfprintf+0x1de>
 a28:	60 81       	ld	r22, Z
 a2a:	71 81       	ldd	r23, Z+1	; 0x01
 a2c:	88 27       	eor	r24, r24
 a2e:	77 fd       	sbrc	r23, 7
 a30:	80 95       	com	r24
 a32:	98 2f       	mov	r25, r24
 a34:	0e 5f       	subi	r16, 0xFE	; 254
 a36:	1f 4f       	sbci	r17, 0xFF	; 255
 a38:	2f 76       	andi	r18, 0x6F	; 111
 a3a:	b2 2e       	mov	r11, r18
 a3c:	97 ff       	sbrs	r25, 7
 a3e:	09 c0       	rjmp	.+18     	; 0xa52 <vfprintf+0x1f8>
 a40:	90 95       	com	r25
 a42:	80 95       	com	r24
 a44:	70 95       	com	r23
 a46:	61 95       	neg	r22
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	20 68       	ori	r18, 0x80	; 128
 a50:	b2 2e       	mov	r11, r18
 a52:	2a e0       	ldi	r18, 0x0A	; 10
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	a4 01       	movw	r20, r8
 a58:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__ultoa_invert>
 a5c:	a8 2e       	mov	r10, r24
 a5e:	a8 18       	sub	r10, r8
 a60:	44 c0       	rjmp	.+136    	; 0xaea <vfprintf+0x290>
 a62:	85 37       	cpi	r24, 0x75	; 117
 a64:	29 f4       	brne	.+10     	; 0xa70 <vfprintf+0x216>
 a66:	2f 7e       	andi	r18, 0xEF	; 239
 a68:	b2 2e       	mov	r11, r18
 a6a:	2a e0       	ldi	r18, 0x0A	; 10
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	25 c0       	rjmp	.+74     	; 0xaba <vfprintf+0x260>
 a70:	f2 2f       	mov	r31, r18
 a72:	f9 7f       	andi	r31, 0xF9	; 249
 a74:	bf 2e       	mov	r11, r31
 a76:	8f 36       	cpi	r24, 0x6F	; 111
 a78:	c1 f0       	breq	.+48     	; 0xaaa <vfprintf+0x250>
 a7a:	18 f4       	brcc	.+6      	; 0xa82 <vfprintf+0x228>
 a7c:	88 35       	cpi	r24, 0x58	; 88
 a7e:	79 f0       	breq	.+30     	; 0xa9e <vfprintf+0x244>
 a80:	b4 c0       	rjmp	.+360    	; 0xbea <vfprintf+0x390>
 a82:	80 37       	cpi	r24, 0x70	; 112
 a84:	19 f0       	breq	.+6      	; 0xa8c <vfprintf+0x232>
 a86:	88 37       	cpi	r24, 0x78	; 120
 a88:	21 f0       	breq	.+8      	; 0xa92 <vfprintf+0x238>
 a8a:	af c0       	rjmp	.+350    	; 0xbea <vfprintf+0x390>
 a8c:	2f 2f       	mov	r18, r31
 a8e:	20 61       	ori	r18, 0x10	; 16
 a90:	b2 2e       	mov	r11, r18
 a92:	b4 fe       	sbrs	r11, 4
 a94:	0d c0       	rjmp	.+26     	; 0xab0 <vfprintf+0x256>
 a96:	8b 2d       	mov	r24, r11
 a98:	84 60       	ori	r24, 0x04	; 4
 a9a:	b8 2e       	mov	r11, r24
 a9c:	09 c0       	rjmp	.+18     	; 0xab0 <vfprintf+0x256>
 a9e:	24 ff       	sbrs	r18, 4
 aa0:	0a c0       	rjmp	.+20     	; 0xab6 <vfprintf+0x25c>
 aa2:	9f 2f       	mov	r25, r31
 aa4:	96 60       	ori	r25, 0x06	; 6
 aa6:	b9 2e       	mov	r11, r25
 aa8:	06 c0       	rjmp	.+12     	; 0xab6 <vfprintf+0x25c>
 aaa:	28 e0       	ldi	r18, 0x08	; 8
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	05 c0       	rjmp	.+10     	; 0xaba <vfprintf+0x260>
 ab0:	20 e1       	ldi	r18, 0x10	; 16
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x260>
 ab6:	20 e1       	ldi	r18, 0x10	; 16
 ab8:	32 e0       	ldi	r19, 0x02	; 2
 aba:	f8 01       	movw	r30, r16
 abc:	b7 fe       	sbrs	r11, 7
 abe:	07 c0       	rjmp	.+14     	; 0xace <vfprintf+0x274>
 ac0:	60 81       	ld	r22, Z
 ac2:	71 81       	ldd	r23, Z+1	; 0x01
 ac4:	82 81       	ldd	r24, Z+2	; 0x02
 ac6:	93 81       	ldd	r25, Z+3	; 0x03
 ac8:	0c 5f       	subi	r16, 0xFC	; 252
 aca:	1f 4f       	sbci	r17, 0xFF	; 255
 acc:	06 c0       	rjmp	.+12     	; 0xada <vfprintf+0x280>
 ace:	60 81       	ld	r22, Z
 ad0:	71 81       	ldd	r23, Z+1	; 0x01
 ad2:	80 e0       	ldi	r24, 0x00	; 0
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 5f       	subi	r16, 0xFE	; 254
 ad8:	1f 4f       	sbci	r17, 0xFF	; 255
 ada:	a4 01       	movw	r20, r8
 adc:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__ultoa_invert>
 ae0:	a8 2e       	mov	r10, r24
 ae2:	a8 18       	sub	r10, r8
 ae4:	fb 2d       	mov	r31, r11
 ae6:	ff 77       	andi	r31, 0x7F	; 127
 ae8:	bf 2e       	mov	r11, r31
 aea:	b6 fe       	sbrs	r11, 6
 aec:	0b c0       	rjmp	.+22     	; 0xb04 <vfprintf+0x2aa>
 aee:	2b 2d       	mov	r18, r11
 af0:	2e 7f       	andi	r18, 0xFE	; 254
 af2:	a5 14       	cp	r10, r5
 af4:	50 f4       	brcc	.+20     	; 0xb0a <vfprintf+0x2b0>
 af6:	b4 fe       	sbrs	r11, 4
 af8:	0a c0       	rjmp	.+20     	; 0xb0e <vfprintf+0x2b4>
 afa:	b2 fc       	sbrc	r11, 2
 afc:	08 c0       	rjmp	.+16     	; 0xb0e <vfprintf+0x2b4>
 afe:	2b 2d       	mov	r18, r11
 b00:	2e 7e       	andi	r18, 0xEE	; 238
 b02:	05 c0       	rjmp	.+10     	; 0xb0e <vfprintf+0x2b4>
 b04:	7a 2c       	mov	r7, r10
 b06:	2b 2d       	mov	r18, r11
 b08:	03 c0       	rjmp	.+6      	; 0xb10 <vfprintf+0x2b6>
 b0a:	7a 2c       	mov	r7, r10
 b0c:	01 c0       	rjmp	.+2      	; 0xb10 <vfprintf+0x2b6>
 b0e:	75 2c       	mov	r7, r5
 b10:	24 ff       	sbrs	r18, 4
 b12:	0d c0       	rjmp	.+26     	; 0xb2e <vfprintf+0x2d4>
 b14:	fe 01       	movw	r30, r28
 b16:	ea 0d       	add	r30, r10
 b18:	f1 1d       	adc	r31, r1
 b1a:	80 81       	ld	r24, Z
 b1c:	80 33       	cpi	r24, 0x30	; 48
 b1e:	11 f4       	brne	.+4      	; 0xb24 <vfprintf+0x2ca>
 b20:	29 7e       	andi	r18, 0xE9	; 233
 b22:	09 c0       	rjmp	.+18     	; 0xb36 <vfprintf+0x2dc>
 b24:	22 ff       	sbrs	r18, 2
 b26:	06 c0       	rjmp	.+12     	; 0xb34 <vfprintf+0x2da>
 b28:	73 94       	inc	r7
 b2a:	73 94       	inc	r7
 b2c:	04 c0       	rjmp	.+8      	; 0xb36 <vfprintf+0x2dc>
 b2e:	82 2f       	mov	r24, r18
 b30:	86 78       	andi	r24, 0x86	; 134
 b32:	09 f0       	breq	.+2      	; 0xb36 <vfprintf+0x2dc>
 b34:	73 94       	inc	r7
 b36:	23 fd       	sbrc	r18, 3
 b38:	13 c0       	rjmp	.+38     	; 0xb60 <vfprintf+0x306>
 b3a:	20 ff       	sbrs	r18, 0
 b3c:	06 c0       	rjmp	.+12     	; 0xb4a <vfprintf+0x2f0>
 b3e:	5a 2c       	mov	r5, r10
 b40:	73 14       	cp	r7, r3
 b42:	18 f4       	brcc	.+6      	; 0xb4a <vfprintf+0x2f0>
 b44:	53 0c       	add	r5, r3
 b46:	57 18       	sub	r5, r7
 b48:	73 2c       	mov	r7, r3
 b4a:	73 14       	cp	r7, r3
 b4c:	68 f4       	brcc	.+26     	; 0xb68 <vfprintf+0x30e>
 b4e:	b7 01       	movw	r22, r14
 b50:	80 e2       	ldi	r24, 0x20	; 32
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	2c 87       	std	Y+12, r18	; 0x0c
 b56:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 b5a:	73 94       	inc	r7
 b5c:	2c 85       	ldd	r18, Y+12	; 0x0c
 b5e:	f5 cf       	rjmp	.-22     	; 0xb4a <vfprintf+0x2f0>
 b60:	73 14       	cp	r7, r3
 b62:	10 f4       	brcc	.+4      	; 0xb68 <vfprintf+0x30e>
 b64:	37 18       	sub	r3, r7
 b66:	01 c0       	rjmp	.+2      	; 0xb6a <vfprintf+0x310>
 b68:	31 2c       	mov	r3, r1
 b6a:	24 ff       	sbrs	r18, 4
 b6c:	12 c0       	rjmp	.+36     	; 0xb92 <vfprintf+0x338>
 b6e:	b7 01       	movw	r22, r14
 b70:	80 e3       	ldi	r24, 0x30	; 48
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	2c 87       	std	Y+12, r18	; 0x0c
 b76:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 b7a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b7c:	22 ff       	sbrs	r18, 2
 b7e:	17 c0       	rjmp	.+46     	; 0xbae <vfprintf+0x354>
 b80:	21 ff       	sbrs	r18, 1
 b82:	03 c0       	rjmp	.+6      	; 0xb8a <vfprintf+0x330>
 b84:	88 e5       	ldi	r24, 0x58	; 88
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <vfprintf+0x334>
 b8a:	88 e7       	ldi	r24, 0x78	; 120
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	b7 01       	movw	r22, r14
 b90:	0c c0       	rjmp	.+24     	; 0xbaa <vfprintf+0x350>
 b92:	82 2f       	mov	r24, r18
 b94:	86 78       	andi	r24, 0x86	; 134
 b96:	59 f0       	breq	.+22     	; 0xbae <vfprintf+0x354>
 b98:	21 fd       	sbrc	r18, 1
 b9a:	02 c0       	rjmp	.+4      	; 0xba0 <vfprintf+0x346>
 b9c:	80 e2       	ldi	r24, 0x20	; 32
 b9e:	01 c0       	rjmp	.+2      	; 0xba2 <vfprintf+0x348>
 ba0:	8b e2       	ldi	r24, 0x2B	; 43
 ba2:	27 fd       	sbrc	r18, 7
 ba4:	8d e2       	ldi	r24, 0x2D	; 45
 ba6:	b7 01       	movw	r22, r14
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 bae:	a5 14       	cp	r10, r5
 bb0:	38 f4       	brcc	.+14     	; 0xbc0 <vfprintf+0x366>
 bb2:	b7 01       	movw	r22, r14
 bb4:	80 e3       	ldi	r24, 0x30	; 48
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 bbc:	5a 94       	dec	r5
 bbe:	f7 cf       	rjmp	.-18     	; 0xbae <vfprintf+0x354>
 bc0:	aa 94       	dec	r10
 bc2:	f4 01       	movw	r30, r8
 bc4:	ea 0d       	add	r30, r10
 bc6:	f1 1d       	adc	r31, r1
 bc8:	80 81       	ld	r24, Z
 bca:	b7 01       	movw	r22, r14
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 bd2:	a1 10       	cpse	r10, r1
 bd4:	f5 cf       	rjmp	.-22     	; 0xbc0 <vfprintf+0x366>
 bd6:	33 20       	and	r3, r3
 bd8:	09 f4       	brne	.+2      	; 0xbdc <vfprintf+0x382>
 bda:	51 ce       	rjmp	.-862    	; 0x87e <vfprintf+0x24>
 bdc:	b7 01       	movw	r22, r14
 bde:	80 e2       	ldi	r24, 0x20	; 32
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 be6:	3a 94       	dec	r3
 be8:	f6 cf       	rjmp	.-20     	; 0xbd6 <vfprintf+0x37c>
 bea:	f7 01       	movw	r30, r14
 bec:	86 81       	ldd	r24, Z+6	; 0x06
 bee:	97 81       	ldd	r25, Z+7	; 0x07
 bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <vfprintf+0x39c>
 bf2:	8f ef       	ldi	r24, 0xFF	; 255
 bf4:	9f ef       	ldi	r25, 0xFF	; 255
 bf6:	2c 96       	adiw	r28, 0x0c	; 12
 bf8:	e2 e1       	ldi	r30, 0x12	; 18
 bfa:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__epilogue_restores__>

00000bfe <calloc>:
 bfe:	0f 93       	push	r16
 c00:	1f 93       	push	r17
 c02:	cf 93       	push	r28
 c04:	df 93       	push	r29
 c06:	86 9f       	mul	r24, r22
 c08:	80 01       	movw	r16, r0
 c0a:	87 9f       	mul	r24, r23
 c0c:	10 0d       	add	r17, r0
 c0e:	96 9f       	mul	r25, r22
 c10:	10 0d       	add	r17, r0
 c12:	11 24       	eor	r1, r1
 c14:	c8 01       	movw	r24, r16
 c16:	0e 94 a7 02 	call	0x54e	; 0x54e <malloc>
 c1a:	ec 01       	movw	r28, r24
 c1c:	00 97       	sbiw	r24, 0x00	; 0
 c1e:	29 f0       	breq	.+10     	; 0xc2a <calloc+0x2c>
 c20:	a8 01       	movw	r20, r16
 c22:	60 e0       	ldi	r22, 0x00	; 0
 c24:	70 e0       	ldi	r23, 0x00	; 0
 c26:	0e 94 26 06 	call	0xc4c	; 0xc4c <memset>
 c2a:	ce 01       	movw	r24, r28
 c2c:	df 91       	pop	r29
 c2e:	cf 91       	pop	r28
 c30:	1f 91       	pop	r17
 c32:	0f 91       	pop	r16
 c34:	08 95       	ret

00000c36 <strnlen_P>:
 c36:	fc 01       	movw	r30, r24
 c38:	05 90       	lpm	r0, Z+
 c3a:	61 50       	subi	r22, 0x01	; 1
 c3c:	70 40       	sbci	r23, 0x00	; 0
 c3e:	01 10       	cpse	r0, r1
 c40:	d8 f7       	brcc	.-10     	; 0xc38 <strnlen_P+0x2>
 c42:	80 95       	com	r24
 c44:	90 95       	com	r25
 c46:	8e 0f       	add	r24, r30
 c48:	9f 1f       	adc	r25, r31
 c4a:	08 95       	ret

00000c4c <memset>:
 c4c:	dc 01       	movw	r26, r24
 c4e:	01 c0       	rjmp	.+2      	; 0xc52 <memset+0x6>
 c50:	6d 93       	st	X+, r22
 c52:	41 50       	subi	r20, 0x01	; 1
 c54:	50 40       	sbci	r21, 0x00	; 0
 c56:	e0 f7       	brcc	.-8      	; 0xc50 <memset+0x4>
 c58:	08 95       	ret

00000c5a <strnlen>:
 c5a:	fc 01       	movw	r30, r24
 c5c:	61 50       	subi	r22, 0x01	; 1
 c5e:	70 40       	sbci	r23, 0x00	; 0
 c60:	01 90       	ld	r0, Z+
 c62:	01 10       	cpse	r0, r1
 c64:	d8 f7       	brcc	.-10     	; 0xc5c <strnlen+0x2>
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	8e 0f       	add	r24, r30
 c6c:	9f 1f       	adc	r25, r31
 c6e:	08 95       	ret

00000c70 <fputc>:
 c70:	0f 93       	push	r16
 c72:	1f 93       	push	r17
 c74:	cf 93       	push	r28
 c76:	df 93       	push	r29
 c78:	18 2f       	mov	r17, r24
 c7a:	09 2f       	mov	r16, r25
 c7c:	eb 01       	movw	r28, r22
 c7e:	8b 81       	ldd	r24, Y+3	; 0x03
 c80:	81 fd       	sbrc	r24, 1
 c82:	03 c0       	rjmp	.+6      	; 0xc8a <fputc+0x1a>
 c84:	8f ef       	ldi	r24, 0xFF	; 255
 c86:	9f ef       	ldi	r25, 0xFF	; 255
 c88:	20 c0       	rjmp	.+64     	; 0xcca <fputc+0x5a>
 c8a:	82 ff       	sbrs	r24, 2
 c8c:	10 c0       	rjmp	.+32     	; 0xcae <fputc+0x3e>
 c8e:	4e 81       	ldd	r20, Y+6	; 0x06
 c90:	5f 81       	ldd	r21, Y+7	; 0x07
 c92:	2c 81       	ldd	r18, Y+4	; 0x04
 c94:	3d 81       	ldd	r19, Y+5	; 0x05
 c96:	42 17       	cp	r20, r18
 c98:	53 07       	cpc	r21, r19
 c9a:	7c f4       	brge	.+30     	; 0xcba <fputc+0x4a>
 c9c:	e8 81       	ld	r30, Y
 c9e:	f9 81       	ldd	r31, Y+1	; 0x01
 ca0:	9f 01       	movw	r18, r30
 ca2:	2f 5f       	subi	r18, 0xFF	; 255
 ca4:	3f 4f       	sbci	r19, 0xFF	; 255
 ca6:	39 83       	std	Y+1, r19	; 0x01
 ca8:	28 83       	st	Y, r18
 caa:	10 83       	st	Z, r17
 cac:	06 c0       	rjmp	.+12     	; 0xcba <fputc+0x4a>
 cae:	e8 85       	ldd	r30, Y+8	; 0x08
 cb0:	f9 85       	ldd	r31, Y+9	; 0x09
 cb2:	81 2f       	mov	r24, r17
 cb4:	09 95       	icall
 cb6:	89 2b       	or	r24, r25
 cb8:	29 f7       	brne	.-54     	; 0xc84 <fputc+0x14>
 cba:	2e 81       	ldd	r18, Y+6	; 0x06
 cbc:	3f 81       	ldd	r19, Y+7	; 0x07
 cbe:	2f 5f       	subi	r18, 0xFF	; 255
 cc0:	3f 4f       	sbci	r19, 0xFF	; 255
 cc2:	3f 83       	std	Y+7, r19	; 0x07
 cc4:	2e 83       	std	Y+6, r18	; 0x06
 cc6:	81 2f       	mov	r24, r17
 cc8:	90 2f       	mov	r25, r16
 cca:	df 91       	pop	r29
 ccc:	cf 91       	pop	r28
 cce:	1f 91       	pop	r17
 cd0:	0f 91       	pop	r16
 cd2:	08 95       	ret

00000cd4 <__ultoa_invert>:
 cd4:	fa 01       	movw	r30, r20
 cd6:	aa 27       	eor	r26, r26
 cd8:	28 30       	cpi	r18, 0x08	; 8
 cda:	51 f1       	breq	.+84     	; 0xd30 <__ultoa_invert+0x5c>
 cdc:	20 31       	cpi	r18, 0x10	; 16
 cde:	81 f1       	breq	.+96     	; 0xd40 <__ultoa_invert+0x6c>
 ce0:	e8 94       	clt
 ce2:	6f 93       	push	r22
 ce4:	6e 7f       	andi	r22, 0xFE	; 254
 ce6:	6e 5f       	subi	r22, 0xFE	; 254
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255
 cea:	8f 4f       	sbci	r24, 0xFF	; 255
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	af 4f       	sbci	r26, 0xFF	; 255
 cf0:	b1 e0       	ldi	r27, 0x01	; 1
 cf2:	3e d0       	rcall	.+124    	; 0xd70 <__ultoa_invert+0x9c>
 cf4:	b4 e0       	ldi	r27, 0x04	; 4
 cf6:	3c d0       	rcall	.+120    	; 0xd70 <__ultoa_invert+0x9c>
 cf8:	67 0f       	add	r22, r23
 cfa:	78 1f       	adc	r23, r24
 cfc:	89 1f       	adc	r24, r25
 cfe:	9a 1f       	adc	r25, r26
 d00:	a1 1d       	adc	r26, r1
 d02:	68 0f       	add	r22, r24
 d04:	79 1f       	adc	r23, r25
 d06:	8a 1f       	adc	r24, r26
 d08:	91 1d       	adc	r25, r1
 d0a:	a1 1d       	adc	r26, r1
 d0c:	6a 0f       	add	r22, r26
 d0e:	71 1d       	adc	r23, r1
 d10:	81 1d       	adc	r24, r1
 d12:	91 1d       	adc	r25, r1
 d14:	a1 1d       	adc	r26, r1
 d16:	20 d0       	rcall	.+64     	; 0xd58 <__ultoa_invert+0x84>
 d18:	09 f4       	brne	.+2      	; 0xd1c <__ultoa_invert+0x48>
 d1a:	68 94       	set
 d1c:	3f 91       	pop	r19
 d1e:	2a e0       	ldi	r18, 0x0A	; 10
 d20:	26 9f       	mul	r18, r22
 d22:	11 24       	eor	r1, r1
 d24:	30 19       	sub	r19, r0
 d26:	30 5d       	subi	r19, 0xD0	; 208
 d28:	31 93       	st	Z+, r19
 d2a:	de f6       	brtc	.-74     	; 0xce2 <__ultoa_invert+0xe>
 d2c:	cf 01       	movw	r24, r30
 d2e:	08 95       	ret
 d30:	46 2f       	mov	r20, r22
 d32:	47 70       	andi	r20, 0x07	; 7
 d34:	40 5d       	subi	r20, 0xD0	; 208
 d36:	41 93       	st	Z+, r20
 d38:	b3 e0       	ldi	r27, 0x03	; 3
 d3a:	0f d0       	rcall	.+30     	; 0xd5a <__ultoa_invert+0x86>
 d3c:	c9 f7       	brne	.-14     	; 0xd30 <__ultoa_invert+0x5c>
 d3e:	f6 cf       	rjmp	.-20     	; 0xd2c <__ultoa_invert+0x58>
 d40:	46 2f       	mov	r20, r22
 d42:	4f 70       	andi	r20, 0x0F	; 15
 d44:	40 5d       	subi	r20, 0xD0	; 208
 d46:	4a 33       	cpi	r20, 0x3A	; 58
 d48:	18 f0       	brcs	.+6      	; 0xd50 <__ultoa_invert+0x7c>
 d4a:	49 5d       	subi	r20, 0xD9	; 217
 d4c:	31 fd       	sbrc	r19, 1
 d4e:	40 52       	subi	r20, 0x20	; 32
 d50:	41 93       	st	Z+, r20
 d52:	02 d0       	rcall	.+4      	; 0xd58 <__ultoa_invert+0x84>
 d54:	a9 f7       	brne	.-22     	; 0xd40 <__ultoa_invert+0x6c>
 d56:	ea cf       	rjmp	.-44     	; 0xd2c <__ultoa_invert+0x58>
 d58:	b4 e0       	ldi	r27, 0x04	; 4
 d5a:	a6 95       	lsr	r26
 d5c:	97 95       	ror	r25
 d5e:	87 95       	ror	r24
 d60:	77 95       	ror	r23
 d62:	67 95       	ror	r22
 d64:	ba 95       	dec	r27
 d66:	c9 f7       	brne	.-14     	; 0xd5a <__ultoa_invert+0x86>
 d68:	00 97       	sbiw	r24, 0x00	; 0
 d6a:	61 05       	cpc	r22, r1
 d6c:	71 05       	cpc	r23, r1
 d6e:	08 95       	ret
 d70:	9b 01       	movw	r18, r22
 d72:	ac 01       	movw	r20, r24
 d74:	0a 2e       	mov	r0, r26
 d76:	06 94       	lsr	r0
 d78:	57 95       	ror	r21
 d7a:	47 95       	ror	r20
 d7c:	37 95       	ror	r19
 d7e:	27 95       	ror	r18
 d80:	ba 95       	dec	r27
 d82:	c9 f7       	brne	.-14     	; 0xd76 <__ultoa_invert+0xa2>
 d84:	62 0f       	add	r22, r18
 d86:	73 1f       	adc	r23, r19
 d88:	84 1f       	adc	r24, r20
 d8a:	95 1f       	adc	r25, r21
 d8c:	a0 1d       	adc	r26, r0
 d8e:	08 95       	ret

00000d90 <__prologue_saves__>:
 d90:	2f 92       	push	r2
 d92:	3f 92       	push	r3
 d94:	4f 92       	push	r4
 d96:	5f 92       	push	r5
 d98:	6f 92       	push	r6
 d9a:	7f 92       	push	r7
 d9c:	8f 92       	push	r8
 d9e:	9f 92       	push	r9
 da0:	af 92       	push	r10
 da2:	bf 92       	push	r11
 da4:	cf 92       	push	r12
 da6:	df 92       	push	r13
 da8:	ef 92       	push	r14
 daa:	ff 92       	push	r15
 dac:	0f 93       	push	r16
 dae:	1f 93       	push	r17
 db0:	cf 93       	push	r28
 db2:	df 93       	push	r29
 db4:	cd b7       	in	r28, 0x3d	; 61
 db6:	de b7       	in	r29, 0x3e	; 62
 db8:	ca 1b       	sub	r28, r26
 dba:	db 0b       	sbc	r29, r27
 dbc:	0f b6       	in	r0, 0x3f	; 63
 dbe:	f8 94       	cli
 dc0:	de bf       	out	0x3e, r29	; 62
 dc2:	0f be       	out	0x3f, r0	; 63
 dc4:	cd bf       	out	0x3d, r28	; 61
 dc6:	09 94       	ijmp

00000dc8 <__epilogue_restores__>:
 dc8:	2a 88       	ldd	r2, Y+18	; 0x12
 dca:	39 88       	ldd	r3, Y+17	; 0x11
 dcc:	48 88       	ldd	r4, Y+16	; 0x10
 dce:	5f 84       	ldd	r5, Y+15	; 0x0f
 dd0:	6e 84       	ldd	r6, Y+14	; 0x0e
 dd2:	7d 84       	ldd	r7, Y+13	; 0x0d
 dd4:	8c 84       	ldd	r8, Y+12	; 0x0c
 dd6:	9b 84       	ldd	r9, Y+11	; 0x0b
 dd8:	aa 84       	ldd	r10, Y+10	; 0x0a
 dda:	b9 84       	ldd	r11, Y+9	; 0x09
 ddc:	c8 84       	ldd	r12, Y+8	; 0x08
 dde:	df 80       	ldd	r13, Y+7	; 0x07
 de0:	ee 80       	ldd	r14, Y+6	; 0x06
 de2:	fd 80       	ldd	r15, Y+5	; 0x05
 de4:	0c 81       	ldd	r16, Y+4	; 0x04
 de6:	1b 81       	ldd	r17, Y+3	; 0x03
 de8:	aa 81       	ldd	r26, Y+2	; 0x02
 dea:	b9 81       	ldd	r27, Y+1	; 0x01
 dec:	ce 0f       	add	r28, r30
 dee:	d1 1d       	adc	r29, r1
 df0:	0f b6       	in	r0, 0x3f	; 63
 df2:	f8 94       	cli
 df4:	de bf       	out	0x3e, r29	; 62
 df6:	0f be       	out	0x3f, r0	; 63
 df8:	cd bf       	out	0x3d, r28	; 61
 dfa:	ed 01       	movw	r28, r26
 dfc:	08 95       	ret

00000dfe <_exit>:
 dfe:	f8 94       	cli

00000e00 <__stop_program>:
 e00:	ff cf       	rjmp	.-2      	; 0xe00 <__stop_program>
