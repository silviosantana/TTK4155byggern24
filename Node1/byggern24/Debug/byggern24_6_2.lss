
byggern24_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018e  00800100  00000dee  00000e82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080028e  0080028e  00001010  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d0  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003485  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001121  00000000  00000000  000047c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001041  00000000  00000000  000058e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000840  00000000  00000000  00006924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ac  00000000  00000000  00007164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002297  00000000  00000000  00007a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  00009ca7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee ee       	ldi	r30, 0xEE	; 238
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 38       	cpi	r26, 0x8E	; 142
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ae e8       	ldi	r26, 0x8E	; 142
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 39       	cpi	r26, 0x9C	; 156
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 24 02 	call	0x448	; 0x448 <main>
  a6:	0c 94 f5 06 	jmp	0xdea	; 0xdea <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_read>:
  ae:	8d 5f       	subi	r24, 0xFD	; 253
  b0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <ADC_read+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <ADC_read+0xe>
  bc:	80 91 00 14 	lds	r24, 0x1400
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	08 95       	ret

000000c4 <can_controller_reset>:
  c4:	c4 98       	cbi	0x18, 4	; 24
  c6:	80 ec       	ldi	r24, 0xC0	; 192
  c8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
  cc:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <can_controller_reset+0xe>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <can_controller_reset+0x14>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <can_controller_read>:
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
  e0:	c4 98       	cbi	0x18, 4	; 24
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
  ee:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi_read>
  f2:	c4 9a       	sbi	0x18, 4	; 24
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <can_controller_request_to_send>:
  f8:	c4 98       	cbi	0x18, 4	; 24
  fa:	81 e8       	ldi	r24, 0x81	; 129
  fc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
 100:	88 b3       	in	r24, 0x18	; 24
 102:	8f 6e       	ori	r24, 0xEF	; 239
 104:	88 bb       	out	0x18, r24	; 24
 106:	08 95       	ret

00000108 <can_controller_bit_modify>:
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	18 2f       	mov	r17, r24
 110:	d6 2f       	mov	r29, r22
 112:	c4 2f       	mov	r28, r20
 114:	c4 98       	cbi	0x18, 4	; 24
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
 11c:	81 2f       	mov	r24, r17
 11e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
 122:	8d 2f       	mov	r24, r29
 124:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
 12e:	c4 9a       	sbi	0x18, 4	; 24
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	08 95       	ret

00000138 <can_controller_set_mode>:
 138:	48 2f       	mov	r20, r24
 13a:	60 ee       	ldi	r22, 0xE0	; 224
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
 142:	8e e0       	ldi	r24, 0x0E	; 14
 144:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 148:	80 7e       	andi	r24, 0xE0	; 224
 14a:	08 95       	ret

0000014c <can_controller_write>:
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	d8 2f       	mov	r29, r24
 152:	c6 2f       	mov	r28, r22
 154:	c4 98       	cbi	0x18, 4	; 24
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
 15c:	8d 2f       	mov	r24, r29
 15e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
 162:	8c 2f       	mov	r24, r28
 164:	0e 94 79 02 	call	0x4f2	; 0x4f2 <spi_send>
 168:	c4 9a       	sbi	0x18, 4	; 24
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <can_controller_init>:
 170:	0e 94 76 02 	call	0x4ec	; 0x4ec <spi_init>
 174:	0e 94 62 00 	call	0xc4	; 0xc4 <can_controller_reset>
 178:	8e e0       	ldi	r24, 0x0E	; 14
 17a:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 17e:	98 2f       	mov	r25, r24
 180:	90 7e       	andi	r25, 0xE0	; 224
 182:	90 38       	cpi	r25, 0x80	; 128
 184:	71 f0       	breq	.+28     	; 0x1a2 <can_controller_init+0x32>
 186:	1f 92       	push	r1
 188:	8f 93       	push	r24
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret
 1a2:	40 e6       	ldi	r20, 0x60	; 96
 1a4:	60 e6       	ldi	r22, 0x60	; 96
 1a6:	80 e6       	ldi	r24, 0x60	; 96
 1a8:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
 1ac:	40 e6       	ldi	r20, 0x60	; 96
 1ae:	60 e6       	ldi	r22, 0x60	; 96
 1b0:	80 e7       	ldi	r24, 0x70	; 112
 1b2:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	82 e3       	ldi	r24, 0x32	; 50
 1ba:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret

000001c2 <can_init>:
}

void can_init ()
{
	//set loopback mode
	uint8_t mode = can_controller_set_mode(MODE_NORMAL);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 9c 00 	call	0x138	; 0x138 <can_controller_set_mode>
	if (mode != MODE_NORMAL)
 1c8:	88 23       	and	r24, r24
 1ca:	41 f0       	breq	.+16     	; 0x1dc <can_init+0x1a>
	{
		printf("Could not set normal mode! I am sorry!\n\r");
 1cc:	83 e5       	ldi	r24, 0x53	; 83
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	9f 93       	push	r25
 1d2:	8f 93       	push	r24
 1d4:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
	}
		
	//enable RX interrupts
	can_controller_bit_modify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
 1dc:	43 e0       	ldi	r20, 0x03	; 3
 1de:	63 e0       	ldi	r22, 0x03	; 3
 1e0:	8b e2       	ldi	r24, 0x2B	; 43
 1e2:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	//can_controller_write(MCP_CANINTE, MCP_RX_INT);
	
	// SET UP INTERRUPTION TO RECIEVE MESSAGE
	DDRD &= ~(1<<PD3);
 1e6:	8b 98       	cbi	0x11, 3	; 17
	cli();
 1e8:	f8 94       	cli
	GICR |= (1 << INT1);						//enable external interrupt INT1
 1ea:	8b b7       	in	r24, 0x3b	; 59
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11);
 1f0:	85 b7       	in	r24, 0x35	; 53
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);	//interrupt on the falling edge
 1f6:	85 b7       	in	r24, 0x35	; 53
 1f8:	8b 7f       	andi	r24, 0xFB	; 251
 1fa:	85 bf       	out	0x35, r24	; 53
	sei();									//enable Global Interrupt
 1fc:	78 94       	sei
 1fe:	08 95       	ret

00000200 <can_send_msg>:
}

uint8_t can_send_msg(can_message* msg)
{
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24


	//writhe higher id
	can_controller_write(MCP_TXB0SIDH, msg->id);
 20a:	68 81       	ld	r22, Y
 20c:	81 e3       	ldi	r24, 0x31	; 49
 20e:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
    
	// Define data length of message
	uint8_t data_length = msg->length;
 212:	09 81       	ldd	r16, Y+1	; 0x01
	can_controller_write(MCP_TXB0DLC, msg->length);
 214:	60 2f       	mov	r22, r16
 216:	85 e3       	ldi	r24, 0x35	; 53
 218:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
 21c:	22 96       	adiw	r28, 0x02	; 2
	for (uint8_t byte = 0; byte < data_length; byte++) {
 21e:	00 23       	and	r16, r16
 220:	49 f0       	breq	.+18     	; 0x234 <can_send_msg+0x34>
 222:	0a 5c       	subi	r16, 0xCA	; 202
 224:	16 e3       	ldi	r17, 0x36	; 54
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
 226:	69 91       	ld	r22, Y+
 228:	81 2f       	mov	r24, r17
 22a:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
 22e:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = msg->length;
	can_controller_write(MCP_TXB0DLC, msg->length);
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
 230:	10 13       	cpse	r17, r16
 232:	f9 cf       	rjmp	.-14     	; 0x226 <can_send_msg+0x26>
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
	}

	// Request to send message, send if successful
	can_controller_request_to_send();
 234:	0e 94 7c 00 	call	0xf8	; 0xf8 <can_controller_request_to_send>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 ef       	ldi	r25, 0xF0	; 240
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <can_send_msg+0x3c>
// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE)); 
// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF)); 
// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	eb 01       	movw	r28, r22
	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
    uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
 254:	18 2f       	mov	r17, r24
 256:	12 95       	swap	r17
 258:	10 7f       	andi	r17, 0xF0	; 240
 25a:	81 e6       	ldi	r24, 0x61	; 97
 25c:	81 0f       	add	r24, r17
 25e:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
 262:	85 e6       	ldi	r24, 0x65	; 101
 264:	81 0f       	add	r24, r17
 266:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
 26a:	98 2f       	mov	r25, r24
 26c:	9f 70       	andi	r25, 0x0F	; 15
 26e:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)	
	for (uint8_t byte = 0; byte < data_length; byte++) {
 270:	88 23       	and	r24, r24
 272:	59 f0       	breq	.+22     	; 0x28a <can_recieve_msg+0x40>
 274:	1a 59       	subi	r17, 0x9A	; 154
 276:	22 96       	adiw	r28, 0x02	; 2
 278:	08 2f       	mov	r16, r24
 27a:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
 27c:	81 2f       	mov	r24, r17
 27e:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 282:	89 93       	st	Y+, r24
 284:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)	
	for (uint8_t byte = 0; byte < data_length; byte++) {
 286:	10 13       	cpse	r17, r16
 288:	f9 cf       	rjmp	.-14     	; 0x27c <can_recieve_msg+0x32>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
    }
	
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <__vector_2>:
#include "util.h"
#include "can_controller_driver.h"


ISR(INT1_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
	cli();
 2c0:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 2c2:	8a e0       	ldi	r24, 0x0A	; 10
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 9d 02 	call	0x53a	; 0x53a <malloc>
 2ca:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	printf("message INTERRUPTION recieved\n\r");
 2cc:	8c e7       	ldi	r24, 0x7C	; 124
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	9f 93       	push	r25
 2d2:	8f 93       	push	r24
 2d4:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
	uint8_t canInt = can_controller_read(MCP_CANINTF);
 2d8:	8c e2       	ldi	r24, 0x2C	; 44
 2da:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	80 ff       	sbrs	r24, 0
 2e4:	2b c0       	rjmp	.+86     	; 0x33c <__vector_2+0xa8>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	8c e2       	ldi	r24, 0x2C	; 44
 2ec:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
		can_recieve_msg(0, msg);
 2f0:	be 01       	movw	r22, r28
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 25 01 	call	0x24a	; 0x24a <can_recieve_msg>
		
		printf("DATA ON RX0\n\r");
 2f8:	8c e9       	ldi	r24, 0x9C	; 156
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	9f 93       	push	r25
 2fe:	8f 93       	push	r24
 300:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	88 23       	and	r24, r24
 30c:	09 f4       	brne	.+2      	; 0x310 <__vector_2+0x7c>
 30e:	4a c0       	rjmp	.+148    	; 0x3a4 <__vector_2+0x110>
 310:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
 312:	0a ea       	ldi	r16, 0xAA	; 170
 314:	11 e0       	ldi	r17, 0x01	; 1
 316:	fe 01       	movw	r30, r28
 318:	ef 0d       	add	r30, r15
 31a:	f1 1d       	adc	r31, r1
 31c:	82 81       	ldd	r24, Z+2	; 0x02
 31e:	1f 92       	push	r1
 320:	8f 93       	push	r24
 322:	1f 93       	push	r17
 324:	0f 93       	push	r16
 326:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
		can_recieve_msg(0, msg);
		
		printf("DATA ON RX0\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 32a:	f3 94       	inc	r15
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	f8 16       	cp	r15, r24
 338:	70 f3       	brcs	.-36     	; 0x316 <__vector_2+0x82>
 33a:	34 c0       	rjmp	.+104    	; 0x3a4 <__vector_2+0x110>
			printf("%d \n\r", msg->data[byte]);
		}
		
	}else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
 33c:	81 ff       	sbrs	r24, 1
 33e:	2a c0       	rjmp	.+84     	; 0x394 <__vector_2+0x100>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	8c e2       	ldi	r24, 0x2C	; 44
 346:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
		can_recieve_msg(1, msg);
 34a:	be 01       	movw	r22, r28
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 25 01 	call	0x24a	; 0x24a <can_recieve_msg>
		
		printf("DATA ON RX1\n\r");
 352:	80 eb       	ldi	r24, 0xB0	; 176
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	9f 93       	push	r25
 358:	8f 93       	push	r24
 35a:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	89 81       	ldd	r24, Y+1	; 0x01
 364:	88 23       	and	r24, r24
 366:	f1 f0       	breq	.+60     	; 0x3a4 <__vector_2+0x110>
 368:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
 36a:	0a ea       	ldi	r16, 0xAA	; 170
 36c:	11 e0       	ldi	r17, 0x01	; 1
 36e:	fe 01       	movw	r30, r28
 370:	ef 0d       	add	r30, r15
 372:	f1 1d       	adc	r31, r1
 374:	82 81       	ldd	r24, Z+2	; 0x02
 376:	1f 92       	push	r1
 378:	8f 93       	push	r24
 37a:	1f 93       	push	r17
 37c:	0f 93       	push	r16
 37e:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
		can_recieve_msg(1, msg);
		
		printf("DATA ON RX1\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
 382:	f3 94       	inc	r15
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	f8 16       	cp	r15, r24
 390:	70 f3       	brcs	.-36     	; 0x36e <__vector_2+0xda>
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <__vector_2+0x110>
			printf("%d \n\r", msg->data[byte]);
		}
	}else
	{
		printf("No message available on the CAN REX BUFFERs\n\r");
 394:	8e eb       	ldi	r24, 0xBE	; 190
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	9f 93       	push	r25
 39a:	8f 93       	push	r24
 39c:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
	}
	sei();
 3a4:	78 94       	sei
	
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	ff 90       	pop	r15
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <can_driver_test>:
    }
	
}

void can_driver_test()
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
 3d6:	8a e0       	ldi	r24, 0x0A	; 10
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 9d 02 	call	0x53a	; 0x53a <malloc>
 3de:	ec 01       	movw	r28, r24
	printf("enter can driver test \n\r");
 3e0:	8c ee       	ldi	r24, 0xEC	; 236
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	9f 93       	push	r25
 3e6:	8f 93       	push	r24
 3e8:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
	msg->id = 1;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	88 83       	st	Y, r24
	msg->data[0] = 25;
 3f0:	89 e1       	ldi	r24, 0x19	; 25
 3f2:	8a 83       	std	Y+2, r24	; 0x02
	msg->data[1] = 38;
 3f4:	86 e2       	ldi	r24, 0x26	; 38
 3f6:	8b 83       	std	Y+3, r24	; 0x03
	msg->data[2] = 95;
 3f8:	8f e5       	ldi	r24, 0x5F	; 95
 3fa:	8c 83       	std	Y+4, r24	; 0x04
	msg->length = 3;
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	89 83       	std	Y+1, r24	; 0x01
	can_send_msg(msg);
 400:	ce 01       	movw	r24, r28
 402:	0e 94 00 01 	call	0x200	; 0x200 <can_send_msg>
	
	msg->id = 5;
 406:	85 e0       	ldi	r24, 0x05	; 5
 408:	88 83       	st	Y, r24
	msg->data[0] = 72;
 40a:	88 e4       	ldi	r24, 0x48	; 72
 40c:	8a 83       	std	Y+2, r24	; 0x02
	msg->data[1] = 58;
 40e:	8a e3       	ldi	r24, 0x3A	; 58
 410:	8b 83       	std	Y+3, r24	; 0x03

	msg->length = 2;
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	89 83       	std	Y+1, r24	; 0x01
	can_send_msg(msg);
 416:	ce 01       	movw	r24, r28
 418:	0e 94 00 01 	call	0x200	; 0x200 <can_send_msg>
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <joystick_init>:
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
 42e:	90 93 91 02 	sts	0x0291, r25
 432:	80 93 90 02 	sts	0x0290, r24
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
 43e:	90 93 8f 02 	sts	0x028F, r25
 442:	80 93 8e 02 	sts	0x028E, r24
 446:	08 95       	ret

00000448 <main>:
}

int main(void)
{
	// Initializations
	USART_Init(MYUBRR);
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 90 02 	call	0x520	; 0x520 <USART_Init>
	SRAM_init();
 450:	0e 94 81 02 	call	0x502	; 0x502 <SRAM_init>
	joystick_init();
 454:	0e 94 13 02 	call	0x426	; 0x426 <joystick_init>
	oled_init();
 458:	0e 94 3f 02 	call	0x47e	; 0x47e <oled_init>
	spi_init();
 45c:	0e 94 76 02 	call	0x4ec	; 0x4ec <spi_init>
	can_controller_init();
 460:	0e 94 b8 00 	call	0x170	; 0x170 <can_controller_init>
	can_init();
 464:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <can_init>
	
	printf("START============================\n\r");
 468:	8a e6       	ldi	r24, 0x6A	; 106
 46a:	92 e0       	ldi	r25, 0x02	; 2
 46c:	9f 93       	push	r25
 46e:	8f 93       	push	r24
 470:	0e 94 0f 04 	call	0x81e	; 0x81e <printf>
	
	can_driver_test();
 474:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <can_driver_test>
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	ff cf       	rjmp	.-2      	; 0x47c <main+0x34>

0000047e <oled_init>:
 47e:	e0 e0       	ldi	r30, 0x00	; 0
 480:	f0 e1       	ldi	r31, 0x10	; 16
 482:	8e ea       	ldi	r24, 0xAE	; 174
 484:	80 83       	st	Z, r24
 486:	81 ea       	ldi	r24, 0xA1	; 161
 488:	80 83       	st	Z, r24
 48a:	8a ed       	ldi	r24, 0xDA	; 218
 48c:	80 83       	st	Z, r24
 48e:	82 e1       	ldi	r24, 0x12	; 18
 490:	80 83       	st	Z, r24
 492:	88 ec       	ldi	r24, 0xC8	; 200
 494:	80 83       	st	Z, r24
 496:	88 ea       	ldi	r24, 0xA8	; 168
 498:	80 83       	st	Z, r24
 49a:	8f e3       	ldi	r24, 0x3F	; 63
 49c:	80 83       	st	Z, r24
 49e:	85 ed       	ldi	r24, 0xD5	; 213
 4a0:	80 83       	st	Z, r24
 4a2:	80 e8       	ldi	r24, 0x80	; 128
 4a4:	80 83       	st	Z, r24
 4a6:	81 e8       	ldi	r24, 0x81	; 129
 4a8:	80 83       	st	Z, r24
 4aa:	80 e5       	ldi	r24, 0x50	; 80
 4ac:	80 83       	st	Z, r24
 4ae:	89 ed       	ldi	r24, 0xD9	; 217
 4b0:	80 83       	st	Z, r24
 4b2:	81 e2       	ldi	r24, 0x21	; 33
 4b4:	80 83       	st	Z, r24
 4b6:	80 e2       	ldi	r24, 0x20	; 32
 4b8:	80 83       	st	Z, r24
 4ba:	10 82       	st	Z, r1
 4bc:	8b ed       	ldi	r24, 0xDB	; 219
 4be:	80 83       	st	Z, r24
 4c0:	80 e3       	ldi	r24, 0x30	; 48
 4c2:	80 83       	st	Z, r24
 4c4:	8d ea       	ldi	r24, 0xAD	; 173
 4c6:	80 83       	st	Z, r24
 4c8:	10 82       	st	Z, r1
 4ca:	84 ea       	ldi	r24, 0xA4	; 164
 4cc:	80 83       	st	Z, r24
 4ce:	86 ea       	ldi	r24, 0xA6	; 166
 4d0:	80 83       	st	Z, r24
 4d2:	8f ea       	ldi	r24, 0xAF	; 175
 4d4:	80 83       	st	Z, r24
 4d6:	08 95       	ret

000004d8 <SPI_MasterInit>:
 4d8:	80 eb       	ldi	r24, 0xB0	; 176
 4da:	87 bb       	out	0x17, r24	; 23
 4dc:	be 98       	cbi	0x17, 6	; 23
 4de:	81 e5       	ldi	r24, 0x51	; 81
 4e0:	8d b9       	out	0x0d, r24	; 13
 4e2:	08 95       	ret

000004e4 <SPI_MasterTransmit>:
 4e4:	8f b9       	out	0x0f, r24	; 15
 4e6:	77 9b       	sbis	0x0e, 7	; 14
 4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <SPI_MasterTransmit+0x2>
 4ea:	08 95       	ret

000004ec <spi_init>:
 4ec:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <SPI_MasterInit>
 4f0:	08 95       	ret

000004f2 <spi_send>:
 4f2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_MasterTransmit>
 4f6:	08 95       	ret

000004f8 <spi_read>:
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_MasterTransmit>
 4fe:	8f b1       	in	r24, 0x0f	; 15
 500:	08 95       	ret

00000502 <SRAM_init>:
 502:	85 b7       	in	r24, 0x35	; 53
 504:	80 68       	ori	r24, 0x80	; 128
 506:	85 bf       	out	0x35, r24	; 53
 508:	80 b7       	in	r24, 0x30	; 48
 50a:	80 62       	ori	r24, 0x20	; 32
 50c:	80 bf       	out	0x30, r24	; 48
 50e:	08 95       	ret

00000510 <USART_Transmit>:
 510:	5d 9b       	sbis	0x0b, 5	; 11
 512:	fe cf       	rjmp	.-4      	; 0x510 <USART_Transmit>
 514:	8c b9       	out	0x0c, r24	; 12
 516:	08 95       	ret

00000518 <USART_Receive>:
 518:	5f 9b       	sbis	0x0b, 7	; 11
 51a:	fe cf       	rjmp	.-4      	; 0x518 <USART_Receive>
 51c:	8c b1       	in	r24, 0x0c	; 12
 51e:	08 95       	ret

00000520 <USART_Init>:
 520:	90 bd       	out	0x20, r25	; 32
 522:	89 b9       	out	0x09, r24	; 9
 524:	88 e1       	ldi	r24, 0x18	; 24
 526:	8a b9       	out	0x0a, r24	; 10
 528:	8e e8       	ldi	r24, 0x8E	; 142
 52a:	80 bd       	out	0x20, r24	; 32
 52c:	6c e8       	ldi	r22, 0x8C	; 140
 52e:	72 e0       	ldi	r23, 0x02	; 2
 530:	88 e8       	ldi	r24, 0x88	; 136
 532:	92 e0       	ldi	r25, 0x02	; 2
 534:	0e 94 c4 03 	call	0x788	; 0x788 <fdevopen>
 538:	08 95       	ret

0000053a <malloc>:
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	91 05       	cpc	r25, r1
 542:	10 f4       	brcc	.+4      	; 0x548 <malloc+0xe>
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	e0 91 94 02 	lds	r30, 0x0294
 54c:	f0 91 95 02 	lds	r31, 0x0295
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	a0 e0       	ldi	r26, 0x00	; 0
 556:	b0 e0       	ldi	r27, 0x00	; 0
 558:	30 97       	sbiw	r30, 0x00	; 0
 55a:	39 f1       	breq	.+78     	; 0x5aa <malloc+0x70>
 55c:	40 81       	ld	r20, Z
 55e:	51 81       	ldd	r21, Z+1	; 0x01
 560:	48 17       	cp	r20, r24
 562:	59 07       	cpc	r21, r25
 564:	b8 f0       	brcs	.+46     	; 0x594 <malloc+0x5a>
 566:	48 17       	cp	r20, r24
 568:	59 07       	cpc	r21, r25
 56a:	71 f4       	brne	.+28     	; 0x588 <malloc+0x4e>
 56c:	82 81       	ldd	r24, Z+2	; 0x02
 56e:	93 81       	ldd	r25, Z+3	; 0x03
 570:	10 97       	sbiw	r26, 0x00	; 0
 572:	29 f0       	breq	.+10     	; 0x57e <malloc+0x44>
 574:	13 96       	adiw	r26, 0x03	; 3
 576:	9c 93       	st	X, r25
 578:	8e 93       	st	-X, r24
 57a:	12 97       	sbiw	r26, 0x02	; 2
 57c:	2c c0       	rjmp	.+88     	; 0x5d6 <malloc+0x9c>
 57e:	90 93 95 02 	sts	0x0295, r25
 582:	80 93 94 02 	sts	0x0294, r24
 586:	27 c0       	rjmp	.+78     	; 0x5d6 <malloc+0x9c>
 588:	21 15       	cp	r18, r1
 58a:	31 05       	cpc	r19, r1
 58c:	31 f0       	breq	.+12     	; 0x59a <malloc+0x60>
 58e:	42 17       	cp	r20, r18
 590:	53 07       	cpc	r21, r19
 592:	18 f0       	brcs	.+6      	; 0x59a <malloc+0x60>
 594:	a9 01       	movw	r20, r18
 596:	db 01       	movw	r26, r22
 598:	01 c0       	rjmp	.+2      	; 0x59c <malloc+0x62>
 59a:	ef 01       	movw	r28, r30
 59c:	9a 01       	movw	r18, r20
 59e:	bd 01       	movw	r22, r26
 5a0:	df 01       	movw	r26, r30
 5a2:	02 80       	ldd	r0, Z+2	; 0x02
 5a4:	f3 81       	ldd	r31, Z+3	; 0x03
 5a6:	e0 2d       	mov	r30, r0
 5a8:	d7 cf       	rjmp	.-82     	; 0x558 <malloc+0x1e>
 5aa:	21 15       	cp	r18, r1
 5ac:	31 05       	cpc	r19, r1
 5ae:	f9 f0       	breq	.+62     	; 0x5ee <malloc+0xb4>
 5b0:	28 1b       	sub	r18, r24
 5b2:	39 0b       	sbc	r19, r25
 5b4:	24 30       	cpi	r18, 0x04	; 4
 5b6:	31 05       	cpc	r19, r1
 5b8:	80 f4       	brcc	.+32     	; 0x5da <malloc+0xa0>
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	9b 81       	ldd	r25, Y+3	; 0x03
 5be:	61 15       	cp	r22, r1
 5c0:	71 05       	cpc	r23, r1
 5c2:	21 f0       	breq	.+8      	; 0x5cc <malloc+0x92>
 5c4:	fb 01       	movw	r30, r22
 5c6:	93 83       	std	Z+3, r25	; 0x03
 5c8:	82 83       	std	Z+2, r24	; 0x02
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <malloc+0x9a>
 5cc:	90 93 95 02 	sts	0x0295, r25
 5d0:	80 93 94 02 	sts	0x0294, r24
 5d4:	fe 01       	movw	r30, r28
 5d6:	32 96       	adiw	r30, 0x02	; 2
 5d8:	44 c0       	rjmp	.+136    	; 0x662 <malloc+0x128>
 5da:	fe 01       	movw	r30, r28
 5dc:	e2 0f       	add	r30, r18
 5de:	f3 1f       	adc	r31, r19
 5e0:	81 93       	st	Z+, r24
 5e2:	91 93       	st	Z+, r25
 5e4:	22 50       	subi	r18, 0x02	; 2
 5e6:	31 09       	sbc	r19, r1
 5e8:	39 83       	std	Y+1, r19	; 0x01
 5ea:	28 83       	st	Y, r18
 5ec:	3a c0       	rjmp	.+116    	; 0x662 <malloc+0x128>
 5ee:	20 91 92 02 	lds	r18, 0x0292
 5f2:	30 91 93 02 	lds	r19, 0x0293
 5f6:	23 2b       	or	r18, r19
 5f8:	41 f4       	brne	.+16     	; 0x60a <malloc+0xd0>
 5fa:	20 91 02 01 	lds	r18, 0x0102
 5fe:	30 91 03 01 	lds	r19, 0x0103
 602:	30 93 93 02 	sts	0x0293, r19
 606:	20 93 92 02 	sts	0x0292, r18
 60a:	20 91 00 01 	lds	r18, 0x0100
 60e:	30 91 01 01 	lds	r19, 0x0101
 612:	21 15       	cp	r18, r1
 614:	31 05       	cpc	r19, r1
 616:	41 f4       	brne	.+16     	; 0x628 <malloc+0xee>
 618:	2d b7       	in	r18, 0x3d	; 61
 61a:	3e b7       	in	r19, 0x3e	; 62
 61c:	40 91 04 01 	lds	r20, 0x0104
 620:	50 91 05 01 	lds	r21, 0x0105
 624:	24 1b       	sub	r18, r20
 626:	35 0b       	sbc	r19, r21
 628:	e0 91 92 02 	lds	r30, 0x0292
 62c:	f0 91 93 02 	lds	r31, 0x0293
 630:	e2 17       	cp	r30, r18
 632:	f3 07       	cpc	r31, r19
 634:	a0 f4       	brcc	.+40     	; 0x65e <malloc+0x124>
 636:	2e 1b       	sub	r18, r30
 638:	3f 0b       	sbc	r19, r31
 63a:	28 17       	cp	r18, r24
 63c:	39 07       	cpc	r19, r25
 63e:	78 f0       	brcs	.+30     	; 0x65e <malloc+0x124>
 640:	ac 01       	movw	r20, r24
 642:	4e 5f       	subi	r20, 0xFE	; 254
 644:	5f 4f       	sbci	r21, 0xFF	; 255
 646:	24 17       	cp	r18, r20
 648:	35 07       	cpc	r19, r21
 64a:	48 f0       	brcs	.+18     	; 0x65e <malloc+0x124>
 64c:	4e 0f       	add	r20, r30
 64e:	5f 1f       	adc	r21, r31
 650:	50 93 93 02 	sts	0x0293, r21
 654:	40 93 92 02 	sts	0x0292, r20
 658:	81 93       	st	Z+, r24
 65a:	91 93       	st	Z+, r25
 65c:	02 c0       	rjmp	.+4      	; 0x662 <malloc+0x128>
 65e:	e0 e0       	ldi	r30, 0x00	; 0
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	cf 01       	movw	r24, r30
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <free>:
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	00 97       	sbiw	r24, 0x00	; 0
 670:	09 f4       	brne	.+2      	; 0x674 <free+0xa>
 672:	87 c0       	rjmp	.+270    	; 0x782 <free+0x118>
 674:	fc 01       	movw	r30, r24
 676:	32 97       	sbiw	r30, 0x02	; 2
 678:	13 82       	std	Z+3, r1	; 0x03
 67a:	12 82       	std	Z+2, r1	; 0x02
 67c:	c0 91 94 02 	lds	r28, 0x0294
 680:	d0 91 95 02 	lds	r29, 0x0295
 684:	20 97       	sbiw	r28, 0x00	; 0
 686:	81 f4       	brne	.+32     	; 0x6a8 <free+0x3e>
 688:	20 81       	ld	r18, Z
 68a:	31 81       	ldd	r19, Z+1	; 0x01
 68c:	28 0f       	add	r18, r24
 68e:	39 1f       	adc	r19, r25
 690:	80 91 92 02 	lds	r24, 0x0292
 694:	90 91 93 02 	lds	r25, 0x0293
 698:	82 17       	cp	r24, r18
 69a:	93 07       	cpc	r25, r19
 69c:	79 f5       	brne	.+94     	; 0x6fc <free+0x92>
 69e:	f0 93 93 02 	sts	0x0293, r31
 6a2:	e0 93 92 02 	sts	0x0292, r30
 6a6:	6d c0       	rjmp	.+218    	; 0x782 <free+0x118>
 6a8:	de 01       	movw	r26, r28
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	ae 17       	cp	r26, r30
 6b0:	bf 07       	cpc	r27, r31
 6b2:	50 f4       	brcc	.+20     	; 0x6c8 <free+0x5e>
 6b4:	12 96       	adiw	r26, 0x02	; 2
 6b6:	4d 91       	ld	r20, X+
 6b8:	5c 91       	ld	r21, X
 6ba:	13 97       	sbiw	r26, 0x03	; 3
 6bc:	9d 01       	movw	r18, r26
 6be:	41 15       	cp	r20, r1
 6c0:	51 05       	cpc	r21, r1
 6c2:	09 f1       	breq	.+66     	; 0x706 <free+0x9c>
 6c4:	da 01       	movw	r26, r20
 6c6:	f3 cf       	rjmp	.-26     	; 0x6ae <free+0x44>
 6c8:	b3 83       	std	Z+3, r27	; 0x03
 6ca:	a2 83       	std	Z+2, r26	; 0x02
 6cc:	40 81       	ld	r20, Z
 6ce:	51 81       	ldd	r21, Z+1	; 0x01
 6d0:	84 0f       	add	r24, r20
 6d2:	95 1f       	adc	r25, r21
 6d4:	8a 17       	cp	r24, r26
 6d6:	9b 07       	cpc	r25, r27
 6d8:	71 f4       	brne	.+28     	; 0x6f6 <free+0x8c>
 6da:	8d 91       	ld	r24, X+
 6dc:	9c 91       	ld	r25, X
 6de:	11 97       	sbiw	r26, 0x01	; 1
 6e0:	84 0f       	add	r24, r20
 6e2:	95 1f       	adc	r25, r21
 6e4:	02 96       	adiw	r24, 0x02	; 2
 6e6:	91 83       	std	Z+1, r25	; 0x01
 6e8:	80 83       	st	Z, r24
 6ea:	12 96       	adiw	r26, 0x02	; 2
 6ec:	8d 91       	ld	r24, X+
 6ee:	9c 91       	ld	r25, X
 6f0:	13 97       	sbiw	r26, 0x03	; 3
 6f2:	93 83       	std	Z+3, r25	; 0x03
 6f4:	82 83       	std	Z+2, r24	; 0x02
 6f6:	21 15       	cp	r18, r1
 6f8:	31 05       	cpc	r19, r1
 6fa:	29 f4       	brne	.+10     	; 0x706 <free+0x9c>
 6fc:	f0 93 95 02 	sts	0x0295, r31
 700:	e0 93 94 02 	sts	0x0294, r30
 704:	3e c0       	rjmp	.+124    	; 0x782 <free+0x118>
 706:	d9 01       	movw	r26, r18
 708:	13 96       	adiw	r26, 0x03	; 3
 70a:	fc 93       	st	X, r31
 70c:	ee 93       	st	-X, r30
 70e:	12 97       	sbiw	r26, 0x02	; 2
 710:	4d 91       	ld	r20, X+
 712:	5d 91       	ld	r21, X+
 714:	a4 0f       	add	r26, r20
 716:	b5 1f       	adc	r27, r21
 718:	ea 17       	cp	r30, r26
 71a:	fb 07       	cpc	r31, r27
 71c:	79 f4       	brne	.+30     	; 0x73c <free+0xd2>
 71e:	80 81       	ld	r24, Z
 720:	91 81       	ldd	r25, Z+1	; 0x01
 722:	84 0f       	add	r24, r20
 724:	95 1f       	adc	r25, r21
 726:	02 96       	adiw	r24, 0x02	; 2
 728:	d9 01       	movw	r26, r18
 72a:	11 96       	adiw	r26, 0x01	; 1
 72c:	9c 93       	st	X, r25
 72e:	8e 93       	st	-X, r24
 730:	82 81       	ldd	r24, Z+2	; 0x02
 732:	93 81       	ldd	r25, Z+3	; 0x03
 734:	13 96       	adiw	r26, 0x03	; 3
 736:	9c 93       	st	X, r25
 738:	8e 93       	st	-X, r24
 73a:	12 97       	sbiw	r26, 0x02	; 2
 73c:	e0 e0       	ldi	r30, 0x00	; 0
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	9b 81       	ldd	r25, Y+3	; 0x03
 744:	00 97       	sbiw	r24, 0x00	; 0
 746:	19 f0       	breq	.+6      	; 0x74e <free+0xe4>
 748:	fe 01       	movw	r30, r28
 74a:	ec 01       	movw	r28, r24
 74c:	f9 cf       	rjmp	.-14     	; 0x740 <free+0xd6>
 74e:	ce 01       	movw	r24, r28
 750:	02 96       	adiw	r24, 0x02	; 2
 752:	28 81       	ld	r18, Y
 754:	39 81       	ldd	r19, Y+1	; 0x01
 756:	82 0f       	add	r24, r18
 758:	93 1f       	adc	r25, r19
 75a:	20 91 92 02 	lds	r18, 0x0292
 75e:	30 91 93 02 	lds	r19, 0x0293
 762:	28 17       	cp	r18, r24
 764:	39 07       	cpc	r19, r25
 766:	69 f4       	brne	.+26     	; 0x782 <free+0x118>
 768:	30 97       	sbiw	r30, 0x00	; 0
 76a:	29 f4       	brne	.+10     	; 0x776 <free+0x10c>
 76c:	10 92 95 02 	sts	0x0295, r1
 770:	10 92 94 02 	sts	0x0294, r1
 774:	02 c0       	rjmp	.+4      	; 0x77a <free+0x110>
 776:	13 82       	std	Z+3, r1	; 0x03
 778:	12 82       	std	Z+2, r1	; 0x02
 77a:	d0 93 93 02 	sts	0x0293, r29
 77e:	c0 93 92 02 	sts	0x0292, r28
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	08 95       	ret

00000788 <fdevopen>:
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	ec 01       	movw	r28, r24
 792:	8b 01       	movw	r16, r22
 794:	00 97       	sbiw	r24, 0x00	; 0
 796:	31 f4       	brne	.+12     	; 0x7a4 <fdevopen+0x1c>
 798:	61 15       	cp	r22, r1
 79a:	71 05       	cpc	r23, r1
 79c:	19 f4       	brne	.+6      	; 0x7a4 <fdevopen+0x1c>
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	38 c0       	rjmp	.+112    	; 0x814 <fdevopen+0x8c>
 7a4:	6e e0       	ldi	r22, 0x0E	; 14
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 f5 05 	call	0xbea	; 0xbea <calloc>
 7b0:	fc 01       	movw	r30, r24
 7b2:	00 97       	sbiw	r24, 0x00	; 0
 7b4:	a1 f3       	breq	.-24     	; 0x79e <fdevopen+0x16>
 7b6:	80 e8       	ldi	r24, 0x80	; 128
 7b8:	83 83       	std	Z+3, r24	; 0x03
 7ba:	01 15       	cp	r16, r1
 7bc:	11 05       	cpc	r17, r1
 7be:	71 f0       	breq	.+28     	; 0x7dc <fdevopen+0x54>
 7c0:	13 87       	std	Z+11, r17	; 0x0b
 7c2:	02 87       	std	Z+10, r16	; 0x0a
 7c4:	81 e8       	ldi	r24, 0x81	; 129
 7c6:	83 83       	std	Z+3, r24	; 0x03
 7c8:	80 91 96 02 	lds	r24, 0x0296
 7cc:	90 91 97 02 	lds	r25, 0x0297
 7d0:	89 2b       	or	r24, r25
 7d2:	21 f4       	brne	.+8      	; 0x7dc <fdevopen+0x54>
 7d4:	f0 93 97 02 	sts	0x0297, r31
 7d8:	e0 93 96 02 	sts	0x0296, r30
 7dc:	20 97       	sbiw	r28, 0x00	; 0
 7de:	c9 f0       	breq	.+50     	; 0x812 <fdevopen+0x8a>
 7e0:	d1 87       	std	Z+9, r29	; 0x09
 7e2:	c0 87       	std	Z+8, r28	; 0x08
 7e4:	83 81       	ldd	r24, Z+3	; 0x03
 7e6:	82 60       	ori	r24, 0x02	; 2
 7e8:	83 83       	std	Z+3, r24	; 0x03
 7ea:	80 91 98 02 	lds	r24, 0x0298
 7ee:	90 91 99 02 	lds	r25, 0x0299
 7f2:	89 2b       	or	r24, r25
 7f4:	71 f4       	brne	.+28     	; 0x812 <fdevopen+0x8a>
 7f6:	f0 93 99 02 	sts	0x0299, r31
 7fa:	e0 93 98 02 	sts	0x0298, r30
 7fe:	80 91 9a 02 	lds	r24, 0x029A
 802:	90 91 9b 02 	lds	r25, 0x029B
 806:	89 2b       	or	r24, r25
 808:	21 f4       	brne	.+8      	; 0x812 <fdevopen+0x8a>
 80a:	f0 93 9b 02 	sts	0x029B, r31
 80e:	e0 93 9a 02 	sts	0x029A, r30
 812:	cf 01       	movw	r24, r30
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	08 95       	ret

0000081e <printf>:
 81e:	a0 e0       	ldi	r26, 0x00	; 0
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	e5 e1       	ldi	r30, 0x15	; 21
 824:	f4 e0       	ldi	r31, 0x04	; 4
 826:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__prologue_saves__+0x20>
 82a:	fe 01       	movw	r30, r28
 82c:	35 96       	adiw	r30, 0x05	; 5
 82e:	61 91       	ld	r22, Z+
 830:	71 91       	ld	r23, Z+
 832:	af 01       	movw	r20, r30
 834:	80 91 98 02 	lds	r24, 0x0298
 838:	90 91 99 02 	lds	r25, 0x0299
 83c:	0e 94 23 04 	call	0x846	; 0x846 <vfprintf>
 840:	e2 e0       	ldi	r30, 0x02	; 2
 842:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__epilogue_restores__+0x20>

00000846 <vfprintf>:
 846:	ac e0       	ldi	r26, 0x0C	; 12
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	e9 e2       	ldi	r30, 0x29	; 41
 84c:	f4 e0       	ldi	r31, 0x04	; 4
 84e:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__prologue_saves__>
 852:	7c 01       	movw	r14, r24
 854:	6b 01       	movw	r12, r22
 856:	8a 01       	movw	r16, r20
 858:	fc 01       	movw	r30, r24
 85a:	17 82       	std	Z+7, r1	; 0x07
 85c:	16 82       	std	Z+6, r1	; 0x06
 85e:	83 81       	ldd	r24, Z+3	; 0x03
 860:	81 ff       	sbrs	r24, 1
 862:	bd c1       	rjmp	.+890    	; 0xbde <vfprintf+0x398>
 864:	ce 01       	movw	r24, r28
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	4c 01       	movw	r8, r24
 86a:	f7 01       	movw	r30, r14
 86c:	93 81       	ldd	r25, Z+3	; 0x03
 86e:	f6 01       	movw	r30, r12
 870:	93 fd       	sbrc	r25, 3
 872:	85 91       	lpm	r24, Z+
 874:	93 ff       	sbrs	r25, 3
 876:	81 91       	ld	r24, Z+
 878:	6f 01       	movw	r12, r30
 87a:	88 23       	and	r24, r24
 87c:	09 f4       	brne	.+2      	; 0x880 <vfprintf+0x3a>
 87e:	ab c1       	rjmp	.+854    	; 0xbd6 <vfprintf+0x390>
 880:	85 32       	cpi	r24, 0x25	; 37
 882:	39 f4       	brne	.+14     	; 0x892 <vfprintf+0x4c>
 884:	93 fd       	sbrc	r25, 3
 886:	85 91       	lpm	r24, Z+
 888:	93 ff       	sbrs	r25, 3
 88a:	81 91       	ld	r24, Z+
 88c:	6f 01       	movw	r12, r30
 88e:	85 32       	cpi	r24, 0x25	; 37
 890:	29 f4       	brne	.+10     	; 0x89c <vfprintf+0x56>
 892:	b7 01       	movw	r22, r14
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 89a:	e7 cf       	rjmp	.-50     	; 0x86a <vfprintf+0x24>
 89c:	51 2c       	mov	r5, r1
 89e:	31 2c       	mov	r3, r1
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	20 32       	cpi	r18, 0x20	; 32
 8a4:	a0 f4       	brcc	.+40     	; 0x8ce <vfprintf+0x88>
 8a6:	8b 32       	cpi	r24, 0x2B	; 43
 8a8:	69 f0       	breq	.+26     	; 0x8c4 <vfprintf+0x7e>
 8aa:	30 f4       	brcc	.+12     	; 0x8b8 <vfprintf+0x72>
 8ac:	80 32       	cpi	r24, 0x20	; 32
 8ae:	59 f0       	breq	.+22     	; 0x8c6 <vfprintf+0x80>
 8b0:	83 32       	cpi	r24, 0x23	; 35
 8b2:	69 f4       	brne	.+26     	; 0x8ce <vfprintf+0x88>
 8b4:	20 61       	ori	r18, 0x10	; 16
 8b6:	2c c0       	rjmp	.+88     	; 0x910 <vfprintf+0xca>
 8b8:	8d 32       	cpi	r24, 0x2D	; 45
 8ba:	39 f0       	breq	.+14     	; 0x8ca <vfprintf+0x84>
 8bc:	80 33       	cpi	r24, 0x30	; 48
 8be:	39 f4       	brne	.+14     	; 0x8ce <vfprintf+0x88>
 8c0:	21 60       	ori	r18, 0x01	; 1
 8c2:	26 c0       	rjmp	.+76     	; 0x910 <vfprintf+0xca>
 8c4:	22 60       	ori	r18, 0x02	; 2
 8c6:	24 60       	ori	r18, 0x04	; 4
 8c8:	23 c0       	rjmp	.+70     	; 0x910 <vfprintf+0xca>
 8ca:	28 60       	ori	r18, 0x08	; 8
 8cc:	21 c0       	rjmp	.+66     	; 0x910 <vfprintf+0xca>
 8ce:	27 fd       	sbrc	r18, 7
 8d0:	27 c0       	rjmp	.+78     	; 0x920 <vfprintf+0xda>
 8d2:	30 ed       	ldi	r19, 0xD0	; 208
 8d4:	38 0f       	add	r19, r24
 8d6:	3a 30       	cpi	r19, 0x0A	; 10
 8d8:	78 f4       	brcc	.+30     	; 0x8f8 <vfprintf+0xb2>
 8da:	26 ff       	sbrs	r18, 6
 8dc:	06 c0       	rjmp	.+12     	; 0x8ea <vfprintf+0xa4>
 8de:	fa e0       	ldi	r31, 0x0A	; 10
 8e0:	5f 9e       	mul	r5, r31
 8e2:	30 0d       	add	r19, r0
 8e4:	11 24       	eor	r1, r1
 8e6:	53 2e       	mov	r5, r19
 8e8:	13 c0       	rjmp	.+38     	; 0x910 <vfprintf+0xca>
 8ea:	8a e0       	ldi	r24, 0x0A	; 10
 8ec:	38 9e       	mul	r3, r24
 8ee:	30 0d       	add	r19, r0
 8f0:	11 24       	eor	r1, r1
 8f2:	33 2e       	mov	r3, r19
 8f4:	20 62       	ori	r18, 0x20	; 32
 8f6:	0c c0       	rjmp	.+24     	; 0x910 <vfprintf+0xca>
 8f8:	8e 32       	cpi	r24, 0x2E	; 46
 8fa:	21 f4       	brne	.+8      	; 0x904 <vfprintf+0xbe>
 8fc:	26 fd       	sbrc	r18, 6
 8fe:	6b c1       	rjmp	.+726    	; 0xbd6 <vfprintf+0x390>
 900:	20 64       	ori	r18, 0x40	; 64
 902:	06 c0       	rjmp	.+12     	; 0x910 <vfprintf+0xca>
 904:	8c 36       	cpi	r24, 0x6C	; 108
 906:	11 f4       	brne	.+4      	; 0x90c <vfprintf+0xc6>
 908:	20 68       	ori	r18, 0x80	; 128
 90a:	02 c0       	rjmp	.+4      	; 0x910 <vfprintf+0xca>
 90c:	88 36       	cpi	r24, 0x68	; 104
 90e:	41 f4       	brne	.+16     	; 0x920 <vfprintf+0xda>
 910:	f6 01       	movw	r30, r12
 912:	93 fd       	sbrc	r25, 3
 914:	85 91       	lpm	r24, Z+
 916:	93 ff       	sbrs	r25, 3
 918:	81 91       	ld	r24, Z+
 91a:	6f 01       	movw	r12, r30
 91c:	81 11       	cpse	r24, r1
 91e:	c1 cf       	rjmp	.-126    	; 0x8a2 <vfprintf+0x5c>
 920:	98 2f       	mov	r25, r24
 922:	9f 7d       	andi	r25, 0xDF	; 223
 924:	95 54       	subi	r25, 0x45	; 69
 926:	93 30       	cpi	r25, 0x03	; 3
 928:	28 f4       	brcc	.+10     	; 0x934 <vfprintf+0xee>
 92a:	0c 5f       	subi	r16, 0xFC	; 252
 92c:	1f 4f       	sbci	r17, 0xFF	; 255
 92e:	ff e3       	ldi	r31, 0x3F	; 63
 930:	f9 83       	std	Y+1, r31	; 0x01
 932:	0d c0       	rjmp	.+26     	; 0x94e <vfprintf+0x108>
 934:	83 36       	cpi	r24, 0x63	; 99
 936:	31 f0       	breq	.+12     	; 0x944 <vfprintf+0xfe>
 938:	83 37       	cpi	r24, 0x73	; 115
 93a:	71 f0       	breq	.+28     	; 0x958 <vfprintf+0x112>
 93c:	83 35       	cpi	r24, 0x53	; 83
 93e:	09 f0       	breq	.+2      	; 0x942 <vfprintf+0xfc>
 940:	5b c0       	rjmp	.+182    	; 0x9f8 <vfprintf+0x1b2>
 942:	22 c0       	rjmp	.+68     	; 0x988 <vfprintf+0x142>
 944:	f8 01       	movw	r30, r16
 946:	80 81       	ld	r24, Z
 948:	89 83       	std	Y+1, r24	; 0x01
 94a:	0e 5f       	subi	r16, 0xFE	; 254
 94c:	1f 4f       	sbci	r17, 0xFF	; 255
 94e:	44 24       	eor	r4, r4
 950:	43 94       	inc	r4
 952:	51 2c       	mov	r5, r1
 954:	54 01       	movw	r10, r8
 956:	15 c0       	rjmp	.+42     	; 0x982 <vfprintf+0x13c>
 958:	38 01       	movw	r6, r16
 95a:	f2 e0       	ldi	r31, 0x02	; 2
 95c:	6f 0e       	add	r6, r31
 95e:	71 1c       	adc	r7, r1
 960:	f8 01       	movw	r30, r16
 962:	a0 80       	ld	r10, Z
 964:	b1 80       	ldd	r11, Z+1	; 0x01
 966:	26 ff       	sbrs	r18, 6
 968:	03 c0       	rjmp	.+6      	; 0x970 <vfprintf+0x12a>
 96a:	65 2d       	mov	r22, r5
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <vfprintf+0x12e>
 970:	6f ef       	ldi	r22, 0xFF	; 255
 972:	7f ef       	ldi	r23, 0xFF	; 255
 974:	c5 01       	movw	r24, r10
 976:	2c 87       	std	Y+12, r18	; 0x0c
 978:	0e 94 23 06 	call	0xc46	; 0xc46 <strnlen>
 97c:	2c 01       	movw	r4, r24
 97e:	83 01       	movw	r16, r6
 980:	2c 85       	ldd	r18, Y+12	; 0x0c
 982:	2f 77       	andi	r18, 0x7F	; 127
 984:	22 2e       	mov	r2, r18
 986:	17 c0       	rjmp	.+46     	; 0x9b6 <vfprintf+0x170>
 988:	38 01       	movw	r6, r16
 98a:	f2 e0       	ldi	r31, 0x02	; 2
 98c:	6f 0e       	add	r6, r31
 98e:	71 1c       	adc	r7, r1
 990:	f8 01       	movw	r30, r16
 992:	a0 80       	ld	r10, Z
 994:	b1 80       	ldd	r11, Z+1	; 0x01
 996:	26 ff       	sbrs	r18, 6
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <vfprintf+0x15a>
 99a:	65 2d       	mov	r22, r5
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <vfprintf+0x15e>
 9a0:	6f ef       	ldi	r22, 0xFF	; 255
 9a2:	7f ef       	ldi	r23, 0xFF	; 255
 9a4:	c5 01       	movw	r24, r10
 9a6:	2c 87       	std	Y+12, r18	; 0x0c
 9a8:	0e 94 11 06 	call	0xc22	; 0xc22 <strnlen_P>
 9ac:	2c 01       	movw	r4, r24
 9ae:	2c 85       	ldd	r18, Y+12	; 0x0c
 9b0:	20 68       	ori	r18, 0x80	; 128
 9b2:	22 2e       	mov	r2, r18
 9b4:	83 01       	movw	r16, r6
 9b6:	23 fc       	sbrc	r2, 3
 9b8:	1b c0       	rjmp	.+54     	; 0x9f0 <vfprintf+0x1aa>
 9ba:	83 2d       	mov	r24, r3
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	48 16       	cp	r4, r24
 9c0:	59 06       	cpc	r5, r25
 9c2:	b0 f4       	brcc	.+44     	; 0x9f0 <vfprintf+0x1aa>
 9c4:	b7 01       	movw	r22, r14
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 9ce:	3a 94       	dec	r3
 9d0:	f4 cf       	rjmp	.-24     	; 0x9ba <vfprintf+0x174>
 9d2:	f5 01       	movw	r30, r10
 9d4:	27 fc       	sbrc	r2, 7
 9d6:	85 91       	lpm	r24, Z+
 9d8:	27 fe       	sbrs	r2, 7
 9da:	81 91       	ld	r24, Z+
 9dc:	5f 01       	movw	r10, r30
 9de:	b7 01       	movw	r22, r14
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 9e6:	31 10       	cpse	r3, r1
 9e8:	3a 94       	dec	r3
 9ea:	f1 e0       	ldi	r31, 0x01	; 1
 9ec:	4f 1a       	sub	r4, r31
 9ee:	51 08       	sbc	r5, r1
 9f0:	41 14       	cp	r4, r1
 9f2:	51 04       	cpc	r5, r1
 9f4:	71 f7       	brne	.-36     	; 0x9d2 <vfprintf+0x18c>
 9f6:	e5 c0       	rjmp	.+458    	; 0xbc2 <vfprintf+0x37c>
 9f8:	84 36       	cpi	r24, 0x64	; 100
 9fa:	11 f0       	breq	.+4      	; 0xa00 <vfprintf+0x1ba>
 9fc:	89 36       	cpi	r24, 0x69	; 105
 9fe:	39 f5       	brne	.+78     	; 0xa4e <vfprintf+0x208>
 a00:	f8 01       	movw	r30, r16
 a02:	27 ff       	sbrs	r18, 7
 a04:	07 c0       	rjmp	.+14     	; 0xa14 <vfprintf+0x1ce>
 a06:	60 81       	ld	r22, Z
 a08:	71 81       	ldd	r23, Z+1	; 0x01
 a0a:	82 81       	ldd	r24, Z+2	; 0x02
 a0c:	93 81       	ldd	r25, Z+3	; 0x03
 a0e:	0c 5f       	subi	r16, 0xFC	; 252
 a10:	1f 4f       	sbci	r17, 0xFF	; 255
 a12:	08 c0       	rjmp	.+16     	; 0xa24 <vfprintf+0x1de>
 a14:	60 81       	ld	r22, Z
 a16:	71 81       	ldd	r23, Z+1	; 0x01
 a18:	88 27       	eor	r24, r24
 a1a:	77 fd       	sbrc	r23, 7
 a1c:	80 95       	com	r24
 a1e:	98 2f       	mov	r25, r24
 a20:	0e 5f       	subi	r16, 0xFE	; 254
 a22:	1f 4f       	sbci	r17, 0xFF	; 255
 a24:	2f 76       	andi	r18, 0x6F	; 111
 a26:	b2 2e       	mov	r11, r18
 a28:	97 ff       	sbrs	r25, 7
 a2a:	09 c0       	rjmp	.+18     	; 0xa3e <vfprintf+0x1f8>
 a2c:	90 95       	com	r25
 a2e:	80 95       	com	r24
 a30:	70 95       	com	r23
 a32:	61 95       	neg	r22
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	20 68       	ori	r18, 0x80	; 128
 a3c:	b2 2e       	mov	r11, r18
 a3e:	2a e0       	ldi	r18, 0x0A	; 10
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	a4 01       	movw	r20, r8
 a44:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__ultoa_invert>
 a48:	a8 2e       	mov	r10, r24
 a4a:	a8 18       	sub	r10, r8
 a4c:	44 c0       	rjmp	.+136    	; 0xad6 <vfprintf+0x290>
 a4e:	85 37       	cpi	r24, 0x75	; 117
 a50:	29 f4       	brne	.+10     	; 0xa5c <vfprintf+0x216>
 a52:	2f 7e       	andi	r18, 0xEF	; 239
 a54:	b2 2e       	mov	r11, r18
 a56:	2a e0       	ldi	r18, 0x0A	; 10
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	25 c0       	rjmp	.+74     	; 0xaa6 <vfprintf+0x260>
 a5c:	f2 2f       	mov	r31, r18
 a5e:	f9 7f       	andi	r31, 0xF9	; 249
 a60:	bf 2e       	mov	r11, r31
 a62:	8f 36       	cpi	r24, 0x6F	; 111
 a64:	c1 f0       	breq	.+48     	; 0xa96 <vfprintf+0x250>
 a66:	18 f4       	brcc	.+6      	; 0xa6e <vfprintf+0x228>
 a68:	88 35       	cpi	r24, 0x58	; 88
 a6a:	79 f0       	breq	.+30     	; 0xa8a <vfprintf+0x244>
 a6c:	b4 c0       	rjmp	.+360    	; 0xbd6 <vfprintf+0x390>
 a6e:	80 37       	cpi	r24, 0x70	; 112
 a70:	19 f0       	breq	.+6      	; 0xa78 <vfprintf+0x232>
 a72:	88 37       	cpi	r24, 0x78	; 120
 a74:	21 f0       	breq	.+8      	; 0xa7e <vfprintf+0x238>
 a76:	af c0       	rjmp	.+350    	; 0xbd6 <vfprintf+0x390>
 a78:	2f 2f       	mov	r18, r31
 a7a:	20 61       	ori	r18, 0x10	; 16
 a7c:	b2 2e       	mov	r11, r18
 a7e:	b4 fe       	sbrs	r11, 4
 a80:	0d c0       	rjmp	.+26     	; 0xa9c <vfprintf+0x256>
 a82:	8b 2d       	mov	r24, r11
 a84:	84 60       	ori	r24, 0x04	; 4
 a86:	b8 2e       	mov	r11, r24
 a88:	09 c0       	rjmp	.+18     	; 0xa9c <vfprintf+0x256>
 a8a:	24 ff       	sbrs	r18, 4
 a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <vfprintf+0x25c>
 a8e:	9f 2f       	mov	r25, r31
 a90:	96 60       	ori	r25, 0x06	; 6
 a92:	b9 2e       	mov	r11, r25
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <vfprintf+0x25c>
 a96:	28 e0       	ldi	r18, 0x08	; 8
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <vfprintf+0x260>
 a9c:	20 e1       	ldi	r18, 0x10	; 16
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <vfprintf+0x260>
 aa2:	20 e1       	ldi	r18, 0x10	; 16
 aa4:	32 e0       	ldi	r19, 0x02	; 2
 aa6:	f8 01       	movw	r30, r16
 aa8:	b7 fe       	sbrs	r11, 7
 aaa:	07 c0       	rjmp	.+14     	; 0xaba <vfprintf+0x274>
 aac:	60 81       	ld	r22, Z
 aae:	71 81       	ldd	r23, Z+1	; 0x01
 ab0:	82 81       	ldd	r24, Z+2	; 0x02
 ab2:	93 81       	ldd	r25, Z+3	; 0x03
 ab4:	0c 5f       	subi	r16, 0xFC	; 252
 ab6:	1f 4f       	sbci	r17, 0xFF	; 255
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <vfprintf+0x280>
 aba:	60 81       	ld	r22, Z
 abc:	71 81       	ldd	r23, Z+1	; 0x01
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 5f       	subi	r16, 0xFE	; 254
 ac4:	1f 4f       	sbci	r17, 0xFF	; 255
 ac6:	a4 01       	movw	r20, r8
 ac8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__ultoa_invert>
 acc:	a8 2e       	mov	r10, r24
 ace:	a8 18       	sub	r10, r8
 ad0:	fb 2d       	mov	r31, r11
 ad2:	ff 77       	andi	r31, 0x7F	; 127
 ad4:	bf 2e       	mov	r11, r31
 ad6:	b6 fe       	sbrs	r11, 6
 ad8:	0b c0       	rjmp	.+22     	; 0xaf0 <vfprintf+0x2aa>
 ada:	2b 2d       	mov	r18, r11
 adc:	2e 7f       	andi	r18, 0xFE	; 254
 ade:	a5 14       	cp	r10, r5
 ae0:	50 f4       	brcc	.+20     	; 0xaf6 <vfprintf+0x2b0>
 ae2:	b4 fe       	sbrs	r11, 4
 ae4:	0a c0       	rjmp	.+20     	; 0xafa <vfprintf+0x2b4>
 ae6:	b2 fc       	sbrc	r11, 2
 ae8:	08 c0       	rjmp	.+16     	; 0xafa <vfprintf+0x2b4>
 aea:	2b 2d       	mov	r18, r11
 aec:	2e 7e       	andi	r18, 0xEE	; 238
 aee:	05 c0       	rjmp	.+10     	; 0xafa <vfprintf+0x2b4>
 af0:	7a 2c       	mov	r7, r10
 af2:	2b 2d       	mov	r18, r11
 af4:	03 c0       	rjmp	.+6      	; 0xafc <vfprintf+0x2b6>
 af6:	7a 2c       	mov	r7, r10
 af8:	01 c0       	rjmp	.+2      	; 0xafc <vfprintf+0x2b6>
 afa:	75 2c       	mov	r7, r5
 afc:	24 ff       	sbrs	r18, 4
 afe:	0d c0       	rjmp	.+26     	; 0xb1a <vfprintf+0x2d4>
 b00:	fe 01       	movw	r30, r28
 b02:	ea 0d       	add	r30, r10
 b04:	f1 1d       	adc	r31, r1
 b06:	80 81       	ld	r24, Z
 b08:	80 33       	cpi	r24, 0x30	; 48
 b0a:	11 f4       	brne	.+4      	; 0xb10 <vfprintf+0x2ca>
 b0c:	29 7e       	andi	r18, 0xE9	; 233
 b0e:	09 c0       	rjmp	.+18     	; 0xb22 <vfprintf+0x2dc>
 b10:	22 ff       	sbrs	r18, 2
 b12:	06 c0       	rjmp	.+12     	; 0xb20 <vfprintf+0x2da>
 b14:	73 94       	inc	r7
 b16:	73 94       	inc	r7
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <vfprintf+0x2dc>
 b1a:	82 2f       	mov	r24, r18
 b1c:	86 78       	andi	r24, 0x86	; 134
 b1e:	09 f0       	breq	.+2      	; 0xb22 <vfprintf+0x2dc>
 b20:	73 94       	inc	r7
 b22:	23 fd       	sbrc	r18, 3
 b24:	13 c0       	rjmp	.+38     	; 0xb4c <vfprintf+0x306>
 b26:	20 ff       	sbrs	r18, 0
 b28:	06 c0       	rjmp	.+12     	; 0xb36 <vfprintf+0x2f0>
 b2a:	5a 2c       	mov	r5, r10
 b2c:	73 14       	cp	r7, r3
 b2e:	18 f4       	brcc	.+6      	; 0xb36 <vfprintf+0x2f0>
 b30:	53 0c       	add	r5, r3
 b32:	57 18       	sub	r5, r7
 b34:	73 2c       	mov	r7, r3
 b36:	73 14       	cp	r7, r3
 b38:	68 f4       	brcc	.+26     	; 0xb54 <vfprintf+0x30e>
 b3a:	b7 01       	movw	r22, r14
 b3c:	80 e2       	ldi	r24, 0x20	; 32
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	2c 87       	std	Y+12, r18	; 0x0c
 b42:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 b46:	73 94       	inc	r7
 b48:	2c 85       	ldd	r18, Y+12	; 0x0c
 b4a:	f5 cf       	rjmp	.-22     	; 0xb36 <vfprintf+0x2f0>
 b4c:	73 14       	cp	r7, r3
 b4e:	10 f4       	brcc	.+4      	; 0xb54 <vfprintf+0x30e>
 b50:	37 18       	sub	r3, r7
 b52:	01 c0       	rjmp	.+2      	; 0xb56 <vfprintf+0x310>
 b54:	31 2c       	mov	r3, r1
 b56:	24 ff       	sbrs	r18, 4
 b58:	12 c0       	rjmp	.+36     	; 0xb7e <vfprintf+0x338>
 b5a:	b7 01       	movw	r22, r14
 b5c:	80 e3       	ldi	r24, 0x30	; 48
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	2c 87       	std	Y+12, r18	; 0x0c
 b62:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 b66:	2c 85       	ldd	r18, Y+12	; 0x0c
 b68:	22 ff       	sbrs	r18, 2
 b6a:	17 c0       	rjmp	.+46     	; 0xb9a <vfprintf+0x354>
 b6c:	21 ff       	sbrs	r18, 1
 b6e:	03 c0       	rjmp	.+6      	; 0xb76 <vfprintf+0x330>
 b70:	88 e5       	ldi	r24, 0x58	; 88
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <vfprintf+0x334>
 b76:	88 e7       	ldi	r24, 0x78	; 120
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	b7 01       	movw	r22, r14
 b7c:	0c c0       	rjmp	.+24     	; 0xb96 <vfprintf+0x350>
 b7e:	82 2f       	mov	r24, r18
 b80:	86 78       	andi	r24, 0x86	; 134
 b82:	59 f0       	breq	.+22     	; 0xb9a <vfprintf+0x354>
 b84:	21 fd       	sbrc	r18, 1
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <vfprintf+0x346>
 b88:	80 e2       	ldi	r24, 0x20	; 32
 b8a:	01 c0       	rjmp	.+2      	; 0xb8e <vfprintf+0x348>
 b8c:	8b e2       	ldi	r24, 0x2B	; 43
 b8e:	27 fd       	sbrc	r18, 7
 b90:	8d e2       	ldi	r24, 0x2D	; 45
 b92:	b7 01       	movw	r22, r14
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 b9a:	a5 14       	cp	r10, r5
 b9c:	38 f4       	brcc	.+14     	; 0xbac <vfprintf+0x366>
 b9e:	b7 01       	movw	r22, r14
 ba0:	80 e3       	ldi	r24, 0x30	; 48
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 ba8:	5a 94       	dec	r5
 baa:	f7 cf       	rjmp	.-18     	; 0xb9a <vfprintf+0x354>
 bac:	aa 94       	dec	r10
 bae:	f4 01       	movw	r30, r8
 bb0:	ea 0d       	add	r30, r10
 bb2:	f1 1d       	adc	r31, r1
 bb4:	80 81       	ld	r24, Z
 bb6:	b7 01       	movw	r22, r14
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 bbe:	a1 10       	cpse	r10, r1
 bc0:	f5 cf       	rjmp	.-22     	; 0xbac <vfprintf+0x366>
 bc2:	33 20       	and	r3, r3
 bc4:	09 f4       	brne	.+2      	; 0xbc8 <vfprintf+0x382>
 bc6:	51 ce       	rjmp	.-862    	; 0x86a <vfprintf+0x24>
 bc8:	b7 01       	movw	r22, r14
 bca:	80 e2       	ldi	r24, 0x20	; 32
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 bd2:	3a 94       	dec	r3
 bd4:	f6 cf       	rjmp	.-20     	; 0xbc2 <vfprintf+0x37c>
 bd6:	f7 01       	movw	r30, r14
 bd8:	86 81       	ldd	r24, Z+6	; 0x06
 bda:	97 81       	ldd	r25, Z+7	; 0x07
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <vfprintf+0x39c>
 bde:	8f ef       	ldi	r24, 0xFF	; 255
 be0:	9f ef       	ldi	r25, 0xFF	; 255
 be2:	2c 96       	adiw	r28, 0x0c	; 12
 be4:	e2 e1       	ldi	r30, 0x12	; 18
 be6:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__epilogue_restores__>

00000bea <calloc>:
 bea:	0f 93       	push	r16
 bec:	1f 93       	push	r17
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	86 9f       	mul	r24, r22
 bf4:	80 01       	movw	r16, r0
 bf6:	87 9f       	mul	r24, r23
 bf8:	10 0d       	add	r17, r0
 bfa:	96 9f       	mul	r25, r22
 bfc:	10 0d       	add	r17, r0
 bfe:	11 24       	eor	r1, r1
 c00:	c8 01       	movw	r24, r16
 c02:	0e 94 9d 02 	call	0x53a	; 0x53a <malloc>
 c06:	ec 01       	movw	r28, r24
 c08:	00 97       	sbiw	r24, 0x00	; 0
 c0a:	29 f0       	breq	.+10     	; 0xc16 <calloc+0x2c>
 c0c:	a8 01       	movw	r20, r16
 c0e:	60 e0       	ldi	r22, 0x00	; 0
 c10:	70 e0       	ldi	r23, 0x00	; 0
 c12:	0e 94 1c 06 	call	0xc38	; 0xc38 <memset>
 c16:	ce 01       	movw	r24, r28
 c18:	df 91       	pop	r29
 c1a:	cf 91       	pop	r28
 c1c:	1f 91       	pop	r17
 c1e:	0f 91       	pop	r16
 c20:	08 95       	ret

00000c22 <strnlen_P>:
 c22:	fc 01       	movw	r30, r24
 c24:	05 90       	lpm	r0, Z+
 c26:	61 50       	subi	r22, 0x01	; 1
 c28:	70 40       	sbci	r23, 0x00	; 0
 c2a:	01 10       	cpse	r0, r1
 c2c:	d8 f7       	brcc	.-10     	; 0xc24 <strnlen_P+0x2>
 c2e:	80 95       	com	r24
 c30:	90 95       	com	r25
 c32:	8e 0f       	add	r24, r30
 c34:	9f 1f       	adc	r25, r31
 c36:	08 95       	ret

00000c38 <memset>:
 c38:	dc 01       	movw	r26, r24
 c3a:	01 c0       	rjmp	.+2      	; 0xc3e <memset+0x6>
 c3c:	6d 93       	st	X+, r22
 c3e:	41 50       	subi	r20, 0x01	; 1
 c40:	50 40       	sbci	r21, 0x00	; 0
 c42:	e0 f7       	brcc	.-8      	; 0xc3c <memset+0x4>
 c44:	08 95       	ret

00000c46 <strnlen>:
 c46:	fc 01       	movw	r30, r24
 c48:	61 50       	subi	r22, 0x01	; 1
 c4a:	70 40       	sbci	r23, 0x00	; 0
 c4c:	01 90       	ld	r0, Z+
 c4e:	01 10       	cpse	r0, r1
 c50:	d8 f7       	brcc	.-10     	; 0xc48 <strnlen+0x2>
 c52:	80 95       	com	r24
 c54:	90 95       	com	r25
 c56:	8e 0f       	add	r24, r30
 c58:	9f 1f       	adc	r25, r31
 c5a:	08 95       	ret

00000c5c <fputc>:
 c5c:	0f 93       	push	r16
 c5e:	1f 93       	push	r17
 c60:	cf 93       	push	r28
 c62:	df 93       	push	r29
 c64:	18 2f       	mov	r17, r24
 c66:	09 2f       	mov	r16, r25
 c68:	eb 01       	movw	r28, r22
 c6a:	8b 81       	ldd	r24, Y+3	; 0x03
 c6c:	81 fd       	sbrc	r24, 1
 c6e:	03 c0       	rjmp	.+6      	; 0xc76 <fputc+0x1a>
 c70:	8f ef       	ldi	r24, 0xFF	; 255
 c72:	9f ef       	ldi	r25, 0xFF	; 255
 c74:	20 c0       	rjmp	.+64     	; 0xcb6 <fputc+0x5a>
 c76:	82 ff       	sbrs	r24, 2
 c78:	10 c0       	rjmp	.+32     	; 0xc9a <fputc+0x3e>
 c7a:	4e 81       	ldd	r20, Y+6	; 0x06
 c7c:	5f 81       	ldd	r21, Y+7	; 0x07
 c7e:	2c 81       	ldd	r18, Y+4	; 0x04
 c80:	3d 81       	ldd	r19, Y+5	; 0x05
 c82:	42 17       	cp	r20, r18
 c84:	53 07       	cpc	r21, r19
 c86:	7c f4       	brge	.+30     	; 0xca6 <fputc+0x4a>
 c88:	e8 81       	ld	r30, Y
 c8a:	f9 81       	ldd	r31, Y+1	; 0x01
 c8c:	9f 01       	movw	r18, r30
 c8e:	2f 5f       	subi	r18, 0xFF	; 255
 c90:	3f 4f       	sbci	r19, 0xFF	; 255
 c92:	39 83       	std	Y+1, r19	; 0x01
 c94:	28 83       	st	Y, r18
 c96:	10 83       	st	Z, r17
 c98:	06 c0       	rjmp	.+12     	; 0xca6 <fputc+0x4a>
 c9a:	e8 85       	ldd	r30, Y+8	; 0x08
 c9c:	f9 85       	ldd	r31, Y+9	; 0x09
 c9e:	81 2f       	mov	r24, r17
 ca0:	09 95       	icall
 ca2:	89 2b       	or	r24, r25
 ca4:	29 f7       	brne	.-54     	; 0xc70 <fputc+0x14>
 ca6:	2e 81       	ldd	r18, Y+6	; 0x06
 ca8:	3f 81       	ldd	r19, Y+7	; 0x07
 caa:	2f 5f       	subi	r18, 0xFF	; 255
 cac:	3f 4f       	sbci	r19, 0xFF	; 255
 cae:	3f 83       	std	Y+7, r19	; 0x07
 cb0:	2e 83       	std	Y+6, r18	; 0x06
 cb2:	81 2f       	mov	r24, r17
 cb4:	90 2f       	mov	r25, r16
 cb6:	df 91       	pop	r29
 cb8:	cf 91       	pop	r28
 cba:	1f 91       	pop	r17
 cbc:	0f 91       	pop	r16
 cbe:	08 95       	ret

00000cc0 <__ultoa_invert>:
 cc0:	fa 01       	movw	r30, r20
 cc2:	aa 27       	eor	r26, r26
 cc4:	28 30       	cpi	r18, 0x08	; 8
 cc6:	51 f1       	breq	.+84     	; 0xd1c <__ultoa_invert+0x5c>
 cc8:	20 31       	cpi	r18, 0x10	; 16
 cca:	81 f1       	breq	.+96     	; 0xd2c <__ultoa_invert+0x6c>
 ccc:	e8 94       	clt
 cce:	6f 93       	push	r22
 cd0:	6e 7f       	andi	r22, 0xFE	; 254
 cd2:	6e 5f       	subi	r22, 0xFE	; 254
 cd4:	7f 4f       	sbci	r23, 0xFF	; 255
 cd6:	8f 4f       	sbci	r24, 0xFF	; 255
 cd8:	9f 4f       	sbci	r25, 0xFF	; 255
 cda:	af 4f       	sbci	r26, 0xFF	; 255
 cdc:	b1 e0       	ldi	r27, 0x01	; 1
 cde:	3e d0       	rcall	.+124    	; 0xd5c <__ultoa_invert+0x9c>
 ce0:	b4 e0       	ldi	r27, 0x04	; 4
 ce2:	3c d0       	rcall	.+120    	; 0xd5c <__ultoa_invert+0x9c>
 ce4:	67 0f       	add	r22, r23
 ce6:	78 1f       	adc	r23, r24
 ce8:	89 1f       	adc	r24, r25
 cea:	9a 1f       	adc	r25, r26
 cec:	a1 1d       	adc	r26, r1
 cee:	68 0f       	add	r22, r24
 cf0:	79 1f       	adc	r23, r25
 cf2:	8a 1f       	adc	r24, r26
 cf4:	91 1d       	adc	r25, r1
 cf6:	a1 1d       	adc	r26, r1
 cf8:	6a 0f       	add	r22, r26
 cfa:	71 1d       	adc	r23, r1
 cfc:	81 1d       	adc	r24, r1
 cfe:	91 1d       	adc	r25, r1
 d00:	a1 1d       	adc	r26, r1
 d02:	20 d0       	rcall	.+64     	; 0xd44 <__ultoa_invert+0x84>
 d04:	09 f4       	brne	.+2      	; 0xd08 <__ultoa_invert+0x48>
 d06:	68 94       	set
 d08:	3f 91       	pop	r19
 d0a:	2a e0       	ldi	r18, 0x0A	; 10
 d0c:	26 9f       	mul	r18, r22
 d0e:	11 24       	eor	r1, r1
 d10:	30 19       	sub	r19, r0
 d12:	30 5d       	subi	r19, 0xD0	; 208
 d14:	31 93       	st	Z+, r19
 d16:	de f6       	brtc	.-74     	; 0xcce <__ultoa_invert+0xe>
 d18:	cf 01       	movw	r24, r30
 d1a:	08 95       	ret
 d1c:	46 2f       	mov	r20, r22
 d1e:	47 70       	andi	r20, 0x07	; 7
 d20:	40 5d       	subi	r20, 0xD0	; 208
 d22:	41 93       	st	Z+, r20
 d24:	b3 e0       	ldi	r27, 0x03	; 3
 d26:	0f d0       	rcall	.+30     	; 0xd46 <__ultoa_invert+0x86>
 d28:	c9 f7       	brne	.-14     	; 0xd1c <__ultoa_invert+0x5c>
 d2a:	f6 cf       	rjmp	.-20     	; 0xd18 <__ultoa_invert+0x58>
 d2c:	46 2f       	mov	r20, r22
 d2e:	4f 70       	andi	r20, 0x0F	; 15
 d30:	40 5d       	subi	r20, 0xD0	; 208
 d32:	4a 33       	cpi	r20, 0x3A	; 58
 d34:	18 f0       	brcs	.+6      	; 0xd3c <__ultoa_invert+0x7c>
 d36:	49 5d       	subi	r20, 0xD9	; 217
 d38:	31 fd       	sbrc	r19, 1
 d3a:	40 52       	subi	r20, 0x20	; 32
 d3c:	41 93       	st	Z+, r20
 d3e:	02 d0       	rcall	.+4      	; 0xd44 <__ultoa_invert+0x84>
 d40:	a9 f7       	brne	.-22     	; 0xd2c <__ultoa_invert+0x6c>
 d42:	ea cf       	rjmp	.-44     	; 0xd18 <__ultoa_invert+0x58>
 d44:	b4 e0       	ldi	r27, 0x04	; 4
 d46:	a6 95       	lsr	r26
 d48:	97 95       	ror	r25
 d4a:	87 95       	ror	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	ba 95       	dec	r27
 d52:	c9 f7       	brne	.-14     	; 0xd46 <__ultoa_invert+0x86>
 d54:	00 97       	sbiw	r24, 0x00	; 0
 d56:	61 05       	cpc	r22, r1
 d58:	71 05       	cpc	r23, r1
 d5a:	08 95       	ret
 d5c:	9b 01       	movw	r18, r22
 d5e:	ac 01       	movw	r20, r24
 d60:	0a 2e       	mov	r0, r26
 d62:	06 94       	lsr	r0
 d64:	57 95       	ror	r21
 d66:	47 95       	ror	r20
 d68:	37 95       	ror	r19
 d6a:	27 95       	ror	r18
 d6c:	ba 95       	dec	r27
 d6e:	c9 f7       	brne	.-14     	; 0xd62 <__ultoa_invert+0xa2>
 d70:	62 0f       	add	r22, r18
 d72:	73 1f       	adc	r23, r19
 d74:	84 1f       	adc	r24, r20
 d76:	95 1f       	adc	r25, r21
 d78:	a0 1d       	adc	r26, r0
 d7a:	08 95       	ret

00000d7c <__prologue_saves__>:
 d7c:	2f 92       	push	r2
 d7e:	3f 92       	push	r3
 d80:	4f 92       	push	r4
 d82:	5f 92       	push	r5
 d84:	6f 92       	push	r6
 d86:	7f 92       	push	r7
 d88:	8f 92       	push	r8
 d8a:	9f 92       	push	r9
 d8c:	af 92       	push	r10
 d8e:	bf 92       	push	r11
 d90:	cf 92       	push	r12
 d92:	df 92       	push	r13
 d94:	ef 92       	push	r14
 d96:	ff 92       	push	r15
 d98:	0f 93       	push	r16
 d9a:	1f 93       	push	r17
 d9c:	cf 93       	push	r28
 d9e:	df 93       	push	r29
 da0:	cd b7       	in	r28, 0x3d	; 61
 da2:	de b7       	in	r29, 0x3e	; 62
 da4:	ca 1b       	sub	r28, r26
 da6:	db 0b       	sbc	r29, r27
 da8:	0f b6       	in	r0, 0x3f	; 63
 daa:	f8 94       	cli
 dac:	de bf       	out	0x3e, r29	; 62
 dae:	0f be       	out	0x3f, r0	; 63
 db0:	cd bf       	out	0x3d, r28	; 61
 db2:	09 94       	ijmp

00000db4 <__epilogue_restores__>:
 db4:	2a 88       	ldd	r2, Y+18	; 0x12
 db6:	39 88       	ldd	r3, Y+17	; 0x11
 db8:	48 88       	ldd	r4, Y+16	; 0x10
 dba:	5f 84       	ldd	r5, Y+15	; 0x0f
 dbc:	6e 84       	ldd	r6, Y+14	; 0x0e
 dbe:	7d 84       	ldd	r7, Y+13	; 0x0d
 dc0:	8c 84       	ldd	r8, Y+12	; 0x0c
 dc2:	9b 84       	ldd	r9, Y+11	; 0x0b
 dc4:	aa 84       	ldd	r10, Y+10	; 0x0a
 dc6:	b9 84       	ldd	r11, Y+9	; 0x09
 dc8:	c8 84       	ldd	r12, Y+8	; 0x08
 dca:	df 80       	ldd	r13, Y+7	; 0x07
 dcc:	ee 80       	ldd	r14, Y+6	; 0x06
 dce:	fd 80       	ldd	r15, Y+5	; 0x05
 dd0:	0c 81       	ldd	r16, Y+4	; 0x04
 dd2:	1b 81       	ldd	r17, Y+3	; 0x03
 dd4:	aa 81       	ldd	r26, Y+2	; 0x02
 dd6:	b9 81       	ldd	r27, Y+1	; 0x01
 dd8:	ce 0f       	add	r28, r30
 dda:	d1 1d       	adc	r29, r1
 ddc:	0f b6       	in	r0, 0x3f	; 63
 dde:	f8 94       	cli
 de0:	de bf       	out	0x3e, r29	; 62
 de2:	0f be       	out	0x3f, r0	; 63
 de4:	cd bf       	out	0x3d, r28	; 61
 de6:	ed 01       	movw	r28, r26
 de8:	08 95       	ret

00000dea <_exit>:
 dea:	f8 94       	cli

00000dec <__stop_program>:
 dec:	ff cf       	rjmp	.-2      	; 0xdec <__stop_program>
