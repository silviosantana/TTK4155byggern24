
byggern24_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  000023fe  00002492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800248  00800248  000025da  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025da  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000358  00000000  00000000  00002636  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004503  00000000  00000000  0000298e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014af  00000000  00000000  00006e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001423  00000000  00000000  00008340  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000097c  00000000  00000000  00009764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a25  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000274e  00000000  00000000  0000ab05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000380  00000000  00000000  0000d253  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 04 	jmp	0x810	; 0x810 <__ctors_end>
       4:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
       8:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__vector_2>
       c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      10:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      14:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      18:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      1c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      20:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      24:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      28:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      2c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      30:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      34:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      38:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      3c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      40:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      44:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      48:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      4c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      50:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      54:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      58:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      5c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      60:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      64:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      68:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>
      6c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	88 d8       	rcall	.-3824   	; 0xfffff182 <__eeprom_end+0xff7ef182>
      72:	7c 3f       	cpi	r23, 0xFC	; 252
      74:	3f 7c       	andi	r19, 0xCF	; 207
      76:	d8 88       	ldd	r13, Y+16	; 0x10
      78:	18 3c       	cpi	r17, 0xC8	; 200
      7a:	7e ff       	.word	0xff7e	; ????
      7c:	ff 7e       	andi	r31, 0xEF	; 239
      7e:	3c 18       	sub	r3, r12
      80:	1e 3f       	cpi	r17, 0xFE	; 254
      82:	7e fc       	.word	0xfc7e	; ????
      84:	fc 7e       	andi	r31, 0xEC	; 236
      86:	3f 1e       	adc	r3, r31
      88:	ff cf       	rjmp	.-2      	; 0x88 <__trampolines_end+0x18>
      8a:	9b bf       	out	0x3b, r25	; 59
      8c:	bf 9b       	sbis	0x17, 7	; 23
      8e:	cf ff       	.word	0xffcf	; ????
      90:	ff fb       	.word	0xfbff	; ????
      92:	fb df       	rcall	.-10     	; 0x8a <__trampolines_end+0x1a>
      94:	df fb       	.word	0xfbdf	; ????
      96:	fb ff       	.word	0xfffb	; ????
      98:	18 3c       	cpi	r17, 0xC8	; 200
      9a:	3c 7e       	andi	r19, 0xEC	; 236
      9c:	ff 3c       	cpi	r31, 0xCF	; 207
      9e:	3c 3c       	cpi	r19, 0xCC	; 204
      a0:	e0 38       	cpi	r30, 0x80	; 128
      a2:	0c 3e       	cpi	r16, 0xEC	; 236
      a4:	f2 33       	cpi	r31, 0x32	; 50
      a6:	19 1f       	adc	r17, r25
      a8:	1f 19       	sub	r17, r15
      aa:	33 f2       	brvs	.-116    	; 0x38 <__zero_reg__+0x37>
      ac:	3e 0c       	add	r3, r14
      ae:	38 e0       	ldi	r19, 0x08	; 8
      b0:	07 0e       	add	r0, r23
      b2:	7e 9f       	mul	r23, r30
      b4:	87 86       	std	Z+15, r8	; 0x0f
      b6:	9c 84       	ldd	r9, Y+12	; 0x0c
      b8:	84 9c       	mul	r8, r4
      ba:	86 87       	std	Z+14, r24	; 0x0e
      bc:	9f 7e       	andi	r25, 0xEF	; 239
      be:	0e 07       	cpc	r16, r30
      c0:	00 00       	nop
      c2:	c0 c0       	rjmp	.+384    	; 0x244 <font4+0x84>
      c4:	f0 f0       	brcs	.+60     	; 0x102 <__trampolines_end+0x92>
      c6:	fc fc       	.word	0xfcfc	; ????
      c8:	0c 0c       	add	r0, r12
      ca:	0f 0f       	add	r16, r31
      cc:	c3 c3       	rjmp	.+1926   	; 0x854 <ADC_read+0x6>
      ce:	ff ff       	.word	0xffff	; ????
      d0:	ff ff       	.word	0xffff	; ????
      d2:	c3 c3       	rjmp	.+1926   	; 0x85a <ADC_read+0xc>
      d4:	0f 0f       	add	r16, r31
      d6:	0c 0c       	add	r0, r12
      d8:	fc fc       	.word	0xfcfc	; ????
      da:	f0 f0       	brcs	.+60     	; 0x118 <__trampolines_end+0xa8>
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <font4+0x9e>
      de:	00 00       	nop
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	0f 0f       	add	r16, r31
      e4:	00 00       	nop
      e6:	0f 0f       	add	r16, r31
      e8:	ff ff       	.word	0xffff	; ????
      ea:	0f 0f       	add	r16, r31
      ec:	03 03       	mulsu	r16, r19
      ee:	03 03       	mulsu	r16, r19
      f0:	03 03       	mulsu	r16, r19
      f2:	03 03       	mulsu	r16, r19
      f4:	0f 0f       	add	r16, r31
      f6:	ff ff       	.word	0xffff	; ????
      f8:	0f 0f       	add	r16, r31
      fa:	00 00       	nop
      fc:	0f 0f       	add	r16, r31
      fe:	fc fc       	.word	0xfcfc	; ????
     100:	3f 3f       	cpi	r19, 0xFF	; 255
     102:	fc fc       	.word	0xfcfc	; ????
     104:	fc fc       	.word	0xfcfc	; ????
     106:	ff ff       	.word	0xffff	; ????
     108:	3f 3f       	cpi	r19, 0xFF	; 255
     10a:	3c 3c       	cpi	r19, 0xCC	; 204
     10c:	f0 f0       	brcs	.+60     	; 0x14a <__trampolines_end+0xda>
     10e:	30 30       	cpi	r19, 0x00	; 0
     110:	30 30       	cpi	r19, 0x00	; 0
     112:	f0 f0       	brcs	.+60     	; 0x150 <__trampolines_end+0xe0>
     114:	3c 3c       	cpi	r19, 0xCC	; 204
     116:	3f 3f       	cpi	r19, 0xFF	; 255
     118:	ff ff       	.word	0xffff	; ????
     11a:	fc fc       	.word	0xfcfc	; ????
     11c:	fc fc       	.word	0xfcfc	; ????
     11e:	3f 3f       	cpi	r19, 0xFF	; 255
     120:	00 00       	nop
     122:	00 00       	nop
     124:	3f 3f       	cpi	r19, 0xFF	; 255
     126:	c3 c3       	rjmp	.+1926   	; 0x8ae <send_multi_board+0x4a>
     128:	c0 c0       	rjmp	.+384    	; 0x2aa <font4+0xea>
     12a:	c0 c0       	rjmp	.+384    	; 0x2ac <font4+0xec>
     12c:	c3 c3       	rjmp	.+1926   	; 0x8b4 <send_multi_board+0x50>
     12e:	c0 c0       	rjmp	.+384    	; 0x2b0 <font4+0xf0>
     130:	c0 c0       	rjmp	.+384    	; 0x2b2 <font4+0xf2>
     132:	c3 c3       	rjmp	.+1926   	; 0x8ba <send_multi_board+0x56>
     134:	c0 c0       	rjmp	.+384    	; 0x2b6 <font4+0xf6>
     136:	c0 c0       	rjmp	.+384    	; 0x2b8 <font4+0xf8>
     138:	c3 c3       	rjmp	.+1926   	; 0x8c0 <send_multi_board+0x5c>
     13a:	3f 3f       	cpi	r19, 0xFF	; 255
     13c:	00 00       	nop
     13e:	00 00       	nop
     140:	f8 fc       	.word	0xfcf8	; ????
     142:	fe ff       	.word	0xfffe	; ????
     144:	ff ff       	.word	0xffff	; ????
     146:	3f 3f       	cpi	r19, 0xFF	; 255
     148:	3f 3f       	cpi	r19, 0xFF	; 255
     14a:	3f 3f       	cpi	r19, 0xFF	; 255
     14c:	3f bf       	out	0x3f, r19	; 63
     14e:	bf bf       	out	0x3f, r27	; 63
     150:	bf bf       	out	0x3f, r27	; 63
     152:	bf 3f       	cpi	r27, 0xFF	; 255
     154:	3f 3f       	cpi	r19, 0xFF	; 255
     156:	3f 3f       	cpi	r19, 0xFF	; 255
     158:	3f 3f       	cpi	r19, 0xFF	; 255
     15a:	ff ff       	.word	0xffff	; ????
     15c:	ff fe       	.word	0xfeff	; ????
     15e:	fc f8       	.word	0xf8fc	; ????
     160:	ff ff       	.word	0xffff	; ????
     162:	ff ff       	.word	0xffff	; ????
     164:	ff ff       	.word	0xffff	; ????
     166:	00 e0       	ldi	r16, 0x00	; 0
     168:	fc fe       	.word	0xfefc	; ????
     16a:	ff ff       	.word	0xffff	; ????
     16c:	ff ff       	.word	0xffff	; ????
     16e:	ff ff       	.word	0xffff	; ????
     170:	ff ff       	.word	0xffff	; ????
     172:	ff ff       	.word	0xffff	; ????
     174:	ff ff       	.word	0xffff	; ????
     176:	fe fc       	.word	0xfcfe	; ????
     178:	e0 00       	.word	0x00e0	; ????
     17a:	ff ff       	.word	0xffff	; ????
     17c:	ff ff       	.word	0xffff	; ????
     17e:	ff ff       	.word	0xffff	; ????
     180:	ff ff       	.word	0xffff	; ????
     182:	ff ff       	.word	0xffff	; ????
     184:	ff ff       	.word	0xffff	; ????
     186:	00 07       	cpc	r16, r16
     188:	3f 7f       	andi	r19, 0xFF	; 255
     18a:	ff ff       	.word	0xffff	; ????
     18c:	ff ff       	.word	0xffff	; ????
     18e:	ff ff       	.word	0xffff	; ????
     190:	ff ff       	.word	0xffff	; ????
     192:	ff ff       	.word	0xffff	; ????
     194:	ff ff       	.word	0xffff	; ????
     196:	7f 3f       	cpi	r23, 0xFF	; 255
     198:	07 00       	.word	0x0007	; ????
     19a:	ff ff       	.word	0xffff	; ????
     19c:	ff ff       	.word	0xffff	; ????
     19e:	ff ff       	.word	0xffff	; ????
     1a0:	1f 3f       	cpi	r17, 0xFF	; 255
     1a2:	7f ff       	.word	0xff7f	; ????
     1a4:	ff ff       	.word	0xffff	; ????
     1a6:	fc fc       	.word	0xfcfc	; ????
     1a8:	fc fc       	.word	0xfcfc	; ????
     1aa:	fc fc       	.word	0xfcfc	; ????
     1ac:	fc fd       	.word	0xfdfc	; ????
     1ae:	fd fd       	.word	0xfdfd	; ????
     1b0:	fd fd       	.word	0xfdfd	; ????
     1b2:	fd fc       	.word	0xfcfd	; ????
     1b4:	fc fc       	.word	0xfcfc	; ????
     1b6:	fc fc       	.word	0xfcfc	; ????
     1b8:	fc fc       	.word	0xfcfc	; ????
     1ba:	ff ff       	.word	0xffff	; ????
     1bc:	ff 7f       	andi	r31, 0xFF	; 255
     1be:	3f 1f       	adc	r19, r31

000001c0 <font4>:
     1c0:	00 00 00 00 00 5c 00 00 0c 00 0c 00 7c 28 7c 28     .....\......|(|(
     1d0:	58 dc 68 00 24 10 48 00 28 54 28 40 00 0c 00 00     X.h.$.H.(T(@....
     1e0:	00 78 84 00 84 78 00 00 54 38 54 00 10 7c 10 00     .x...x..T8T..|..
     1f0:	80 40 00 00 10 10 10 00 00 40 00 00 60 10 0c 00     .@.......@..`...
     200:	38 54 38 00 48 7c 40 00 48 64 58 00 44 54 2c 00     8T8.H|@.HdX.DT,.
     210:	1c 10 7c 00 5c 54 24 00 38 54 24 00 64 14 0c 00     ..|.\T$.8T$.d...
     220:	68 54 2c 00 48 54 38 00 00 48 00 00 80 48 00 00     hT,.HT8..H...H..
     230:	10 28 44 00 28 28 28 00 44 28 10 00 04 54 08 00     .(D.(((.D(...T..
     240:	38 44 5c 00 78 14 78 00 7c 54 28 00 38 44 28 00     8D\.x.x.|T(.8D(.
     250:	7c 44 38 00 7c 54 44 00 7c 14 04 00 38 44 74 00     |D8.|TD.|...8Dt.
     260:	7c 10 7c 00 44 7c 44 00 20 40 3c 00 7c 10 6c 00     |.|.D|D. @<.|.l.
     270:	7c 40 40 00 7c 18 7c 00 78 10 3c 00 38 44 38 00     |@@.|.|.x.<.8D8.
     280:	7c 14 08 00 38 44 b8 00 7c 14 68 00 48 54 24 00     |...8D..|.h.HT$.
     290:	04 7c 04 00 7c 40 7c 00 3c 60 3c 00 7c 30 7c 00     .|..|@|.<`<.|0|.
     2a0:	6c 10 6c 00 0c 70 0c 00 64 54 4c 00 00 7c 44 00     l.l..p..dTL..|D.
     2b0:	0c 10 60 00 44 7c 00 00 08 04 08 00 80 80 80 00     ..`.D|..........
     2c0:	00 04 08 00 30 48 78 00 7c 48 30 00 30 48 48 00     ....0Hx.|H0.0HH.
     2d0:	30 48 7c 00 30 68 50 00 10 78 14 00 90 a8 78 00     0H|.0hP..x....x.
     2e0:	7c 08 70 00 50 74 40 00 80 80 74 00 7c 10 68 00     |.p.Pt@...t.|.h.
     2f0:	44 7c 40 00 78 10 78 00 78 08 70 00 30 48 30 00     D|@.x.x.x.p.0H0.
     300:	f8 28 10 00 30 48 f8 00 78 10 08 00 50 58 28 00     .(..0H..x...PX(.
     310:	08 3c 48 00 38 40 78 00 38 40 38 00 78 20 78 00     .<H.8@x.8@8.x x.
     320:	48 30 48 00 98 a0 78 00 48 68 58 00 10 78 84 00     H0H...x.HhX..x..
     330:	00 7c 00 00 84 78 10 00 08 04 08 04                 .|...x......

0000033c <font5>:
     33c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     34c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     35c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     36c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     37c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     38c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     39c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     3ac:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     3bc:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     3cc:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     3dc:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     3ec:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     3fc:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     40c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     41c:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     42c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     43c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     44c:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     45c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     46c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     47c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     48c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     49c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     4ac:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     4bc:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     4cc:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     4dc:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     4ec:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     4fc:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     50c:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

00000517 <font8>:
	...
     51f:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     52f:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     53f:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     54f:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     55f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     56f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     57f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     58f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     59f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     5af:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     5bf:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     5cf:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     5df:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     5ef:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     5ff:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     60f:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     61f:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     62f:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     63f:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     64f:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     65f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     66f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     67f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     68f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     69f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     6af:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     6bf:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     6cf:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     6df:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     6ef:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     6ff:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     70f:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     71f:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     72f:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     73f:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     74f:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     75f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     76f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     77f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     78f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     79f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     7af:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     7bf:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     7cf:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     7df:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     7ef:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     7ff:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000810 <__ctors_end>:
     810:	11 24       	eor	r1, r1
     812:	1f be       	out	0x3f, r1	; 63
     814:	cf ef       	ldi	r28, 0xFF	; 255
     816:	d4 e0       	ldi	r29, 0x04	; 4
     818:	de bf       	out	0x3e, r29	; 62
     81a:	cd bf       	out	0x3d, r28	; 61

0000081c <__do_copy_data>:
     81c:	12 e0       	ldi	r17, 0x02	; 2
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b1 e0       	ldi	r27, 0x01	; 1
     822:	ee ef       	ldi	r30, 0xFE	; 254
     824:	f3 e2       	ldi	r31, 0x23	; 35
     826:	02 c0       	rjmp	.+4      	; 0x82c <__do_copy_data+0x10>
     828:	05 90       	lpm	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	a8 34       	cpi	r26, 0x48	; 72
     82e:	b1 07       	cpc	r27, r17
     830:	d9 f7       	brne	.-10     	; 0x828 <__do_copy_data+0xc>

00000832 <__do_clear_bss>:
     832:	22 e0       	ldi	r18, 0x02	; 2
     834:	a8 e4       	ldi	r26, 0x48	; 72
     836:	b2 e0       	ldi	r27, 0x02	; 2
     838:	01 c0       	rjmp	.+2      	; 0x83c <.do_clear_bss_start>

0000083a <.do_clear_bss_loop>:
     83a:	1d 92       	st	X+, r1

0000083c <.do_clear_bss_start>:
     83c:	a6 35       	cpi	r26, 0x56	; 86
     83e:	b2 07       	cpc	r27, r18
     840:	e1 f7       	brne	.-8      	; 0x83a <.do_clear_bss_loop>
     842:	0e 94 ad 08 	call	0x115a	; 0x115a <main>
     846:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <_exit>

0000084a <__bad_interrupt>:
     84a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000084e <ADC_read>:
	{
		return 0;
	} else 
	{
		volatile char *ext_adc = (char *) 0x1400; // Start address for the SRAM
		uint8_t val = chn + 3;
     84e:	8d 5f       	subi	r24, 0xFD	; 253
		
		ext_adc[0] = val;
     850:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     854:	82 e4       	ldi	r24, 0x42	; 66
     856:	8a 95       	dec	r24
     858:	f1 f7       	brne	.-4      	; 0x856 <ADC_read+0x8>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <ADC_read+0xe>
		_delay_us(200);
		return ext_adc[0];
     85c:	80 91 00 14 	lds	r24, 0x1400
	}
	

     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	08 95       	ret

00000864 <send_multi_board>:
#include "can_driver.h"
#include "oled_driver.h"


void send_multi_board()
{
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	2a 97       	sbiw	r28, 0x0a	; 10
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
	struct Position j_pos;
	uint8_t sliderL;
	uint8_t sliderR = 0;
	uint8_t r_button, l_button;
	
	j_pos = get_joystick_position();
     884:	0e 94 a6 07 	call	0xf4c	; 0xf4c <get_joystick_position>
     888:	c6 2e       	mov	r12, r22
     88a:	d8 2e       	mov	r13, r24
	sliderL = get_left_slider();
     88c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <get_left_slider>
     890:	e8 2e       	mov	r14, r24
	sliderR = get_right_slider();
     892:	0e 94 90 08 	call	0x1120	; 0x1120 <get_right_slider>
     896:	f8 2e       	mov	r15, r24
	enum direction dir = get_joystick_direction();
     898:	0e 94 24 08 	call	0x1048	; 0x1048 <get_joystick_direction>
     89c:	08 2f       	mov	r16, r24
	r_button = get_joystick_right_button();
     89e:	0e 94 a5 08 	call	0x114a	; 0x114a <get_joystick_right_button>
     8a2:	18 2f       	mov	r17, r24
	l_button = get_joystick_left_button();
     8a4:	0e 94 a9 08 	call	0x1152	; 0x1152 <get_joystick_left_button>
	can_message msg;
	msg.id = 1;
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	99 83       	std	Y+1, r25	; 0x01
	msg.data[0] = j_pos.x;
     8ac:	cb 82       	std	Y+3, r12	; 0x03
	msg.data[1] = j_pos.y;
     8ae:	dc 82       	std	Y+4, r13	; 0x04
	uint8_t sliderL;
	uint8_t sliderR = 0;
	uint8_t r_button, l_button;
	
	j_pos = get_joystick_position();
	sliderL = get_left_slider();
     8b0:	ed 82       	std	Y+5, r14	; 0x05
	sliderR = get_right_slider();
     8b2:	fe 82       	std	Y+6, r15	; 0x06
	enum direction dir = get_joystick_direction();
     8b4:	0f 83       	std	Y+7, r16	; 0x07
	r_button = get_joystick_right_button();
     8b6:	18 87       	std	Y+8, r17	; 0x08
	l_button = get_joystick_left_button();
     8b8:	89 87       	std	Y+9, r24	; 0x09
	msg.data[2] = sliderL;
	msg.data[3] = sliderR;
	msg.data[4] = dir;
	msg.data[5] = r_button;
	msg.data[6] = l_button;
	msg.length = 7;
     8ba:	87 e0       	ldi	r24, 0x07	; 7
     8bc:	8a 83       	std	Y+2, r24	; 0x02
	
	can_send_msg(&msg);
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	0e 94 cb 06 	call	0xd96	; 0xd96 <can_send_msg>
}
     8c6:	2a 96       	adiw	r28, 0x0a	; 10
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	08 95       	ret

000008e4 <menu_set_state>:

//set state of menu
menu* menu_set_state(menu* current_state, int* arrow_max, int arrow_pos)
{
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	ec 01       	movw	r28, r24
     8f0:	8b 01       	movw	r16, r22
     8f2:	f4 2e       	mov	r15, r20
	oled_reset();
     8f4:	0e 94 42 09 	call	0x1284	; 0x1284 <oled_reset>
	int s = current_state->val;
	
	switch (s)
     8f8:	28 81       	ld	r18, Y
     8fa:	39 81       	ldd	r19, Y+1	; 0x01
     8fc:	23 30       	cpi	r18, 0x03	; 3
     8fe:	31 05       	cpc	r19, r1
     900:	f1 f1       	breq	.+124    	; 0x97e <menu_set_state+0x9a>
     902:	24 f4       	brge	.+8      	; 0x90c <menu_set_state+0x28>
     904:	21 30       	cpi	r18, 0x01	; 1
     906:	31 05       	cpc	r19, r1
     908:	51 f0       	breq	.+20     	; 0x91e <menu_set_state+0x3a>
     90a:	71 c0       	rjmp	.+226    	; 0x9ee <menu_set_state+0x10a>
     90c:	24 30       	cpi	r18, 0x04	; 4
     90e:	31 05       	cpc	r19, r1
     910:	09 f4       	brne	.+2      	; 0x914 <menu_set_state+0x30>
     912:	58 c0       	rjmp	.+176    	; 0x9c4 <menu_set_state+0xe0>
     914:	25 30       	cpi	r18, 0x05	; 5
     916:	31 05       	cpc	r19, r1
     918:	09 f4       	brne	.+2      	; 0x91c <menu_set_state+0x38>
     91a:	5f c0       	rjmp	.+190    	; 0x9da <menu_set_state+0xf6>
     91c:	68 c0       	rjmp	.+208    	; 0x9ee <menu_set_state+0x10a>
	{
		case 1: // Menu
		oled_pos(arrow_pos,100);
     91e:	64 e6       	ldi	r22, 0x64	; 100
     920:	8f 2d       	mov	r24, r15
     922:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print_special_char(5);
     926:	85 e0       	ldi	r24, 0x05	; 5
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
		oled_pos(0,0);
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(current_state->name, 3);
     936:	63 e0       	ldi	r22, 0x03	; 3
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	9b 81       	ldd	r25, Y+3	; 0x03
     93e:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		oled_pos(2,0);
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(current_state->children[0]->name, 2);
     94a:	ee 81       	ldd	r30, Y+6	; 0x06
     94c:	ff 81       	ldd	r31, Y+7	; 0x07
     94e:	62 e0       	ldi	r22, 0x02	; 2
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	93 81       	ldd	r25, Z+3	; 0x03
     956:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		oled_pos(3,0);
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(current_state->children[1]->name, 2);
     962:	e8 85       	ldd	r30, Y+8	; 0x08
     964:	f9 85       	ldd	r31, Y+9	; 0x09
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	82 81       	ldd	r24, Z+2	; 0x02
     96c:	93 81       	ldd	r25, Z+3	; 0x03
     96e:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		*arrow_max = 3;
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	f8 01       	movw	r30, r16
     978:	91 83       	std	Z+1, r25	; 0x01
     97a:	80 83       	st	Z, r24
		break;
     97c:	38 c0       	rjmp	.+112    	; 0x9ee <menu_set_state+0x10a>
		case 2: // Start Game
		start_game();
		break;
		
		case 3: // Set Mode
		oled_pos(0,0);
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(current_state->name, 3);
     986:	63 e0       	ldi	r22, 0x03	; 3
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	8a 81       	ldd	r24, Y+2	; 0x02
     98c:	9b 81       	ldd	r25, Y+3	; 0x03
     98e:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		oled_pos(2,0);
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(current_state->children[0]->name, 2);
     99a:	ee 81       	ldd	r30, Y+6	; 0x06
     99c:	ff 81       	ldd	r31, Y+7	; 0x07
     99e:	62 e0       	ldi	r22, 0x02	; 2
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	82 81       	ldd	r24, Z+2	; 0x02
     9a4:	93 81       	ldd	r25, Z+3	; 0x03
     9a6:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		oled_pos(3,0);
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(current_state->children[1]->name, 2);
     9b2:	e8 85       	ldd	r30, Y+8	; 0x08
     9b4:	f9 85       	ldd	r31, Y+9	; 0x09
     9b6:	62 e0       	ldi	r22, 0x02	; 2
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	82 81       	ldd	r24, Z+2	; 0x02
     9bc:	93 81       	ldd	r25, Z+3	; 0x03
     9be:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		break;
     9c2:	15 c0       	rjmp	.+42     	; 0x9ee <menu_set_state+0x10a>
		
		case 4: // Use Slider
		oled_pos(0,0);
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(current_state->name, 3);
     9cc:	63 e0       	ldi	r22, 0x03	; 3
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	9b 81       	ldd	r25, Y+3	; 0x03
     9d4:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		break;
     9d8:	0a c0       	rjmp	.+20     	; 0x9ee <menu_set_state+0x10a>
		
		case 5: // Use Joystick
		oled_pos(0,0);
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(current_state->name, 3);
     9e2:	63 e0       	ldi	r22, 0x03	; 3
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	8a 81       	ldd	r24, Y+2	; 0x02
     9e8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ea:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		default:
		break;
	}
	
	return current_state;
}
     9ee:	ce 01       	movw	r24, r28
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	08 95       	ret

000009fc <menu_move_arrow>:

//move menu arrow to navigate among menu levels
menu* menu_move_arrow(int dir, menu* current_state, int* arrow_max, int* arrow_pos)
{
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	eb 01       	movw	r28, r22
     a0a:	7a 01       	movw	r14, r20
     a0c:	89 01       	movw	r16, r18
	if (dir == 1) // left
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	91 05       	cpc	r25, r1
     a12:	d1 f4       	brne	.+52     	; 0xa48 <menu_move_arrow+0x4c>
	{
		current_state = menu_set_state(current_state->parent, *arrow_max, *arrow_pos);
     a14:	f9 01       	movw	r30, r18
     a16:	40 81       	ld	r20, Z
     a18:	51 81       	ldd	r21, Z+1	; 0x01
     a1a:	f7 01       	movw	r30, r14
     a1c:	60 81       	ld	r22, Z
     a1e:	71 81       	ldd	r23, Z+1	; 0x01
     a20:	8c 81       	ldd	r24, Y+4	; 0x04
     a22:	9d 81       	ldd	r25, Y+5	; 0x05
     a24:	0e 94 72 04 	call	0x8e4	; 0x8e4 <menu_set_state>
     a28:	ec 01       	movw	r28, r24
		printf("%s\n\r", current_state->name);
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	8f 93       	push	r24
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	8f 93       	push	r24
     a32:	80 e1       	ldi	r24, 0x10	; 16
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	9f 93       	push	r25
     a38:	8f 93       	push	r24
     a3a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <printf>
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	72 c0       	rjmp	.+228    	; 0xb2c <menu_move_arrow+0x130>
	}
	else if (dir == 2) // right
     a48:	82 30       	cpi	r24, 0x02	; 2
     a4a:	91 05       	cpc	r25, r1
     a4c:	01 f5       	brne	.+64     	; 0xa8e <menu_move_arrow+0x92>
	{
		current_state = menu_set_state(current_state->children[*arrow_pos - 2], *arrow_max, *arrow_pos);
     a4e:	f9 01       	movw	r30, r18
     a50:	40 81       	ld	r20, Z
     a52:	51 81       	ldd	r21, Z+1	; 0x01
     a54:	ca 01       	movw	r24, r20
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	c8 0f       	add	r28, r24
     a5e:	d9 1f       	adc	r29, r25
     a60:	f7 01       	movw	r30, r14
     a62:	60 81       	ld	r22, Z
     a64:	71 81       	ldd	r23, Z+1	; 0x01
     a66:	88 81       	ld	r24, Y
     a68:	99 81       	ldd	r25, Y+1	; 0x01
     a6a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <menu_set_state>
     a6e:	ec 01       	movw	r28, r24
		printf("%s\n\r", current_state->name);
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	8f 93       	push	r24
     a74:	8a 81       	ldd	r24, Y+2	; 0x02
     a76:	8f 93       	push	r24
     a78:	80 e1       	ldi	r24, 0x10	; 16
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	9f 93       	push	r25
     a7e:	8f 93       	push	r24
     a80:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <printf>
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	4f c0       	rjmp	.+158    	; 0xb2c <menu_move_arrow+0x130>
	}
	else if (dir == 3) // up
     a8e:	83 30       	cpi	r24, 0x03	; 3
     a90:	91 05       	cpc	r25, r1
     a92:	19 f5       	brne	.+70     	; 0xada <menu_move_arrow+0xde>
	{
		oled_pos(*arrow_pos,100);
     a94:	64 e6       	ldi	r22, 0x64	; 100
     a96:	f9 01       	movw	r30, r18
     a98:	80 81       	ld	r24, Z
     a9a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(" ", 3);
     a9e:	63 e0       	ldi	r22, 0x03	; 3
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	85 e1       	ldi	r24, 0x15	; 21
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		(*arrow_pos)--;
     aaa:	f8 01       	movw	r30, r16
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	91 83       	std	Z+1, r25	; 0x01
     ab4:	80 83       	st	Z, r24
		if (*arrow_pos == 1)
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	31 f4       	brne	.+12     	; 0xac6 <menu_move_arrow+0xca>
		{
			*arrow_pos = *arrow_max;
     aba:	f7 01       	movw	r30, r14
     abc:	80 81       	ld	r24, Z
     abe:	91 81       	ldd	r25, Z+1	; 0x01
     ac0:	f8 01       	movw	r30, r16
     ac2:	91 83       	std	Z+1, r25	; 0x01
     ac4:	80 83       	st	Z, r24
		}
		oled_pos(*arrow_pos,100);
     ac6:	64 e6       	ldi	r22, 0x64	; 100
     ac8:	f8 01       	movw	r30, r16
     aca:	80 81       	ld	r24, Z
     acc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print_special_char(5);
     ad0:	85 e0       	ldi	r24, 0x05	; 5
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
     ad8:	29 c0       	rjmp	.+82     	; 0xb2c <menu_move_arrow+0x130>
	}
	else if (dir == 4) // down
     ada:	04 97       	sbiw	r24, 0x04	; 4
     adc:	39 f5       	brne	.+78     	; 0xb2c <menu_move_arrow+0x130>
	{
		oled_pos(*arrow_pos,100);
     ade:	64 e6       	ldi	r22, 0x64	; 100
     ae0:	f9 01       	movw	r30, r18
     ae2:	80 81       	ld	r24, Z
     ae4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print(" ", 3);
     ae8:	63 e0       	ldi	r22, 0x03	; 3
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	85 e1       	ldi	r24, 0x15	; 21
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
		(*arrow_pos)++;
     af4:	f8 01       	movw	r30, r16
     af6:	80 81       	ld	r24, Z
     af8:	91 81       	ldd	r25, Z+1	; 0x01
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	91 83       	std	Z+1, r25	; 0x01
     afe:	80 83       	st	Z, r24
		if (*arrow_pos == *arrow_max + 1)
     b00:	f7 01       	movw	r30, r14
     b02:	20 81       	ld	r18, Z
     b04:	31 81       	ldd	r19, Z+1	; 0x01
     b06:	2f 5f       	subi	r18, 0xFF	; 255
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	82 17       	cp	r24, r18
     b0c:	93 07       	cpc	r25, r19
     b0e:	29 f4       	brne	.+10     	; 0xb1a <menu_move_arrow+0x11e>
		{
			*arrow_pos = 2;
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	f8 01       	movw	r30, r16
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	80 83       	st	Z, r24
		}
		oled_pos(*arrow_pos,100);
     b1a:	64 e6       	ldi	r22, 0x64	; 100
     b1c:	f8 01       	movw	r30, r16
     b1e:	80 81       	ld	r24, Z
     b20:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
		oled_print_special_char(5);
     b24:	85 e0       	ldi	r24, 0x05	; 5
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	}
	return current_state;
}
     b2c:	ce 01       	movw	r24, r28
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	08 95       	ret

00000b3c <menu_state_machine_setup>:

menu* menu_state_machine_setup(int* arrow_max, int arrow_pos)
{
     b3c:	af 92       	push	r10
     b3e:	bf 92       	push	r11
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	6c 01       	movw	r12, r24
     b52:	5b 01       	movw	r10, r22
	menu* state2 = NULL; // Start Game
	menu* state3 = NULL; // Set Mode
	menu* state4 = NULL; // Use Slider
	menu* state5 = NULL; // Use Joystick
	
	state1 = (menu*) malloc(sizeof(menu));
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <malloc>
     b5c:	ec 01       	movw	r28, r24
	state2 = (menu*) malloc(sizeof(menu));
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <malloc>
     b66:	7c 01       	movw	r14, r24
	state3 = (menu*) malloc(sizeof(menu));
     b68:	80 e1       	ldi	r24, 0x10	; 16
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <malloc>
     b70:	8c 01       	movw	r16, r24
	state4 = (menu*) malloc(sizeof(menu));
     b72:	80 e1       	ldi	r24, 0x10	; 16
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <malloc>
     b7a:	fc 01       	movw	r30, r24

	state1->name = "Menu";
     b7c:	87 e1       	ldi	r24, 0x17	; 23
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	9b 83       	std	Y+3, r25	; 0x03
     b82:	8a 83       	std	Y+2, r24	; 0x02
	state1->val = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	99 83       	std	Y+1, r25	; 0x01
     b8a:	88 83       	st	Y, r24
	state1->parent = state1;
     b8c:	dd 83       	std	Y+5, r29	; 0x05
     b8e:	cc 83       	std	Y+4, r28	; 0x04
	state1->children[0] = state2;
     b90:	ff 82       	std	Y+7, r15	; 0x07
     b92:	ee 82       	std	Y+6, r14	; 0x06
	state1->children[1] = state3;
     b94:	19 87       	std	Y+9, r17	; 0x09
     b96:	08 87       	std	Y+8, r16	; 0x08
	
	state2->name = "Start Game";
     b98:	8c e1       	ldi	r24, 0x1C	; 28
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	d7 01       	movw	r26, r14
     b9e:	13 96       	adiw	r26, 0x03	; 3
     ba0:	9c 93       	st	X, r25
     ba2:	8e 93       	st	-X, r24
     ba4:	12 97       	sbiw	r26, 0x02	; 2
	state2->val = 2;
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	11 96       	adiw	r26, 0x01	; 1
     bac:	9c 93       	st	X, r25
     bae:	8e 93       	st	-X, r24
	state2->parent = state1;
     bb0:	15 96       	adiw	r26, 0x05	; 5
     bb2:	dc 93       	st	X, r29
     bb4:	ce 93       	st	-X, r28
     bb6:	14 97       	sbiw	r26, 0x04	; 4
	
	state3->name = "Set Motor Controller";
     bb8:	87 e2       	ldi	r24, 0x27	; 39
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	d8 01       	movw	r26, r16
     bbe:	13 96       	adiw	r26, 0x03	; 3
     bc0:	9c 93       	st	X, r25
     bc2:	8e 93       	st	-X, r24
     bc4:	12 97       	sbiw	r26, 0x02	; 2
	state3->val = 3;
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	9c 93       	st	X, r25
     bce:	8e 93       	st	-X, r24
	state3->parent = state1;
     bd0:	15 96       	adiw	r26, 0x05	; 5
     bd2:	dc 93       	st	X, r29
     bd4:	ce 93       	st	-X, r28
     bd6:	14 97       	sbiw	r26, 0x04	; 4
	state3->children[0] = state4;
     bd8:	17 96       	adiw	r26, 0x07	; 7
     bda:	fc 93       	st	X, r31
     bdc:	ee 93       	st	-X, r30
     bde:	16 97       	sbiw	r26, 0x06	; 6
	state3->children[1] = state5;
     be0:	19 96       	adiw	r26, 0x09	; 9
     be2:	1c 92       	st	X, r1
     be4:	1e 92       	st	-X, r1
     be6:	18 97       	sbiw	r26, 0x08	; 8
	
	state4->name = "Slider";
     be8:	8c e3       	ldi	r24, 0x3C	; 60
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	93 83       	std	Z+3, r25	; 0x03
     bee:	82 83       	std	Z+2, r24	; 0x02
	state4->val = 4;
     bf0:	84 e0       	ldi	r24, 0x04	; 4
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
	state4->parent = state3;
     bf8:	15 83       	std	Z+5, r17	; 0x05
     bfa:	04 83       	std	Z+4, r16	; 0x04
	
	state5->name = "Joystick";
     bfc:	e0 e0       	ldi	r30, 0x00	; 0
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	83 e4       	ldi	r24, 0x43	; 67
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	93 83       	std	Z+3, r25	; 0x03
     c06:	82 83       	std	Z+2, r24	; 0x02
	state5->val = 5;
     c08:	85 e0       	ldi	r24, 0x05	; 5
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	91 83       	std	Z+1, r25	; 0x01
     c0e:	80 83       	st	Z, r24
	state5->parent = state3;
     c10:	15 83       	std	Z+5, r17	; 0x05
     c12:	04 83       	std	Z+4, r16	; 0x04
	
	return menu_set_state(state1, arrow_max, arrow_pos);
     c14:	a5 01       	movw	r20, r10
     c16:	b6 01       	movw	r22, r12
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <menu_set_state>
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	bf 90       	pop	r11
     c30:	af 90       	pop	r10
     c32:	08 95       	ret

00000c34 <music_init>:
	oled_ingame_display(score);
}

void music_init()
{
	set_bit(DDRB, PB2);
     c34:	ba 9a       	sbi	0x17, 2	; 23
	set_bit(DDRB, PB3);
     c36:	bb 9a       	sbi	0x17, 3	; 23
	clear_bit(PORTB, PB2);
     c38:	c2 98       	cbi	0x18, 2	; 24
	clear_bit(PORTB, PB3);
     c3a:	c3 98       	cbi	0x18, 3	; 24
     c3c:	08 95       	ret

00000c3e <play_music>:
}

void play_music(int song)
{
	if (song == 0)
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	11 f4       	brne	.+4      	; 0xc46 <play_music+0x8>
		clear_bit(PORTB, PB2);
     c42:	c2 98       	cbi	0x18, 2	; 24
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <play_music+0xe>
	else if (song == 1)
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	11 f4       	brne	.+4      	; 0xc4e <play_music+0x10>
		set_bit(PORTB, PB2);
     c4a:	c2 9a       	sbi	0x18, 2	; 24
	else return;
	set_bit(PORTB, PB3);
     c4c:	c3 9a       	sbi	0x18, 3	; 24
     c4e:	08 95       	ret

00000c50 <can_controller_reset>:
#define CAN_CS PB4

void can_controller_reset()
{
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
	spi_send(MCP_RESET);
     c50:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
     c52:	80 ec       	ldi	r24, 0xC0	; 192
     c54:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
	_delay_ms(10);
     c58:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	9f e2       	ldi	r25, 0x2F	; 47
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <can_controller_reset+0xe>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <can_controller_reset+0x14>
     c64:	00 00       	nop
     c66:	08 95       	ret

00000c68 <can_controller_read>:
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);	
    return 0;
}

uint8_t can_controller_read(uint8_t address)
     c68:	cf 93       	push	r28
     c6a:	c8 2f       	mov	r28, r24
{
	uint8_t result;

     c6c:	c4 98       	cbi	0x18, 4	; 24
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller

     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
	spi_send(MCP_READ); // Send read instruction
     c74:	8c 2f       	mov	r24, r28
     c76:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
	spi_send(address); // Send address
     c7a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <spi_read>
	result = spi_read(); // Read result

     c7e:	c4 9a       	sbi	0x18, 4	; 24
	PORTB |= (1<<CAN_CS); // Deselect CAN-controller

	return result;
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <can_controller_request_to_send>:
	modestat = can_controller_read(MCP_CANSTAT);
	return (modestat & MODE_MASK);
}

void can_controller_request_to_send()
{
     c84:	c4 98       	cbi	0x18, 4	; 24
		PORTB &= ~(1<<CAN_CS);
		
		// The buffer types are MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 and MCP_RTS_ALL
     c86:	81 e8       	ldi	r24, 0x81	; 129
     c88:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
		spi_send(MCP_RTS_TX0);

     c8c:	88 b3       	in	r24, 0x18	; 24
     c8e:	8f 6e       	ori	r24, 0xEF	; 239
     c90:	88 bb       	out	0x18, r24	; 24
     c92:	08 95       	ret

00000c94 <can_controller_bit_modify>:
		PORTB |= ~(1<<CAN_CS);
}

void can_controller_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	18 2f       	mov	r17, r24
     c9c:	d6 2f       	mov	r29, r22
     c9e:	c4 2f       	mov	r28, r20
{
     ca0:	c4 98       	cbi	0x18, 4	; 24
		PORTB &= ~(1<<CAN_CS); // Select CAN-controller

     ca2:	85 e0       	ldi	r24, 0x05	; 5
     ca4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
		spi_send(MCP_BITMOD); // Send read instruction
     ca8:	81 2f       	mov	r24, r17
     caa:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
		spi_send(address); // Send address
     cae:	8d 2f       	mov	r24, r29
     cb0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
		spi_send(mask); // Send mask,
     cb4:	8c 2f       	mov	r24, r28
     cb6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
		spi_send(data); // Send data

     cba:	c4 9a       	sbi	0x18, 4	; 24
		PORTB |= (1<<CAN_CS); // Deselect CAN-controller
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	08 95       	ret

00000cc4 <can_controller_set_mode>:
	return result;
}

uint8_t can_controller_set_mode(uint8_t mode)
{
	uint8_t modestat;
     cc4:	48 2f       	mov	r20, r24
     cc6:	60 ee       	ldi	r22, 0xE0	; 224
     cc8:	8f e0       	ldi	r24, 0x0F	; 15
     cca:	0e 94 4a 06 	call	0xc94	; 0xc94 <can_controller_bit_modify>
	can_controller_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     cce:	8e e0       	ldi	r24, 0x0E	; 14
     cd0:	0e 94 34 06 	call	0xc68	; 0xc68 <can_controller_read>
	modestat = can_controller_read(MCP_CANSTAT);
	return (modestat & MODE_MASK);
     cd4:	80 7e       	andi	r24, 0xE0	; 224
     cd6:	08 95       	ret

00000cd8 <can_controller_write>:
	PORTB |= ~(1<<CAN_CS);

	return status;
}

void can_controller_write(uint8_t address, uint8_t data)
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	d8 2f       	mov	r29, r24
     cde:	c6 2f       	mov	r28, r22
{
     ce0:	c4 98       	cbi	0x18, 4	; 24
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
	
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
	spi_send(MCP_WRITE);
     ce8:	8d 2f       	mov	r24, r29
     cea:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
	spi_send(address);
     cee:	8c 2f       	mov	r24, r28
     cf0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <spi_send>
	spi_send(data);

     cf4:	c4 9a       	sbi	0x18, 4	; 24
	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <can_controller_init>:
{
    uint8_t value;
	

    //spi_init(); // Initialize SPI
    can_controller_reset(); // Send reset-command
     cfc:	0e 94 28 06 	call	0xc50	; 0xc50 <can_controller_reset>
	

    // Self-test
     d00:	8e e0       	ldi	r24, 0x0E	; 14
     d02:	0e 94 34 06 	call	0xc68	; 0xc68 <can_controller_read>
    value = can_controller_read(MCP_CANSTAT);
     d06:	98 2f       	mov	r25, r24
     d08:	90 7e       	andi	r25, 0xE0	; 224
     d0a:	90 38       	cpi	r25, 0x80	; 128
     d0c:	71 f0       	breq	.+28     	; 0xd2a <can_controller_init+0x2e>
    if ((value & MODE_MASK)  != MODE_CONFIG) 
    {
     d0e:	1f 92       	push	r1
     d10:	8f 93       	push	r24
     d12:	8c e4       	ldi	r24, 0x4C	; 76
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	9f 93       	push	r25
     d18:	8f 93       	push	r24
     d1a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <printf>
        printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	08 95       	ret
        return 1;
    }
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
     d2a:	43 e0       	ldi	r20, 0x03	; 3
     d2c:	6f ef       	ldi	r22, 0xFF	; 255
     d2e:	8b e2       	ldi	r24, 0x2B	; 43
     d30:	0e 94 4a 06 	call	0xc94	; 0xc94 <can_controller_bit_modify>
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000011);
     d34:	44 e6       	ldi	r20, 0x64	; 100
     d36:	64 e6       	ldi	r22, 0x64	; 100
     d38:	80 e6       	ldi	r24, 0x60	; 96
     d3a:	0e 94 4a 06 	call	0xc94	; 0xc94 <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100100, 0b01100100);
	//printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
     d3e:	40 e6       	ldi	r20, 0x60	; 96
     d40:	60 e6       	ldi	r22, 0x60	; 96
     d42:	80 e7       	ldi	r24, 0x70	; 112
     d44:	0e 94 4a 06 	call	0xc94	; 0xc94 <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

    
	//Set lower ID reg to zero
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	82 e3       	ldi	r24, 0x32	; 50
     d4c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
	can_controller_write(MCP_TXB0SIDL, 0x00);	
     d50:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
     d52:	08 95       	ret

00000d54 <can_init>:
}

void can_init ()
{
	//set loopback mode
	uint8_t mode = can_controller_set_mode(MODE_NORMAL);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 62 06 	call	0xcc4	; 0xcc4 <can_controller_set_mode>
	if (mode != MODE_NORMAL)
     d5a:	88 23       	and	r24, r24
     d5c:	41 f0       	breq	.+16     	; 0xd6e <can_init+0x1a>
	{
		printf("Could not set normal mode! I am sorry!\n\r");
     d5e:	89 e9       	ldi	r24, 0x99	; 153
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <printf>
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
	//can_controller_bit_modify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
	//can_controller_write(MCP_CANINTE, MCP_RX_INT);
	
	// SET UP INTERRUPTION TO RECIEVE MESSAGE
	//DDRD &= ~(1<<PD3);
	cli();
     d6e:	f8 94       	cli
	MCUCR |= (1 << ISC11);
     d70:	85 b7       	in	r24, 0x35	; 53
     d72:	88 60       	ori	r24, 0x08	; 8
     d74:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);	//interrupt on the falling edge
     d76:	85 b7       	in	r24, 0x35	; 53
     d78:	8b 7f       	andi	r24, 0xFB	; 251
     d7a:	85 bf       	out	0x35, r24	; 53
	can_controller_write(MCP_CANINTF, 0x00);
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	8c e2       	ldi	r24, 0x2C	; 44
     d80:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
	can_controller_write(MCP_EFLG, 0x00);
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	8d e2       	ldi	r24, 0x2D	; 45
     d88:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
	GICR |= (1 << INT1);						//enable external interrupt INT1
     d8c:	8b b7       	in	r24, 0x3b	; 59
     d8e:	80 68       	ori	r24, 0x80	; 128
     d90:	8b bf       	out	0x3b, r24	; 59
	sei();									//enable Global Interrupt
     d92:	78 94       	sei
     d94:	08 95       	ret

00000d96 <can_send_msg>:
}

uint8_t can_send_msg(can_message* msg)
{
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	ec 01       	movw	r28, r24
	//writhe higher id
	can_controller_write(MCP_TXB0SIDH, msg->id);
     da0:	68 81       	ld	r22, Y
     da2:	81 e3       	ldi	r24, 0x31	; 49
     da4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
	
	// Define data length of message
	uint8_t data_length = msg->length;
     da8:	09 81       	ldd	r16, Y+1	; 0x01
	can_controller_write(MCP_TXB0DLC, msg->length);
     daa:	60 2f       	mov	r22, r16
     dac:	85 e3       	ldi	r24, 0x35	; 53
     dae:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
     db2:	22 96       	adiw	r28, 0x02	; 2
	for (uint8_t byte = 0; byte < data_length; byte++) {
     db4:	00 23       	and	r16, r16
     db6:	49 f0       	breq	.+18     	; 0xdca <can_send_msg+0x34>
     db8:	0a 5c       	subi	r16, 0xCA	; 202
     dba:	16 e3       	ldi	r17, 0x36	; 54
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
     dbc:	69 91       	ld	r22, Y+
     dbe:	81 2f       	mov	r24, r17
     dc0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
     dc4:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = msg->length;
	can_controller_write(MCP_TXB0DLC, msg->length);
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     dc6:	10 13       	cpse	r17, r16
     dc8:	f9 cf       	rjmp	.-14     	; 0xdbc <can_send_msg+0x26>
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
	}

	// Request to send message, send if successful
	can_controller_request_to_send();
     dca:	0e 94 42 06 	call	0xc84	; 0xc84 <can_controller_request_to_send>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 ef       	ldi	r25, 0xF0	; 240
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <can_send_msg+0x3c>
	// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE));
	// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF));
	// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
	// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	08 95       	ret

00000de0 <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	eb 01       	movw	r28, r22

	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
     dea:	18 2f       	mov	r17, r24
     dec:	12 95       	swap	r17
     dee:	10 7f       	andi	r17, 0xF0	; 240
     df0:	81 e6       	ldi	r24, 0x61	; 97
     df2:	81 0f       	add	r24, r17
     df4:	0e 94 34 06 	call	0xc68	; 0xc68 <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
     df8:	85 e6       	ldi	r24, 0x65	; 101
     dfa:	81 0f       	add	r24, r17
     dfc:	0e 94 34 06 	call	0xc68	; 0xc68 <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
     e00:	98 2f       	mov	r25, r24
     e02:	9f 70       	andi	r25, 0x0F	; 15
     e04:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
     e06:	88 23       	and	r24, r24
     e08:	59 f0       	breq	.+22     	; 0xe20 <can_recieve_msg+0x40>
     e0a:	1a 59       	subi	r17, 0x9A	; 154
     e0c:	22 96       	adiw	r28, 0x02	; 2
     e0e:	08 2f       	mov	r16, r24
     e10:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
     e12:	81 2f       	mov	r24, r17
     e14:	0e 94 34 06 	call	0xc68	; 0xc68 <can_controller_read>
     e18:	89 93       	st	Y+, r24
     e1a:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
     e1c:	10 13       	cpse	r17, r16
     e1e:	f9 cf       	rjmp	.-14     	; 0xe12 <can_recieve_msg+0x32>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}
	//can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
	// 	can_controller_write(MCP_CANINTF, 0x00);
	// 	can_controller_write(MCP_EFLG, 0x00);
}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <__vector_2>:
#include "can_controller_driver.h"
#include "MCP2515.h"
#include "game.h"

ISR(INT1_vect)
{
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	2f 93       	push	r18
     e3c:	3f 93       	push	r19
     e3e:	4f 93       	push	r20
     e40:	5f 93       	push	r21
     e42:	6f 93       	push	r22
     e44:	7f 93       	push	r23
     e46:	8f 93       	push	r24
     e48:	9f 93       	push	r25
     e4a:	af 93       	push	r26
     e4c:	bf 93       	push	r27
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
	cli();
     e56:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
     e58:	8a e0       	ldi	r24, 0x0A	; 10
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <malloc>
     e60:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	//printf("message INTERRUPTION recieved\n\r");
	//print(my_buf);
	uint8_t canInt = can_controller_read(MCP_CANINTF);
     e62:	8c e2       	ldi	r24, 0x2C	; 44
     e64:	0e 94 34 06 	call	0xc68	; 0xc68 <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
     e68:	80 ff       	sbrs	r24, 0
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <__vector_2+0x54>
	{
		can_recieve_msg(0, msg);
     e6c:	be 01       	movw	r22, r28
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 f0 06 	call	0xde0	; 0xde0 <can_recieve_msg>
// 		printf("DATA ON RX0:\n\r");
// 		for (uint8_t byte = 0; byte < msg->length; byte++) {
// 			printf("%d \n\r", msg->data[byte]);
// 		}

		int score = (int) msg->data[0];
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
		oled_ingame_display(score);
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 8f 0b 	call	0x171e	; 0x171e <oled_ingame_display>
     e7c:	34 c0       	rjmp	.+104    	; 0xee6 <__vector_2+0xbc>
	}else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
     e7e:	81 ff       	sbrs	r24, 1
     e80:	25 c0       	rjmp	.+74     	; 0xecc <__vector_2+0xa2>
	{
		can_recieve_msg(1, msg);
     e82:	be 01       	movw	r22, r28
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 f0 06 	call	0xde0	; 0xde0 <can_recieve_msg>

		printf("DATA ON RX1\n\r");
     e8a:	82 ec       	ldi	r24, 0xC2	; 194
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	9f 93       	push	r25
     e90:	8f 93       	push	r24
     e92:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	88 23       	and	r24, r24
     e9e:	19 f1       	breq	.+70     	; 0xee6 <__vector_2+0xbc>
     ea0:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
     ea2:	00 ed       	ldi	r16, 0xD0	; 208
     ea4:	11 e0       	ldi	r17, 0x01	; 1
     ea6:	fe 01       	movw	r30, r28
     ea8:	ef 0d       	add	r30, r15
     eaa:	f1 1d       	adc	r31, r1
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	1f 92       	push	r1
     eb0:	8f 93       	push	r24
     eb2:	1f 93       	push	r17
     eb4:	0f 93       	push	r16
     eb6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <printf>
	}else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
	{
		can_recieve_msg(1, msg);

		printf("DATA ON RX1\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
     eba:	f3 94       	inc	r15
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	f8 16       	cp	r15, r24
     ec8:	70 f3       	brcs	.-36     	; 0xea6 <__vector_2+0x7c>
     eca:	0d c0       	rjmp	.+26     	; 0xee6 <__vector_2+0xbc>
			printf("%d \n\r", msg->data[byte]);
		}
	}
	else
	{
		can_controller_write(MCP_CANINTF, 0x00);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	8c e2       	ldi	r24, 0x2C	; 44
     ed0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
		//can_controller_write(MCP_EFLG, 0x00);
		free(msg);
     ed4:	ce 01       	movw	r24, r28
     ed6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <free>
		can_controller_write(MCP_CANINTF, 0x00);
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	8c e2       	ldi	r24, 0x2C	; 44
     ede:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
		sei();
     ee2:	78 94       	sei
		return;
     ee4:	0c c0       	rjmp	.+24     	; 0xefe <__vector_2+0xd4>
	}
	//printf("before:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	can_controller_write(MCP_CANINTF, 0x00);
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	8c e2       	ldi	r24, 0x2C	; 44
     eea:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
	//can_controller_write(MCP_EFLG, 0x00);
	//printf("aftah:MCP_EFLG=%2x\tMCPEFLG\tMCP_CANINTF=%2x\t\n\r",can_controller_read(MCP_EFLG), can_controller_read(MCP_CANINTF));
	//printf("===========================================\n\r");
	free(msg);
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <free>
	can_controller_write(MCP_CANINTF, 0x00);
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	8c e2       	ldi	r24, 0x2C	; 44
     ef8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <can_controller_write>
	sei();
     efc:	78 94       	sei
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	bf 91       	pop	r27
     f08:	af 91       	pop	r26
     f0a:	9f 91       	pop	r25
     f0c:	8f 91       	pop	r24
     f0e:	7f 91       	pop	r23
     f10:	6f 91       	pop	r22
     f12:	5f 91       	pop	r21
     f14:	4f 91       	pop	r20
     f16:	3f 91       	pop	r19
     f18:	2f 91       	pop	r18
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <joystick_init>:
static int y_middle_pos;

void joystick_init()
{
	x_middle_pos = ADC_read(2);
	y_middle_pos = ADC_read(1);
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
     f32:	90 93 4b 02 	sts	0x024B, r25
     f36:	80 93 4a 02 	sts	0x024A, r24
}
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
     f42:	90 93 49 02 	sts	0x0249, r25
     f46:	80 93 48 02 	sts	0x0248, r24
     f4a:	08 95       	ret

00000f4c <get_joystick_position>:

struct Position get_joystick_position()
{
	struct Position j_position;
     f4c:	8f 92       	push	r8
     f4e:	9f 92       	push	r9
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
	
	float x_step = (255.0 - x_middle_pos)/100.0;
	float y_step = (255.0 - y_middle_pos)/100.0;
     f60:	60 91 4a 02 	lds	r22, 0x024A
     f64:	70 91 4b 02 	lds	r23, 0x024B
     f68:	88 27       	eor	r24, r24
     f6a:	77 fd       	sbrc	r23, 7
     f6c:	80 95       	com	r24
     f6e:	98 2f       	mov	r25, r24
     f70:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatsisf>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	8f e7       	ldi	r24, 0x7F	; 127
     f7e:	93 e4       	ldi	r25, 0x43	; 67
     f80:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__subsf3>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	48 ec       	ldi	r20, 0xC8	; 200
     f8a:	52 e4       	ldi	r21, 0x42	; 66
     f8c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__divsf3>
     f90:	4b 01       	movw	r8, r22
     f92:	5c 01       	movw	r10, r24
	
     f94:	60 91 48 02 	lds	r22, 0x0248
     f98:	70 91 49 02 	lds	r23, 0x0249
     f9c:	88 27       	eor	r24, r24
     f9e:	77 fd       	sbrc	r23, 7
     fa0:	80 95       	com	r24
     fa2:	98 2f       	mov	r25, r24
     fa4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatsisf>
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	8f e7       	ldi	r24, 0x7F	; 127
     fb2:	93 e4       	ldi	r25, 0x43	; 67
     fb4:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__subsf3>
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	48 ec       	ldi	r20, 0xC8	; 200
     fbe:	52 e4       	ldi	r21, 0x42	; 66
     fc0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__divsf3>
     fc4:	6b 01       	movw	r12, r22
     fc6:	7c 01       	movw	r14, r24
	int x_range = ADC_read(2);
	int y_range = ADC_read(1);
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
     fd0:	ec 01       	movw	r28, r24

     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
	j_position.x = (int) ((x_range - x_middle_pos)/x_step);
	j_position.y = (int) ((y_range - y_middle_pos)/y_step);
	
     fda:	20 91 48 02 	lds	r18, 0x0248
     fde:	30 91 49 02 	lds	r19, 0x0249
     fe2:	82 1b       	sub	r24, r18
     fe4:	93 0b       	sbc	r25, r19
     fe6:	bc 01       	movw	r22, r24
     fe8:	88 27       	eor	r24, r24
     fea:	77 fd       	sbrc	r23, 7
     fec:	80 95       	com	r24
     fee:	98 2f       	mov	r25, r24
     ff0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatsisf>
     ff4:	a7 01       	movw	r20, r14
     ff6:	96 01       	movw	r18, r12
     ff8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__divsf3>
     ffc:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixsfsi>
    1000:	6b 01       	movw	r12, r22
    1002:	7c 01       	movw	r14, r24
	
	int x_range = ADC_read(2);
	int y_range = ADC_read(1);

	j_position.x = (int) ((x_range - x_middle_pos)/x_step);
	j_position.y = (int) ((y_range - y_middle_pos)/y_step);
    1004:	80 91 4a 02 	lds	r24, 0x024A
    1008:	90 91 4b 02 	lds	r25, 0x024B
    100c:	be 01       	movw	r22, r28
    100e:	68 1b       	sub	r22, r24
    1010:	79 0b       	sbc	r23, r25
    1012:	88 27       	eor	r24, r24
    1014:	77 fd       	sbrc	r23, 7
    1016:	80 95       	com	r24
    1018:	98 2f       	mov	r25, r24
    101a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatsisf>
    101e:	a5 01       	movw	r20, r10
    1020:	94 01       	movw	r18, r8
    1022:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__divsf3>
    1026:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixsfsi>
    102a:	4b 01       	movw	r8, r22
    102c:	5c 01       	movw	r10, r24
	
	return j_position;
}
    102e:	b4 01       	movw	r22, r8
    1030:	c6 01       	movw	r24, r12

    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	9f 90       	pop	r9
    1044:	8f 90       	pop	r8
    1046:	08 95       	ret

00001048 <get_joystick_direction>:
int get_joystick_direction(){
	struct Position j_pos;
	
	j_pos = get_joystick_position();
	
    1048:	0e 94 a6 07 	call	0xf4c	; 0xf4c <get_joystick_position>
    104c:	9b 01       	movw	r18, r22
    104e:	ac 01       	movw	r20, r24
	if (j_pos.x >= -10 && j_pos.x <= 10 && j_pos.y >= -10 && j_pos.y <= 10)
	{
    1050:	fb 01       	movw	r30, r22
    1052:	3a 96       	adiw	r30, 0x0a	; 10
    1054:	75 97       	sbiw	r30, 0x15	; 21
    1056:	20 f4       	brcc	.+8      	; 0x1060 <get_joystick_direction+0x18>
    1058:	fc 01       	movw	r30, r24
    105a:	3a 96       	adiw	r30, 0x0a	; 10
    105c:	75 97       	sbiw	r30, 0x15	; 21
    105e:	c8 f1       	brcs	.+114    	; 0x10d2 <get_joystick_direction+0x8a>
		return NEUTRAL;
	} else if (j_pos.x < -10 && abs(j_pos.x) >= abs(j_pos.y))
	{
    1060:	26 3f       	cpi	r18, 0xF6	; 246
    1062:	ef ef       	ldi	r30, 0xFF	; 255
    1064:	3e 07       	cpc	r19, r30
    1066:	8c f4       	brge	.+34     	; 0x108a <get_joystick_direction+0x42>
    1068:	db 01       	movw	r26, r22
    106a:	33 23       	and	r19, r19
    106c:	24 f4       	brge	.+8      	; 0x1076 <get_joystick_direction+0x2e>
    106e:	aa 27       	eor	r26, r26
    1070:	bb 27       	eor	r27, r27
    1072:	a6 1b       	sub	r26, r22
    1074:	b7 0b       	sbc	r27, r23
    1076:	fc 01       	movw	r30, r24
    1078:	55 23       	and	r21, r21
    107a:	24 f4       	brge	.+8      	; 0x1084 <get_joystick_direction+0x3c>
    107c:	ee 27       	eor	r30, r30
    107e:	ff 27       	eor	r31, r31
    1080:	e8 1b       	sub	r30, r24
    1082:	f9 0b       	sbc	r31, r25
    1084:	ae 17       	cp	r26, r30
    1086:	bf 07       	cpc	r27, r31
    1088:	3c f5       	brge	.+78     	; 0x10d8 <get_joystick_direction+0x90>
		return LEFT;
	} else if (j_pos.x > 10 && j_pos.x >= abs(j_pos.y))
	{
    108a:	2b 30       	cpi	r18, 0x0B	; 11
    108c:	31 05       	cpc	r19, r1
    108e:	54 f0       	brlt	.+20     	; 0x10a4 <get_joystick_direction+0x5c>
    1090:	fc 01       	movw	r30, r24
    1092:	55 23       	and	r21, r21
    1094:	24 f4       	brge	.+8      	; 0x109e <get_joystick_direction+0x56>
    1096:	ee 27       	eor	r30, r30
    1098:	ff 27       	eor	r31, r31
    109a:	e8 1b       	sub	r30, r24
    109c:	f9 0b       	sbc	r31, r25
    109e:	2e 17       	cp	r18, r30
    10a0:	3f 07       	cpc	r19, r31
    10a2:	ec f4       	brge	.+58     	; 0x10de <get_joystick_direction+0x96>
		return RIGHT;
	} else if (j_pos.y < -10 && abs(j_pos.y) > abs(j_pos.x))
	{
    10a4:	46 3f       	cpi	r20, 0xF6	; 246
    10a6:	5f 4f       	sbci	r21, 0xFF	; 255
    10a8:	ec f4       	brge	.+58     	; 0x10e4 <get_joystick_direction+0x9c>
    10aa:	ac 01       	movw	r20, r24
    10ac:	99 23       	and	r25, r25
    10ae:	24 f4       	brge	.+8      	; 0x10b8 <get_joystick_direction+0x70>
    10b0:	44 27       	eor	r20, r20
    10b2:	55 27       	eor	r21, r21
    10b4:	48 1b       	sub	r20, r24
    10b6:	59 0b       	sbc	r21, r25
    10b8:	9b 01       	movw	r18, r22
    10ba:	77 23       	and	r23, r23
    10bc:	24 f4       	brge	.+8      	; 0x10c6 <get_joystick_direction+0x7e>
    10be:	22 27       	eor	r18, r18
    10c0:	33 27       	eor	r19, r19
    10c2:	26 1b       	sub	r18, r22
    10c4:	37 0b       	sbc	r19, r23
    10c6:	24 17       	cp	r18, r20
    10c8:	35 07       	cpc	r19, r21
    10ca:	7c f0       	brlt	.+30     	; 0x10ea <get_joystick_direction+0xa2>
		return DOWN;
	}else 
	{
		return UP;
	}
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	08 95       	ret
	j_pos = get_joystick_position();
	
	if (j_pos.x >= -10 && j_pos.x <= 10 && j_pos.y >= -10 && j_pos.y <= 10)
	{
		return NEUTRAL;
	} else if (j_pos.x < -10 && abs(j_pos.x) >= abs(j_pos.y))
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	08 95       	ret
	{
		return LEFT;
	} else if (j_pos.x > 10 && j_pos.x >= abs(j_pos.y))
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	08 95       	ret
	{
		return RIGHT;
	} else if (j_pos.y < -10 && abs(j_pos.y) > abs(j_pos.x))
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	08 95       	ret
	{
		return DOWN;
	}else 
	{
		return UP;
	}
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	08 95       	ret
	{
		return RIGHT;
	} else if (j_pos.y < -10 && abs(j_pos.y) > abs(j_pos.x))
	{
		return DOWN;
	}else 
    10ea:	84 e0       	ldi	r24, 0x04	; 4
    10ec:	90 e0       	ldi	r25, 0x00	; 0
	{
		return UP;
	}
}

    10ee:	08 95       	ret

000010f0 <get_left_slider>:
int get_left_slider()
{
	int range = ADC_read(3);
	
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
	return (int) ((255 - range)/2.55);
}
    10f8:	6f ef       	ldi	r22, 0xFF	; 255
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	68 1b       	sub	r22, r24
    10fe:	79 0b       	sbc	r23, r25
    1100:	88 27       	eor	r24, r24
    1102:	77 fd       	sbrc	r23, 7
    1104:	80 95       	com	r24
    1106:	98 2f       	mov	r25, r24
    1108:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatsisf>
    110c:	23 e3       	ldi	r18, 0x33	; 51
    110e:	33 e3       	ldi	r19, 0x33	; 51
    1110:	43 e2       	ldi	r20, 0x23	; 35
    1112:	50 e4       	ldi	r21, 0x40	; 64
    1114:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__divsf3>
    1118:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixsfsi>

    111c:	cb 01       	movw	r24, r22
    111e:	08 95       	ret

00001120 <get_right_slider>:
int get_right_slider()
{
	int range = ADC_read(4);
	
    1120:	84 e0       	ldi	r24, 0x04	; 4
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 27 04 	call	0x84e	; 0x84e <ADC_read>
	return (int) (range/2.55);
}
    1128:	bc 01       	movw	r22, r24
    112a:	88 27       	eor	r24, r24
    112c:	77 fd       	sbrc	r23, 7
    112e:	80 95       	com	r24
    1130:	98 2f       	mov	r25, r24
    1132:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatsisf>
    1136:	23 e3       	ldi	r18, 0x33	; 51
    1138:	33 e3       	ldi	r19, 0x33	; 51
    113a:	43 e2       	ldi	r20, 0x23	; 35
    113c:	50 e4       	ldi	r21, 0x40	; 64
    113e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__divsf3>
    1142:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixsfsi>

    1146:	cb 01       	movw	r24, r22
    1148:	08 95       	ret

0000114a <get_joystick_right_button>:
int get_joystick_right_button()
{
	uint8_t push = (PINB & 0b00000001);
	
    114a:	86 b3       	in	r24, 0x16	; 22
	return push;
}

    114c:	81 70       	andi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	08 95       	ret

00001152 <get_joystick_left_button>:
int get_joystick_left_button()
{
	uint8_t push = (PINB & 0b00000010);
	
    1152:	86 b3       	in	r24, 0x16	; 22
    1154:	82 70       	andi	r24, 0x02	; 2
	return push;
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	08 95       	ret

0000115a <main>:
	PORTA = 0b00000000;            // PC0 = Low = 0v
	_delay_ms(1000);                // wait 500 milliseconds
}

int main(void)
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	00 d0       	rcall	.+0      	; 0x1160 <main+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <main+0x8>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	// Initializations
	USART_Init(MYUBRR);
    1166:	8f e1       	ldi	r24, 0x1F	; 31
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <USART_Init>
	SRAM_init();
    116e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <SRAM_init>
	joystick_init();
    1172:	0e 94 95 07 	call	0xf2a	; 0xf2a <joystick_init>
	oled_init();
    1176:	0e 94 05 09 	call	0x120a	; 0x120a <oled_init>
	spi_init();
    117a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <spi_init>
	can_controller_init();
    117e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <can_controller_init>
	can_init();
    1182:	0e 94 aa 06 	call	0xd54	; 0xd54 <can_init>
	music_init();
    1186:	0e 94 1a 06 	call	0xc34	; 0xc34 <music_init>
	printf("START ============================\n\r");
    118a:	86 ed       	ldi	r24, 0xD6	; 214
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	9f 93       	push	r25
    1190:	8f 93       	push	r24
    1192:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <printf>
	
	int arrow_pos = 2;
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
	int arrow_max = 2;
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
	
	menu* current_state = menu_state_machine_setup(&arrow_max, arrow_pos);
    11a2:	62 e0       	ldi	r22, 0x02	; 2
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	ce 01       	movw	r24, r28
    11a8:	03 96       	adiw	r24, 0x03	; 3
    11aa:	0e 94 9e 05 	call	0xb3c	; 0xb3c <menu_state_machine_setup>
    11ae:	8c 01       	movw	r16, r24
	
	enum direction dir = NEUTRAL;
	enum direction old_dir = NEUTRAL;
 	oled_animate_ntnu();
    11b0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <oled_animate_ntnu>
    11b4:	2f ef       	ldi	r18, 0xFF	; 255
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	9e e0       	ldi	r25, 0x0E	; 14
    11ba:	21 50       	subi	r18, 0x01	; 1
    11bc:	80 40       	sbci	r24, 0x00	; 0
    11be:	90 40       	sbci	r25, 0x00	; 0
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <main+0x60>
    11c2:	00 c0       	rjmp	.+0      	; 0x11c4 <main+0x6a>
    11c4:	00 00       	nop
	_delay_ms(1000);
	play_music(1);
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 1f 06 	call	0xc3e	; 0xc3e <play_music>
 	oled_animate_mario_large();
    11ce:	0e 94 33 0a 	call	0x1466	; 0x1466 <oled_animate_mario_large>
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
	int arrow_pos = 2;
	int arrow_max = 2;
	
	menu* current_state = menu_state_machine_setup(&arrow_max, arrow_pos);
	
	enum direction dir = NEUTRAL;
    11d6:	e1 2c       	mov	r14, r1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <main+0x82>
    11da:	ef 2c       	mov	r14, r15
// 	_delay_ms(1000);
// 	play_music(1);
	
	while (1)
	{
		send_multi_board();
    11dc:	0e 94 32 04 	call	0x864	; 0x864 <send_multi_board>
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 ef       	ldi	r25, 0xF0	; 240
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <main+0x8a>
		_delay_ms(50);

		old_dir = dir;
		dir = get_joystick_direction();
    11e8:	0e 94 24 08 	call	0x1048	; 0x1048 <get_joystick_direction>
    11ec:	f8 2e       	mov	r15, r24
		
		if (old_dir == NEUTRAL)
    11ee:	e1 10       	cpse	r14, r1
    11f0:	f4 cf       	rjmp	.-24     	; 0x11da <main+0x80>
		{
			current_state = menu_move_arrow(dir, current_state, &arrow_max, &arrow_pos);
    11f2:	9e 01       	movw	r18, r28
    11f4:	2f 5f       	subi	r18, 0xFF	; 255
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	ae 01       	movw	r20, r28
    11fa:	4d 5f       	subi	r20, 0xFD	; 253
    11fc:	5f 4f       	sbci	r21, 0xFF	; 255
    11fe:	b8 01       	movw	r22, r16
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 fe 04 	call	0x9fc	; 0x9fc <menu_move_arrow>
    1206:	8c 01       	movw	r16, r24
    1208:	e8 cf       	rjmp	.-48     	; 0x11da <main+0x80>

0000120a <oled_init>:
}

void oled_write_cmd(unsigned char ins_c)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_MEM; // OLED Command
	ext_oled[0] = ins_c;
    120a:	e0 e0       	ldi	r30, 0x00	; 0
    120c:	f0 e1       	ldi	r31, 0x10	; 16
    120e:	8e ea       	ldi	r24, 0xAE	; 174
    1210:	80 83       	st	Z, r24
    1212:	81 ea       	ldi	r24, 0xA1	; 161
    1214:	80 83       	st	Z, r24
    1216:	8a ed       	ldi	r24, 0xDA	; 218
    1218:	80 83       	st	Z, r24
    121a:	82 e1       	ldi	r24, 0x12	; 18
    121c:	80 83       	st	Z, r24
    121e:	88 ec       	ldi	r24, 0xC8	; 200
    1220:	80 83       	st	Z, r24
    1222:	88 ea       	ldi	r24, 0xA8	; 168
    1224:	80 83       	st	Z, r24
    1226:	8f e3       	ldi	r24, 0x3F	; 63
    1228:	80 83       	st	Z, r24
    122a:	85 ed       	ldi	r24, 0xD5	; 213
    122c:	80 83       	st	Z, r24
    122e:	80 e8       	ldi	r24, 0x80	; 128
    1230:	80 83       	st	Z, r24
    1232:	81 e8       	ldi	r24, 0x81	; 129
    1234:	80 83       	st	Z, r24
    1236:	80 e5       	ldi	r24, 0x50	; 80
    1238:	80 83       	st	Z, r24
    123a:	89 ed       	ldi	r24, 0xD9	; 217
    123c:	80 83       	st	Z, r24
    123e:	81 e2       	ldi	r24, 0x21	; 33
    1240:	80 83       	st	Z, r24
    1242:	80 e2       	ldi	r24, 0x20	; 32
    1244:	80 83       	st	Z, r24
    1246:	10 82       	st	Z, r1
    1248:	8b ed       	ldi	r24, 0xDB	; 219
    124a:	80 83       	st	Z, r24
    124c:	80 e3       	ldi	r24, 0x30	; 48
    124e:	80 83       	st	Z, r24
    1250:	8d ea       	ldi	r24, 0xAD	; 173
    1252:	80 83       	st	Z, r24
    1254:	10 82       	st	Z, r1
    1256:	84 ea       	ldi	r24, 0xA4	; 164
    1258:	80 83       	st	Z, r24
    125a:	86 ea       	ldi	r24, 0xA6	; 166
    125c:	80 83       	st	Z, r24
    125e:	8f ea       	ldi	r24, 0xAF	; 175
    1260:	80 83       	st	Z, r24
    1262:	08 95       	ret

00001264 <oled_goto_line>:
    1264:	e0 e0       	ldi	r30, 0x00	; 0
    1266:	f0 e1       	ldi	r31, 0x10	; 16
    1268:	92 e2       	ldi	r25, 0x22	; 34
    126a:	90 83       	st	Z, r25
    126c:	80 83       	st	Z, r24
    126e:	87 e0       	ldi	r24, 0x07	; 7
    1270:	80 83       	st	Z, r24
    1272:	08 95       	ret

00001274 <oled_goto_column>:
    1274:	e0 e0       	ldi	r30, 0x00	; 0
    1276:	f0 e1       	ldi	r31, 0x10	; 16
    1278:	91 e2       	ldi	r25, 0x21	; 33
    127a:	90 83       	st	Z, r25
    127c:	80 83       	st	Z, r24
    127e:	8f e7       	ldi	r24, 0x7F	; 127
    1280:	80 83       	st	Z, r24
    1282:	08 95       	ret

00001284 <oled_reset>:
}

//clear OLED screen
void oled_reset()
{
	oled_goto_line(0);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	0e 94 32 09 	call	0x1264	; 0x1264 <oled_goto_line>
	oled_goto_column(0);
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 3a 09 	call	0x1274	; 0x1274 <oled_goto_column>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	94 e0       	ldi	r25, 0x04	; 4
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1294:	e0 e0       	ldi	r30, 0x00	; 0
    1296:	f2 e1       	ldi	r31, 0x12	; 18
    1298:	10 82       	st	Z, r1
    129a:	01 97       	sbiw	r24, 0x01	; 1
//clear OLED screen
void oled_reset()
{
	oled_goto_line(0);
	oled_goto_column(0);
	for(int i = 0; i < 1024; i++)
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	e1 f7       	brne	.-8      	; 0x1298 <oled_reset+0x14>
	{
		oled_write_data(0x00);
	}
}
    12a0:	08 95       	ret

000012a2 <oled_pos>:
	}
}

//go to page and column (0 - 7 | 0 - 127)
void oled_pos(uint8_t row,uint8_t column)
{
    12a2:	cf 93       	push	r28
    12a4:	c6 2f       	mov	r28, r22
	oled_goto_line(row);
    12a6:	0e 94 32 09 	call	0x1264	; 0x1264 <oled_goto_line>
	oled_goto_column(column);
    12aa:	8c 2f       	mov	r24, r28
    12ac:	0e 94 3a 09 	call	0x1274	; 0x1274 <oled_goto_column>
}
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <oled_print_char>:
//print a character on the current position
//size: 1 - small | 2 - medium | 3 - large
void oled_print_char(char character, int size)
{
	char mychar;
	int code = ((int) character) - 32;
    12b4:	e8 2f       	mov	r30, r24
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	b0 97       	sbiw	r30, 0x20	; 32
	
	if (size == 3)
    12ba:	63 30       	cpi	r22, 0x03	; 3
    12bc:	71 05       	cpc	r23, r1
    12be:	a1 f4       	brne	.+40     	; 0x12e8 <oled_print_char+0x34>
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	e9 5e       	subi	r30, 0xE9	; 233
    12ce:	fa 4f       	sbci	r31, 0xFA	; 250
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    12d4:	a0 e0       	ldi	r26, 0x00	; 0
    12d6:	b2 e1       	ldi	r27, 0x12	; 18
	
	if (size == 3)
	{
		for (int k = 0; k < 8; k++)
		{
			mychar =  pgm_read_byte_near(font8[code] + k);
    12d8:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    12da:	2c 93       	st	X, r18
	char mychar;
	int code = ((int) character) - 32;
	
	if (size == 3)
	{
		for (int k = 0; k < 8; k++)
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	31 96       	adiw	r30, 0x01	; 1
    12e0:	88 30       	cpi	r24, 0x08	; 8
    12e2:	91 05       	cpc	r25, r1
    12e4:	c9 f7       	brne	.-14     	; 0x12d8 <oled_print_char+0x24>
    12e6:	08 95       	ret
		{
			mychar =  pgm_read_byte_near(font8[code] + k);
			mychar = mychar;
			oled_write_data(mychar);
		}
	}else if (size == 2)
    12e8:	62 30       	cpi	r22, 0x02	; 2
    12ea:	71 05       	cpc	r23, r1
    12ec:	a9 f4       	brne	.+42     	; 0x1318 <oled_print_char+0x64>
    12ee:	cf 01       	movw	r24, r30
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	e8 0f       	add	r30, r24
    12fa:	f9 1f       	adc	r31, r25
    12fc:	e4 5c       	subi	r30, 0xC4	; 196
    12fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b2 e1       	ldi	r27, 0x12	; 18
		}
	}else if (size == 2)
	{
		for (int k = 0; k < 5; k++)
		{
			mychar =  pgm_read_byte_near(font5[code] + k);
    1308:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    130a:	2c 93       	st	X, r18
			mychar = mychar;
			oled_write_data(mychar);
		}
	}else if (size == 2)
	{
		for (int k = 0; k < 5; k++)
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	31 96       	adiw	r30, 0x01	; 1
    1310:	85 30       	cpi	r24, 0x05	; 5
    1312:	91 05       	cpc	r25, r1
    1314:	c9 f7       	brne	.-14     	; 0x1308 <oled_print_char+0x54>
    1316:	08 95       	ret
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	e0 54       	subi	r30, 0x40	; 64
    1322:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			mychar =  pgm_read_byte_near(font8[code] + k);
			mychar = mychar;
			oled_write_data(mychar);
		}
	}else if (size == 2)
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1328:	a0 e0       	ldi	r26, 0x00	; 0
    132a:	b2 e1       	ldi	r27, 0x12	; 18
		}
	}else 
	{
		for (int k = 0; k < 4; k++)
		{
			mychar =  pgm_read_byte_near(font4[code] + k);
    132c:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    132e:	2c 93       	st	X, r18
			mychar =  pgm_read_byte_near(font5[code] + k);
			oled_write_data(mychar);
		}
	}else 
	{
		for (int k = 0; k < 4; k++)
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	31 96       	adiw	r30, 0x01	; 1
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	91 05       	cpc	r25, r1
    1338:	c9 f7       	brne	.-14     	; 0x132c <oled_print_char+0x78>
    133a:	08 95       	ret

0000133c <oled_print>:
}

//print a string starting on the current position
//size: 1 - small | 2 - medium | 3 - large 
void oled_print(char* name, int size)
{
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	8c 01       	movw	r16, r24
    134e:	6b 01       	movw	r12, r22
    1350:	7c 01       	movw	r14, r24
	for (int i = 0; i < strlen(name); i++)
    1352:	c0 e0       	ldi	r28, 0x00	; 0
    1354:	d0 e0       	ldi	r29, 0x00	; 0
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <oled_print+0x2c>
	{
		oled_print_char(name[i], size);
    1358:	f7 01       	movw	r30, r14
    135a:	81 91       	ld	r24, Z+
    135c:	7f 01       	movw	r14, r30
    135e:	b6 01       	movw	r22, r12
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <oled_print_char>

//print a string starting on the current position
//size: 1 - small | 2 - medium | 3 - large 
void oled_print(char* name, int size)
{
	for (int i = 0; i < strlen(name); i++)
    1366:	21 96       	adiw	r28, 0x01	; 1
    1368:	f8 01       	movw	r30, r16
    136a:	01 90       	ld	r0, Z+
    136c:	00 20       	and	r0, r0
    136e:	e9 f7       	brne	.-6      	; 0x136a <oled_print+0x2e>
    1370:	31 97       	sbiw	r30, 0x01	; 1
    1372:	e0 1b       	sub	r30, r16
    1374:	f1 0b       	sbc	r31, r17
    1376:	ce 17       	cp	r28, r30
    1378:	df 07       	cpc	r29, r31
    137a:	70 f3       	brcs	.-36     	; 0x1358 <oled_print+0x1c>
	{
		oled_print_char(name[i], size);
	}
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	08 95       	ret

0000138e <oled_print_special_char>:
	}
	
}

void oled_print_special_char (int code)
{
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	fc 01       	movw	r30, r24
    139c:	e0 59       	subi	r30, 0x90	; 144
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	88 58       	subi	r24, 0x88	; 136
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    13a4:	a0 e0       	ldi	r26, 0x00	; 0
    13a6:	b2 e1       	ldi	r27, 0x12	; 18
{
	char mychar;
	
	for (int k = 0; k < 8; k++)
	{
		mychar =  pgm_read_byte_near(specialChar[code] + k);
    13a8:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    13aa:	2c 93       	st	X, r18
    13ac:	31 96       	adiw	r30, 0x01	; 1

void oled_print_special_char (int code)
{
	char mychar;
	
	for (int k = 0; k < 8; k++)
    13ae:	e8 17       	cp	r30, r24
    13b0:	f9 07       	cpc	r31, r25
    13b2:	d1 f7       	brne	.-12     	; 0x13a8 <oled_print_special_char+0x1a>
	{
		mychar =  pgm_read_byte_near(specialChar[code] + k);
		oled_write_data(mychar);
	}
}
    13b4:	08 95       	ret

000013b6 <oled_print_mario_large>:
		_delay_ms(100);	
	}	
}

void oled_print_mario_large(uint8_t row,uint8_t column)
{
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	c8 2f       	mov	r28, r24
    13bc:	d6 2f       	mov	r29, r22
	oled_pos(row, column);
    13be:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print_special_char(10);
    13c2:	8a e0       	ldi	r24, 0x0A	; 10
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(11);
    13ca:	8b e0       	ldi	r24, 0x0B	; 11
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(12);
    13d2:	8c e0       	ldi	r24, 0x0C	; 12
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(13);
    13da:	8d e0       	ldi	r24, 0x0D	; 13
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_pos(row+1, column);
    13e2:	6d 2f       	mov	r22, r29
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	8c 0f       	add	r24, r28
    13e8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print_special_char(14);
    13ec:	8e e0       	ldi	r24, 0x0E	; 14
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(15);
    13f4:	8f e0       	ldi	r24, 0x0F	; 15
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(16);
    13fc:	80 e1       	ldi	r24, 0x10	; 16
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(17);
    1404:	81 e1       	ldi	r24, 0x11	; 17
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_pos(row+2, column);
    140c:	6d 2f       	mov	r22, r29
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	8c 0f       	add	r24, r28
    1412:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print_special_char(18);
    1416:	82 e1       	ldi	r24, 0x12	; 18
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(19);
    141e:	83 e1       	ldi	r24, 0x13	; 19
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(20);
    1426:	84 e1       	ldi	r24, 0x14	; 20
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(21);
    142e:	85 e1       	ldi	r24, 0x15	; 21
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_pos(row+3, column);
    1436:	6d 2f       	mov	r22, r29
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	8c 0f       	add	r24, r28
    143c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print_special_char(22);
    1440:	86 e1       	ldi	r24, 0x16	; 22
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(23);
    1448:	87 e1       	ldi	r24, 0x17	; 23
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(24);
    1450:	88 e1       	ldi	r24, 0x18	; 24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(25);
    1458:	89 e1       	ldi	r24, 0x19	; 25
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <oled_animate_mario_large>:
		}
	}
}

void oled_animate_mario_large()
{
    1466:	cf 93       	push	r28
    1468:	c0 e0       	ldi	r28, 0x00	; 0
	int i, j;
	
	//oled_reset();
	for (i = 0; i < 5; i++)
	{
		oled_print_mario_large(i,0);
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	8c 2f       	mov	r24, r28
    146e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <oled_print_mario_large>
    1472:	2f ef       	ldi	r18, 0xFF	; 255
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	95 e0       	ldi	r25, 0x05	; 5
    1478:	21 50       	subi	r18, 0x01	; 1
    147a:	80 40       	sbci	r24, 0x00	; 0
    147c:	90 40       	sbci	r25, 0x00	; 0
    147e:	e1 f7       	brne	.-8      	; 0x1478 <oled_animate_mario_large+0x12>
    1480:	00 c0       	rjmp	.+0      	; 0x1482 <oled_animate_mario_large+0x1c>
    1482:	00 c0       	rjmp	.+0      	; 0x1484 <oled_animate_mario_large+0x1e>
		_delay_ms(400);
		oled_reset();
    1484:	0e 94 42 09 	call	0x1284	; 0x1284 <oled_reset>
    1488:	cf 5f       	subi	r28, 0xFF	; 255
	int row = 0;
	int clm = 0;
	int i, j;
	
	//oled_reset();
	for (i = 0; i < 5; i++)
    148a:	c5 30       	cpi	r28, 0x05	; 5
    148c:	71 f7       	brne	.-36     	; 0x146a <oled_animate_mario_large+0x4>
    148e:	c0 e0       	ldi	r28, 0x00	; 0
		oled_reset();
	}
	i--;
	for (j = 0; j < 96; j = j+3)
	{
		oled_reset();
    1490:	0e 94 42 09 	call	0x1284	; 0x1284 <oled_reset>
		oled_print_mario_large(i,j);
    1494:	6c 2f       	mov	r22, r28
    1496:	84 e0       	ldi	r24, 0x04	; 4
    1498:	0e 94 db 09 	call	0x13b6	; 0x13b6 <oled_print_mario_large>
    149c:	2f ef       	ldi	r18, 0xFF	; 255
    149e:	8f e7       	ldi	r24, 0x7F	; 127
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	21 50       	subi	r18, 0x01	; 1
    14a4:	80 40       	sbci	r24, 0x00	; 0
    14a6:	90 40       	sbci	r25, 0x00	; 0
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <oled_animate_mario_large+0x3c>
    14aa:	00 c0       	rjmp	.+0      	; 0x14ac <oled_animate_mario_large+0x46>
    14ac:	00 c0       	rjmp	.+0      	; 0x14ae <oled_animate_mario_large+0x48>
    14ae:	cd 5f       	subi	r28, 0xFD	; 253
		oled_print_mario_large(i,0);
		_delay_ms(400);
		oled_reset();
	}
	i--;
	for (j = 0; j < 96; j = j+3)
    14b0:	c0 36       	cpi	r28, 0x60	; 96
    14b2:	71 f7       	brne	.-36     	; 0x1490 <oled_animate_mario_large+0x2a>
	{
		oled_reset();
		oled_print_mario_large(i,j);
		_delay_ms(100);	
	}	
}
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <oled_print_4th_part_ntnu_logo>:
	oled_print_4th_part_ntnu_logo(row + 3, column);	
}

void oled_print_4th_part_ntnu_logo(uint8_t row, uint8_t column)
{
	oled_pos(row, column);
    14b8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print_special_char(38);
    14bc:	86 e2       	ldi	r24, 0x26	; 38
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(39);
    14c4:	87 e2       	ldi	r24, 0x27	; 39
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(40);
    14cc:	88 e2       	ldi	r24, 0x28	; 40
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(41);
    14d4:	89 e2       	ldi	r24, 0x29	; 41
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
    14dc:	08 95       	ret

000014de <oled_print_3rd_part_ntnu_logo>:
}

void oled_print_3rd_part_ntnu_logo(uint8_t row, uint8_t column)
{
	oled_pos(row, column);
    14de:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print_special_char(34);
    14e2:	82 e2       	ldi	r24, 0x22	; 34
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(35);
    14ea:	83 e2       	ldi	r24, 0x23	; 35
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(36);
    14f2:	84 e2       	ldi	r24, 0x24	; 36
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(37);
    14fa:	85 e2       	ldi	r24, 0x25	; 37
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
    1502:	08 95       	ret

00001504 <oled_print_2nd_part_ntnu_logo>:
}

void oled_print_2nd_part_ntnu_logo(uint8_t row, uint8_t column)
{
	oled_pos(row, column);
    1504:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print_special_char(30);
    1508:	8e e1       	ldi	r24, 0x1E	; 30
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(31);
    1510:	8f e1       	ldi	r24, 0x1F	; 31
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(32);
    1518:	80 e2       	ldi	r24, 0x20	; 32
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(33);
    1520:	81 e2       	ldi	r24, 0x21	; 33
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
    1528:	08 95       	ret

0000152a <oled_print_1st_part_ntnu_logo>:
}

void oled_print_1st_part_ntnu_logo(uint8_t row, uint8_t column)
{
	oled_pos(row, column);
    152a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print_special_char(26);
    152e:	8a e1       	ldi	r24, 0x1A	; 26
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(27);
    1536:	8b e1       	ldi	r24, 0x1B	; 27
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(28);
    153e:	8c e1       	ldi	r24, 0x1C	; 28
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
	oled_print_special_char(29);
    1546:	8d e1       	ldi	r24, 0x1D	; 29
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 c7 09 	call	0x138e	; 0x138e <oled_print_special_char>
    154e:	08 95       	ret

00001550 <oled_print_ntnu_logo>:
	//oled_clear_line(6);
	//oled_write_cmd(0x40);
}

void oled_print_ntnu_logo(uint8_t row, uint8_t column)
{
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
	oled_print_1st_part_ntnu_logo(row, column);
    1558:	06 2f       	mov	r16, r22
    155a:	10 e0       	ldi	r17, 0x00	; 0
    155c:	c8 2f       	mov	r28, r24
    155e:	d0 e0       	ldi	r29, 0x00	; 0
    1560:	b8 01       	movw	r22, r16
    1562:	ce 01       	movw	r24, r28
    1564:	0e 94 95 0a 	call	0x152a	; 0x152a <oled_print_1st_part_ntnu_logo>
	oled_print_2nd_part_ntnu_logo(row + 1, column);
    1568:	b8 01       	movw	r22, r16
    156a:	ce 01       	movw	r24, r28
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	0e 94 82 0a 	call	0x1504	; 0x1504 <oled_print_2nd_part_ntnu_logo>
	oled_print_3rd_part_ntnu_logo(row + 2, column);
    1572:	b8 01       	movw	r22, r16
    1574:	ce 01       	movw	r24, r28
    1576:	02 96       	adiw	r24, 0x02	; 2
    1578:	0e 94 6f 0a 	call	0x14de	; 0x14de <oled_print_3rd_part_ntnu_logo>
	oled_print_4th_part_ntnu_logo(row + 3, column);	
    157c:	b8 01       	movw	r22, r16
    157e:	ce 01       	movw	r24, r28
    1580:	03 96       	adiw	r24, 0x03	; 3
    1582:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_print_4th_part_ntnu_logo>
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <oled_animate_ntnu>:

void oled_animate_ntnu()
{
	int row = 0, column = 0;
	
	oled_reset();
    1590:	0e 94 42 09 	call	0x1284	; 0x1284 <oled_reset>
	oled_print_4th_part_ntnu_logo(row, column);
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_print_4th_part_ntnu_logo>
    159c:	2f ef       	ldi	r18, 0xFF	; 255
    159e:	8f ef       	ldi	r24, 0xFF	; 255
    15a0:	92 e0       	ldi	r25, 0x02	; 2
    15a2:	21 50       	subi	r18, 0x01	; 1
    15a4:	80 40       	sbci	r24, 0x00	; 0
    15a6:	90 40       	sbci	r25, 0x00	; 0
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <oled_animate_ntnu+0x12>
    15aa:	00 c0       	rjmp	.+0      	; 0x15ac <oled_animate_ntnu+0x1c>
    15ac:	00 c0       	rjmp	.+0      	; 0x15ae <oled_animate_ntnu+0x1e>
	_delay_ms(200);
	
	oled_reset();
    15ae:	0e 94 42 09 	call	0x1284	; 0x1284 <oled_reset>
	oled_print_3rd_part_ntnu_logo(row, column);
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0e 94 6f 0a 	call	0x14de	; 0x14de <oled_print_3rd_part_ntnu_logo>
	oled_print_4th_part_ntnu_logo(row + 1, column);
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_print_4th_part_ntnu_logo>
    15c2:	2f ef       	ldi	r18, 0xFF	; 255
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	92 e0       	ldi	r25, 0x02	; 2
    15c8:	21 50       	subi	r18, 0x01	; 1
    15ca:	80 40       	sbci	r24, 0x00	; 0
    15cc:	90 40       	sbci	r25, 0x00	; 0
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <oled_animate_ntnu+0x38>
    15d0:	00 c0       	rjmp	.+0      	; 0x15d2 <oled_animate_ntnu+0x42>
    15d2:	00 c0       	rjmp	.+0      	; 0x15d4 <oled_animate_ntnu+0x44>
	_delay_ms(200);
	
	oled_reset();
    15d4:	0e 94 42 09 	call	0x1284	; 0x1284 <oled_reset>
	oled_print_2nd_part_ntnu_logo(row, column);
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	0e 94 82 0a 	call	0x1504	; 0x1504 <oled_print_2nd_part_ntnu_logo>
	oled_print_3rd_part_ntnu_logo(row + 1, column);
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	0e 94 6f 0a 	call	0x14de	; 0x14de <oled_print_3rd_part_ntnu_logo>
	oled_print_4th_part_ntnu_logo(row + 2, column);
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_print_4th_part_ntnu_logo>
    15f0:	2f ef       	ldi	r18, 0xFF	; 255
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	92 e0       	ldi	r25, 0x02	; 2
    15f6:	21 50       	subi	r18, 0x01	; 1
    15f8:	80 40       	sbci	r24, 0x00	; 0
    15fa:	90 40       	sbci	r25, 0x00	; 0
    15fc:	e1 f7       	brne	.-8      	; 0x15f6 <oled_animate_ntnu+0x66>
    15fe:	00 c0       	rjmp	.+0      	; 0x1600 <oled_animate_ntnu+0x70>
    1600:	00 c0       	rjmp	.+0      	; 0x1602 <oled_animate_ntnu+0x72>
	_delay_ms(200);
	
	oled_reset();
    1602:	0e 94 42 09 	call	0x1284	; 0x1284 <oled_reset>
	oled_print_ntnu_logo(row, column);
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <oled_print_ntnu_logo>
    160e:	2f ef       	ldi	r18, 0xFF	; 255
    1610:	8f ef       	ldi	r24, 0xFF	; 255
    1612:	9b e0       	ldi	r25, 0x0B	; 11
    1614:	21 50       	subi	r18, 0x01	; 1
    1616:	80 40       	sbci	r24, 0x00	; 0
    1618:	90 40       	sbci	r25, 0x00	; 0
    161a:	e1 f7       	brne	.-8      	; 0x1614 <oled_animate_ntnu+0x84>
    161c:	00 c0       	rjmp	.+0      	; 0x161e <oled_animate_ntnu+0x8e>
    161e:	00 c0       	rjmp	.+0      	; 0x1620 <oled_animate_ntnu+0x90>
	_delay_ms(800);
	
	
	row = 5;
	oled_pos(row, column);
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	85 e0       	ldi	r24, 0x05	; 5
    1624:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print("NTNU", 3);
    1628:	63 e0       	ldi	r22, 0x03	; 3
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	89 e1       	ldi	r24, 0x19	; 25
    162e:	92 e0       	ldi	r25, 0x02	; 2
    1630:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
    1634:	2f ef       	ldi	r18, 0xFF	; 255
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	9b e0       	ldi	r25, 0x0B	; 11
    163a:	21 50       	subi	r18, 0x01	; 1
    163c:	80 40       	sbci	r24, 0x00	; 0
    163e:	90 40       	sbci	r25, 0x00	; 0
    1640:	e1 f7       	brne	.-8      	; 0x163a <oled_animate_ntnu+0xaa>
    1642:	00 c0       	rjmp	.+0      	; 0x1644 <oled_animate_ntnu+0xb4>
    1644:	00 c0       	rjmp	.+0      	; 0x1646 <oled_animate_ntnu+0xb6>
	_delay_ms(800);
	
	row = 4;
	column = 40;
	oled_pos(row, column);
    1646:	68 e2       	ldi	r22, 0x28	; 40
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print("CHALLENGE", 3);
    164e:	63 e0       	ldi	r22, 0x03	; 3
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	8e e1       	ldi	r24, 0x1E	; 30
    1654:	92 e0       	ldi	r25, 0x02	; 2
    1656:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
	row = 5;
	oled_pos(row, column);
    165a:	68 e2       	ldi	r22, 0x28	; 40
    165c:	85 e0       	ldi	r24, 0x05	; 5
    165e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print("THE OCEAN", 3);
    1662:	63 e0       	ldi	r22, 0x03	; 3
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	88 e2       	ldi	r24, 0x28	; 40
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
    166e:	2f ef       	ldi	r18, 0xFF	; 255
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	9b e0       	ldi	r25, 0x0B	; 11
    1674:	21 50       	subi	r18, 0x01	; 1
    1676:	80 40       	sbci	r24, 0x00	; 0
    1678:	90 40       	sbci	r25, 0x00	; 0
    167a:	e1 f7       	brne	.-8      	; 0x1674 <oled_animate_ntnu+0xe4>
    167c:	00 c0       	rjmp	.+0      	; 0x167e <oled_animate_ntnu+0xee>
    167e:	00 c0       	rjmp	.+0      	; 0x1680 <oled_animate_ntnu+0xf0>
	_delay_ms(800);
	oled_pos(row, column);
    1680:	68 e2       	ldi	r22, 0x28	; 40
    1682:	85 e0       	ldi	r24, 0x05	; 5
    1684:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print("POLLUTION", 3);
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	82 e3       	ldi	r24, 0x32	; 50
    168e:	92 e0       	ldi	r25, 0x02	; 2
    1690:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
    1694:	2f ef       	ldi	r18, 0xFF	; 255
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	9b e0       	ldi	r25, 0x0B	; 11
    169a:	21 50       	subi	r18, 0x01	; 1
    169c:	80 40       	sbci	r24, 0x00	; 0
    169e:	90 40       	sbci	r25, 0x00	; 0
    16a0:	e1 f7       	brne	.-8      	; 0x169a <oled_animate_ntnu+0x10a>
    16a2:	00 c0       	rjmp	.+0      	; 0x16a4 <oled_animate_ntnu+0x114>
    16a4:	00 c0       	rjmp	.+0      	; 0x16a6 <oled_animate_ntnu+0x116>
	_delay_ms(800);
	oled_pos(row, column);
    16a6:	68 e2       	ldi	r22, 0x28	; 40
    16a8:	85 e0       	ldi	r24, 0x05	; 5
    16aa:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print("PING PONG", 3);
    16ae:	63 e0       	ldi	r22, 0x03	; 3
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	8c e3       	ldi	r24, 0x3C	; 60
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
    16ba:	2f ef       	ldi	r18, 0xFF	; 255
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	9e e0       	ldi	r25, 0x0E	; 14
    16c0:	21 50       	subi	r18, 0x01	; 1
    16c2:	80 40       	sbci	r24, 0x00	; 0
    16c4:	90 40       	sbci	r25, 0x00	; 0
    16c6:	e1 f7       	brne	.-8      	; 0x16c0 <oled_animate_ntnu+0x130>
    16c8:	00 c0       	rjmp	.+0      	; 0x16ca <oled_animate_ntnu+0x13a>
    16ca:	00 00       	nop
	_delay_ms(1000);
	
	row = 1;
	column = 40;
	oled_pos(row, column);
    16cc:	68 e2       	ldi	r22, 0x28	; 40
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print("?", 3);
    16d4:	63 e0       	ldi	r22, 0x03	; 3
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	86 e4       	ldi	r24, 0x46	; 70
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	9f e2       	ldi	r25, 0x2F	; 47
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <oled_animate_ntnu+0x154>
    16e8:	00 c0       	rjmp	.+0      	; 0x16ea <oled_animate_ntnu+0x15a>
    16ea:	00 00       	nop
	_delay_ms(10);
	column = 48;
	oled_print("?", 3);
    16ec:	63 e0       	ldi	r22, 0x03	; 3
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	86 e4       	ldi	r24, 0x46	; 70
    16f2:	92 e0       	ldi	r25, 0x02	; 2
    16f4:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	9f e2       	ldi	r25, 0x2F	; 47
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <oled_animate_ntnu+0x16c>
    1700:	00 c0       	rjmp	.+0      	; 0x1702 <oled_animate_ntnu+0x172>
    1702:	00 00       	nop
	_delay_ms(10);
	column = 54;
	oled_print("?", 3);
    1704:	63 e0       	ldi	r22, 0x03	; 3
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	86 e4       	ldi	r24, 0x46	; 70
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	9f e2       	ldi	r25, 0x2F	; 47
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <oled_animate_ntnu+0x184>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <oled_animate_ntnu+0x18a>
    171a:	00 00       	nop
    171c:	08 95       	ret

0000171e <oled_ingame_display>:
	_delay_ms(10);
}

void oled_ingame_display(int score)
{
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	2a 97       	sbiw	r28, 0x0a	; 10
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	18 2f       	mov	r17, r24
    1738:	09 2f       	mov	r16, r25
	oled_reset();
    173a:	0e 94 42 09 	call	0x1284	; 0x1284 <oled_reset>
	int row = 2, column = 8;
	char text[10];
	sprintf(text, "SCORE %d\0", score);
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	86 e0       	ldi	r24, 0x06	; 6
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	9f 93       	push	r25
    1748:	8f 93       	push	r24
    174a:	8e 01       	movw	r16, r28
    174c:	0f 5f       	subi	r16, 0xFF	; 255
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	1f 93       	push	r17
    1752:	0f 93       	push	r16
    1754:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <sprintf>
	oled_pos(row, column);
    1758:	68 e0       	ldi	r22, 0x08	; 8
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <oled_pos>
	oled_print(text, 3);
    1760:	63 e0       	ldi	r22, 0x03	; 3
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	c8 01       	movw	r24, r16
    1766:	0e 94 9e 09 	call	0x133c	; 0x133c <oled_print>
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	2a 96       	adiw	r28, 0x0a	; 10
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <SPI_MasterInit>:
//TODO - define for register bit (reusable code)

void SPI_MasterInit(void)
{
    /* Set MOSI, SCK output and SS all others input */
    DDRB = (1<<DDB5)|(1<<DDB7)|(1<<DDB4);
    178c:	80 eb       	ldi	r24, 0xB0	; 176
    178e:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input 
	DDRB &= ~(1<<DDB6);
    1790:	be 98       	cbi	0x17, 6	; 23
	
    /* Enable SPI, Master, set clock rate fck/16 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1792:	81 e5       	ldi	r24, 0x51	; 81
    1794:	8d b9       	out	0x0d, r24	; 13
    1796:	08 95       	ret

00001798 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
    /* Start transmission */
    SPDR = cData;
    1798:	8f b9       	out	0x0f, r24	; 15
    /* Wait for transmission complete */
    while(!(SPSR & (1<<SPIF)));
    179a:	77 9b       	sbis	0x0e, 7	; 14
    179c:	fe cf       	rjmp	.-4      	; 0x179a <SPI_MasterTransmit+0x2>
}
    179e:	08 95       	ret

000017a0 <spi_init>:
// }


void spi_init()
{
	SPI_MasterInit();
    17a0:	0e 94 c6 0b 	call	0x178c	; 0x178c <SPI_MasterInit>
    17a4:	08 95       	ret

000017a6 <spi_send>:
}

void spi_send(char data)
{
	SPI_MasterTransmit(data);	
    17a6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <SPI_MasterTransmit>
    17aa:	08 95       	ret

000017ac <spi_read>:
	
}

char spi_read()
{
	SPI_MasterTransmit(0x00);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	0e 94 cc 0b 	call	0x1798	; 0x1798 <SPI_MasterTransmit>
	return SPDR;
    17b2:	8f b1       	in	r24, 0x0f	; 15
}
    17b4:	08 95       	ret

000017b6 <SRAM_init>:
#include "avr/io.h" 

void SRAM_init()
{
	//Enable XMEM
	MCUCR |= (1 << SRE); 
    17b6:	85 b7       	in	r24, 0x35	; 53
    17b8:	80 68       	ori	r24, 0x80	; 128
    17ba:	85 bf       	out	0x35, r24	; 53
	
	//Mask JTAG pins
	SFIOR |= (1 << XMM2) | (0 << XMM1) | (0 << XMM0);	
    17bc:	80 b7       	in	r24, 0x30	; 48
    17be:	80 62       	ori	r24, 0x20	; 32
    17c0:	80 bf       	out	0x30, r24	; 48
    17c2:	08 95       	ret

000017c4 <USART_Transmit>:
void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = data;
    17c4:	5d 9b       	sbis	0x0b, 5	; 11
    17c6:	fe cf       	rjmp	.-4      	; 0x17c4 <USART_Transmit>
}

    17c8:	8c b9       	out	0x0c, r24	; 12
    17ca:	08 95       	ret

000017cc <USART_Receive>:
unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
	;
	/* Get and return received data from buffer */
    17cc:	5f 9b       	sbis	0x0b, 7	; 11
    17ce:	fe cf       	rjmp	.-4      	; 0x17cc <USART_Receive>
	return UDR0;
}
    17d0:	8c b1       	in	r24, 0x0c	; 12
    17d2:	08 95       	ret

000017d4 <USART_Init>:
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr >> 8);
	UBRR0L = (unsigned char) ubrr;
	
    17d4:	90 bd       	out	0x20, r25	; 32
	/* Enable receiver and transmitter */
    17d6:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
	
	/* Set frame format: 8data, 2stop bit */
    17d8:	88 e1       	ldi	r24, 0x18	; 24
    17da:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (1 << USBS0)|(3 << UCSZ00);
	
	fdevopen(USART_Transmit, USART_Receive);
    17dc:	8e e8       	ldi	r24, 0x8E	; 142
    17de:	80 bd       	out	0x20, r24	; 32
}

    17e0:	66 ee       	ldi	r22, 0xE6	; 230
    17e2:	7b e0       	ldi	r23, 0x0B	; 11
    17e4:	82 ee       	ldi	r24, 0xE2	; 226
    17e6:	9b e0       	ldi	r25, 0x0B	; 11
    17e8:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <fdevopen>
    17ec:	08 95       	ret

000017ee <__subsf3>:
    17ee:	50 58       	subi	r21, 0x80	; 128

000017f0 <__addsf3>:
    17f0:	bb 27       	eor	r27, r27
    17f2:	aa 27       	eor	r26, r26
    17f4:	0e d0       	rcall	.+28     	; 0x1812 <__addsf3x>
    17f6:	4d c1       	rjmp	.+666    	; 0x1a92 <__fp_round>
    17f8:	3e d1       	rcall	.+636    	; 0x1a76 <__fp_pscA>
    17fa:	30 f0       	brcs	.+12     	; 0x1808 <__addsf3+0x18>
    17fc:	43 d1       	rcall	.+646    	; 0x1a84 <__fp_pscB>
    17fe:	20 f0       	brcs	.+8      	; 0x1808 <__addsf3+0x18>
    1800:	31 f4       	brne	.+12     	; 0x180e <__addsf3+0x1e>
    1802:	9f 3f       	cpi	r25, 0xFF	; 255
    1804:	11 f4       	brne	.+4      	; 0x180a <__addsf3+0x1a>
    1806:	1e f4       	brtc	.+6      	; 0x180e <__addsf3+0x1e>
    1808:	33 c1       	rjmp	.+614    	; 0x1a70 <__fp_nan>
    180a:	0e f4       	brtc	.+2      	; 0x180e <__addsf3+0x1e>
    180c:	e0 95       	com	r30
    180e:	e7 fb       	bst	r30, 7
    1810:	29 c1       	rjmp	.+594    	; 0x1a64 <__fp_inf>

00001812 <__addsf3x>:
    1812:	e9 2f       	mov	r30, r25
    1814:	4f d1       	rcall	.+670    	; 0x1ab4 <__fp_split3>
    1816:	80 f3       	brcs	.-32     	; 0x17f8 <__addsf3+0x8>
    1818:	ba 17       	cp	r27, r26
    181a:	62 07       	cpc	r22, r18
    181c:	73 07       	cpc	r23, r19
    181e:	84 07       	cpc	r24, r20
    1820:	95 07       	cpc	r25, r21
    1822:	18 f0       	brcs	.+6      	; 0x182a <__addsf3x+0x18>
    1824:	71 f4       	brne	.+28     	; 0x1842 <__addsf3x+0x30>
    1826:	9e f5       	brtc	.+102    	; 0x188e <__addsf3x+0x7c>
    1828:	67 c1       	rjmp	.+718    	; 0x1af8 <__fp_zero>
    182a:	0e f4       	brtc	.+2      	; 0x182e <__addsf3x+0x1c>
    182c:	e0 95       	com	r30
    182e:	0b 2e       	mov	r0, r27
    1830:	ba 2f       	mov	r27, r26
    1832:	a0 2d       	mov	r26, r0
    1834:	0b 01       	movw	r0, r22
    1836:	b9 01       	movw	r22, r18
    1838:	90 01       	movw	r18, r0
    183a:	0c 01       	movw	r0, r24
    183c:	ca 01       	movw	r24, r20
    183e:	a0 01       	movw	r20, r0
    1840:	11 24       	eor	r1, r1
    1842:	ff 27       	eor	r31, r31
    1844:	59 1b       	sub	r21, r25
    1846:	99 f0       	breq	.+38     	; 0x186e <__addsf3x+0x5c>
    1848:	59 3f       	cpi	r21, 0xF9	; 249
    184a:	50 f4       	brcc	.+20     	; 0x1860 <__addsf3x+0x4e>
    184c:	50 3e       	cpi	r21, 0xE0	; 224
    184e:	68 f1       	brcs	.+90     	; 0x18aa <__addsf3x+0x98>
    1850:	1a 16       	cp	r1, r26
    1852:	f0 40       	sbci	r31, 0x00	; 0
    1854:	a2 2f       	mov	r26, r18
    1856:	23 2f       	mov	r18, r19
    1858:	34 2f       	mov	r19, r20
    185a:	44 27       	eor	r20, r20
    185c:	58 5f       	subi	r21, 0xF8	; 248
    185e:	f3 cf       	rjmp	.-26     	; 0x1846 <__addsf3x+0x34>
    1860:	46 95       	lsr	r20
    1862:	37 95       	ror	r19
    1864:	27 95       	ror	r18
    1866:	a7 95       	ror	r26
    1868:	f0 40       	sbci	r31, 0x00	; 0
    186a:	53 95       	inc	r21
    186c:	c9 f7       	brne	.-14     	; 0x1860 <__addsf3x+0x4e>
    186e:	7e f4       	brtc	.+30     	; 0x188e <__addsf3x+0x7c>
    1870:	1f 16       	cp	r1, r31
    1872:	ba 0b       	sbc	r27, r26
    1874:	62 0b       	sbc	r22, r18
    1876:	73 0b       	sbc	r23, r19
    1878:	84 0b       	sbc	r24, r20
    187a:	ba f0       	brmi	.+46     	; 0x18aa <__addsf3x+0x98>
    187c:	91 50       	subi	r25, 0x01	; 1
    187e:	a1 f0       	breq	.+40     	; 0x18a8 <__addsf3x+0x96>
    1880:	ff 0f       	add	r31, r31
    1882:	bb 1f       	adc	r27, r27
    1884:	66 1f       	adc	r22, r22
    1886:	77 1f       	adc	r23, r23
    1888:	88 1f       	adc	r24, r24
    188a:	c2 f7       	brpl	.-16     	; 0x187c <__addsf3x+0x6a>
    188c:	0e c0       	rjmp	.+28     	; 0x18aa <__addsf3x+0x98>
    188e:	ba 0f       	add	r27, r26
    1890:	62 1f       	adc	r22, r18
    1892:	73 1f       	adc	r23, r19
    1894:	84 1f       	adc	r24, r20
    1896:	48 f4       	brcc	.+18     	; 0x18aa <__addsf3x+0x98>
    1898:	87 95       	ror	r24
    189a:	77 95       	ror	r23
    189c:	67 95       	ror	r22
    189e:	b7 95       	ror	r27
    18a0:	f7 95       	ror	r31
    18a2:	9e 3f       	cpi	r25, 0xFE	; 254
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <__addsf3x+0x96>
    18a6:	b3 cf       	rjmp	.-154    	; 0x180e <__addsf3+0x1e>
    18a8:	93 95       	inc	r25
    18aa:	88 0f       	add	r24, r24
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <__addsf3x+0x9e>
    18ae:	99 27       	eor	r25, r25
    18b0:	ee 0f       	add	r30, r30
    18b2:	97 95       	ror	r25
    18b4:	87 95       	ror	r24
    18b6:	08 95       	ret

000018b8 <__divsf3>:
    18b8:	0c d0       	rcall	.+24     	; 0x18d2 <__divsf3x>
    18ba:	eb c0       	rjmp	.+470    	; 0x1a92 <__fp_round>
    18bc:	e3 d0       	rcall	.+454    	; 0x1a84 <__fp_pscB>
    18be:	40 f0       	brcs	.+16     	; 0x18d0 <__divsf3+0x18>
    18c0:	da d0       	rcall	.+436    	; 0x1a76 <__fp_pscA>
    18c2:	30 f0       	brcs	.+12     	; 0x18d0 <__divsf3+0x18>
    18c4:	21 f4       	brne	.+8      	; 0x18ce <__divsf3+0x16>
    18c6:	5f 3f       	cpi	r21, 0xFF	; 255
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <__divsf3+0x18>
    18ca:	cc c0       	rjmp	.+408    	; 0x1a64 <__fp_inf>
    18cc:	51 11       	cpse	r21, r1
    18ce:	15 c1       	rjmp	.+554    	; 0x1afa <__fp_szero>
    18d0:	cf c0       	rjmp	.+414    	; 0x1a70 <__fp_nan>

000018d2 <__divsf3x>:
    18d2:	f0 d0       	rcall	.+480    	; 0x1ab4 <__fp_split3>
    18d4:	98 f3       	brcs	.-26     	; 0x18bc <__divsf3+0x4>

000018d6 <__divsf3_pse>:
    18d6:	99 23       	and	r25, r25
    18d8:	c9 f3       	breq	.-14     	; 0x18cc <__divsf3+0x14>
    18da:	55 23       	and	r21, r21
    18dc:	b1 f3       	breq	.-20     	; 0x18ca <__divsf3+0x12>
    18de:	95 1b       	sub	r25, r21
    18e0:	55 0b       	sbc	r21, r21
    18e2:	bb 27       	eor	r27, r27
    18e4:	aa 27       	eor	r26, r26
    18e6:	62 17       	cp	r22, r18
    18e8:	73 07       	cpc	r23, r19
    18ea:	84 07       	cpc	r24, r20
    18ec:	38 f0       	brcs	.+14     	; 0x18fc <__divsf3_pse+0x26>
    18ee:	9f 5f       	subi	r25, 0xFF	; 255
    18f0:	5f 4f       	sbci	r21, 0xFF	; 255
    18f2:	22 0f       	add	r18, r18
    18f4:	33 1f       	adc	r19, r19
    18f6:	44 1f       	adc	r20, r20
    18f8:	aa 1f       	adc	r26, r26
    18fa:	a9 f3       	breq	.-22     	; 0x18e6 <__divsf3_pse+0x10>
    18fc:	33 d0       	rcall	.+102    	; 0x1964 <__divsf3_pse+0x8e>
    18fe:	0e 2e       	mov	r0, r30
    1900:	3a f0       	brmi	.+14     	; 0x1910 <__divsf3_pse+0x3a>
    1902:	e0 e8       	ldi	r30, 0x80	; 128
    1904:	30 d0       	rcall	.+96     	; 0x1966 <__divsf3_pse+0x90>
    1906:	91 50       	subi	r25, 0x01	; 1
    1908:	50 40       	sbci	r21, 0x00	; 0
    190a:	e6 95       	lsr	r30
    190c:	00 1c       	adc	r0, r0
    190e:	ca f7       	brpl	.-14     	; 0x1902 <__divsf3_pse+0x2c>
    1910:	29 d0       	rcall	.+82     	; 0x1964 <__divsf3_pse+0x8e>
    1912:	fe 2f       	mov	r31, r30
    1914:	27 d0       	rcall	.+78     	; 0x1964 <__divsf3_pse+0x8e>
    1916:	66 0f       	add	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	88 1f       	adc	r24, r24
    191c:	bb 1f       	adc	r27, r27
    191e:	26 17       	cp	r18, r22
    1920:	37 07       	cpc	r19, r23
    1922:	48 07       	cpc	r20, r24
    1924:	ab 07       	cpc	r26, r27
    1926:	b0 e8       	ldi	r27, 0x80	; 128
    1928:	09 f0       	breq	.+2      	; 0x192c <__divsf3_pse+0x56>
    192a:	bb 0b       	sbc	r27, r27
    192c:	80 2d       	mov	r24, r0
    192e:	bf 01       	movw	r22, r30
    1930:	ff 27       	eor	r31, r31
    1932:	93 58       	subi	r25, 0x83	; 131
    1934:	5f 4f       	sbci	r21, 0xFF	; 255
    1936:	2a f0       	brmi	.+10     	; 0x1942 <__divsf3_pse+0x6c>
    1938:	9e 3f       	cpi	r25, 0xFE	; 254
    193a:	51 05       	cpc	r21, r1
    193c:	68 f0       	brcs	.+26     	; 0x1958 <__divsf3_pse+0x82>
    193e:	92 c0       	rjmp	.+292    	; 0x1a64 <__fp_inf>
    1940:	dc c0       	rjmp	.+440    	; 0x1afa <__fp_szero>
    1942:	5f 3f       	cpi	r21, 0xFF	; 255
    1944:	ec f3       	brlt	.-6      	; 0x1940 <__divsf3_pse+0x6a>
    1946:	98 3e       	cpi	r25, 0xE8	; 232
    1948:	dc f3       	brlt	.-10     	; 0x1940 <__divsf3_pse+0x6a>
    194a:	86 95       	lsr	r24
    194c:	77 95       	ror	r23
    194e:	67 95       	ror	r22
    1950:	b7 95       	ror	r27
    1952:	f7 95       	ror	r31
    1954:	9f 5f       	subi	r25, 0xFF	; 255
    1956:	c9 f7       	brne	.-14     	; 0x194a <__divsf3_pse+0x74>
    1958:	88 0f       	add	r24, r24
    195a:	91 1d       	adc	r25, r1
    195c:	96 95       	lsr	r25
    195e:	87 95       	ror	r24
    1960:	97 f9       	bld	r25, 7
    1962:	08 95       	ret
    1964:	e1 e0       	ldi	r30, 0x01	; 1
    1966:	66 0f       	add	r22, r22
    1968:	77 1f       	adc	r23, r23
    196a:	88 1f       	adc	r24, r24
    196c:	bb 1f       	adc	r27, r27
    196e:	62 17       	cp	r22, r18
    1970:	73 07       	cpc	r23, r19
    1972:	84 07       	cpc	r24, r20
    1974:	ba 07       	cpc	r27, r26
    1976:	20 f0       	brcs	.+8      	; 0x1980 <__divsf3_pse+0xaa>
    1978:	62 1b       	sub	r22, r18
    197a:	73 0b       	sbc	r23, r19
    197c:	84 0b       	sbc	r24, r20
    197e:	ba 0b       	sbc	r27, r26
    1980:	ee 1f       	adc	r30, r30
    1982:	88 f7       	brcc	.-30     	; 0x1966 <__divsf3_pse+0x90>
    1984:	e0 95       	com	r30
    1986:	08 95       	ret

00001988 <__fixsfsi>:
    1988:	04 d0       	rcall	.+8      	; 0x1992 <__fixunssfsi>
    198a:	68 94       	set
    198c:	b1 11       	cpse	r27, r1
    198e:	b5 c0       	rjmp	.+362    	; 0x1afa <__fp_szero>
    1990:	08 95       	ret

00001992 <__fixunssfsi>:
    1992:	98 d0       	rcall	.+304    	; 0x1ac4 <__fp_splitA>
    1994:	88 f0       	brcs	.+34     	; 0x19b8 <__fixunssfsi+0x26>
    1996:	9f 57       	subi	r25, 0x7F	; 127
    1998:	90 f0       	brcs	.+36     	; 0x19be <__fixunssfsi+0x2c>
    199a:	b9 2f       	mov	r27, r25
    199c:	99 27       	eor	r25, r25
    199e:	b7 51       	subi	r27, 0x17	; 23
    19a0:	a0 f0       	brcs	.+40     	; 0x19ca <__fixunssfsi+0x38>
    19a2:	d1 f0       	breq	.+52     	; 0x19d8 <__fixunssfsi+0x46>
    19a4:	66 0f       	add	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	88 1f       	adc	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	1a f0       	brmi	.+6      	; 0x19b4 <__fixunssfsi+0x22>
    19ae:	ba 95       	dec	r27
    19b0:	c9 f7       	brne	.-14     	; 0x19a4 <__fixunssfsi+0x12>
    19b2:	12 c0       	rjmp	.+36     	; 0x19d8 <__fixunssfsi+0x46>
    19b4:	b1 30       	cpi	r27, 0x01	; 1
    19b6:	81 f0       	breq	.+32     	; 0x19d8 <__fixunssfsi+0x46>
    19b8:	9f d0       	rcall	.+318    	; 0x1af8 <__fp_zero>
    19ba:	b1 e0       	ldi	r27, 0x01	; 1
    19bc:	08 95       	ret
    19be:	9c c0       	rjmp	.+312    	; 0x1af8 <__fp_zero>
    19c0:	67 2f       	mov	r22, r23
    19c2:	78 2f       	mov	r23, r24
    19c4:	88 27       	eor	r24, r24
    19c6:	b8 5f       	subi	r27, 0xF8	; 248
    19c8:	39 f0       	breq	.+14     	; 0x19d8 <__fixunssfsi+0x46>
    19ca:	b9 3f       	cpi	r27, 0xF9	; 249
    19cc:	cc f3       	brlt	.-14     	; 0x19c0 <__fixunssfsi+0x2e>
    19ce:	86 95       	lsr	r24
    19d0:	77 95       	ror	r23
    19d2:	67 95       	ror	r22
    19d4:	b3 95       	inc	r27
    19d6:	d9 f7       	brne	.-10     	; 0x19ce <__fixunssfsi+0x3c>
    19d8:	3e f4       	brtc	.+14     	; 0x19e8 <__fixunssfsi+0x56>
    19da:	90 95       	com	r25
    19dc:	80 95       	com	r24
    19de:	70 95       	com	r23
    19e0:	61 95       	neg	r22
    19e2:	7f 4f       	sbci	r23, 0xFF	; 255
    19e4:	8f 4f       	sbci	r24, 0xFF	; 255
    19e6:	9f 4f       	sbci	r25, 0xFF	; 255
    19e8:	08 95       	ret

000019ea <__floatunsisf>:
    19ea:	e8 94       	clt
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <__floatsisf+0x12>

000019ee <__floatsisf>:
    19ee:	97 fb       	bst	r25, 7
    19f0:	3e f4       	brtc	.+14     	; 0x1a00 <__floatsisf+0x12>
    19f2:	90 95       	com	r25
    19f4:	80 95       	com	r24
    19f6:	70 95       	com	r23
    19f8:	61 95       	neg	r22
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	8f 4f       	sbci	r24, 0xFF	; 255
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	99 23       	and	r25, r25
    1a02:	a9 f0       	breq	.+42     	; 0x1a2e <__floatsisf+0x40>
    1a04:	f9 2f       	mov	r31, r25
    1a06:	96 e9       	ldi	r25, 0x96	; 150
    1a08:	bb 27       	eor	r27, r27
    1a0a:	93 95       	inc	r25
    1a0c:	f6 95       	lsr	r31
    1a0e:	87 95       	ror	r24
    1a10:	77 95       	ror	r23
    1a12:	67 95       	ror	r22
    1a14:	b7 95       	ror	r27
    1a16:	f1 11       	cpse	r31, r1
    1a18:	f8 cf       	rjmp	.-16     	; 0x1a0a <__floatsisf+0x1c>
    1a1a:	fa f4       	brpl	.+62     	; 0x1a5a <__floatsisf+0x6c>
    1a1c:	bb 0f       	add	r27, r27
    1a1e:	11 f4       	brne	.+4      	; 0x1a24 <__floatsisf+0x36>
    1a20:	60 ff       	sbrs	r22, 0
    1a22:	1b c0       	rjmp	.+54     	; 0x1a5a <__floatsisf+0x6c>
    1a24:	6f 5f       	subi	r22, 0xFF	; 255
    1a26:	7f 4f       	sbci	r23, 0xFF	; 255
    1a28:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2c:	16 c0       	rjmp	.+44     	; 0x1a5a <__floatsisf+0x6c>
    1a2e:	88 23       	and	r24, r24
    1a30:	11 f0       	breq	.+4      	; 0x1a36 <__floatsisf+0x48>
    1a32:	96 e9       	ldi	r25, 0x96	; 150
    1a34:	11 c0       	rjmp	.+34     	; 0x1a58 <__floatsisf+0x6a>
    1a36:	77 23       	and	r23, r23
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <__floatsisf+0x54>
    1a3a:	9e e8       	ldi	r25, 0x8E	; 142
    1a3c:	87 2f       	mov	r24, r23
    1a3e:	76 2f       	mov	r23, r22
    1a40:	05 c0       	rjmp	.+10     	; 0x1a4c <__floatsisf+0x5e>
    1a42:	66 23       	and	r22, r22
    1a44:	71 f0       	breq	.+28     	; 0x1a62 <__floatsisf+0x74>
    1a46:	96 e8       	ldi	r25, 0x86	; 134
    1a48:	86 2f       	mov	r24, r22
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	2a f0       	brmi	.+10     	; 0x1a5a <__floatsisf+0x6c>
    1a50:	9a 95       	dec	r25
    1a52:	66 0f       	add	r22, r22
    1a54:	77 1f       	adc	r23, r23
    1a56:	88 1f       	adc	r24, r24
    1a58:	da f7       	brpl	.-10     	; 0x1a50 <__floatsisf+0x62>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	96 95       	lsr	r25
    1a5e:	87 95       	ror	r24
    1a60:	97 f9       	bld	r25, 7
    1a62:	08 95       	ret

00001a64 <__fp_inf>:
    1a64:	97 f9       	bld	r25, 7
    1a66:	9f 67       	ori	r25, 0x7F	; 127
    1a68:	80 e8       	ldi	r24, 0x80	; 128
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	08 95       	ret

00001a70 <__fp_nan>:
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	80 ec       	ldi	r24, 0xC0	; 192
    1a74:	08 95       	ret

00001a76 <__fp_pscA>:
    1a76:	00 24       	eor	r0, r0
    1a78:	0a 94       	dec	r0
    1a7a:	16 16       	cp	r1, r22
    1a7c:	17 06       	cpc	r1, r23
    1a7e:	18 06       	cpc	r1, r24
    1a80:	09 06       	cpc	r0, r25
    1a82:	08 95       	ret

00001a84 <__fp_pscB>:
    1a84:	00 24       	eor	r0, r0
    1a86:	0a 94       	dec	r0
    1a88:	12 16       	cp	r1, r18
    1a8a:	13 06       	cpc	r1, r19
    1a8c:	14 06       	cpc	r1, r20
    1a8e:	05 06       	cpc	r0, r21
    1a90:	08 95       	ret

00001a92 <__fp_round>:
    1a92:	09 2e       	mov	r0, r25
    1a94:	03 94       	inc	r0
    1a96:	00 0c       	add	r0, r0
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <__fp_round+0xc>
    1a9a:	88 23       	and	r24, r24
    1a9c:	52 f0       	brmi	.+20     	; 0x1ab2 <__fp_round+0x20>
    1a9e:	bb 0f       	add	r27, r27
    1aa0:	40 f4       	brcc	.+16     	; 0x1ab2 <__fp_round+0x20>
    1aa2:	bf 2b       	or	r27, r31
    1aa4:	11 f4       	brne	.+4      	; 0x1aaa <__fp_round+0x18>
    1aa6:	60 ff       	sbrs	r22, 0
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <__fp_round+0x20>
    1aaa:	6f 5f       	subi	r22, 0xFF	; 255
    1aac:	7f 4f       	sbci	r23, 0xFF	; 255
    1aae:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	08 95       	ret

00001ab4 <__fp_split3>:
    1ab4:	57 fd       	sbrc	r21, 7
    1ab6:	90 58       	subi	r25, 0x80	; 128
    1ab8:	44 0f       	add	r20, r20
    1aba:	55 1f       	adc	r21, r21
    1abc:	59 f0       	breq	.+22     	; 0x1ad4 <__fp_splitA+0x10>
    1abe:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac0:	71 f0       	breq	.+28     	; 0x1ade <__fp_splitA+0x1a>
    1ac2:	47 95       	ror	r20

00001ac4 <__fp_splitA>:
    1ac4:	88 0f       	add	r24, r24
    1ac6:	97 fb       	bst	r25, 7
    1ac8:	99 1f       	adc	r25, r25
    1aca:	61 f0       	breq	.+24     	; 0x1ae4 <__fp_splitA+0x20>
    1acc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ace:	79 f0       	breq	.+30     	; 0x1aee <__fp_splitA+0x2a>
    1ad0:	87 95       	ror	r24
    1ad2:	08 95       	ret
    1ad4:	12 16       	cp	r1, r18
    1ad6:	13 06       	cpc	r1, r19
    1ad8:	14 06       	cpc	r1, r20
    1ada:	55 1f       	adc	r21, r21
    1adc:	f2 cf       	rjmp	.-28     	; 0x1ac2 <__fp_split3+0xe>
    1ade:	46 95       	lsr	r20
    1ae0:	f1 df       	rcall	.-30     	; 0x1ac4 <__fp_splitA>
    1ae2:	08 c0       	rjmp	.+16     	; 0x1af4 <__fp_splitA+0x30>
    1ae4:	16 16       	cp	r1, r22
    1ae6:	17 06       	cpc	r1, r23
    1ae8:	18 06       	cpc	r1, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	f1 cf       	rjmp	.-30     	; 0x1ad0 <__fp_splitA+0xc>
    1aee:	86 95       	lsr	r24
    1af0:	71 05       	cpc	r23, r1
    1af2:	61 05       	cpc	r22, r1
    1af4:	08 94       	sec
    1af6:	08 95       	ret

00001af8 <__fp_zero>:
    1af8:	e8 94       	clt

00001afa <__fp_szero>:
    1afa:	bb 27       	eor	r27, r27
    1afc:	66 27       	eor	r22, r22
    1afe:	77 27       	eor	r23, r23
    1b00:	cb 01       	movw	r24, r22
    1b02:	97 f9       	bld	r25, 7
    1b04:	08 95       	ret

00001b06 <malloc>:
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	82 30       	cpi	r24, 0x02	; 2
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	10 f4       	brcc	.+4      	; 0x1b14 <malloc+0xe>
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	e0 91 4e 02 	lds	r30, 0x024E
    1b18:	f0 91 4f 02 	lds	r31, 0x024F
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	a0 e0       	ldi	r26, 0x00	; 0
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	30 97       	sbiw	r30, 0x00	; 0
    1b26:	39 f1       	breq	.+78     	; 0x1b76 <malloc+0x70>
    1b28:	40 81       	ld	r20, Z
    1b2a:	51 81       	ldd	r21, Z+1	; 0x01
    1b2c:	48 17       	cp	r20, r24
    1b2e:	59 07       	cpc	r21, r25
    1b30:	b8 f0       	brcs	.+46     	; 0x1b60 <malloc+0x5a>
    1b32:	48 17       	cp	r20, r24
    1b34:	59 07       	cpc	r21, r25
    1b36:	71 f4       	brne	.+28     	; 0x1b54 <malloc+0x4e>
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	10 97       	sbiw	r26, 0x00	; 0
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <malloc+0x44>
    1b40:	13 96       	adiw	r26, 0x03	; 3
    1b42:	9c 93       	st	X, r25
    1b44:	8e 93       	st	-X, r24
    1b46:	12 97       	sbiw	r26, 0x02	; 2
    1b48:	2c c0       	rjmp	.+88     	; 0x1ba2 <malloc+0x9c>
    1b4a:	90 93 4f 02 	sts	0x024F, r25
    1b4e:	80 93 4e 02 	sts	0x024E, r24
    1b52:	27 c0       	rjmp	.+78     	; 0x1ba2 <malloc+0x9c>
    1b54:	21 15       	cp	r18, r1
    1b56:	31 05       	cpc	r19, r1
    1b58:	31 f0       	breq	.+12     	; 0x1b66 <malloc+0x60>
    1b5a:	42 17       	cp	r20, r18
    1b5c:	53 07       	cpc	r21, r19
    1b5e:	18 f0       	brcs	.+6      	; 0x1b66 <malloc+0x60>
    1b60:	a9 01       	movw	r20, r18
    1b62:	db 01       	movw	r26, r22
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <malloc+0x62>
    1b66:	ef 01       	movw	r28, r30
    1b68:	9a 01       	movw	r18, r20
    1b6a:	bd 01       	movw	r22, r26
    1b6c:	df 01       	movw	r26, r30
    1b6e:	02 80       	ldd	r0, Z+2	; 0x02
    1b70:	f3 81       	ldd	r31, Z+3	; 0x03
    1b72:	e0 2d       	mov	r30, r0
    1b74:	d7 cf       	rjmp	.-82     	; 0x1b24 <malloc+0x1e>
    1b76:	21 15       	cp	r18, r1
    1b78:	31 05       	cpc	r19, r1
    1b7a:	f9 f0       	breq	.+62     	; 0x1bba <malloc+0xb4>
    1b7c:	28 1b       	sub	r18, r24
    1b7e:	39 0b       	sbc	r19, r25
    1b80:	24 30       	cpi	r18, 0x04	; 4
    1b82:	31 05       	cpc	r19, r1
    1b84:	80 f4       	brcc	.+32     	; 0x1ba6 <malloc+0xa0>
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	61 15       	cp	r22, r1
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	21 f0       	breq	.+8      	; 0x1b98 <malloc+0x92>
    1b90:	fb 01       	movw	r30, r22
    1b92:	93 83       	std	Z+3, r25	; 0x03
    1b94:	82 83       	std	Z+2, r24	; 0x02
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <malloc+0x9a>
    1b98:	90 93 4f 02 	sts	0x024F, r25
    1b9c:	80 93 4e 02 	sts	0x024E, r24
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	32 96       	adiw	r30, 0x02	; 2
    1ba4:	44 c0       	rjmp	.+136    	; 0x1c2e <malloc+0x128>
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	e2 0f       	add	r30, r18
    1baa:	f3 1f       	adc	r31, r19
    1bac:	81 93       	st	Z+, r24
    1bae:	91 93       	st	Z+, r25
    1bb0:	22 50       	subi	r18, 0x02	; 2
    1bb2:	31 09       	sbc	r19, r1
    1bb4:	39 83       	std	Y+1, r19	; 0x01
    1bb6:	28 83       	st	Y, r18
    1bb8:	3a c0       	rjmp	.+116    	; 0x1c2e <malloc+0x128>
    1bba:	20 91 4c 02 	lds	r18, 0x024C
    1bbe:	30 91 4d 02 	lds	r19, 0x024D
    1bc2:	23 2b       	or	r18, r19
    1bc4:	41 f4       	brne	.+16     	; 0x1bd6 <malloc+0xd0>
    1bc6:	20 91 02 01 	lds	r18, 0x0102
    1bca:	30 91 03 01 	lds	r19, 0x0103
    1bce:	30 93 4d 02 	sts	0x024D, r19
    1bd2:	20 93 4c 02 	sts	0x024C, r18
    1bd6:	20 91 00 01 	lds	r18, 0x0100
    1bda:	30 91 01 01 	lds	r19, 0x0101
    1bde:	21 15       	cp	r18, r1
    1be0:	31 05       	cpc	r19, r1
    1be2:	41 f4       	brne	.+16     	; 0x1bf4 <malloc+0xee>
    1be4:	2d b7       	in	r18, 0x3d	; 61
    1be6:	3e b7       	in	r19, 0x3e	; 62
    1be8:	40 91 04 01 	lds	r20, 0x0104
    1bec:	50 91 05 01 	lds	r21, 0x0105
    1bf0:	24 1b       	sub	r18, r20
    1bf2:	35 0b       	sbc	r19, r21
    1bf4:	e0 91 4c 02 	lds	r30, 0x024C
    1bf8:	f0 91 4d 02 	lds	r31, 0x024D
    1bfc:	e2 17       	cp	r30, r18
    1bfe:	f3 07       	cpc	r31, r19
    1c00:	a0 f4       	brcc	.+40     	; 0x1c2a <malloc+0x124>
    1c02:	2e 1b       	sub	r18, r30
    1c04:	3f 0b       	sbc	r19, r31
    1c06:	28 17       	cp	r18, r24
    1c08:	39 07       	cpc	r19, r25
    1c0a:	78 f0       	brcs	.+30     	; 0x1c2a <malloc+0x124>
    1c0c:	ac 01       	movw	r20, r24
    1c0e:	4e 5f       	subi	r20, 0xFE	; 254
    1c10:	5f 4f       	sbci	r21, 0xFF	; 255
    1c12:	24 17       	cp	r18, r20
    1c14:	35 07       	cpc	r19, r21
    1c16:	48 f0       	brcs	.+18     	; 0x1c2a <malloc+0x124>
    1c18:	4e 0f       	add	r20, r30
    1c1a:	5f 1f       	adc	r21, r31
    1c1c:	50 93 4d 02 	sts	0x024D, r21
    1c20:	40 93 4c 02 	sts	0x024C, r20
    1c24:	81 93       	st	Z+, r24
    1c26:	91 93       	st	Z+, r25
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <malloc+0x128>
    1c2a:	e0 e0       	ldi	r30, 0x00	; 0
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	cf 01       	movw	r24, r30
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <free>:
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <free+0xa>
    1c3e:	87 c0       	rjmp	.+270    	; 0x1d4e <free+0x118>
    1c40:	fc 01       	movw	r30, r24
    1c42:	32 97       	sbiw	r30, 0x02	; 2
    1c44:	13 82       	std	Z+3, r1	; 0x03
    1c46:	12 82       	std	Z+2, r1	; 0x02
    1c48:	c0 91 4e 02 	lds	r28, 0x024E
    1c4c:	d0 91 4f 02 	lds	r29, 0x024F
    1c50:	20 97       	sbiw	r28, 0x00	; 0
    1c52:	81 f4       	brne	.+32     	; 0x1c74 <free+0x3e>
    1c54:	20 81       	ld	r18, Z
    1c56:	31 81       	ldd	r19, Z+1	; 0x01
    1c58:	28 0f       	add	r18, r24
    1c5a:	39 1f       	adc	r19, r25
    1c5c:	80 91 4c 02 	lds	r24, 0x024C
    1c60:	90 91 4d 02 	lds	r25, 0x024D
    1c64:	82 17       	cp	r24, r18
    1c66:	93 07       	cpc	r25, r19
    1c68:	79 f5       	brne	.+94     	; 0x1cc8 <free+0x92>
    1c6a:	f0 93 4d 02 	sts	0x024D, r31
    1c6e:	e0 93 4c 02 	sts	0x024C, r30
    1c72:	6d c0       	rjmp	.+218    	; 0x1d4e <free+0x118>
    1c74:	de 01       	movw	r26, r28
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	ae 17       	cp	r26, r30
    1c7c:	bf 07       	cpc	r27, r31
    1c7e:	50 f4       	brcc	.+20     	; 0x1c94 <free+0x5e>
    1c80:	12 96       	adiw	r26, 0x02	; 2
    1c82:	4d 91       	ld	r20, X+
    1c84:	5c 91       	ld	r21, X
    1c86:	13 97       	sbiw	r26, 0x03	; 3
    1c88:	9d 01       	movw	r18, r26
    1c8a:	41 15       	cp	r20, r1
    1c8c:	51 05       	cpc	r21, r1
    1c8e:	09 f1       	breq	.+66     	; 0x1cd2 <free+0x9c>
    1c90:	da 01       	movw	r26, r20
    1c92:	f3 cf       	rjmp	.-26     	; 0x1c7a <free+0x44>
    1c94:	b3 83       	std	Z+3, r27	; 0x03
    1c96:	a2 83       	std	Z+2, r26	; 0x02
    1c98:	40 81       	ld	r20, Z
    1c9a:	51 81       	ldd	r21, Z+1	; 0x01
    1c9c:	84 0f       	add	r24, r20
    1c9e:	95 1f       	adc	r25, r21
    1ca0:	8a 17       	cp	r24, r26
    1ca2:	9b 07       	cpc	r25, r27
    1ca4:	71 f4       	brne	.+28     	; 0x1cc2 <free+0x8c>
    1ca6:	8d 91       	ld	r24, X+
    1ca8:	9c 91       	ld	r25, X
    1caa:	11 97       	sbiw	r26, 0x01	; 1
    1cac:	84 0f       	add	r24, r20
    1cae:	95 1f       	adc	r25, r21
    1cb0:	02 96       	adiw	r24, 0x02	; 2
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
    1cb6:	12 96       	adiw	r26, 0x02	; 2
    1cb8:	8d 91       	ld	r24, X+
    1cba:	9c 91       	ld	r25, X
    1cbc:	13 97       	sbiw	r26, 0x03	; 3
    1cbe:	93 83       	std	Z+3, r25	; 0x03
    1cc0:	82 83       	std	Z+2, r24	; 0x02
    1cc2:	21 15       	cp	r18, r1
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	29 f4       	brne	.+10     	; 0x1cd2 <free+0x9c>
    1cc8:	f0 93 4f 02 	sts	0x024F, r31
    1ccc:	e0 93 4e 02 	sts	0x024E, r30
    1cd0:	3e c0       	rjmp	.+124    	; 0x1d4e <free+0x118>
    1cd2:	d9 01       	movw	r26, r18
    1cd4:	13 96       	adiw	r26, 0x03	; 3
    1cd6:	fc 93       	st	X, r31
    1cd8:	ee 93       	st	-X, r30
    1cda:	12 97       	sbiw	r26, 0x02	; 2
    1cdc:	4d 91       	ld	r20, X+
    1cde:	5d 91       	ld	r21, X+
    1ce0:	a4 0f       	add	r26, r20
    1ce2:	b5 1f       	adc	r27, r21
    1ce4:	ea 17       	cp	r30, r26
    1ce6:	fb 07       	cpc	r31, r27
    1ce8:	79 f4       	brne	.+30     	; 0x1d08 <free+0xd2>
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
    1cee:	84 0f       	add	r24, r20
    1cf0:	95 1f       	adc	r25, r21
    1cf2:	02 96       	adiw	r24, 0x02	; 2
    1cf4:	d9 01       	movw	r26, r18
    1cf6:	11 96       	adiw	r26, 0x01	; 1
    1cf8:	9c 93       	st	X, r25
    1cfa:	8e 93       	st	-X, r24
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	13 96       	adiw	r26, 0x03	; 3
    1d02:	9c 93       	st	X, r25
    1d04:	8e 93       	st	-X, r24
    1d06:	12 97       	sbiw	r26, 0x02	; 2
    1d08:	e0 e0       	ldi	r30, 0x00	; 0
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <free+0xe4>
    1d14:	fe 01       	movw	r30, r28
    1d16:	ec 01       	movw	r28, r24
    1d18:	f9 cf       	rjmp	.-14     	; 0x1d0c <free+0xd6>
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	02 96       	adiw	r24, 0x02	; 2
    1d1e:	28 81       	ld	r18, Y
    1d20:	39 81       	ldd	r19, Y+1	; 0x01
    1d22:	82 0f       	add	r24, r18
    1d24:	93 1f       	adc	r25, r19
    1d26:	20 91 4c 02 	lds	r18, 0x024C
    1d2a:	30 91 4d 02 	lds	r19, 0x024D
    1d2e:	28 17       	cp	r18, r24
    1d30:	39 07       	cpc	r19, r25
    1d32:	69 f4       	brne	.+26     	; 0x1d4e <free+0x118>
    1d34:	30 97       	sbiw	r30, 0x00	; 0
    1d36:	29 f4       	brne	.+10     	; 0x1d42 <free+0x10c>
    1d38:	10 92 4f 02 	sts	0x024F, r1
    1d3c:	10 92 4e 02 	sts	0x024E, r1
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <free+0x110>
    1d42:	13 82       	std	Z+3, r1	; 0x03
    1d44:	12 82       	std	Z+2, r1	; 0x02
    1d46:	d0 93 4d 02 	sts	0x024D, r29
    1d4a:	c0 93 4c 02 	sts	0x024C, r28
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	08 95       	ret

00001d54 <fdevopen>:
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	ec 01       	movw	r28, r24
    1d5e:	8b 01       	movw	r16, r22
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	31 f4       	brne	.+12     	; 0x1d70 <fdevopen+0x1c>
    1d64:	61 15       	cp	r22, r1
    1d66:	71 05       	cpc	r23, r1
    1d68:	19 f4       	brne	.+6      	; 0x1d70 <fdevopen+0x1c>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	38 c0       	rjmp	.+112    	; 0x1de0 <fdevopen+0x8c>
    1d70:	6e e0       	ldi	r22, 0x0E	; 14
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 fd 10 	call	0x21fa	; 0x21fa <calloc>
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	a1 f3       	breq	.-24     	; 0x1d6a <fdevopen+0x16>
    1d82:	80 e8       	ldi	r24, 0x80	; 128
    1d84:	83 83       	std	Z+3, r24	; 0x03
    1d86:	01 15       	cp	r16, r1
    1d88:	11 05       	cpc	r17, r1
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <fdevopen+0x54>
    1d8c:	13 87       	std	Z+11, r17	; 0x0b
    1d8e:	02 87       	std	Z+10, r16	; 0x0a
    1d90:	81 e8       	ldi	r24, 0x81	; 129
    1d92:	83 83       	std	Z+3, r24	; 0x03
    1d94:	80 91 50 02 	lds	r24, 0x0250
    1d98:	90 91 51 02 	lds	r25, 0x0251
    1d9c:	89 2b       	or	r24, r25
    1d9e:	21 f4       	brne	.+8      	; 0x1da8 <fdevopen+0x54>
    1da0:	f0 93 51 02 	sts	0x0251, r31
    1da4:	e0 93 50 02 	sts	0x0250, r30
    1da8:	20 97       	sbiw	r28, 0x00	; 0
    1daa:	c9 f0       	breq	.+50     	; 0x1dde <fdevopen+0x8a>
    1dac:	d1 87       	std	Z+9, r29	; 0x09
    1dae:	c0 87       	std	Z+8, r28	; 0x08
    1db0:	83 81       	ldd	r24, Z+3	; 0x03
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	83 83       	std	Z+3, r24	; 0x03
    1db6:	80 91 52 02 	lds	r24, 0x0252
    1dba:	90 91 53 02 	lds	r25, 0x0253
    1dbe:	89 2b       	or	r24, r25
    1dc0:	71 f4       	brne	.+28     	; 0x1dde <fdevopen+0x8a>
    1dc2:	f0 93 53 02 	sts	0x0253, r31
    1dc6:	e0 93 52 02 	sts	0x0252, r30
    1dca:	80 91 54 02 	lds	r24, 0x0254
    1dce:	90 91 55 02 	lds	r25, 0x0255
    1dd2:	89 2b       	or	r24, r25
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <fdevopen+0x8a>
    1dd6:	f0 93 55 02 	sts	0x0255, r31
    1dda:	e0 93 54 02 	sts	0x0254, r30
    1dde:	cf 01       	movw	r24, r30
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	08 95       	ret

00001dea <printf>:
    1dea:	a0 e0       	ldi	r26, 0x00	; 0
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	eb ef       	ldi	r30, 0xFB	; 251
    1df0:	fe e0       	ldi	r31, 0x0E	; 14
    1df2:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__+0x20>
    1df6:	fe 01       	movw	r30, r28
    1df8:	35 96       	adiw	r30, 0x05	; 5
    1dfa:	61 91       	ld	r22, Z+
    1dfc:	71 91       	ld	r23, Z+
    1dfe:	af 01       	movw	r20, r30
    1e00:	80 91 52 02 	lds	r24, 0x0252
    1e04:	90 91 53 02 	lds	r25, 0x0253
    1e08:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <vfprintf>
    1e0c:	e2 e0       	ldi	r30, 0x02	; 2
    1e0e:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__+0x20>

00001e12 <sprintf>:
    1e12:	ae e0       	ldi	r26, 0x0E	; 14
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ef e0       	ldi	r30, 0x0F	; 15
    1e18:	ff e0       	ldi	r31, 0x0F	; 15
    1e1a:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__prologue_saves__+0x1c>
    1e1e:	0d 89       	ldd	r16, Y+21	; 0x15
    1e20:	1e 89       	ldd	r17, Y+22	; 0x16
    1e22:	86 e0       	ldi	r24, 0x06	; 6
    1e24:	8c 83       	std	Y+4, r24	; 0x04
    1e26:	1a 83       	std	Y+2, r17	; 0x02
    1e28:	09 83       	std	Y+1, r16	; 0x01
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	9f e7       	ldi	r25, 0x7F	; 127
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	ae 01       	movw	r20, r28
    1e34:	47 5e       	subi	r20, 0xE7	; 231
    1e36:	5f 4f       	sbci	r21, 0xFF	; 255
    1e38:	6f 89       	ldd	r22, Y+23	; 0x17
    1e3a:	78 8d       	ldd	r23, Y+24	; 0x18
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <vfprintf>
    1e44:	ef 81       	ldd	r30, Y+7	; 0x07
    1e46:	f8 85       	ldd	r31, Y+8	; 0x08
    1e48:	e0 0f       	add	r30, r16
    1e4a:	f1 1f       	adc	r31, r17
    1e4c:	10 82       	st	Z, r1
    1e4e:	2e 96       	adiw	r28, 0x0e	; 14
    1e50:	e4 e0       	ldi	r30, 0x04	; 4
    1e52:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__epilogue_restores__+0x1c>

00001e56 <vfprintf>:
    1e56:	ac e0       	ldi	r26, 0x0C	; 12
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e1 e3       	ldi	r30, 0x31	; 49
    1e5c:	ff e0       	ldi	r31, 0x0F	; 15
    1e5e:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__prologue_saves__>
    1e62:	7c 01       	movw	r14, r24
    1e64:	6b 01       	movw	r12, r22
    1e66:	8a 01       	movw	r16, r20
    1e68:	fc 01       	movw	r30, r24
    1e6a:	17 82       	std	Z+7, r1	; 0x07
    1e6c:	16 82       	std	Z+6, r1	; 0x06
    1e6e:	83 81       	ldd	r24, Z+3	; 0x03
    1e70:	81 ff       	sbrs	r24, 1
    1e72:	bd c1       	rjmp	.+890    	; 0x21ee <vfprintf+0x398>
    1e74:	ce 01       	movw	r24, r28
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	4c 01       	movw	r8, r24
    1e7a:	f7 01       	movw	r30, r14
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	f6 01       	movw	r30, r12
    1e80:	93 fd       	sbrc	r25, 3
    1e82:	85 91       	lpm	r24, Z+
    1e84:	93 ff       	sbrs	r25, 3
    1e86:	81 91       	ld	r24, Z+
    1e88:	6f 01       	movw	r12, r30
    1e8a:	88 23       	and	r24, r24
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <vfprintf+0x3a>
    1e8e:	ab c1       	rjmp	.+854    	; 0x21e6 <vfprintf+0x390>
    1e90:	85 32       	cpi	r24, 0x25	; 37
    1e92:	39 f4       	brne	.+14     	; 0x1ea2 <vfprintf+0x4c>
    1e94:	93 fd       	sbrc	r25, 3
    1e96:	85 91       	lpm	r24, Z+
    1e98:	93 ff       	sbrs	r25, 3
    1e9a:	81 91       	ld	r24, Z+
    1e9c:	6f 01       	movw	r12, r30
    1e9e:	85 32       	cpi	r24, 0x25	; 37
    1ea0:	29 f4       	brne	.+10     	; 0x1eac <vfprintf+0x56>
    1ea2:	b7 01       	movw	r22, r14
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1eaa:	e7 cf       	rjmp	.-50     	; 0x1e7a <vfprintf+0x24>
    1eac:	51 2c       	mov	r5, r1
    1eae:	31 2c       	mov	r3, r1
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	20 32       	cpi	r18, 0x20	; 32
    1eb4:	a0 f4       	brcc	.+40     	; 0x1ede <vfprintf+0x88>
    1eb6:	8b 32       	cpi	r24, 0x2B	; 43
    1eb8:	69 f0       	breq	.+26     	; 0x1ed4 <vfprintf+0x7e>
    1eba:	30 f4       	brcc	.+12     	; 0x1ec8 <vfprintf+0x72>
    1ebc:	80 32       	cpi	r24, 0x20	; 32
    1ebe:	59 f0       	breq	.+22     	; 0x1ed6 <vfprintf+0x80>
    1ec0:	83 32       	cpi	r24, 0x23	; 35
    1ec2:	69 f4       	brne	.+26     	; 0x1ede <vfprintf+0x88>
    1ec4:	20 61       	ori	r18, 0x10	; 16
    1ec6:	2c c0       	rjmp	.+88     	; 0x1f20 <vfprintf+0xca>
    1ec8:	8d 32       	cpi	r24, 0x2D	; 45
    1eca:	39 f0       	breq	.+14     	; 0x1eda <vfprintf+0x84>
    1ecc:	80 33       	cpi	r24, 0x30	; 48
    1ece:	39 f4       	brne	.+14     	; 0x1ede <vfprintf+0x88>
    1ed0:	21 60       	ori	r18, 0x01	; 1
    1ed2:	26 c0       	rjmp	.+76     	; 0x1f20 <vfprintf+0xca>
    1ed4:	22 60       	ori	r18, 0x02	; 2
    1ed6:	24 60       	ori	r18, 0x04	; 4
    1ed8:	23 c0       	rjmp	.+70     	; 0x1f20 <vfprintf+0xca>
    1eda:	28 60       	ori	r18, 0x08	; 8
    1edc:	21 c0       	rjmp	.+66     	; 0x1f20 <vfprintf+0xca>
    1ede:	27 fd       	sbrc	r18, 7
    1ee0:	27 c0       	rjmp	.+78     	; 0x1f30 <vfprintf+0xda>
    1ee2:	30 ed       	ldi	r19, 0xD0	; 208
    1ee4:	38 0f       	add	r19, r24
    1ee6:	3a 30       	cpi	r19, 0x0A	; 10
    1ee8:	78 f4       	brcc	.+30     	; 0x1f08 <vfprintf+0xb2>
    1eea:	26 ff       	sbrs	r18, 6
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <vfprintf+0xa4>
    1eee:	fa e0       	ldi	r31, 0x0A	; 10
    1ef0:	5f 9e       	mul	r5, r31
    1ef2:	30 0d       	add	r19, r0
    1ef4:	11 24       	eor	r1, r1
    1ef6:	53 2e       	mov	r5, r19
    1ef8:	13 c0       	rjmp	.+38     	; 0x1f20 <vfprintf+0xca>
    1efa:	8a e0       	ldi	r24, 0x0A	; 10
    1efc:	38 9e       	mul	r3, r24
    1efe:	30 0d       	add	r19, r0
    1f00:	11 24       	eor	r1, r1
    1f02:	33 2e       	mov	r3, r19
    1f04:	20 62       	ori	r18, 0x20	; 32
    1f06:	0c c0       	rjmp	.+24     	; 0x1f20 <vfprintf+0xca>
    1f08:	8e 32       	cpi	r24, 0x2E	; 46
    1f0a:	21 f4       	brne	.+8      	; 0x1f14 <vfprintf+0xbe>
    1f0c:	26 fd       	sbrc	r18, 6
    1f0e:	6b c1       	rjmp	.+726    	; 0x21e6 <vfprintf+0x390>
    1f10:	20 64       	ori	r18, 0x40	; 64
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <vfprintf+0xca>
    1f14:	8c 36       	cpi	r24, 0x6C	; 108
    1f16:	11 f4       	brne	.+4      	; 0x1f1c <vfprintf+0xc6>
    1f18:	20 68       	ori	r18, 0x80	; 128
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <vfprintf+0xca>
    1f1c:	88 36       	cpi	r24, 0x68	; 104
    1f1e:	41 f4       	brne	.+16     	; 0x1f30 <vfprintf+0xda>
    1f20:	f6 01       	movw	r30, r12
    1f22:	93 fd       	sbrc	r25, 3
    1f24:	85 91       	lpm	r24, Z+
    1f26:	93 ff       	sbrs	r25, 3
    1f28:	81 91       	ld	r24, Z+
    1f2a:	6f 01       	movw	r12, r30
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	c1 cf       	rjmp	.-126    	; 0x1eb2 <vfprintf+0x5c>
    1f30:	98 2f       	mov	r25, r24
    1f32:	9f 7d       	andi	r25, 0xDF	; 223
    1f34:	95 54       	subi	r25, 0x45	; 69
    1f36:	93 30       	cpi	r25, 0x03	; 3
    1f38:	28 f4       	brcc	.+10     	; 0x1f44 <vfprintf+0xee>
    1f3a:	0c 5f       	subi	r16, 0xFC	; 252
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	ff e3       	ldi	r31, 0x3F	; 63
    1f40:	f9 83       	std	Y+1, r31	; 0x01
    1f42:	0d c0       	rjmp	.+26     	; 0x1f5e <vfprintf+0x108>
    1f44:	83 36       	cpi	r24, 0x63	; 99
    1f46:	31 f0       	breq	.+12     	; 0x1f54 <vfprintf+0xfe>
    1f48:	83 37       	cpi	r24, 0x73	; 115
    1f4a:	71 f0       	breq	.+28     	; 0x1f68 <vfprintf+0x112>
    1f4c:	83 35       	cpi	r24, 0x53	; 83
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <vfprintf+0xfc>
    1f50:	5b c0       	rjmp	.+182    	; 0x2008 <vfprintf+0x1b2>
    1f52:	22 c0       	rjmp	.+68     	; 0x1f98 <vfprintf+0x142>
    1f54:	f8 01       	movw	r30, r16
    1f56:	80 81       	ld	r24, Z
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	0e 5f       	subi	r16, 0xFE	; 254
    1f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5e:	44 24       	eor	r4, r4
    1f60:	43 94       	inc	r4
    1f62:	51 2c       	mov	r5, r1
    1f64:	54 01       	movw	r10, r8
    1f66:	15 c0       	rjmp	.+42     	; 0x1f92 <vfprintf+0x13c>
    1f68:	38 01       	movw	r6, r16
    1f6a:	f2 e0       	ldi	r31, 0x02	; 2
    1f6c:	6f 0e       	add	r6, r31
    1f6e:	71 1c       	adc	r7, r1
    1f70:	f8 01       	movw	r30, r16
    1f72:	a0 80       	ld	r10, Z
    1f74:	b1 80       	ldd	r11, Z+1	; 0x01
    1f76:	26 ff       	sbrs	r18, 6
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <vfprintf+0x12a>
    1f7a:	65 2d       	mov	r22, r5
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <vfprintf+0x12e>
    1f80:	6f ef       	ldi	r22, 0xFF	; 255
    1f82:	7f ef       	ldi	r23, 0xFF	; 255
    1f84:	c5 01       	movw	r24, r10
    1f86:	2c 87       	std	Y+12, r18	; 0x0c
    1f88:	0e 94 2b 11 	call	0x2256	; 0x2256 <strnlen>
    1f8c:	2c 01       	movw	r4, r24
    1f8e:	83 01       	movw	r16, r6
    1f90:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f92:	2f 77       	andi	r18, 0x7F	; 127
    1f94:	22 2e       	mov	r2, r18
    1f96:	17 c0       	rjmp	.+46     	; 0x1fc6 <vfprintf+0x170>
    1f98:	38 01       	movw	r6, r16
    1f9a:	f2 e0       	ldi	r31, 0x02	; 2
    1f9c:	6f 0e       	add	r6, r31
    1f9e:	71 1c       	adc	r7, r1
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	a0 80       	ld	r10, Z
    1fa4:	b1 80       	ldd	r11, Z+1	; 0x01
    1fa6:	26 ff       	sbrs	r18, 6
    1fa8:	03 c0       	rjmp	.+6      	; 0x1fb0 <vfprintf+0x15a>
    1faa:	65 2d       	mov	r22, r5
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <vfprintf+0x15e>
    1fb0:	6f ef       	ldi	r22, 0xFF	; 255
    1fb2:	7f ef       	ldi	r23, 0xFF	; 255
    1fb4:	c5 01       	movw	r24, r10
    1fb6:	2c 87       	std	Y+12, r18	; 0x0c
    1fb8:	0e 94 19 11 	call	0x2232	; 0x2232 <strnlen_P>
    1fbc:	2c 01       	movw	r4, r24
    1fbe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fc0:	20 68       	ori	r18, 0x80	; 128
    1fc2:	22 2e       	mov	r2, r18
    1fc4:	83 01       	movw	r16, r6
    1fc6:	23 fc       	sbrc	r2, 3
    1fc8:	1b c0       	rjmp	.+54     	; 0x2000 <vfprintf+0x1aa>
    1fca:	83 2d       	mov	r24, r3
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	48 16       	cp	r4, r24
    1fd0:	59 06       	cpc	r5, r25
    1fd2:	b0 f4       	brcc	.+44     	; 0x2000 <vfprintf+0x1aa>
    1fd4:	b7 01       	movw	r22, r14
    1fd6:	80 e2       	ldi	r24, 0x20	; 32
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1fde:	3a 94       	dec	r3
    1fe0:	f4 cf       	rjmp	.-24     	; 0x1fca <vfprintf+0x174>
    1fe2:	f5 01       	movw	r30, r10
    1fe4:	27 fc       	sbrc	r2, 7
    1fe6:	85 91       	lpm	r24, Z+
    1fe8:	27 fe       	sbrs	r2, 7
    1fea:	81 91       	ld	r24, Z+
    1fec:	5f 01       	movw	r10, r30
    1fee:	b7 01       	movw	r22, r14
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1ff6:	31 10       	cpse	r3, r1
    1ff8:	3a 94       	dec	r3
    1ffa:	f1 e0       	ldi	r31, 0x01	; 1
    1ffc:	4f 1a       	sub	r4, r31
    1ffe:	51 08       	sbc	r5, r1
    2000:	41 14       	cp	r4, r1
    2002:	51 04       	cpc	r5, r1
    2004:	71 f7       	brne	.-36     	; 0x1fe2 <vfprintf+0x18c>
    2006:	e5 c0       	rjmp	.+458    	; 0x21d2 <vfprintf+0x37c>
    2008:	84 36       	cpi	r24, 0x64	; 100
    200a:	11 f0       	breq	.+4      	; 0x2010 <vfprintf+0x1ba>
    200c:	89 36       	cpi	r24, 0x69	; 105
    200e:	39 f5       	brne	.+78     	; 0x205e <vfprintf+0x208>
    2010:	f8 01       	movw	r30, r16
    2012:	27 ff       	sbrs	r18, 7
    2014:	07 c0       	rjmp	.+14     	; 0x2024 <vfprintf+0x1ce>
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	0c 5f       	subi	r16, 0xFC	; 252
    2020:	1f 4f       	sbci	r17, 0xFF	; 255
    2022:	08 c0       	rjmp	.+16     	; 0x2034 <vfprintf+0x1de>
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	88 27       	eor	r24, r24
    202a:	77 fd       	sbrc	r23, 7
    202c:	80 95       	com	r24
    202e:	98 2f       	mov	r25, r24
    2030:	0e 5f       	subi	r16, 0xFE	; 254
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	2f 76       	andi	r18, 0x6F	; 111
    2036:	b2 2e       	mov	r11, r18
    2038:	97 ff       	sbrs	r25, 7
    203a:	09 c0       	rjmp	.+18     	; 0x204e <vfprintf+0x1f8>
    203c:	90 95       	com	r25
    203e:	80 95       	com	r24
    2040:	70 95       	com	r23
    2042:	61 95       	neg	r22
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	20 68       	ori	r18, 0x80	; 128
    204c:	b2 2e       	mov	r11, r18
    204e:	2a e0       	ldi	r18, 0x0A	; 10
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	a4 01       	movw	r20, r8
    2054:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__ultoa_invert>
    2058:	a8 2e       	mov	r10, r24
    205a:	a8 18       	sub	r10, r8
    205c:	44 c0       	rjmp	.+136    	; 0x20e6 <vfprintf+0x290>
    205e:	85 37       	cpi	r24, 0x75	; 117
    2060:	29 f4       	brne	.+10     	; 0x206c <vfprintf+0x216>
    2062:	2f 7e       	andi	r18, 0xEF	; 239
    2064:	b2 2e       	mov	r11, r18
    2066:	2a e0       	ldi	r18, 0x0A	; 10
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	25 c0       	rjmp	.+74     	; 0x20b6 <vfprintf+0x260>
    206c:	f2 2f       	mov	r31, r18
    206e:	f9 7f       	andi	r31, 0xF9	; 249
    2070:	bf 2e       	mov	r11, r31
    2072:	8f 36       	cpi	r24, 0x6F	; 111
    2074:	c1 f0       	breq	.+48     	; 0x20a6 <vfprintf+0x250>
    2076:	18 f4       	brcc	.+6      	; 0x207e <vfprintf+0x228>
    2078:	88 35       	cpi	r24, 0x58	; 88
    207a:	79 f0       	breq	.+30     	; 0x209a <vfprintf+0x244>
    207c:	b4 c0       	rjmp	.+360    	; 0x21e6 <vfprintf+0x390>
    207e:	80 37       	cpi	r24, 0x70	; 112
    2080:	19 f0       	breq	.+6      	; 0x2088 <vfprintf+0x232>
    2082:	88 37       	cpi	r24, 0x78	; 120
    2084:	21 f0       	breq	.+8      	; 0x208e <vfprintf+0x238>
    2086:	af c0       	rjmp	.+350    	; 0x21e6 <vfprintf+0x390>
    2088:	2f 2f       	mov	r18, r31
    208a:	20 61       	ori	r18, 0x10	; 16
    208c:	b2 2e       	mov	r11, r18
    208e:	b4 fe       	sbrs	r11, 4
    2090:	0d c0       	rjmp	.+26     	; 0x20ac <vfprintf+0x256>
    2092:	8b 2d       	mov	r24, r11
    2094:	84 60       	ori	r24, 0x04	; 4
    2096:	b8 2e       	mov	r11, r24
    2098:	09 c0       	rjmp	.+18     	; 0x20ac <vfprintf+0x256>
    209a:	24 ff       	sbrs	r18, 4
    209c:	0a c0       	rjmp	.+20     	; 0x20b2 <vfprintf+0x25c>
    209e:	9f 2f       	mov	r25, r31
    20a0:	96 60       	ori	r25, 0x06	; 6
    20a2:	b9 2e       	mov	r11, r25
    20a4:	06 c0       	rjmp	.+12     	; 0x20b2 <vfprintf+0x25c>
    20a6:	28 e0       	ldi	r18, 0x08	; 8
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	05 c0       	rjmp	.+10     	; 0x20b6 <vfprintf+0x260>
    20ac:	20 e1       	ldi	r18, 0x10	; 16
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <vfprintf+0x260>
    20b2:	20 e1       	ldi	r18, 0x10	; 16
    20b4:	32 e0       	ldi	r19, 0x02	; 2
    20b6:	f8 01       	movw	r30, r16
    20b8:	b7 fe       	sbrs	r11, 7
    20ba:	07 c0       	rjmp	.+14     	; 0x20ca <vfprintf+0x274>
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	82 81       	ldd	r24, Z+2	; 0x02
    20c2:	93 81       	ldd	r25, Z+3	; 0x03
    20c4:	0c 5f       	subi	r16, 0xFC	; 252
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	06 c0       	rjmp	.+12     	; 0x20d6 <vfprintf+0x280>
    20ca:	60 81       	ld	r22, Z
    20cc:	71 81       	ldd	r23, Z+1	; 0x01
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 5f       	subi	r16, 0xFE	; 254
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	a4 01       	movw	r20, r8
    20d8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__ultoa_invert>
    20dc:	a8 2e       	mov	r10, r24
    20de:	a8 18       	sub	r10, r8
    20e0:	fb 2d       	mov	r31, r11
    20e2:	ff 77       	andi	r31, 0x7F	; 127
    20e4:	bf 2e       	mov	r11, r31
    20e6:	b6 fe       	sbrs	r11, 6
    20e8:	0b c0       	rjmp	.+22     	; 0x2100 <vfprintf+0x2aa>
    20ea:	2b 2d       	mov	r18, r11
    20ec:	2e 7f       	andi	r18, 0xFE	; 254
    20ee:	a5 14       	cp	r10, r5
    20f0:	50 f4       	brcc	.+20     	; 0x2106 <vfprintf+0x2b0>
    20f2:	b4 fe       	sbrs	r11, 4
    20f4:	0a c0       	rjmp	.+20     	; 0x210a <vfprintf+0x2b4>
    20f6:	b2 fc       	sbrc	r11, 2
    20f8:	08 c0       	rjmp	.+16     	; 0x210a <vfprintf+0x2b4>
    20fa:	2b 2d       	mov	r18, r11
    20fc:	2e 7e       	andi	r18, 0xEE	; 238
    20fe:	05 c0       	rjmp	.+10     	; 0x210a <vfprintf+0x2b4>
    2100:	7a 2c       	mov	r7, r10
    2102:	2b 2d       	mov	r18, r11
    2104:	03 c0       	rjmp	.+6      	; 0x210c <vfprintf+0x2b6>
    2106:	7a 2c       	mov	r7, r10
    2108:	01 c0       	rjmp	.+2      	; 0x210c <vfprintf+0x2b6>
    210a:	75 2c       	mov	r7, r5
    210c:	24 ff       	sbrs	r18, 4
    210e:	0d c0       	rjmp	.+26     	; 0x212a <vfprintf+0x2d4>
    2110:	fe 01       	movw	r30, r28
    2112:	ea 0d       	add	r30, r10
    2114:	f1 1d       	adc	r31, r1
    2116:	80 81       	ld	r24, Z
    2118:	80 33       	cpi	r24, 0x30	; 48
    211a:	11 f4       	brne	.+4      	; 0x2120 <vfprintf+0x2ca>
    211c:	29 7e       	andi	r18, 0xE9	; 233
    211e:	09 c0       	rjmp	.+18     	; 0x2132 <vfprintf+0x2dc>
    2120:	22 ff       	sbrs	r18, 2
    2122:	06 c0       	rjmp	.+12     	; 0x2130 <vfprintf+0x2da>
    2124:	73 94       	inc	r7
    2126:	73 94       	inc	r7
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <vfprintf+0x2dc>
    212a:	82 2f       	mov	r24, r18
    212c:	86 78       	andi	r24, 0x86	; 134
    212e:	09 f0       	breq	.+2      	; 0x2132 <vfprintf+0x2dc>
    2130:	73 94       	inc	r7
    2132:	23 fd       	sbrc	r18, 3
    2134:	13 c0       	rjmp	.+38     	; 0x215c <vfprintf+0x306>
    2136:	20 ff       	sbrs	r18, 0
    2138:	06 c0       	rjmp	.+12     	; 0x2146 <vfprintf+0x2f0>
    213a:	5a 2c       	mov	r5, r10
    213c:	73 14       	cp	r7, r3
    213e:	18 f4       	brcc	.+6      	; 0x2146 <vfprintf+0x2f0>
    2140:	53 0c       	add	r5, r3
    2142:	57 18       	sub	r5, r7
    2144:	73 2c       	mov	r7, r3
    2146:	73 14       	cp	r7, r3
    2148:	68 f4       	brcc	.+26     	; 0x2164 <vfprintf+0x30e>
    214a:	b7 01       	movw	r22, r14
    214c:	80 e2       	ldi	r24, 0x20	; 32
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	2c 87       	std	Y+12, r18	; 0x0c
    2152:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    2156:	73 94       	inc	r7
    2158:	2c 85       	ldd	r18, Y+12	; 0x0c
    215a:	f5 cf       	rjmp	.-22     	; 0x2146 <vfprintf+0x2f0>
    215c:	73 14       	cp	r7, r3
    215e:	10 f4       	brcc	.+4      	; 0x2164 <vfprintf+0x30e>
    2160:	37 18       	sub	r3, r7
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <vfprintf+0x310>
    2164:	31 2c       	mov	r3, r1
    2166:	24 ff       	sbrs	r18, 4
    2168:	12 c0       	rjmp	.+36     	; 0x218e <vfprintf+0x338>
    216a:	b7 01       	movw	r22, r14
    216c:	80 e3       	ldi	r24, 0x30	; 48
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	2c 87       	std	Y+12, r18	; 0x0c
    2172:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    2176:	2c 85       	ldd	r18, Y+12	; 0x0c
    2178:	22 ff       	sbrs	r18, 2
    217a:	17 c0       	rjmp	.+46     	; 0x21aa <vfprintf+0x354>
    217c:	21 ff       	sbrs	r18, 1
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <vfprintf+0x330>
    2180:	88 e5       	ldi	r24, 0x58	; 88
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	02 c0       	rjmp	.+4      	; 0x218a <vfprintf+0x334>
    2186:	88 e7       	ldi	r24, 0x78	; 120
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	b7 01       	movw	r22, r14
    218c:	0c c0       	rjmp	.+24     	; 0x21a6 <vfprintf+0x350>
    218e:	82 2f       	mov	r24, r18
    2190:	86 78       	andi	r24, 0x86	; 134
    2192:	59 f0       	breq	.+22     	; 0x21aa <vfprintf+0x354>
    2194:	21 fd       	sbrc	r18, 1
    2196:	02 c0       	rjmp	.+4      	; 0x219c <vfprintf+0x346>
    2198:	80 e2       	ldi	r24, 0x20	; 32
    219a:	01 c0       	rjmp	.+2      	; 0x219e <vfprintf+0x348>
    219c:	8b e2       	ldi	r24, 0x2B	; 43
    219e:	27 fd       	sbrc	r18, 7
    21a0:	8d e2       	ldi	r24, 0x2D	; 45
    21a2:	b7 01       	movw	r22, r14
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    21aa:	a5 14       	cp	r10, r5
    21ac:	38 f4       	brcc	.+14     	; 0x21bc <vfprintf+0x366>
    21ae:	b7 01       	movw	r22, r14
    21b0:	80 e3       	ldi	r24, 0x30	; 48
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    21b8:	5a 94       	dec	r5
    21ba:	f7 cf       	rjmp	.-18     	; 0x21aa <vfprintf+0x354>
    21bc:	aa 94       	dec	r10
    21be:	f4 01       	movw	r30, r8
    21c0:	ea 0d       	add	r30, r10
    21c2:	f1 1d       	adc	r31, r1
    21c4:	80 81       	ld	r24, Z
    21c6:	b7 01       	movw	r22, r14
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    21ce:	a1 10       	cpse	r10, r1
    21d0:	f5 cf       	rjmp	.-22     	; 0x21bc <vfprintf+0x366>
    21d2:	33 20       	and	r3, r3
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <vfprintf+0x382>
    21d6:	51 ce       	rjmp	.-862    	; 0x1e7a <vfprintf+0x24>
    21d8:	b7 01       	movw	r22, r14
    21da:	80 e2       	ldi	r24, 0x20	; 32
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    21e2:	3a 94       	dec	r3
    21e4:	f6 cf       	rjmp	.-20     	; 0x21d2 <vfprintf+0x37c>
    21e6:	f7 01       	movw	r30, r14
    21e8:	86 81       	ldd	r24, Z+6	; 0x06
    21ea:	97 81       	ldd	r25, Z+7	; 0x07
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <vfprintf+0x39c>
    21ee:	8f ef       	ldi	r24, 0xFF	; 255
    21f0:	9f ef       	ldi	r25, 0xFF	; 255
    21f2:	2c 96       	adiw	r28, 0x0c	; 12
    21f4:	e2 e1       	ldi	r30, 0x12	; 18
    21f6:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__epilogue_restores__>

000021fa <calloc>:
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	86 9f       	mul	r24, r22
    2204:	80 01       	movw	r16, r0
    2206:	87 9f       	mul	r24, r23
    2208:	10 0d       	add	r17, r0
    220a:	96 9f       	mul	r25, r22
    220c:	10 0d       	add	r17, r0
    220e:	11 24       	eor	r1, r1
    2210:	c8 01       	movw	r24, r16
    2212:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <malloc>
    2216:	ec 01       	movw	r28, r24
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	29 f0       	breq	.+10     	; 0x2226 <calloc+0x2c>
    221c:	a8 01       	movw	r20, r16
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	0e 94 24 11 	call	0x2248	; 0x2248 <memset>
    2226:	ce 01       	movw	r24, r28
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <strnlen_P>:
    2232:	fc 01       	movw	r30, r24
    2234:	05 90       	lpm	r0, Z+
    2236:	61 50       	subi	r22, 0x01	; 1
    2238:	70 40       	sbci	r23, 0x00	; 0
    223a:	01 10       	cpse	r0, r1
    223c:	d8 f7       	brcc	.-10     	; 0x2234 <strnlen_P+0x2>
    223e:	80 95       	com	r24
    2240:	90 95       	com	r25
    2242:	8e 0f       	add	r24, r30
    2244:	9f 1f       	adc	r25, r31
    2246:	08 95       	ret

00002248 <memset>:
    2248:	dc 01       	movw	r26, r24
    224a:	01 c0       	rjmp	.+2      	; 0x224e <memset+0x6>
    224c:	6d 93       	st	X+, r22
    224e:	41 50       	subi	r20, 0x01	; 1
    2250:	50 40       	sbci	r21, 0x00	; 0
    2252:	e0 f7       	brcc	.-8      	; 0x224c <memset+0x4>
    2254:	08 95       	ret

00002256 <strnlen>:
    2256:	fc 01       	movw	r30, r24
    2258:	61 50       	subi	r22, 0x01	; 1
    225a:	70 40       	sbci	r23, 0x00	; 0
    225c:	01 90       	ld	r0, Z+
    225e:	01 10       	cpse	r0, r1
    2260:	d8 f7       	brcc	.-10     	; 0x2258 <strnlen+0x2>
    2262:	80 95       	com	r24
    2264:	90 95       	com	r25
    2266:	8e 0f       	add	r24, r30
    2268:	9f 1f       	adc	r25, r31
    226a:	08 95       	ret

0000226c <fputc>:
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	18 2f       	mov	r17, r24
    2276:	09 2f       	mov	r16, r25
    2278:	eb 01       	movw	r28, r22
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	81 fd       	sbrc	r24, 1
    227e:	03 c0       	rjmp	.+6      	; 0x2286 <fputc+0x1a>
    2280:	8f ef       	ldi	r24, 0xFF	; 255
    2282:	9f ef       	ldi	r25, 0xFF	; 255
    2284:	20 c0       	rjmp	.+64     	; 0x22c6 <fputc+0x5a>
    2286:	82 ff       	sbrs	r24, 2
    2288:	10 c0       	rjmp	.+32     	; 0x22aa <fputc+0x3e>
    228a:	4e 81       	ldd	r20, Y+6	; 0x06
    228c:	5f 81       	ldd	r21, Y+7	; 0x07
    228e:	2c 81       	ldd	r18, Y+4	; 0x04
    2290:	3d 81       	ldd	r19, Y+5	; 0x05
    2292:	42 17       	cp	r20, r18
    2294:	53 07       	cpc	r21, r19
    2296:	7c f4       	brge	.+30     	; 0x22b6 <fputc+0x4a>
    2298:	e8 81       	ld	r30, Y
    229a:	f9 81       	ldd	r31, Y+1	; 0x01
    229c:	9f 01       	movw	r18, r30
    229e:	2f 5f       	subi	r18, 0xFF	; 255
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	39 83       	std	Y+1, r19	; 0x01
    22a4:	28 83       	st	Y, r18
    22a6:	10 83       	st	Z, r17
    22a8:	06 c0       	rjmp	.+12     	; 0x22b6 <fputc+0x4a>
    22aa:	e8 85       	ldd	r30, Y+8	; 0x08
    22ac:	f9 85       	ldd	r31, Y+9	; 0x09
    22ae:	81 2f       	mov	r24, r17
    22b0:	09 95       	icall
    22b2:	89 2b       	or	r24, r25
    22b4:	29 f7       	brne	.-54     	; 0x2280 <fputc+0x14>
    22b6:	2e 81       	ldd	r18, Y+6	; 0x06
    22b8:	3f 81       	ldd	r19, Y+7	; 0x07
    22ba:	2f 5f       	subi	r18, 0xFF	; 255
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	3f 83       	std	Y+7, r19	; 0x07
    22c0:	2e 83       	std	Y+6, r18	; 0x06
    22c2:	81 2f       	mov	r24, r17
    22c4:	90 2f       	mov	r25, r16
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	08 95       	ret

000022d0 <__ultoa_invert>:
    22d0:	fa 01       	movw	r30, r20
    22d2:	aa 27       	eor	r26, r26
    22d4:	28 30       	cpi	r18, 0x08	; 8
    22d6:	51 f1       	breq	.+84     	; 0x232c <__ultoa_invert+0x5c>
    22d8:	20 31       	cpi	r18, 0x10	; 16
    22da:	81 f1       	breq	.+96     	; 0x233c <__ultoa_invert+0x6c>
    22dc:	e8 94       	clt
    22de:	6f 93       	push	r22
    22e0:	6e 7f       	andi	r22, 0xFE	; 254
    22e2:	6e 5f       	subi	r22, 0xFE	; 254
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	8f 4f       	sbci	r24, 0xFF	; 255
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	af 4f       	sbci	r26, 0xFF	; 255
    22ec:	b1 e0       	ldi	r27, 0x01	; 1
    22ee:	3e d0       	rcall	.+124    	; 0x236c <__ultoa_invert+0x9c>
    22f0:	b4 e0       	ldi	r27, 0x04	; 4
    22f2:	3c d0       	rcall	.+120    	; 0x236c <__ultoa_invert+0x9c>
    22f4:	67 0f       	add	r22, r23
    22f6:	78 1f       	adc	r23, r24
    22f8:	89 1f       	adc	r24, r25
    22fa:	9a 1f       	adc	r25, r26
    22fc:	a1 1d       	adc	r26, r1
    22fe:	68 0f       	add	r22, r24
    2300:	79 1f       	adc	r23, r25
    2302:	8a 1f       	adc	r24, r26
    2304:	91 1d       	adc	r25, r1
    2306:	a1 1d       	adc	r26, r1
    2308:	6a 0f       	add	r22, r26
    230a:	71 1d       	adc	r23, r1
    230c:	81 1d       	adc	r24, r1
    230e:	91 1d       	adc	r25, r1
    2310:	a1 1d       	adc	r26, r1
    2312:	20 d0       	rcall	.+64     	; 0x2354 <__ultoa_invert+0x84>
    2314:	09 f4       	brne	.+2      	; 0x2318 <__ultoa_invert+0x48>
    2316:	68 94       	set
    2318:	3f 91       	pop	r19
    231a:	2a e0       	ldi	r18, 0x0A	; 10
    231c:	26 9f       	mul	r18, r22
    231e:	11 24       	eor	r1, r1
    2320:	30 19       	sub	r19, r0
    2322:	30 5d       	subi	r19, 0xD0	; 208
    2324:	31 93       	st	Z+, r19
    2326:	de f6       	brtc	.-74     	; 0x22de <__ultoa_invert+0xe>
    2328:	cf 01       	movw	r24, r30
    232a:	08 95       	ret
    232c:	46 2f       	mov	r20, r22
    232e:	47 70       	andi	r20, 0x07	; 7
    2330:	40 5d       	subi	r20, 0xD0	; 208
    2332:	41 93       	st	Z+, r20
    2334:	b3 e0       	ldi	r27, 0x03	; 3
    2336:	0f d0       	rcall	.+30     	; 0x2356 <__ultoa_invert+0x86>
    2338:	c9 f7       	brne	.-14     	; 0x232c <__ultoa_invert+0x5c>
    233a:	f6 cf       	rjmp	.-20     	; 0x2328 <__ultoa_invert+0x58>
    233c:	46 2f       	mov	r20, r22
    233e:	4f 70       	andi	r20, 0x0F	; 15
    2340:	40 5d       	subi	r20, 0xD0	; 208
    2342:	4a 33       	cpi	r20, 0x3A	; 58
    2344:	18 f0       	brcs	.+6      	; 0x234c <__ultoa_invert+0x7c>
    2346:	49 5d       	subi	r20, 0xD9	; 217
    2348:	31 fd       	sbrc	r19, 1
    234a:	40 52       	subi	r20, 0x20	; 32
    234c:	41 93       	st	Z+, r20
    234e:	02 d0       	rcall	.+4      	; 0x2354 <__ultoa_invert+0x84>
    2350:	a9 f7       	brne	.-22     	; 0x233c <__ultoa_invert+0x6c>
    2352:	ea cf       	rjmp	.-44     	; 0x2328 <__ultoa_invert+0x58>
    2354:	b4 e0       	ldi	r27, 0x04	; 4
    2356:	a6 95       	lsr	r26
    2358:	97 95       	ror	r25
    235a:	87 95       	ror	r24
    235c:	77 95       	ror	r23
    235e:	67 95       	ror	r22
    2360:	ba 95       	dec	r27
    2362:	c9 f7       	brne	.-14     	; 0x2356 <__ultoa_invert+0x86>
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	61 05       	cpc	r22, r1
    2368:	71 05       	cpc	r23, r1
    236a:	08 95       	ret
    236c:	9b 01       	movw	r18, r22
    236e:	ac 01       	movw	r20, r24
    2370:	0a 2e       	mov	r0, r26
    2372:	06 94       	lsr	r0
    2374:	57 95       	ror	r21
    2376:	47 95       	ror	r20
    2378:	37 95       	ror	r19
    237a:	27 95       	ror	r18
    237c:	ba 95       	dec	r27
    237e:	c9 f7       	brne	.-14     	; 0x2372 <__ultoa_invert+0xa2>
    2380:	62 0f       	add	r22, r18
    2382:	73 1f       	adc	r23, r19
    2384:	84 1f       	adc	r24, r20
    2386:	95 1f       	adc	r25, r21
    2388:	a0 1d       	adc	r26, r0
    238a:	08 95       	ret

0000238c <__prologue_saves__>:
    238c:	2f 92       	push	r2
    238e:	3f 92       	push	r3
    2390:	4f 92       	push	r4
    2392:	5f 92       	push	r5
    2394:	6f 92       	push	r6
    2396:	7f 92       	push	r7
    2398:	8f 92       	push	r8
    239a:	9f 92       	push	r9
    239c:	af 92       	push	r10
    239e:	bf 92       	push	r11
    23a0:	cf 92       	push	r12
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	ca 1b       	sub	r28, r26
    23b6:	db 0b       	sbc	r29, r27
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	09 94       	ijmp

000023c4 <__epilogue_restores__>:
    23c4:	2a 88       	ldd	r2, Y+18	; 0x12
    23c6:	39 88       	ldd	r3, Y+17	; 0x11
    23c8:	48 88       	ldd	r4, Y+16	; 0x10
    23ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    23cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    23d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    23d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    23d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    23d6:	b9 84       	ldd	r11, Y+9	; 0x09
    23d8:	c8 84       	ldd	r12, Y+8	; 0x08
    23da:	df 80       	ldd	r13, Y+7	; 0x07
    23dc:	ee 80       	ldd	r14, Y+6	; 0x06
    23de:	fd 80       	ldd	r15, Y+5	; 0x05
    23e0:	0c 81       	ldd	r16, Y+4	; 0x04
    23e2:	1b 81       	ldd	r17, Y+3	; 0x03
    23e4:	aa 81       	ldd	r26, Y+2	; 0x02
    23e6:	b9 81       	ldd	r27, Y+1	; 0x01
    23e8:	ce 0f       	add	r28, r30
    23ea:	d1 1d       	adc	r29, r1
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	ed 01       	movw	r28, r26
    23f8:	08 95       	ret

000023fa <_exit>:
    23fa:	f8 94       	cli

000023fc <__stop_program>:
    23fc:	ff cf       	rjmp	.-2      	; 0x23fc <__stop_program>
