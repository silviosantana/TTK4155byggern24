
byggern24_node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  00001fd6  0000206a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800200  00800200  0000216a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000216a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000330  00000000  00000000  000021c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000422a  00000000  00000000  000024f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001351  00000000  00000000  00006720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002f91  00000000  00000000  00007a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000984  00000000  00000000  0000aa04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009543  00000000  00000000  0000b388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002b75  00000000  00000000  000148cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000340  00000000  00000000  00017440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003a27  00000000  00000000  00017780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	07 c4       	rjmp	.+2062   	; 0x810 <__ctors_end>
       2:	00 00       	nop
       4:	21 c4       	rjmp	.+2114   	; 0x848 <__bad_interrupt>
       6:	00 00       	nop
       8:	fc c4       	rjmp	.+2552   	; 0xa02 <__vector_2>
       a:	00 00       	nop
       c:	1d c4       	rjmp	.+2106   	; 0x848 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c4       	rjmp	.+2102   	; 0x848 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c4       	rjmp	.+2098   	; 0x848 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c4       	rjmp	.+2094   	; 0x848 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c4       	rjmp	.+2090   	; 0x848 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c4       	rjmp	.+2086   	; 0x848 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c4       	rjmp	.+2082   	; 0x848 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c4       	rjmp	.+2078   	; 0x848 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c4       	rjmp	.+2074   	; 0x848 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c4       	rjmp	.+2070   	; 0x848 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c4       	rjmp	.+2066   	; 0x848 <__bad_interrupt>
      36:	00 00       	nop
      38:	07 c4       	rjmp	.+2062   	; 0x848 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	05 c4       	rjmp	.+2058   	; 0x848 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c4       	rjmp	.+2054   	; 0x848 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c4       	rjmp	.+2050   	; 0x848 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c3       	rjmp	.+2046   	; 0x848 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c3       	rjmp	.+2042   	; 0x848 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c3       	rjmp	.+2038   	; 0x848 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c3       	rjmp	.+2034   	; 0x848 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c3       	rjmp	.+2030   	; 0x848 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c3       	rjmp	.+2026   	; 0x848 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c3       	rjmp	.+2022   	; 0x848 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c3       	rjmp	.+2018   	; 0x848 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c3       	rjmp	.+2014   	; 0x848 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c3       	rjmp	.+2010   	; 0x848 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	88 d8       	rcall	.-3824   	; 0xfffff182 <__eeprom_end+0xff7ef182>
      72:	7c 3f       	cpi	r23, 0xFC	; 252
      74:	3f 7c       	andi	r19, 0xCF	; 207
      76:	d8 88       	ldd	r13, Y+16	; 0x10
      78:	18 3c       	cpi	r17, 0xC8	; 200
      7a:	7e ff       	.word	0xff7e	; ????
      7c:	ff 7e       	andi	r31, 0xEF	; 239
      7e:	3c 18       	sub	r3, r12
      80:	1e 3f       	cpi	r17, 0xFE	; 254
      82:	7e fc       	.word	0xfc7e	; ????
      84:	fc 7e       	andi	r31, 0xEC	; 236
      86:	3f 1e       	adc	r3, r31
      88:	ff cf       	rjmp	.-2      	; 0x88 <__trampolines_end+0x18>
      8a:	9b bf       	out	0x3b, r25	; 59
      8c:	bf 9b       	sbis	0x17, 7	; 23
      8e:	cf ff       	.word	0xffcf	; ????
      90:	ff fb       	.word	0xfbff	; ????
      92:	fb df       	rcall	.-10     	; 0x8a <__trampolines_end+0x1a>
      94:	df fb       	.word	0xfbdf	; ????
      96:	fb ff       	.word	0xfffb	; ????
      98:	18 3c       	cpi	r17, 0xC8	; 200
      9a:	3c 7e       	andi	r19, 0xEC	; 236
      9c:	ff 3c       	cpi	r31, 0xCF	; 207
      9e:	3c 3c       	cpi	r19, 0xCC	; 204
      a0:	e0 38       	cpi	r30, 0x80	; 128
      a2:	0c 3e       	cpi	r16, 0xEC	; 236
      a4:	f2 33       	cpi	r31, 0x32	; 50
      a6:	19 1f       	adc	r17, r25
      a8:	1f 19       	sub	r17, r15
      aa:	33 f2       	brvs	.-116    	; 0x38 <__zero_reg__+0x37>
      ac:	3e 0c       	add	r3, r14
      ae:	38 e0       	ldi	r19, 0x08	; 8
      b0:	07 0e       	add	r0, r23
      b2:	7e 9f       	mul	r23, r30
      b4:	87 86       	std	Z+15, r8	; 0x0f
      b6:	9c 84       	ldd	r9, Y+12	; 0x0c
      b8:	84 9c       	mul	r8, r4
      ba:	86 87       	std	Z+14, r24	; 0x0e
      bc:	9f 7e       	andi	r25, 0xEF	; 239
      be:	0e 07       	cpc	r16, r30
      c0:	00 00       	nop
      c2:	c0 c0       	rjmp	.+384    	; 0x244 <font4+0x84>
      c4:	f0 f0       	brcs	.+60     	; 0x102 <__trampolines_end+0x92>
      c6:	fc fc       	.word	0xfcfc	; ????
      c8:	0c 0c       	add	r0, r12
      ca:	0f 0f       	add	r16, r31
      cc:	c3 c3       	rjmp	.+1926   	; 0x854 <ADC_read+0xa>
      ce:	ff ff       	.word	0xffff	; ????
      d0:	ff ff       	.word	0xffff	; ????
      d2:	c3 c3       	rjmp	.+1926   	; 0x85a <ADC_read+0x10>
      d4:	0f 0f       	add	r16, r31
      d6:	0c 0c       	add	r0, r12
      d8:	fc fc       	.word	0xfcfc	; ????
      da:	f0 f0       	brcs	.+60     	; 0x118 <__trampolines_end+0xa8>
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <font4+0x9e>
      de:	00 00       	nop
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	0f 0f       	add	r16, r31
      e4:	00 00       	nop
      e6:	0f 0f       	add	r16, r31
      e8:	ff ff       	.word	0xffff	; ????
      ea:	0f 0f       	add	r16, r31
      ec:	03 03       	mulsu	r16, r19
      ee:	03 03       	mulsu	r16, r19
      f0:	03 03       	mulsu	r16, r19
      f2:	03 03       	mulsu	r16, r19
      f4:	0f 0f       	add	r16, r31
      f6:	ff ff       	.word	0xffff	; ????
      f8:	0f 0f       	add	r16, r31
      fa:	00 00       	nop
      fc:	0f 0f       	add	r16, r31
      fe:	fc fc       	.word	0xfcfc	; ????
     100:	3f 3f       	cpi	r19, 0xFF	; 255
     102:	fc fc       	.word	0xfcfc	; ????
     104:	fc fc       	.word	0xfcfc	; ????
     106:	ff ff       	.word	0xffff	; ????
     108:	3f 3f       	cpi	r19, 0xFF	; 255
     10a:	3c 3c       	cpi	r19, 0xCC	; 204
     10c:	f0 f0       	brcs	.+60     	; 0x14a <__trampolines_end+0xda>
     10e:	30 30       	cpi	r19, 0x00	; 0
     110:	30 30       	cpi	r19, 0x00	; 0
     112:	f0 f0       	brcs	.+60     	; 0x150 <__trampolines_end+0xe0>
     114:	3c 3c       	cpi	r19, 0xCC	; 204
     116:	3f 3f       	cpi	r19, 0xFF	; 255
     118:	ff ff       	.word	0xffff	; ????
     11a:	fc fc       	.word	0xfcfc	; ????
     11c:	fc fc       	.word	0xfcfc	; ????
     11e:	3f 3f       	cpi	r19, 0xFF	; 255
     120:	00 00       	nop
     122:	00 00       	nop
     124:	3f 3f       	cpi	r19, 0xFF	; 255
     126:	c3 c3       	rjmp	.+1926   	; 0x8ae <can_controller_bit_modify+0x10>
     128:	c0 c0       	rjmp	.+384    	; 0x2aa <font4+0xea>
     12a:	c0 c0       	rjmp	.+384    	; 0x2ac <font4+0xec>
     12c:	c3 c3       	rjmp	.+1926   	; 0x8b4 <can_controller_bit_modify+0x16>
     12e:	c0 c0       	rjmp	.+384    	; 0x2b0 <font4+0xf0>
     130:	c0 c0       	rjmp	.+384    	; 0x2b2 <font4+0xf2>
     132:	c3 c3       	rjmp	.+1926   	; 0x8ba <can_controller_bit_modify+0x1c>
     134:	c0 c0       	rjmp	.+384    	; 0x2b6 <font4+0xf6>
     136:	c0 c0       	rjmp	.+384    	; 0x2b8 <font4+0xf8>
     138:	c3 c3       	rjmp	.+1926   	; 0x8c0 <can_controller_bit_modify+0x22>
     13a:	3f 3f       	cpi	r19, 0xFF	; 255
     13c:	00 00       	nop
     13e:	00 00       	nop
     140:	f8 fc       	.word	0xfcf8	; ????
     142:	fe ff       	.word	0xfffe	; ????
     144:	ff ff       	.word	0xffff	; ????
     146:	3f 3f       	cpi	r19, 0xFF	; 255
     148:	3f 3f       	cpi	r19, 0xFF	; 255
     14a:	3f 3f       	cpi	r19, 0xFF	; 255
     14c:	3f bf       	out	0x3f, r19	; 63
     14e:	bf bf       	out	0x3f, r27	; 63
     150:	bf bf       	out	0x3f, r27	; 63
     152:	bf 3f       	cpi	r27, 0xFF	; 255
     154:	3f 3f       	cpi	r19, 0xFF	; 255
     156:	3f 3f       	cpi	r19, 0xFF	; 255
     158:	3f 3f       	cpi	r19, 0xFF	; 255
     15a:	ff ff       	.word	0xffff	; ????
     15c:	ff fe       	.word	0xfeff	; ????
     15e:	fc f8       	.word	0xf8fc	; ????
     160:	ff ff       	.word	0xffff	; ????
     162:	ff ff       	.word	0xffff	; ????
     164:	ff ff       	.word	0xffff	; ????
     166:	00 e0       	ldi	r16, 0x00	; 0
     168:	fc fe       	.word	0xfefc	; ????
     16a:	ff ff       	.word	0xffff	; ????
     16c:	ff ff       	.word	0xffff	; ????
     16e:	ff ff       	.word	0xffff	; ????
     170:	ff ff       	.word	0xffff	; ????
     172:	ff ff       	.word	0xffff	; ????
     174:	ff ff       	.word	0xffff	; ????
     176:	fe fc       	.word	0xfcfe	; ????
     178:	e0 00       	.word	0x00e0	; ????
     17a:	ff ff       	.word	0xffff	; ????
     17c:	ff ff       	.word	0xffff	; ????
     17e:	ff ff       	.word	0xffff	; ????
     180:	ff ff       	.word	0xffff	; ????
     182:	ff ff       	.word	0xffff	; ????
     184:	ff ff       	.word	0xffff	; ????
     186:	00 07       	cpc	r16, r16
     188:	3f 7f       	andi	r19, 0xFF	; 255
     18a:	ff ff       	.word	0xffff	; ????
     18c:	ff ff       	.word	0xffff	; ????
     18e:	ff ff       	.word	0xffff	; ????
     190:	ff ff       	.word	0xffff	; ????
     192:	ff ff       	.word	0xffff	; ????
     194:	ff ff       	.word	0xffff	; ????
     196:	7f 3f       	cpi	r23, 0xFF	; 255
     198:	07 00       	.word	0x0007	; ????
     19a:	ff ff       	.word	0xffff	; ????
     19c:	ff ff       	.word	0xffff	; ????
     19e:	ff ff       	.word	0xffff	; ????
     1a0:	1f 3f       	cpi	r17, 0xFF	; 255
     1a2:	7f ff       	.word	0xff7f	; ????
     1a4:	ff ff       	.word	0xffff	; ????
     1a6:	fc fc       	.word	0xfcfc	; ????
     1a8:	fc fc       	.word	0xfcfc	; ????
     1aa:	fc fc       	.word	0xfcfc	; ????
     1ac:	fc fd       	.word	0xfdfc	; ????
     1ae:	fd fd       	.word	0xfdfd	; ????
     1b0:	fd fd       	.word	0xfdfd	; ????
     1b2:	fd fc       	.word	0xfcfd	; ????
     1b4:	fc fc       	.word	0xfcfc	; ????
     1b6:	fc fc       	.word	0xfcfc	; ????
     1b8:	fc fc       	.word	0xfcfc	; ????
     1ba:	ff ff       	.word	0xffff	; ????
     1bc:	ff 7f       	andi	r31, 0xFF	; 255
     1be:	3f 1f       	adc	r19, r31

000001c0 <font4>:
     1c0:	00 00 00 00 00 5c 00 00 0c 00 0c 00 7c 28 7c 28     .....\......|(|(
     1d0:	58 dc 68 00 24 10 48 00 28 54 28 40 00 0c 00 00     X.h.$.H.(T(@....
     1e0:	00 78 84 00 84 78 00 00 54 38 54 00 10 7c 10 00     .x...x..T8T..|..
     1f0:	80 40 00 00 10 10 10 00 00 40 00 00 60 10 0c 00     .@.......@..`...
     200:	38 54 38 00 48 7c 40 00 48 64 58 00 44 54 2c 00     8T8.H|@.HdX.DT,.
     210:	1c 10 7c 00 5c 54 24 00 38 54 24 00 64 14 0c 00     ..|.\T$.8T$.d...
     220:	68 54 2c 00 48 54 38 00 00 48 00 00 80 48 00 00     hT,.HT8..H...H..
     230:	10 28 44 00 28 28 28 00 44 28 10 00 04 54 08 00     .(D.(((.D(...T..
     240:	38 44 5c 00 78 14 78 00 7c 54 28 00 38 44 28 00     8D\.x.x.|T(.8D(.
     250:	7c 44 38 00 7c 54 44 00 7c 14 04 00 38 44 74 00     |D8.|TD.|...8Dt.
     260:	7c 10 7c 00 44 7c 44 00 20 40 3c 00 7c 10 6c 00     |.|.D|D. @<.|.l.
     270:	7c 40 40 00 7c 18 7c 00 78 10 3c 00 38 44 38 00     |@@.|.|.x.<.8D8.
     280:	7c 14 08 00 38 44 b8 00 7c 14 68 00 48 54 24 00     |...8D..|.h.HT$.
     290:	04 7c 04 00 7c 40 7c 00 3c 60 3c 00 7c 30 7c 00     .|..|@|.<`<.|0|.
     2a0:	6c 10 6c 00 0c 70 0c 00 64 54 4c 00 00 7c 44 00     l.l..p..dTL..|D.
     2b0:	0c 10 60 00 44 7c 00 00 08 04 08 00 80 80 80 00     ..`.D|..........
     2c0:	00 04 08 00 30 48 78 00 7c 48 30 00 30 48 48 00     ....0Hx.|H0.0HH.
     2d0:	30 48 7c 00 30 68 50 00 10 78 14 00 90 a8 78 00     0H|.0hP..x....x.
     2e0:	7c 08 70 00 50 74 40 00 80 80 74 00 7c 10 68 00     |.p.Pt@...t.|.h.
     2f0:	44 7c 40 00 78 10 78 00 78 08 70 00 30 48 30 00     D|@.x.x.x.p.0H0.
     300:	f8 28 10 00 30 48 f8 00 78 10 08 00 50 58 28 00     .(..0H..x...PX(.
     310:	08 3c 48 00 38 40 78 00 38 40 38 00 78 20 78 00     .<H.8@x.8@8.x x.
     320:	48 30 48 00 98 a0 78 00 48 68 58 00 10 78 84 00     H0H...x.HhX..x..
     330:	00 7c 00 00 84 78 10 00 08 04 08 04                 .|...x......

0000033c <font5>:
     33c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     34c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     35c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     36c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     37c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     38c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     39c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     3ac:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     3bc:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     3cc:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     3dc:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     3ec:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     3fc:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     40c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     41c:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     42c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     43c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     44c:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     45c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     46c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     47c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     48c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     49c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     4ac:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     4bc:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     4cc:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     4dc:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     4ec:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     4fc:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     50c:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

00000517 <font8>:
	...
     51f:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     52f:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     53f:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     54f:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     55f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     56f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     57f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     58f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     59f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     5af:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     5bf:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     5cf:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     5df:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     5ef:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     5ff:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     60f:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     61f:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     62f:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     63f:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     64f:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     65f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     66f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     67f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     68f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     69f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     6af:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     6bf:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     6cf:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     6df:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     6ef:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     6ff:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     70f:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     71f:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     72f:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     73f:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     74f:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     75f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     76f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     77f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     78f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     79f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     7af:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     7bf:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     7cf:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     7df:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     7ef:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     7ff:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000810 <__ctors_end>:
     810:	11 24       	eor	r1, r1
     812:	1f be       	out	0x3f, r1	; 63
     814:	cf ef       	ldi	r28, 0xFF	; 255
     816:	d4 e0       	ldi	r29, 0x04	; 4
     818:	de bf       	out	0x3e, r29	; 62
     81a:	cd bf       	out	0x3d, r28	; 61

0000081c <__do_copy_data>:
     81c:	12 e0       	ldi	r17, 0x02	; 2
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b1 e0       	ldi	r27, 0x01	; 1
     822:	e6 ed       	ldi	r30, 0xD6	; 214
     824:	ff e1       	ldi	r31, 0x1F	; 31
     826:	02 c0       	rjmp	.+4      	; 0x82c <__do_copy_data+0x10>
     828:	05 90       	lpm	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	a0 30       	cpi	r26, 0x00	; 0
     82e:	b1 07       	cpc	r27, r17
     830:	d9 f7       	brne	.-10     	; 0x828 <__do_copy_data+0xc>

00000832 <__do_clear_bss>:
     832:	22 e0       	ldi	r18, 0x02	; 2
     834:	a0 e0       	ldi	r26, 0x00	; 0
     836:	b2 e0       	ldi	r27, 0x02	; 2
     838:	01 c0       	rjmp	.+2      	; 0x83c <.do_clear_bss_start>

0000083a <.do_clear_bss_loop>:
     83a:	1d 92       	st	X+, r1

0000083c <.do_clear_bss_start>:
     83c:	ae 30       	cpi	r26, 0x0E	; 14
     83e:	b2 07       	cpc	r27, r18
     840:	e1 f7       	brne	.-8      	; 0x83a <.do_clear_bss_loop>
     842:	be d4       	rcall	.+2428   	; 0x11c0 <main>
     844:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <_exit>

00000848 <__bad_interrupt>:
     848:	db cb       	rjmp	.-2122   	; 0x0 <__vectors>

0000084a <ADC_read>:
	{
		return 0;
	} else 
	{
		volatile char *ext_adc = (char *) 0x1400; // Start address for the SRAM
		uint8_t val = chn + 3;
     84a:	8d 5f       	subi	r24, 0xFD	; 253
		
		ext_adc[0] = val;
     84c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     850:	82 e4       	ldi	r24, 0x42	; 66
     852:	8a 95       	dec	r24
     854:	f1 f7       	brne	.-4      	; 0x852 <ADC_read+0x8>
     856:	00 c0       	rjmp	.+0      	; 0x858 <ADC_read+0xe>
		_delay_us(200);
		return ext_adc[0];
     858:	80 91 00 14 	lds	r24, 0x1400
	}
	

     85c:	99 27       	eor	r25, r25
     85e:	87 fd       	sbrc	r24, 7
     860:	90 95       	com	r25
     862:	08 95       	ret

00000864 <can_controller_reset>:
	status = spi_read();

	PORTB |= ~(1<<CAN_CS);

	return status;
}
     864:	c4 98       	cbi	0x18, 4	; 24
     866:	80 ec       	ldi	r24, 0xC0	; 192
     868:	c4 d5       	rcall	.+2952   	; 0x13f2 <spi_send>
     86a:	c4 9a       	sbi	0x18, 4	; 24
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	9f e2       	ldi	r25, 0x2F	; 47
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <can_controller_reset+0xc>
     874:	00 c0       	rjmp	.+0      	; 0x876 <can_controller_reset+0x12>
     876:	00 00       	nop
     878:	08 95       	ret

0000087a <can_controller_read>:
     87a:	cf 93       	push	r28
     87c:	c8 2f       	mov	r28, r24
     87e:	c4 98       	cbi	0x18, 4	; 24
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	b7 d5       	rcall	.+2926   	; 0x13f2 <spi_send>
     884:	8c 2f       	mov	r24, r28
     886:	b5 d5       	rcall	.+2922   	; 0x13f2 <spi_send>
     888:	b6 d5       	rcall	.+2924   	; 0x13f6 <spi_read>
     88a:	c4 9a       	sbi	0x18, 4	; 24
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <can_controller_request_to_send>:
     890:	c4 98       	cbi	0x18, 4	; 24
     892:	81 e8       	ldi	r24, 0x81	; 129
     894:	ae d5       	rcall	.+2908   	; 0x13f2 <spi_send>
     896:	88 b3       	in	r24, 0x18	; 24
     898:	8f 6e       	ori	r24, 0xEF	; 239
     89a:	88 bb       	out	0x18, r24	; 24
     89c:	08 95       	ret

0000089e <can_controller_bit_modify>:
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	18 2f       	mov	r17, r24
     8a6:	d6 2f       	mov	r29, r22
     8a8:	c4 2f       	mov	r28, r20
     8aa:	c4 98       	cbi	0x18, 4	; 24
     8ac:	85 e0       	ldi	r24, 0x05	; 5
     8ae:	a1 d5       	rcall	.+2882   	; 0x13f2 <spi_send>
     8b0:	81 2f       	mov	r24, r17
     8b2:	9f d5       	rcall	.+2878   	; 0x13f2 <spi_send>
     8b4:	8d 2f       	mov	r24, r29
     8b6:	9d d5       	rcall	.+2874   	; 0x13f2 <spi_send>
     8b8:	8c 2f       	mov	r24, r28
     8ba:	9b d5       	rcall	.+2870   	; 0x13f2 <spi_send>
     8bc:	c4 9a       	sbi	0x18, 4	; 24
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	08 95       	ret

000008c6 <can_controller_set_mode>:
     8c6:	48 2f       	mov	r20, r24
     8c8:	60 ee       	ldi	r22, 0xE0	; 224
     8ca:	8f e0       	ldi	r24, 0x0F	; 15
     8cc:	e8 df       	rcall	.-48     	; 0x89e <can_controller_bit_modify>
     8ce:	8e e0       	ldi	r24, 0x0E	; 14
     8d0:	d4 df       	rcall	.-88     	; 0x87a <can_controller_read>
     8d2:	80 7e       	andi	r24, 0xE0	; 224
     8d4:	08 95       	ret

000008d6 <can_controller_write>:

void can_controller_write(uint8_t address, uint8_t data)
{
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	d8 2f       	mov	r29, r24
     8dc:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
     8de:	c4 98       	cbi	0x18, 4	; 24
	
	spi_send(MCP_WRITE);
     8e0:	82 e0       	ldi	r24, 0x02	; 2
     8e2:	87 d5       	rcall	.+2830   	; 0x13f2 <spi_send>
	spi_send(address);
     8e4:	8d 2f       	mov	r24, r29
     8e6:	85 d5       	rcall	.+2826   	; 0x13f2 <spi_send>
	spi_send(data);
     8e8:	8c 2f       	mov	r24, r28
     8ea:	83 d5       	rcall	.+2822   	; 0x13f2 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
     8ec:	c4 9a       	sbi	0x18, 4	; 24
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <can_controller_init>:
uint8_t can_controller_init()
{
    uint8_t value;

    //spi_init(); // Initialize SPI
    can_controller_reset(); // Send reset-command
     8f4:	b7 df       	rcall	.-146    	; 0x864 <can_controller_reset>
	
    // Self-test
    value = can_controller_read(MCP_CANSTAT);
     8f6:	8e e0       	ldi	r24, 0x0E	; 14
     8f8:	c0 df       	rcall	.-128    	; 0x87a <can_controller_read>
    if ((value & MODE_MASK)  != MODE_CONFIG) 
     8fa:	98 2f       	mov	r25, r24
     8fc:	90 7e       	andi	r25, 0xE0	; 224
     8fe:	90 38       	cpi	r25, 0x80	; 128
     900:	71 f0       	breq	.+28     	; 0x91e <can_controller_init+0x2a>
    {
        printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
     902:	1f 92       	push	r1
     904:	8f 93       	push	r24
     906:	86 e0       	ldi	r24, 0x06	; 6
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <printf>
        return 1;
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	08 95       	ret
    }
	
	//printf("mode value: %d\n\r", (value & MODE_MASK));
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_CANINTE, 0b11111111, 0b00000011);
     91e:	43 e0       	ldi	r20, 0x03	; 3
     920:	6f ef       	ldi	r22, 0xFF	; 255
     922:	8b e2       	ldi	r24, 0x2B	; 43
     924:	bc df       	rcall	.-136    	; 0x89e <can_controller_bit_modify>
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100100, 0b01100100);
     926:	44 e6       	ldi	r20, 0x64	; 100
     928:	64 e6       	ldi	r22, 0x64	; 100
     92a:	80 e6       	ldi	r24, 0x60	; 96
     92c:	b8 df       	rcall	.-144    	; 0x89e <can_controller_bit_modify>
	//printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
     92e:	40 e6       	ldi	r20, 0x60	; 96
     930:	60 e6       	ldi	r22, 0x60	; 96
     932:	80 e7       	ldi	r24, 0x70	; 112
     934:	b4 df       	rcall	.-152    	; 0x89e <can_controller_bit_modify>
	//printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));

    
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);	
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	82 e3       	ldi	r24, 0x32	; 50
     93a:	cd df       	rcall	.-102    	; 0x8d6 <can_controller_write>
    return 0;
     93c:	80 e0       	ldi	r24, 0x00	; 0
}
     93e:	08 95       	ret

00000940 <can_init>:
}

void can_init ()
{
	//set loopback mode
	uint8_t mode = can_controller_set_mode(MODE_NORMAL);
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	c1 df       	rcall	.-126    	; 0x8c6 <can_controller_set_mode>
	if (mode != MODE_NORMAL)
     944:	88 23       	and	r24, r24
     946:	41 f0       	breq	.+16     	; 0x958 <can_init+0x18>
	{
		printf("Could not set normal mode! I am sorry!\n\r");
     948:	83 e5       	ldi	r24, 0x53	; 83
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <printf>
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
	//can_controller_bit_modify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
	//can_controller_write(MCP_CANINTE, MCP_RX_INT);
	
	// SET UP INTERRUPTION TO RECIEVE MESSAGE
	//DDRD &= ~(1<<PD3);
	cli();
     958:	f8 94       	cli
	MCUCR |= (1 << ISC11);
     95a:	85 b7       	in	r24, 0x35	; 53
     95c:	88 60       	ori	r24, 0x08	; 8
     95e:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);	//interrupt on the falling edge
     960:	85 b7       	in	r24, 0x35	; 53
     962:	8b 7f       	andi	r24, 0xFB	; 251
     964:	85 bf       	out	0x35, r24	; 53
	can_controller_write(MCP_CANINTF, 0x00);
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	8c e2       	ldi	r24, 0x2C	; 44
     96a:	b5 df       	rcall	.-150    	; 0x8d6 <can_controller_write>
	can_controller_write(MCP_EFLG, 0x00);
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	8d e2       	ldi	r24, 0x2D	; 45
     970:	b2 df       	rcall	.-156    	; 0x8d6 <can_controller_write>
	GICR |= (1 << INT1);						//enable external interrupt INT1
     972:	8b b7       	in	r24, 0x3b	; 59
     974:	80 68       	ori	r24, 0x80	; 128
     976:	8b bf       	out	0x3b, r24	; 59
	sei();									//enable Global Interrupt
     978:	78 94       	sei
     97a:	08 95       	ret

0000097c <can_send_msg>:
}

uint8_t can_send_msg(can_message* msg)
{
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
	//writhe higher id
	can_controller_write(MCP_TXB0SIDH, msg->id);
     986:	68 81       	ld	r22, Y
     988:	81 e3       	ldi	r24, 0x31	; 49
     98a:	a5 df       	rcall	.-182    	; 0x8d6 <can_controller_write>
	
	// Define data length of message
	uint8_t data_length = msg->length;
     98c:	09 81       	ldd	r16, Y+1	; 0x01
	can_controller_write(MCP_TXB0DLC, msg->length);
     98e:	60 2f       	mov	r22, r16
     990:	85 e3       	ldi	r24, 0x35	; 53
     992:	a1 df       	rcall	.-190    	; 0x8d6 <can_controller_write>
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
     994:	22 96       	adiw	r28, 0x02	; 2
	for (uint8_t byte = 0; byte < data_length; byte++) {
     996:	00 23       	and	r16, r16
     998:	41 f0       	breq	.+16     	; 0x9aa <can_send_msg+0x2e>
     99a:	0a 5c       	subi	r16, 0xCA	; 202
     99c:	16 e3       	ldi	r17, 0x36	; 54
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
     99e:	69 91       	ld	r22, Y+
     9a0:	81 2f       	mov	r24, r17
     9a2:	99 df       	rcall	.-206    	; 0x8d6 <can_controller_write>
     9a4:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = msg->length;
	can_controller_write(MCP_TXB0DLC, msg->length);
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     9a6:	10 13       	cpse	r17, r16
     9a8:	fa cf       	rjmp	.-12     	; 0x99e <can_send_msg+0x22>
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
	}

	// Request to send message, send if successful
	can_controller_request_to_send();
     9aa:	72 df       	rcall	.-284    	; 0x890 <can_controller_request_to_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 ef       	ldi	r25, 0xF0	; 240
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <can_send_msg+0x34>
	// 	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE));
	// 	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF));
	// 	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
	// 	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
	
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <can_recieve_msg>:

// CALLED WHEN  AN INTERRUPTION OCCURS
void can_recieve_msg(uint8_t buffer, can_message* msg)
{
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	eb 01       	movw	r28, r22

	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
	uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
     9c8:	18 2f       	mov	r17, r24
     9ca:	12 95       	swap	r17
     9cc:	10 7f       	andi	r17, 0xF0	; 240
     9ce:	81 e6       	ldi	r24, 0x61	; 97
     9d0:	81 0f       	add	r24, r17
     9d2:	53 df       	rcall	.-346    	; 0x87a <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
     9d4:	85 e6       	ldi	r24, 0x65	; 101
     9d6:	81 0f       	add	r24, r17
     9d8:	50 df       	rcall	.-352    	; 0x87a <can_controller_read>
	mask = 0x0F;
	msg->length = (data_length & mask);
     9da:	98 2f       	mov	r25, r24
     9dc:	9f 70       	andi	r25, 0x0F	; 15
     9de:	99 83       	std	Y+1, r25	; 0x01

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
     9e0:	88 23       	and	r24, r24
     9e2:	51 f0       	breq	.+20     	; 0x9f8 <can_recieve_msg+0x3a>
     9e4:	1a 59       	subi	r17, 0x9A	; 154
     9e6:	22 96       	adiw	r28, 0x02	; 2
     9e8:	08 2f       	mov	r16, r24
     9ea:	01 0f       	add	r16, r17
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
     9ec:	81 2f       	mov	r24, r17
     9ee:	45 df       	rcall	.-374    	; 0x87a <can_controller_read>
     9f0:	89 93       	st	Y+, r24
     9f2:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg->length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)
	for (uint8_t byte = 0; byte < data_length; byte++) {
     9f4:	10 13       	cpse	r17, r16
     9f6:	fa cf       	rjmp	.-12     	; 0x9ec <can_recieve_msg+0x2e>
		msg->data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
	}
	//can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
	// 	can_controller_write(MCP_CANINTF, 0x00);
	// 	can_controller_write(MCP_EFLG, 0x00);
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	08 95       	ret

00000a02 <__vector_2>:
#include "util/delay.h"
#include "can_controller_driver.h"
#include "MCP2515.h"

ISR(INT1_vect)
{
     a02:	1f 92       	push	r1
     a04:	0f 92       	push	r0
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	0f 92       	push	r0
     a0a:	11 24       	eor	r1, r1
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	2f 93       	push	r18
     a14:	3f 93       	push	r19
     a16:	4f 93       	push	r20
     a18:	5f 93       	push	r21
     a1a:	6f 93       	push	r22
     a1c:	7f 93       	push	r23
     a1e:	8f 93       	push	r24
     a20:	9f 93       	push	r25
     a22:	af 93       	push	r26
     a24:	bf 93       	push	r27
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
	cli();
     a2e:	f8 94       	cli
	can_message* msg = (can_message *) malloc(1*sizeof(can_message));
     a30:	8a e0       	ldi	r24, 0x0A	; 10
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	8b d6       	rcall	.+3350   	; 0x174c <malloc>
     a36:	ec 01       	movw	r28, r24
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	//printf("message INTERRUPTION recieved\n\r");
	//print(my_buf);
	uint8_t canInt = can_controller_read(MCP_CANINTF);
     a38:	8c e2       	ldi	r24, 0x2C	; 44
     a3a:	1f df       	rcall	.-450    	; 0x87a <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
     a3c:	80 ff       	sbrs	r24, 0
     a3e:	23 c0       	rjmp	.+70     	; 0xa86 <__vector_2+0x84>
	{
		can_recieve_msg(0, msg);
     a40:	be 01       	movw	r22, r28
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	bc df       	rcall	.-136    	; 0x9be <can_recieve_msg>
		
		printf("DATA ON RX0:\n\r");
     a46:	8c e7       	ldi	r24, 0x7C	; 124
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	9f 93       	push	r25
     a4c:	8f 93       	push	r24
     a4e:	ef d7       	rcall	.+4062   	; 0x1a2e <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	88 23       	and	r24, r24
     a58:	09 f4       	brne	.+2      	; 0xa5c <__vector_2+0x5a>
     a5a:	43 c0       	rjmp	.+134    	; 0xae2 <__vector_2+0xe0>
     a5c:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
     a5e:	0b e8       	ldi	r16, 0x8B	; 139
     a60:	11 e0       	ldi	r17, 0x01	; 1
     a62:	fe 01       	movw	r30, r28
     a64:	ef 0d       	add	r30, r15
     a66:	f1 1d       	adc	r31, r1
     a68:	82 81       	ldd	r24, Z+2	; 0x02
     a6a:	1f 92       	push	r1
     a6c:	8f 93       	push	r24
     a6e:	1f 93       	push	r17
     a70:	0f 93       	push	r16
     a72:	dd d7       	rcall	.+4026   	; 0x1a2e <printf>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
	{
		can_recieve_msg(0, msg);
		
		printf("DATA ON RX0:\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
     a74:	f3 94       	inc	r15
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	f8 16       	cp	r15, r24
     a82:	78 f3       	brcs	.-34     	; 0xa62 <__vector_2+0x60>
     a84:	2e c0       	rjmp	.+92     	; 0xae2 <__vector_2+0xe0>
			printf("%d \n\r", msg->data[byte]);
		}
		
	}else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
     a86:	81 ff       	sbrs	r24, 1
     a88:	22 c0       	rjmp	.+68     	; 0xace <__vector_2+0xcc>
	{
		can_recieve_msg(1, msg);
     a8a:	be 01       	movw	r22, r28
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	97 df       	rcall	.-210    	; 0x9be <can_recieve_msg>

		printf("DATA ON RX1\n\r");
     a90:	81 e9       	ldi	r24, 0x91	; 145
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	9f 93       	push	r25
     a96:	8f 93       	push	r24
     a98:	ca d7       	rcall	.+3988   	; 0x1a2e <printf>
		for (uint8_t byte = 0; byte < msg->length; byte++) {
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	88 23       	and	r24, r24
     aa2:	f9 f0       	breq	.+62     	; 0xae2 <__vector_2+0xe0>
     aa4:	f1 2c       	mov	r15, r1
			printf("%d \n\r", msg->data[byte]);
     aa6:	0b e8       	ldi	r16, 0x8B	; 139
     aa8:	11 e0       	ldi	r17, 0x01	; 1
     aaa:	fe 01       	movw	r30, r28
     aac:	ef 0d       	add	r30, r15
     aae:	f1 1d       	adc	r31, r1
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	1f 92       	push	r1
     ab4:	8f 93       	push	r24
     ab6:	1f 93       	push	r17
     ab8:	0f 93       	push	r16
     aba:	b9 d7       	rcall	.+3954   	; 0x1a2e <printf>
	}else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
	{
		can_recieve_msg(1, msg);

		printf("DATA ON RX1\n\r");
		for (uint8_t byte = 0; byte < msg->length; byte++) {
     abc:	f3 94       	inc	r15
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	f8 16       	cp	r15, r24
     aca:	78 f3       	brcs	.-34     	; 0xaaa <__vector_2+0xa8>
     acc:	0a c0       	rjmp	.+20     	; 0xae2 <__vector_2+0xe0>
			printf("%d \n\r", msg->data[byte]);
		}
	}
	else
	{
		can_controller_write(MCP_CANINTF, 0x00);
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	8c e2       	ldi	r24, 0x2C	; 44
     ad2:	01 df       	rcall	.-510    	; 0x8d6 <can_controller_write>
		//can_controller_write(MCP_EFLG, 0x00);
		free(msg);
     ad4:	ce 01       	movw	r24, r28
     ad6:	d2 d6       	rcall	.+3492   	; 0x187c <free>
		can_controller_write(MCP_CANINTF, 0x00);
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	8c e2       	ldi	r24, 0x2C	; 44
     adc:	fc de       	rcall	.-520    	; 0x8d6 <can_controller_write>
		sei();
     ade:	78 94       	sei
		return;
     ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <__vector_2+0xf2>
	}
	can_controller_write(MCP_CANINTF, 0x00);
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	8c e2       	ldi	r24, 0x2C	; 44
     ae6:	f7 de       	rcall	.-530    	; 0x8d6 <can_controller_write>
	free(msg);
     ae8:	ce 01       	movw	r24, r28
     aea:	c8 d6       	rcall	.+3472   	; 0x187c <free>
	can_controller_write(MCP_CANINTF, 0x00);
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	8c e2       	ldi	r24, 0x2C	; 44
     af0:	f2 de       	rcall	.-540    	; 0x8d6 <can_controller_write>
	sei();
     af2:	78 94       	sei
}
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f 90       	pop	r0
     b1c:	1f 90       	pop	r1
     b1e:	18 95       	reti

00000b20 <send_game_init>:
#include "joystick.h"
#include "can_driver.h"
#include "oled_driver.h"

void send_game_init()
{
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	2a 97       	sbiw	r28, 0x0a	; 10
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
	struct Position j_pos;
	uint8_t sliderL;
	uint8_t sliderR = 0;
	uint8_t r_button, l_button;
	
	j_pos = get_joystick_position();
     b40:	4f d2       	rcall	.+1182   	; 0xfe0 <get_joystick_position>
     b42:	c6 2e       	mov	r12, r22
     b44:	d8 2e       	mov	r13, r24
	sliderL = get_left_slider();
     b46:	0f d3       	rcall	.+1566   	; 0x1166 <get_left_slider>
     b48:	e8 2e       	mov	r14, r24
	sliderR = get_right_slider();
     b4a:	21 d3       	rcall	.+1602   	; 0x118e <get_right_slider>
     b4c:	f8 2e       	mov	r15, r24
	direction dir = get_joystick_direction();
     b4e:	b8 d2       	rcall	.+1392   	; 0x10c0 <get_joystick_direction>
     b50:	08 2f       	mov	r16, r24
	r_button = get_joystick_right_button();
     b52:	2e d3       	rcall	.+1628   	; 0x11b0 <get_joystick_right_button>
     b54:	18 2f       	mov	r17, r24
	l_button = get_joystick_left_button();
     b56:	30 d3       	rcall	.+1632   	; 0x11b8 <get_joystick_left_button>
	can_message msg;
	msg.id = 1;
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	99 83       	std	Y+1, r25	; 0x01
	msg.data[0] = j_pos.x;
     b5c:	cb 82       	std	Y+3, r12	; 0x03
	msg.data[1] = j_pos.y;
     b5e:	dc 82       	std	Y+4, r13	; 0x04
	uint8_t sliderL;
	uint8_t sliderR = 0;
	uint8_t r_button, l_button;
	
	j_pos = get_joystick_position();
	sliderL = get_left_slider();
     b60:	ed 82       	std	Y+5, r14	; 0x05
	sliderR = get_right_slider();
     b62:	fe 82       	std	Y+6, r15	; 0x06
	direction dir = get_joystick_direction();
     b64:	0f 83       	std	Y+7, r16	; 0x07
	r_button = get_joystick_right_button();
     b66:	18 87       	std	Y+8, r17	; 0x08
	l_button = get_joystick_left_button();
     b68:	89 87       	std	Y+9, r24	; 0x09
	msg.data[2] = sliderL;
	msg.data[3] = sliderR;
	msg.data[4] = dir;
	msg.data[5] = r_button;
	msg.data[6] = l_button;
	msg.length = 7;
     b6a:	87 e0       	ldi	r24, 0x07	; 7
     b6c:	8a 83       	std	Y+2, r24	; 0x02
	
	can_send_msg(&msg);
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	04 df       	rcall	.-504    	; 0x97c <can_send_msg>
}
     b74:	2a 96       	adiw	r28, 0x0a	; 10
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	08 95       	ret

00000b92 <send_multi_board_output>:


void send_multi_board_output()
{
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	2a 97       	sbiw	r28, 0x0a	; 10
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
	struct Position j_pos;
	uint8_t sliderL;
	uint8_t sliderR = 0;
	uint8_t r_button, l_button;
	
	j_pos = get_joystick_position();
     bb2:	16 d2       	rcall	.+1068   	; 0xfe0 <get_joystick_position>
     bb4:	c6 2e       	mov	r12, r22
     bb6:	d8 2e       	mov	r13, r24
	sliderL = get_left_slider();
     bb8:	d6 d2       	rcall	.+1452   	; 0x1166 <get_left_slider>
     bba:	e8 2e       	mov	r14, r24
	sliderR = get_right_slider();
     bbc:	e8 d2       	rcall	.+1488   	; 0x118e <get_right_slider>
     bbe:	f8 2e       	mov	r15, r24
	direction dir = get_joystick_direction();
     bc0:	7f d2       	rcall	.+1278   	; 0x10c0 <get_joystick_direction>
     bc2:	08 2f       	mov	r16, r24
	r_button = get_joystick_right_button();
     bc4:	f5 d2       	rcall	.+1514   	; 0x11b0 <get_joystick_right_button>
     bc6:	18 2f       	mov	r17, r24
	l_button = get_joystick_left_button();
     bc8:	f7 d2       	rcall	.+1518   	; 0x11b8 <get_joystick_left_button>
	can_message msg;
	msg.id = 1;
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	99 83       	std	Y+1, r25	; 0x01
	msg.data[0] = j_pos.x;
     bce:	cb 82       	std	Y+3, r12	; 0x03
	msg.data[1] = j_pos.y;
     bd0:	dc 82       	std	Y+4, r13	; 0x04
	uint8_t sliderL;
	uint8_t sliderR = 0;
	uint8_t r_button, l_button;
	
	j_pos = get_joystick_position();
	sliderL = get_left_slider();
     bd2:	ed 82       	std	Y+5, r14	; 0x05
	sliderR = get_right_slider();
     bd4:	fe 82       	std	Y+6, r15	; 0x06
	direction dir = get_joystick_direction();
     bd6:	0f 83       	std	Y+7, r16	; 0x07
	r_button = get_joystick_right_button();
     bd8:	18 87       	std	Y+8, r17	; 0x08
	l_button = get_joystick_left_button();
     bda:	89 87       	std	Y+9, r24	; 0x09
	msg.data[2] = sliderL;
	msg.data[3] = sliderR;
	msg.data[4] = dir;
	msg.data[5] = r_button;
	msg.data[6] = l_button;
	msg.length = 7;
     bdc:	87 e0       	ldi	r24, 0x07	; 7
     bde:	8a 83       	std	Y+2, r24	; 0x02
	
	can_send_msg(&msg);
     be0:	ce 01       	movw	r24, r28
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	cb de       	rcall	.-618    	; 0x97c <can_send_msg>
}
     be6:	2a 96       	adiw	r28, 0x0a	; 10
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	08 95       	ret

00000c04 <menu_set_state>:
	}
}

//set state of menu
menu* menu_set_state(menu* current_state, int* arrow_max, int* arrow_pos)
{
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	ec 01       	movw	r28, r24
     c12:	8b 01       	movw	r16, r22
     c14:	7a 01       	movw	r14, r20
	oled_reset();
     c16:	4c d3       	rcall	.+1688   	; 0x12b0 <oled_reset>
	int s = current_state->val;
	
	switch (s)
     c18:	88 81       	ld	r24, Y
     c1a:	99 81       	ldd	r25, Y+1	; 0x01
     c1c:	83 30       	cpi	r24, 0x03	; 3
     c1e:	91 05       	cpc	r25, r1
     c20:	09 f4       	brne	.+2      	; 0xc24 <menu_set_state+0x20>
     c22:	3a c0       	rjmp	.+116    	; 0xc98 <menu_set_state+0x94>
     c24:	34 f4       	brge	.+12     	; 0xc32 <menu_set_state+0x2e>
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	91 05       	cpc	r25, r1
     c2a:	59 f0       	breq	.+22     	; 0xc42 <menu_set_state+0x3e>
     c2c:	02 97       	sbiw	r24, 0x02	; 2
     c2e:	91 f1       	breq	.+100    	; 0xc94 <menu_set_state+0x90>
     c30:	61 c0       	rjmp	.+194    	; 0xcf4 <menu_set_state+0xf0>
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	91 05       	cpc	r25, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <menu_set_state+0x36>
     c38:	4c c0       	rjmp	.+152    	; 0xcd2 <menu_set_state+0xce>
     c3a:	05 97       	sbiw	r24, 0x05	; 5
     c3c:	09 f4       	brne	.+2      	; 0xc40 <menu_set_state+0x3c>
     c3e:	52 c0       	rjmp	.+164    	; 0xce4 <menu_set_state+0xe0>
     c40:	59 c0       	rjmp	.+178    	; 0xcf4 <menu_set_state+0xf0>
	{
		case 1: // Menu
			oled_pos(*arrow_pos,100);
     c42:	64 e6       	ldi	r22, 0x64	; 100
     c44:	f7 01       	movw	r30, r14
     c46:	80 81       	ld	r24, Z
     c48:	40 d3       	rcall	.+1664   	; 0x12ca <oled_pos>
			oled_print_special_char(5);
     c4a:	85 e0       	ldi	r24, 0x05	; 5
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	b1 d3       	rcall	.+1890   	; 0x13b2 <oled_print_special_char>
			oled_pos(0,0);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	3a d3       	rcall	.+1652   	; 0x12ca <oled_pos>
			oled_print(current_state->name, 3);
     c56:	63 e0       	ldi	r22, 0x03	; 3
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	9b 81       	ldd	r25, Y+3	; 0x03
     c5e:	82 d3       	rcall	.+1796   	; 0x1364 <oled_print>
			oled_pos(2,0);
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	32 d3       	rcall	.+1636   	; 0x12ca <oled_pos>
			oled_print(current_state->children[0]->name, 2);
     c66:	ee 81       	ldd	r30, Y+6	; 0x06
     c68:	ff 81       	ldd	r31, Y+7	; 0x07
     c6a:	62 e0       	ldi	r22, 0x02	; 2
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	78 d3       	rcall	.+1776   	; 0x1364 <oled_print>
			oled_pos(3,0);
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	28 d3       	rcall	.+1616   	; 0x12ca <oled_pos>
			oled_print(current_state->children[1]->name, 2);
     c7a:	e8 85       	ldd	r30, Y+8	; 0x08
     c7c:	f9 85       	ldd	r31, Y+9	; 0x09
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	93 81       	ldd	r25, Z+3	; 0x03
     c86:	6e d3       	rcall	.+1756   	; 0x1364 <oled_print>
			*arrow_max = 3;
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	f8 01       	movw	r30, r16
     c8e:	91 83       	std	Z+1, r25	; 0x01
     c90:	80 83       	st	Z, r24
			break;
     c92:	30 c0       	rjmp	.+96     	; 0xcf4 <menu_set_state+0xf0>
		case 2: // Start Game
			send_game_init();
     c94:	45 df       	rcall	.-374    	; 0xb20 <send_game_init>
			break;
     c96:	2e c0       	rjmp	.+92     	; 0xcf4 <menu_set_state+0xf0>
		case 3: // Set Mode
			oled_pos(0,0);
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	16 d3       	rcall	.+1580   	; 0x12ca <oled_pos>
			oled_print(current_state->name, 3);
     c9e:	63 e0       	ldi	r22, 0x03	; 3
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	9b 81       	ldd	r25, Y+3	; 0x03
     ca6:	5e d3       	rcall	.+1724   	; 0x1364 <oled_print>
			oled_pos(2,0);
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	0e d3       	rcall	.+1564   	; 0x12ca <oled_pos>
			oled_print(current_state->children[0]->name, 2);
     cae:	ee 81       	ldd	r30, Y+6	; 0x06
     cb0:	ff 81       	ldd	r31, Y+7	; 0x07
     cb2:	62 e0       	ldi	r22, 0x02	; 2
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	82 81       	ldd	r24, Z+2	; 0x02
     cb8:	93 81       	ldd	r25, Z+3	; 0x03
     cba:	54 d3       	rcall	.+1704   	; 0x1364 <oled_print>
			oled_pos(3,0);
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	04 d3       	rcall	.+1544   	; 0x12ca <oled_pos>
			oled_print(current_state->children[1]->name, 2);
     cc2:	e8 85       	ldd	r30, Y+8	; 0x08
     cc4:	f9 85       	ldd	r31, Y+9	; 0x09
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	4a d3       	rcall	.+1684   	; 0x1364 <oled_print>
			break;
     cd0:	11 c0       	rjmp	.+34     	; 0xcf4 <menu_set_state+0xf0>
		case 4: // Use Slider
			oled_pos(0,0);
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	f9 d2       	rcall	.+1522   	; 0x12ca <oled_pos>
			oled_print(current_state->name, 3);
     cd8:	63 e0       	ldi	r22, 0x03	; 3
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	9b 81       	ldd	r25, Y+3	; 0x03
     ce0:	41 d3       	rcall	.+1666   	; 0x1364 <oled_print>
			break;
     ce2:	08 c0       	rjmp	.+16     	; 0xcf4 <menu_set_state+0xf0>
		case 5: // Use Joystick
			oled_pos(0,0);
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	f0 d2       	rcall	.+1504   	; 0x12ca <oled_pos>
			oled_print(current_state->name, 3);
     cea:	63 e0       	ldi	r22, 0x03	; 3
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	9b 81       	ldd	r25, Y+3	; 0x03
     cf2:	38 d3       	rcall	.+1648   	; 0x1364 <oled_print>
		default:
			break;
	}
	
	return current_state;
}
     cf4:	ce 01       	movw	r24, r28
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	08 95       	ret

00000d04 <menu_state_machine_setup>:
	can_send_msg(&msg);
}

// Sets state for state machine
menu* menu_state_machine_setup(menu* current_state, int* arrow_max, int* arrow_pos)
{
     d04:	8f 92       	push	r8
     d06:	9f 92       	push	r9
     d08:	af 92       	push	r10
     d0a:	bf 92       	push	r11
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	6b 01       	movw	r12, r22
     d1e:	5a 01       	movw	r10, r20
	menu* state2 = NULL; // Start Game
	menu* state3 = NULL; // Set Mode
	menu* state4 = NULL; // Use Slider
	menu* state5 = NULL; // Use Joystick
	
	state1 = (menu*) malloc(sizeof(menu));
     d20:	80 e1       	ldi	r24, 0x10	; 16
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	13 d5       	rcall	.+2598   	; 0x174c <malloc>
     d26:	ec 01       	movw	r28, r24
	state2 = (menu*) malloc(sizeof(menu));
     d28:	80 e1       	ldi	r24, 0x10	; 16
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0f d5       	rcall	.+2590   	; 0x174c <malloc>
     d2e:	4c 01       	movw	r8, r24
	state3 = (menu*) malloc(sizeof(menu));
     d30:	80 e1       	ldi	r24, 0x10	; 16
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0b d5       	rcall	.+2582   	; 0x174c <malloc>
     d36:	8c 01       	movw	r16, r24
	state4 = (menu*) malloc(sizeof(menu));
     d38:	80 e1       	ldi	r24, 0x10	; 16
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	07 d5       	rcall	.+2574   	; 0x174c <malloc>
     d3e:	7c 01       	movw	r14, r24
	state5 = (menu*) malloc(sizeof(menu));
     d40:	80 e1       	ldi	r24, 0x10	; 16
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	03 d5       	rcall	.+2566   	; 0x174c <malloc>
     d46:	fc 01       	movw	r30, r24
	
	state1->name = "Menu";
     d48:	8f e9       	ldi	r24, 0x9F	; 159
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	9b 83       	std	Y+3, r25	; 0x03
     d4e:	8a 83       	std	Y+2, r24	; 0x02
	state1->val = 1;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	99 83       	std	Y+1, r25	; 0x01
     d56:	88 83       	st	Y, r24
	state1->parent = state1;
     d58:	dd 83       	std	Y+5, r29	; 0x05
     d5a:	cc 83       	std	Y+4, r28	; 0x04
	state1->children[0] = state2;
     d5c:	9f 82       	std	Y+7, r9	; 0x07
     d5e:	8e 82       	std	Y+6, r8	; 0x06
	state1->children[1] = state3;
     d60:	19 87       	std	Y+9, r17	; 0x09
     d62:	08 87       	std	Y+8, r16	; 0x08
	
	state2->name = "Start Game";
     d64:	84 ea       	ldi	r24, 0xA4	; 164
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	d4 01       	movw	r26, r8
     d6a:	13 96       	adiw	r26, 0x03	; 3
     d6c:	9c 93       	st	X, r25
     d6e:	8e 93       	st	-X, r24
     d70:	12 97       	sbiw	r26, 0x02	; 2
	state2->val = 2;
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	9c 93       	st	X, r25
     d7a:	8e 93       	st	-X, r24
	state2->parent = state1;
     d7c:	15 96       	adiw	r26, 0x05	; 5
     d7e:	dc 93       	st	X, r29
     d80:	ce 93       	st	-X, r28
     d82:	14 97       	sbiw	r26, 0x04	; 4
	
	state3->name = "Set Motor Controller";
     d84:	8f ea       	ldi	r24, 0xAF	; 175
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	d8 01       	movw	r26, r16
     d8a:	13 96       	adiw	r26, 0x03	; 3
     d8c:	9c 93       	st	X, r25
     d8e:	8e 93       	st	-X, r24
     d90:	12 97       	sbiw	r26, 0x02	; 2
	state3->val = 3;
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	9c 93       	st	X, r25
     d9a:	8e 93       	st	-X, r24
	state3->parent = state1;
     d9c:	15 96       	adiw	r26, 0x05	; 5
     d9e:	dc 93       	st	X, r29
     da0:	ce 93       	st	-X, r28
     da2:	14 97       	sbiw	r26, 0x04	; 4
	state3->children[0] = state4;
     da4:	17 96       	adiw	r26, 0x07	; 7
     da6:	fc 92       	st	X, r15
     da8:	ee 92       	st	-X, r14
     daa:	16 97       	sbiw	r26, 0x06	; 6
	state3->children[1] = state5;
     dac:	19 96       	adiw	r26, 0x09	; 9
     dae:	fc 93       	st	X, r31
     db0:	ee 93       	st	-X, r30
     db2:	18 97       	sbiw	r26, 0x08	; 8
	
	state4->name = "Slider";
     db4:	84 ec       	ldi	r24, 0xC4	; 196
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	d7 01       	movw	r26, r14
     dba:	13 96       	adiw	r26, 0x03	; 3
     dbc:	9c 93       	st	X, r25
     dbe:	8e 93       	st	-X, r24
     dc0:	12 97       	sbiw	r26, 0x02	; 2
	state4->val = 4;
     dc2:	84 e0       	ldi	r24, 0x04	; 4
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	11 96       	adiw	r26, 0x01	; 1
     dc8:	9c 93       	st	X, r25
     dca:	8e 93       	st	-X, r24
	state4->parent = state3;
     dcc:	15 96       	adiw	r26, 0x05	; 5
     dce:	1c 93       	st	X, r17
     dd0:	0e 93       	st	-X, r16
     dd2:	14 97       	sbiw	r26, 0x04	; 4
	state4->children[0] = state1;
     dd4:	17 96       	adiw	r26, 0x07	; 7
     dd6:	dc 93       	st	X, r29
     dd8:	ce 93       	st	-X, r28
     dda:	16 97       	sbiw	r26, 0x06	; 6
	
	state5->name = "Joystick";
     ddc:	8b ec       	ldi	r24, 0xCB	; 203
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	93 83       	std	Z+3, r25	; 0x03
     de2:	82 83       	std	Z+2, r24	; 0x02
	state5->val = 5;
     de4:	85 e0       	ldi	r24, 0x05	; 5
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
	state5->parent = state3;
     dec:	15 83       	std	Z+5, r17	; 0x05
     dee:	04 83       	std	Z+4, r16	; 0x04
	state5->children[0] = state1;
     df0:	d7 83       	std	Z+7, r29	; 0x07
     df2:	c6 83       	std	Z+6, r28	; 0x06
	
	current_state = state1;
	menu_set_state(current_state, arrow_max, arrow_pos);
     df4:	a5 01       	movw	r20, r10
     df6:	b6 01       	movw	r22, r12
     df8:	ce 01       	movw	r24, r28
     dfa:	04 df       	rcall	.-504    	; 0xc04 <menu_set_state>
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	bf 90       	pop	r11
     e0e:	af 90       	pop	r10
     e10:	9f 90       	pop	r9
     e12:	8f 90       	pop	r8
     e14:	08 95       	ret

00000e16 <menu_move_arrow>:
	return current_state;
}

//move menu arrow to navigate among menu levels
void menu_move_arrow(int dir, menu* current_state, int* arrow_max, int* arrow_pos)
{
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	8a 01       	movw	r16, r20
     e24:	e9 01       	movw	r28, r18
	direction choice = dir;
	
	switch(choice)
     e26:	99 27       	eor	r25, r25
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	91 05       	cpc	r25, r1
     e2c:	09 f1       	breq	.+66     	; 0xe70 <menu_move_arrow+0x5a>
     e2e:	1c f4       	brge	.+6      	; 0xe36 <menu_move_arrow+0x20>
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	41 f0       	breq	.+16     	; 0xe44 <menu_move_arrow+0x2e>
     e34:	74 c0       	rjmp	.+232    	; 0xf1e <menu_move_arrow+0x108>
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	91 05       	cpc	r25, r1
     e3a:	b9 f1       	breq	.+110    	; 0xeaa <menu_move_arrow+0x94>
     e3c:	04 97       	sbiw	r24, 0x04	; 4
     e3e:	09 f4       	brne	.+2      	; 0xe42 <menu_move_arrow+0x2c>
     e40:	4f c0       	rjmp	.+158    	; 0xee0 <menu_move_arrow+0xca>
     e42:	6d c0       	rjmp	.+218    	; 0xf1e <menu_move_arrow+0x108>
	{
		case LEFT:
			current_state = current_state->parent;
     e44:	fb 01       	movw	r30, r22
     e46:	e4 80       	ldd	r14, Z+4	; 0x04
     e48:	f5 80       	ldd	r15, Z+5	; 0x05
			menu_set_state(current_state, arrow_max, arrow_pos);
     e4a:	a9 01       	movw	r20, r18
     e4c:	b8 01       	movw	r22, r16
     e4e:	c7 01       	movw	r24, r14
     e50:	d9 de       	rcall	.-590    	; 0xc04 <menu_set_state>
			printf("%s\n\r", current_state->name);
     e52:	f7 01       	movw	r30, r14
     e54:	83 81       	ldd	r24, Z+3	; 0x03
     e56:	8f 93       	push	r24
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	8f 93       	push	r24
     e5c:	84 ed       	ldi	r24, 0xD4	; 212
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	9f 93       	push	r25
     e62:	8f 93       	push	r24
     e64:	e4 d5       	rcall	.+3016   	; 0x1a2e <printf>
			break;
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	57 c0       	rjmp	.+174    	; 0xf1e <menu_move_arrow+0x108>
		case RIGHT:
			current_state = current_state->children[*arrow_pos - 2];
     e70:	88 81       	ld	r24, Y
     e72:	99 81       	ldd	r25, Y+1	; 0x01
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	fb 01       	movw	r30, r22
     e7c:	e8 0f       	add	r30, r24
     e7e:	f9 1f       	adc	r31, r25
     e80:	e0 80       	ld	r14, Z
     e82:	f1 80       	ldd	r15, Z+1	; 0x01
			menu_set_state(current_state, arrow_max, arrow_pos);
     e84:	a9 01       	movw	r20, r18
     e86:	b8 01       	movw	r22, r16
     e88:	c7 01       	movw	r24, r14
     e8a:	bc de       	rcall	.-648    	; 0xc04 <menu_set_state>
			printf("%s\n\r", current_state->name);
     e8c:	f7 01       	movw	r30, r14
     e8e:	83 81       	ldd	r24, Z+3	; 0x03
     e90:	8f 93       	push	r24
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	8f 93       	push	r24
     e96:	84 ed       	ldi	r24, 0xD4	; 212
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	9f 93       	push	r25
     e9c:	8f 93       	push	r24
     e9e:	c7 d5       	rcall	.+2958   	; 0x1a2e <printf>
			break;
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	3a c0       	rjmp	.+116    	; 0xf1e <menu_move_arrow+0x108>
		case UP:
			oled_pos(*arrow_pos,100);
     eaa:	64 e6       	ldi	r22, 0x64	; 100
     eac:	88 81       	ld	r24, Y
     eae:	0d d2       	rcall	.+1050   	; 0x12ca <oled_pos>
			oled_print(" ", 3);
     eb0:	63 e0       	ldi	r22, 0x03	; 3
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	89 ed       	ldi	r24, 0xD9	; 217
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	55 d2       	rcall	.+1194   	; 0x1364 <oled_print>
			(*arrow_pos)--;
     eba:	88 81       	ld	r24, Y
     ebc:	99 81       	ldd	r25, Y+1	; 0x01
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	99 83       	std	Y+1, r25	; 0x01
     ec2:	88 83       	st	Y, r24
			if (*arrow_pos == 1) {*arrow_pos = *arrow_max;}
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	29 f4       	brne	.+10     	; 0xed2 <menu_move_arrow+0xbc>
     ec8:	f8 01       	movw	r30, r16
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
     ece:	99 83       	std	Y+1, r25	; 0x01
     ed0:	88 83       	st	Y, r24
			oled_pos(*arrow_pos,100);
     ed2:	64 e6       	ldi	r22, 0x64	; 100
     ed4:	88 81       	ld	r24, Y
     ed6:	f9 d1       	rcall	.+1010   	; 0x12ca <oled_pos>
			oled_print_special_char(5);
     ed8:	85 e0       	ldi	r24, 0x05	; 5
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	6a d2       	rcall	.+1236   	; 0x13b2 <oled_print_special_char>
			break;
     ede:	1f c0       	rjmp	.+62     	; 0xf1e <menu_move_arrow+0x108>
		case DOWN:
			oled_pos(*arrow_pos,100);
     ee0:	64 e6       	ldi	r22, 0x64	; 100
     ee2:	88 81       	ld	r24, Y
     ee4:	f2 d1       	rcall	.+996    	; 0x12ca <oled_pos>
			oled_print(" ", 3);
     ee6:	63 e0       	ldi	r22, 0x03	; 3
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	89 ed       	ldi	r24, 0xD9	; 217
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	3a d2       	rcall	.+1140   	; 0x1364 <oled_print>
			(*arrow_pos)++;
     ef0:	88 81       	ld	r24, Y
     ef2:	99 81       	ldd	r25, Y+1	; 0x01
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	99 83       	std	Y+1, r25	; 0x01
     ef8:	88 83       	st	Y, r24
			if (*arrow_pos == *arrow_max + 1) {*arrow_pos = 2;}
     efa:	f8 01       	movw	r30, r16
     efc:	20 81       	ld	r18, Z
     efe:	31 81       	ldd	r19, Z+1	; 0x01
     f00:	2f 5f       	subi	r18, 0xFF	; 255
     f02:	3f 4f       	sbci	r19, 0xFF	; 255
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	21 f4       	brne	.+8      	; 0xf12 <menu_move_arrow+0xfc>
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	99 83       	std	Y+1, r25	; 0x01
     f10:	88 83       	st	Y, r24
			oled_pos(*arrow_pos,100);
     f12:	64 e6       	ldi	r22, 0x64	; 100
     f14:	88 81       	ld	r24, Y
     f16:	d9 d1       	rcall	.+946    	; 0x12ca <oled_pos>
			oled_print_special_char(5);
     f18:	85 e0       	ldi	r24, 0x05	; 5
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	4a d2       	rcall	.+1172   	; 0x13b2 <oled_print_special_char>
			break;
	}
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	08 95       	ret

00000f2c <menu_state_machine>:
	menu_set_state(current_state, arrow_max, arrow_pos);
}

// A menu state machine
void menu_state_machine(menu* current_state, int* arrow_max, int* arrow_pos, direction* old_dir, direction* dir)
{
     f2c:	cf 92       	push	r12
     f2e:	df 92       	push	r13
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
     f3e:	7b 01       	movw	r14, r22
     f40:	6a 01       	movw	r12, r20
	int s = current_state->val;
	
	switch (s)
     f42:	e8 81       	ld	r30, Y
     f44:	f9 81       	ldd	r31, Y+1	; 0x01
     f46:	e3 30       	cpi	r30, 0x03	; 3
     f48:	f1 05       	cpc	r31, r1
     f4a:	d9 f0       	breq	.+54     	; 0xf82 <menu_state_machine+0x56>
     f4c:	34 f4       	brge	.+12     	; 0xf5a <menu_state_machine+0x2e>
     f4e:	e1 30       	cpi	r30, 0x01	; 1
     f50:	f1 05       	cpc	r31, r1
     f52:	49 f0       	breq	.+18     	; 0xf66 <menu_state_machine+0x3a>
     f54:	32 97       	sbiw	r30, 0x02	; 2
     f56:	79 f0       	breq	.+30     	; 0xf76 <menu_state_machine+0x4a>
     f58:	2b c0       	rjmp	.+86     	; 0xfb0 <menu_state_machine+0x84>
     f5a:	e4 30       	cpi	r30, 0x04	; 4
     f5c:	f1 05       	cpc	r31, r1
     f5e:	c9 f0       	breq	.+50     	; 0xf92 <menu_state_machine+0x66>
     f60:	35 97       	sbiw	r30, 0x05	; 5
     f62:	f9 f0       	breq	.+62     	; 0xfa2 <menu_state_machine+0x76>
     f64:	25 c0       	rjmp	.+74     	; 0xfb0 <menu_state_machine+0x84>
	{
		case 1: // Menu		
			// Move arrow only if it has been in neutral position
			old_dir = dir;
			dir = get_joystick_direction();
     f66:	ac d0       	rcall	.+344    	; 0x10c0 <get_joystick_direction>
			if (old_dir == NEUTRAL) {
     f68:	01 2b       	or	r16, r17
     f6a:	11 f5       	brne	.+68     	; 0xfb0 <menu_state_machine+0x84>
				menu_move_arrow(dir, current_state, arrow_max, arrow_pos);
     f6c:	96 01       	movw	r18, r12
     f6e:	a7 01       	movw	r20, r14
     f70:	be 01       	movw	r22, r28
     f72:	51 df       	rcall	.-350    	; 0xe16 <menu_move_arrow>
     f74:	1d c0       	rjmp	.+58     	; 0xfb0 <menu_state_machine+0x84>
			}
			break;
		case 2: // Start Game
			send_multi_board_output(); // Sends CAN-message with multi-board outputs
     f76:	0d de       	rcall	.-998    	; 0xb92 <send_multi_board_output>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 ef       	ldi	r25, 0xF0	; 240
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <menu_state_machine+0x50>
     f80:	17 c0       	rjmp	.+46     	; 0xfb0 <menu_state_machine+0x84>
			_delay_ms(50);
			break;
		case 3: // Set Mode
			// Move arrow only if it has been in neutral position
			old_dir = dir;
			dir = get_joystick_direction();
     f82:	9e d0       	rcall	.+316    	; 0x10c0 <get_joystick_direction>
			if (old_dir == NEUTRAL) {
     f84:	01 2b       	or	r16, r17
     f86:	a1 f4       	brne	.+40     	; 0xfb0 <menu_state_machine+0x84>
				menu_move_arrow(dir, current_state, arrow_max, arrow_pos);
     f88:	96 01       	movw	r18, r12
     f8a:	a7 01       	movw	r20, r14
     f8c:	be 01       	movw	r22, r28
     f8e:	43 df       	rcall	.-378    	; 0xe16 <menu_move_arrow>
     f90:	0f c0       	rjmp	.+30     	; 0xfb0 <menu_state_machine+0x84>
			}
			break;
		case 4: // Use Slider
			// Move arrow only if it has been in neutral position
			old_dir = dir;
			dir = get_joystick_direction();
     f92:	96 d0       	rcall	.+300    	; 0x10c0 <get_joystick_direction>
			if (old_dir == NEUTRAL) {
     f94:	01 2b       	or	r16, r17
     f96:	61 f4       	brne	.+24     	; 0xfb0 <menu_state_machine+0x84>
				menu_move_arrow(dir, current_state, arrow_max, arrow_pos);
     f98:	96 01       	movw	r18, r12
     f9a:	a7 01       	movw	r20, r14
     f9c:	be 01       	movw	r22, r28
     f9e:	3b df       	rcall	.-394    	; 0xe16 <menu_move_arrow>
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <menu_state_machine+0x84>
			}
				break;
		case 5: // Use Joystick
			// Move arrow only if it has been in neutral position
			old_dir = dir;
			dir = get_joystick_direction();
     fa2:	8e d0       	rcall	.+284    	; 0x10c0 <get_joystick_direction>
			if (old_dir == NEUTRAL) {
     fa4:	01 2b       	or	r16, r17
     fa6:	21 f4       	brne	.+8      	; 0xfb0 <menu_state_machine+0x84>
				menu_move_arrow(dir, current_state, arrow_max, arrow_pos);
     fa8:	96 01       	movw	r18, r12
     faa:	a7 01       	movw	r20, r14
     fac:	be 01       	movw	r22, r28
     fae:	33 df       	rcall	.-410    	; 0xe16 <menu_move_arrow>
			}
			break;
		default:
			break;
	}
}
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	08 95       	ret

00000fc2 <joystick_init>:
static int x_middle_pos;
static int y_middle_pos;

void joystick_init()
{
	x_middle_pos = ADC_read(2);
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	41 dc       	rcall	.-1918   	; 0x84a <ADC_read>
     fc8:	90 93 03 02 	sts	0x0203, r25
     fcc:	80 93 02 02 	sts	0x0202, r24
	y_middle_pos = ADC_read(1);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	3a dc       	rcall	.-1932   	; 0x84a <ADC_read>
     fd6:	90 93 01 02 	sts	0x0201, r25
     fda:	80 93 00 02 	sts	0x0200, r24
     fde:	08 95       	ret

00000fe0 <get_joystick_position>:
}

struct Position get_joystick_position()
{
     fe0:	8f 92       	push	r8
     fe2:	9f 92       	push	r9
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
	struct Position j_position;
	
	float x_step = (255.0 - x_middle_pos)/100.0;
     ff4:	60 91 02 02 	lds	r22, 0x0202
     ff8:	70 91 03 02 	lds	r23, 0x0203
     ffc:	88 27       	eor	r24, r24
     ffe:	77 fd       	sbrc	r23, 7
    1000:	80 95       	com	r24
    1002:	98 2f       	mov	r25, r24
    1004:	17 d3       	rcall	.+1582   	; 0x1634 <__floatsisf>
    1006:	9b 01       	movw	r18, r22
    1008:	ac 01       	movw	r20, r24
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	8f e7       	ldi	r24, 0x7F	; 127
    1010:	93 e4       	ldi	r25, 0x43	; 67
    1012:	10 d2       	rcall	.+1056   	; 0x1434 <__subsf3>
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	48 ec       	ldi	r20, 0xC8	; 200
    101a:	52 e4       	ldi	r21, 0x42	; 66
    101c:	70 d2       	rcall	.+1248   	; 0x14fe <__divsf3>
    101e:	4b 01       	movw	r8, r22
    1020:	5c 01       	movw	r10, r24
	float y_step = (255.0 - y_middle_pos)/100.0;
    1022:	60 91 00 02 	lds	r22, 0x0200
    1026:	70 91 01 02 	lds	r23, 0x0201
    102a:	88 27       	eor	r24, r24
    102c:	77 fd       	sbrc	r23, 7
    102e:	80 95       	com	r24
    1030:	98 2f       	mov	r25, r24
    1032:	00 d3       	rcall	.+1536   	; 0x1634 <__floatsisf>
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	8f e7       	ldi	r24, 0x7F	; 127
    103e:	93 e4       	ldi	r25, 0x43	; 67
    1040:	f9 d1       	rcall	.+1010   	; 0x1434 <__subsf3>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	48 ec       	ldi	r20, 0xC8	; 200
    1048:	52 e4       	ldi	r21, 0x42	; 66
    104a:	59 d2       	rcall	.+1202   	; 0x14fe <__divsf3>
    104c:	6b 01       	movw	r12, r22
    104e:	7c 01       	movw	r14, r24
	
	int x_range = ADC_read(2);
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	fa db       	rcall	.-2060   	; 0x84a <ADC_read>
    1056:	ec 01       	movw	r28, r24
	int y_range = ADC_read(1);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	f6 db       	rcall	.-2068   	; 0x84a <ADC_read>

	j_position.x = (int) ((x_range - x_middle_pos)/x_step);
	j_position.y = (int) ((y_range - y_middle_pos)/y_step);
    105e:	20 91 00 02 	lds	r18, 0x0200
    1062:	30 91 01 02 	lds	r19, 0x0201
    1066:	82 1b       	sub	r24, r18
    1068:	93 0b       	sbc	r25, r19
    106a:	bc 01       	movw	r22, r24
    106c:	88 27       	eor	r24, r24
    106e:	77 fd       	sbrc	r23, 7
    1070:	80 95       	com	r24
    1072:	98 2f       	mov	r25, r24
    1074:	df d2       	rcall	.+1470   	; 0x1634 <__floatsisf>
    1076:	a7 01       	movw	r20, r14
    1078:	96 01       	movw	r18, r12
    107a:	41 d2       	rcall	.+1154   	; 0x14fe <__divsf3>
    107c:	a8 d2       	rcall	.+1360   	; 0x15ce <__fixsfsi>
    107e:	6b 01       	movw	r12, r22
    1080:	7c 01       	movw	r14, r24
	float y_step = (255.0 - y_middle_pos)/100.0;
	
	int x_range = ADC_read(2);
	int y_range = ADC_read(1);

	j_position.x = (int) ((x_range - x_middle_pos)/x_step);
    1082:	80 91 02 02 	lds	r24, 0x0202
    1086:	90 91 03 02 	lds	r25, 0x0203
    108a:	be 01       	movw	r22, r28
    108c:	68 1b       	sub	r22, r24
    108e:	79 0b       	sbc	r23, r25
    1090:	88 27       	eor	r24, r24
    1092:	77 fd       	sbrc	r23, 7
    1094:	80 95       	com	r24
    1096:	98 2f       	mov	r25, r24
    1098:	cd d2       	rcall	.+1434   	; 0x1634 <__floatsisf>
    109a:	a5 01       	movw	r20, r10
    109c:	94 01       	movw	r18, r8
    109e:	2f d2       	rcall	.+1118   	; 0x14fe <__divsf3>
    10a0:	96 d2       	rcall	.+1324   	; 0x15ce <__fixsfsi>
    10a2:	4b 01       	movw	r8, r22
    10a4:	5c 01       	movw	r10, r24
	j_position.y = (int) ((y_range - y_middle_pos)/y_step);
	
	return j_position;
    10a6:	b4 01       	movw	r22, r8
    10a8:	c6 01       	movw	r24, r12
}
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
    10b2:	df 90       	pop	r13
    10b4:	cf 90       	pop	r12
    10b6:	bf 90       	pop	r11
    10b8:	af 90       	pop	r10
    10ba:	9f 90       	pop	r9
    10bc:	8f 90       	pop	r8
    10be:	08 95       	ret

000010c0 <get_joystick_direction>:

int get_joystick_direction(){
	struct Position j_pos;
	
	j_pos = get_joystick_position();
    10c0:	8f df       	rcall	.-226    	; 0xfe0 <get_joystick_position>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
	
	if (j_pos.x >= -10 && j_pos.x <= 10 && j_pos.y >= -10 && j_pos.y <= 10)
    10c6:	fb 01       	movw	r30, r22
    10c8:	3a 96       	adiw	r30, 0x0a	; 10
    10ca:	75 97       	sbiw	r30, 0x15	; 21
    10cc:	20 f4       	brcc	.+8      	; 0x10d6 <get_joystick_direction+0x16>
    10ce:	fc 01       	movw	r30, r24
    10d0:	3a 96       	adiw	r30, 0x0a	; 10
    10d2:	75 97       	sbiw	r30, 0x15	; 21
    10d4:	c8 f1       	brcs	.+114    	; 0x1148 <get_joystick_direction+0x88>
	{
		return NEUTRAL;
	} else if (j_pos.x < -10 && abs(j_pos.x) >= abs(j_pos.y))
    10d6:	26 3f       	cpi	r18, 0xF6	; 246
    10d8:	ef ef       	ldi	r30, 0xFF	; 255
    10da:	3e 07       	cpc	r19, r30
    10dc:	8c f4       	brge	.+34     	; 0x1100 <get_joystick_direction+0x40>
    10de:	db 01       	movw	r26, r22
    10e0:	33 23       	and	r19, r19
    10e2:	24 f4       	brge	.+8      	; 0x10ec <get_joystick_direction+0x2c>
    10e4:	aa 27       	eor	r26, r26
    10e6:	bb 27       	eor	r27, r27
    10e8:	a6 1b       	sub	r26, r22
    10ea:	b7 0b       	sbc	r27, r23
    10ec:	fc 01       	movw	r30, r24
    10ee:	55 23       	and	r21, r21
    10f0:	24 f4       	brge	.+8      	; 0x10fa <get_joystick_direction+0x3a>
    10f2:	ee 27       	eor	r30, r30
    10f4:	ff 27       	eor	r31, r31
    10f6:	e8 1b       	sub	r30, r24
    10f8:	f9 0b       	sbc	r31, r25
    10fa:	ae 17       	cp	r26, r30
    10fc:	bf 07       	cpc	r27, r31
    10fe:	3c f5       	brge	.+78     	; 0x114e <get_joystick_direction+0x8e>
	{
		return LEFT;
	} else if (j_pos.x > 10 && j_pos.x >= abs(j_pos.y))
    1100:	2b 30       	cpi	r18, 0x0B	; 11
    1102:	31 05       	cpc	r19, r1
    1104:	54 f0       	brlt	.+20     	; 0x111a <get_joystick_direction+0x5a>
    1106:	fc 01       	movw	r30, r24
    1108:	55 23       	and	r21, r21
    110a:	24 f4       	brge	.+8      	; 0x1114 <get_joystick_direction+0x54>
    110c:	ee 27       	eor	r30, r30
    110e:	ff 27       	eor	r31, r31
    1110:	e8 1b       	sub	r30, r24
    1112:	f9 0b       	sbc	r31, r25
    1114:	2e 17       	cp	r18, r30
    1116:	3f 07       	cpc	r19, r31
    1118:	ec f4       	brge	.+58     	; 0x1154 <get_joystick_direction+0x94>
	{
		return RIGHT;
	} else if (j_pos.y < -10 && abs(j_pos.y) > abs(j_pos.x))
    111a:	46 3f       	cpi	r20, 0xF6	; 246
    111c:	5f 4f       	sbci	r21, 0xFF	; 255
    111e:	ec f4       	brge	.+58     	; 0x115a <get_joystick_direction+0x9a>
    1120:	ac 01       	movw	r20, r24
    1122:	99 23       	and	r25, r25
    1124:	24 f4       	brge	.+8      	; 0x112e <get_joystick_direction+0x6e>
    1126:	44 27       	eor	r20, r20
    1128:	55 27       	eor	r21, r21
    112a:	48 1b       	sub	r20, r24
    112c:	59 0b       	sbc	r21, r25
    112e:	9b 01       	movw	r18, r22
    1130:	77 23       	and	r23, r23
    1132:	24 f4       	brge	.+8      	; 0x113c <get_joystick_direction+0x7c>
    1134:	22 27       	eor	r18, r18
    1136:	33 27       	eor	r19, r19
    1138:	26 1b       	sub	r18, r22
    113a:	37 0b       	sbc	r19, r23
    113c:	24 17       	cp	r18, r20
    113e:	35 07       	cpc	r19, r21
    1140:	7c f0       	brlt	.+30     	; 0x1160 <get_joystick_direction+0xa0>
	{
		return DOWN;
	}else 
	{
		return UP;
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	08 95       	ret
	
	j_pos = get_joystick_position();
	
	if (j_pos.x >= -10 && j_pos.x <= 10 && j_pos.y >= -10 && j_pos.y <= 10)
	{
		return NEUTRAL;
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	08 95       	ret
	} else if (j_pos.x < -10 && abs(j_pos.x) >= abs(j_pos.y))
	{
		return LEFT;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	08 95       	ret
	} else if (j_pos.x > 10 && j_pos.x >= abs(j_pos.y))
	{
		return RIGHT;
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	08 95       	ret
	} else if (j_pos.y < -10 && abs(j_pos.y) > abs(j_pos.x))
	{
		return DOWN;
	}else 
	{
		return UP;
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	08 95       	ret
	} else if (j_pos.x > 10 && j_pos.x >= abs(j_pos.y))
	{
		return RIGHT;
	} else if (j_pos.y < -10 && abs(j_pos.y) > abs(j_pos.x))
	{
		return DOWN;
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	90 e0       	ldi	r25, 0x00	; 0
	}else 
	{
		return UP;
	}
}
    1164:	08 95       	ret

00001166 <get_left_slider>:

int get_left_slider()
{
	int range = ADC_read(3);
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	6f db       	rcall	.-2338   	; 0x84a <ADC_read>
	
	return (int) ((255 - range)/2.55);
    116c:	6f ef       	ldi	r22, 0xFF	; 255
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	68 1b       	sub	r22, r24
    1172:	79 0b       	sbc	r23, r25
    1174:	88 27       	eor	r24, r24
    1176:	77 fd       	sbrc	r23, 7
    1178:	80 95       	com	r24
    117a:	98 2f       	mov	r25, r24
    117c:	5b d2       	rcall	.+1206   	; 0x1634 <__floatsisf>
    117e:	23 e3       	ldi	r18, 0x33	; 51
    1180:	33 e3       	ldi	r19, 0x33	; 51
    1182:	43 e2       	ldi	r20, 0x23	; 35
    1184:	50 e4       	ldi	r21, 0x40	; 64
    1186:	bb d1       	rcall	.+886    	; 0x14fe <__divsf3>
    1188:	22 d2       	rcall	.+1092   	; 0x15ce <__fixsfsi>
}
    118a:	cb 01       	movw	r24, r22
    118c:	08 95       	ret

0000118e <get_right_slider>:

int get_right_slider()
{
	int range = ADC_read(4);
    118e:	84 e0       	ldi	r24, 0x04	; 4
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	5b db       	rcall	.-2378   	; 0x84a <ADC_read>
	
	return (int) (range/2.55);
    1194:	bc 01       	movw	r22, r24
    1196:	88 27       	eor	r24, r24
    1198:	77 fd       	sbrc	r23, 7
    119a:	80 95       	com	r24
    119c:	98 2f       	mov	r25, r24
    119e:	4a d2       	rcall	.+1172   	; 0x1634 <__floatsisf>
    11a0:	23 e3       	ldi	r18, 0x33	; 51
    11a2:	33 e3       	ldi	r19, 0x33	; 51
    11a4:	43 e2       	ldi	r20, 0x23	; 35
    11a6:	50 e4       	ldi	r21, 0x40	; 64
    11a8:	aa d1       	rcall	.+852    	; 0x14fe <__divsf3>
    11aa:	11 d2       	rcall	.+1058   	; 0x15ce <__fixsfsi>
}
    11ac:	cb 01       	movw	r24, r22
    11ae:	08 95       	ret

000011b0 <get_joystick_right_button>:

int get_joystick_right_button()
{
	uint8_t push = (PINB & 0b00000001);
    11b0:	86 b3       	in	r24, 0x16	; 22
	
	return push;
}
    11b2:	81 70       	andi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	08 95       	ret

000011b8 <get_joystick_left_button>:

int get_joystick_left_button()
{
	uint8_t push = (PINB & 0b00000010);
    11b8:	86 b3       	in	r24, 0x16	; 22
    11ba:	82 70       	andi	r24, 0x02	; 2
	
	return push;
}
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	08 95       	ret

000011c0 <main>:
	PORTA = 0b00000000;            // PC0 = Low = 0v
	_delay_ms(1000);                // wait 500 milliseconds
}

int main(void)
{
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	66 97       	sbiw	r28, 0x16	; 22
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
	// Initializations
	USART_Init(MYUBRR);
    11d4:	8f e1       	ldi	r24, 0x1F	; 31
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	21 d1       	rcall	.+578    	; 0x141c <USART_Init>
	SRAM_init();
    11da:	11 d1       	rcall	.+546    	; 0x13fe <SRAM_init>
	joystick_init();
    11dc:	f2 de       	rcall	.-540    	; 0xfc2 <joystick_init>
	oled_init();
    11de:	2b d0       	rcall	.+86     	; 0x1236 <oled_init>
	spi_init();
    11e0:	06 d1       	rcall	.+524    	; 0x13ee <spi_init>
	can_controller_init();
    11e2:	88 db       	rcall	.-2288   	; 0x8f4 <can_controller_init>
	can_init();
    11e4:	ad db       	rcall	.-2214   	; 0x940 <can_init>
	
	printf("START ============================\n\r");
    11e6:	8b ed       	ldi	r24, 0xDB	; 219
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	9f 93       	push	r25
    11ec:	8f 93       	push	r24
    11ee:	1f d4       	rcall	.+2110   	; 0x1a2e <printf>
	
	int arrow_pos = 2;
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
	int arrow_max = 2;
    11f8:	9c 83       	std	Y+4, r25	; 0x04
    11fa:	8b 83       	std	Y+3, r24	; 0x03
	menu current_state;
	menu_state_machine_setup(&current_state, &arrow_max, &arrow_pos);
    11fc:	ae 01       	movw	r20, r28
    11fe:	4f 5f       	subi	r20, 0xFF	; 255
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
    1202:	be 01       	movw	r22, r28
    1204:	6d 5f       	subi	r22, 0xFD	; 253
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	ce 01       	movw	r24, r28
    120a:	05 96       	adiw	r24, 0x05	; 5
    120c:	7b dd       	rcall	.-1290   	; 0xd04 <menu_state_machine_setup>
	
	direction dir = NEUTRAL;
    120e:	1d 8a       	std	Y+21, r1	; 0x15
	direction old_dir = NEUTRAL;
    1210:	1e 8a       	std	Y+22, r1	; 0x16
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
	
	while (1)
	{	
		menu_state_machine(&current_state, &arrow_pos, &arrow_max, &old_dir, &dir);
    1216:	8e 01       	movw	r16, r28
    1218:	0b 5e       	subi	r16, 0xEB	; 235
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	9e 01       	movw	r18, r28
    121e:	2a 5e       	subi	r18, 0xEA	; 234
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	ae 01       	movw	r20, r28
    1224:	4d 5f       	subi	r20, 0xFD	; 253
    1226:	5f 4f       	sbci	r21, 0xFF	; 255
    1228:	be 01       	movw	r22, r28
    122a:	6f 5f       	subi	r22, 0xFF	; 255
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	ce 01       	movw	r24, r28
    1230:	05 96       	adiw	r24, 0x05	; 5
    1232:	7c de       	rcall	.-776    	; 0xf2c <menu_state_machine>
    1234:	f0 cf       	rjmp	.-32     	; 0x1216 <main+0x56>

00001236 <oled_init>:
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1236:	e0 e0       	ldi	r30, 0x00	; 0
    1238:	f0 e1       	ldi	r31, 0x10	; 16
    123a:	8e ea       	ldi	r24, 0xAE	; 174
    123c:	80 83       	st	Z, r24
    123e:	81 ea       	ldi	r24, 0xA1	; 161
    1240:	80 83       	st	Z, r24
    1242:	8a ed       	ldi	r24, 0xDA	; 218
    1244:	80 83       	st	Z, r24
    1246:	82 e1       	ldi	r24, 0x12	; 18
    1248:	80 83       	st	Z, r24
    124a:	88 ec       	ldi	r24, 0xC8	; 200
    124c:	80 83       	st	Z, r24
    124e:	88 ea       	ldi	r24, 0xA8	; 168
    1250:	80 83       	st	Z, r24
    1252:	8f e3       	ldi	r24, 0x3F	; 63
    1254:	80 83       	st	Z, r24
    1256:	85 ed       	ldi	r24, 0xD5	; 213
    1258:	80 83       	st	Z, r24
    125a:	80 e8       	ldi	r24, 0x80	; 128
    125c:	80 83       	st	Z, r24
    125e:	81 e8       	ldi	r24, 0x81	; 129
    1260:	80 83       	st	Z, r24
    1262:	80 e5       	ldi	r24, 0x50	; 80
    1264:	80 83       	st	Z, r24
    1266:	89 ed       	ldi	r24, 0xD9	; 217
    1268:	80 83       	st	Z, r24
    126a:	81 e2       	ldi	r24, 0x21	; 33
    126c:	80 83       	st	Z, r24
    126e:	80 e2       	ldi	r24, 0x20	; 32
    1270:	80 83       	st	Z, r24
    1272:	10 82       	st	Z, r1
    1274:	8b ed       	ldi	r24, 0xDB	; 219
    1276:	80 83       	st	Z, r24
    1278:	80 e3       	ldi	r24, 0x30	; 48
    127a:	80 83       	st	Z, r24
    127c:	8d ea       	ldi	r24, 0xAD	; 173
    127e:	80 83       	st	Z, r24
    1280:	10 82       	st	Z, r1
    1282:	84 ea       	ldi	r24, 0xA4	; 164
    1284:	80 83       	st	Z, r24
    1286:	86 ea       	ldi	r24, 0xA6	; 166
    1288:	80 83       	st	Z, r24
    128a:	8f ea       	ldi	r24, 0xAF	; 175
    128c:	80 83       	st	Z, r24
    128e:	08 95       	ret

00001290 <oled_goto_line>:
    1290:	e0 e0       	ldi	r30, 0x00	; 0
    1292:	f0 e1       	ldi	r31, 0x10	; 16
    1294:	92 e2       	ldi	r25, 0x22	; 34
    1296:	90 83       	st	Z, r25
    1298:	80 83       	st	Z, r24
    129a:	87 e0       	ldi	r24, 0x07	; 7
    129c:	80 83       	st	Z, r24
    129e:	08 95       	ret

000012a0 <oled_goto_column>:
    12a0:	e0 e0       	ldi	r30, 0x00	; 0
    12a2:	f0 e1       	ldi	r31, 0x10	; 16
    12a4:	91 e2       	ldi	r25, 0x21	; 33
    12a6:	90 83       	st	Z, r25
    12a8:	80 83       	st	Z, r24
    12aa:	8f e7       	ldi	r24, 0x7F	; 127
    12ac:	80 83       	st	Z, r24
    12ae:	08 95       	ret

000012b0 <oled_reset>:
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	ee df       	rcall	.-36     	; 0x1290 <oled_goto_line>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	f4 df       	rcall	.-24     	; 0x12a0 <oled_goto_column>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	94 e0       	ldi	r25, 0x04	; 4
    12bc:	e0 e0       	ldi	r30, 0x00	; 0
    12be:	f2 e1       	ldi	r31, 0x12	; 18
    12c0:	10 82       	st	Z, r1
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <oled_reset+0x10>
    12c8:	08 95       	ret

000012ca <oled_pos>:
    12ca:	cf 93       	push	r28
    12cc:	c6 2f       	mov	r28, r22
    12ce:	e0 df       	rcall	.-64     	; 0x1290 <oled_goto_line>
    12d0:	8c 2f       	mov	r24, r28
    12d2:	e6 df       	rcall	.-52     	; 0x12a0 <oled_goto_column>
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <oled_print_char>:
//print a character on the current position
//size: 1 - small | 2 - medium | 3 - large
void oled_print_char(char character, int size)
{
	char mychar;
	int code = ((int) character) - 32;
    12d8:	e8 2f       	mov	r30, r24
    12da:	ff 27       	eor	r31, r31
    12dc:	e7 fd       	sbrc	r30, 7
    12de:	f0 95       	com	r31
    12e0:	b0 97       	sbiw	r30, 0x20	; 32
	
	if (size == 3)
    12e2:	63 30       	cpi	r22, 0x03	; 3
    12e4:	71 05       	cpc	r23, r1
    12e6:	a1 f4       	brne	.+40     	; 0x1310 <oled_print_char+0x38>
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	e9 5e       	subi	r30, 0xE9	; 233
    12f6:	fa 4f       	sbci	r31, 0xFA	; 250
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    12fc:	a0 e0       	ldi	r26, 0x00	; 0
    12fe:	b2 e1       	ldi	r27, 0x12	; 18
	
	if (size == 3)
	{
		for (int k = 0; k < 8; k++)
		{
			mychar =  pgm_read_byte_near(font8[code] + k);
    1300:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1302:	2c 93       	st	X, r18
	char mychar;
	int code = ((int) character) - 32;
	
	if (size == 3)
	{
		for (int k = 0; k < 8; k++)
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	31 96       	adiw	r30, 0x01	; 1
    1308:	88 30       	cpi	r24, 0x08	; 8
    130a:	91 05       	cpc	r25, r1
    130c:	c9 f7       	brne	.-14     	; 0x1300 <oled_print_char+0x28>
    130e:	08 95       	ret
		{
			mychar =  pgm_read_byte_near(font8[code] + k);
			mychar = mychar;
			oled_write_data(mychar);
		}
	}else if (size == 2)
    1310:	62 30       	cpi	r22, 0x02	; 2
    1312:	71 05       	cpc	r23, r1
    1314:	a9 f4       	brne	.+42     	; 0x1340 <oled_print_char+0x68>
    1316:	cf 01       	movw	r24, r30
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	e8 0f       	add	r30, r24
    1322:	f9 1f       	adc	r31, r25
    1324:	e4 5c       	subi	r30, 0xC4	; 196
    1326:	fc 4f       	sbci	r31, 0xFC	; 252
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	b2 e1       	ldi	r27, 0x12	; 18
		}
	}else if (size == 2)
	{
		for (int k = 0; k < 5; k++)
		{
			mychar =  pgm_read_byte_near(font5[code] + k);
    1330:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1332:	2c 93       	st	X, r18
			mychar = mychar;
			oled_write_data(mychar);
		}
	}else if (size == 2)
	{
		for (int k = 0; k < 5; k++)
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	85 30       	cpi	r24, 0x05	; 5
    133a:	91 05       	cpc	r25, r1
    133c:	c9 f7       	brne	.-14     	; 0x1330 <oled_print_char+0x58>
    133e:	08 95       	ret
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	ee 0f       	add	r30, r30
    1346:	ff 1f       	adc	r31, r31
    1348:	e0 54       	subi	r30, 0x40	; 64
    134a:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			mychar =  pgm_read_byte_near(font8[code] + k);
			mychar = mychar;
			oled_write_data(mychar);
		}
	}else if (size == 2)
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1350:	a0 e0       	ldi	r26, 0x00	; 0
    1352:	b2 e1       	ldi	r27, 0x12	; 18
		}
	}else 
	{
		for (int k = 0; k < 4; k++)
		{
			mychar =  pgm_read_byte_near(font4[code] + k);
    1354:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    1356:	2c 93       	st	X, r18
			mychar =  pgm_read_byte_near(font5[code] + k);
			oled_write_data(mychar);
		}
	}else 
	{
		for (int k = 0; k < 4; k++)
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	31 96       	adiw	r30, 0x01	; 1
    135c:	84 30       	cpi	r24, 0x04	; 4
    135e:	91 05       	cpc	r25, r1
    1360:	c9 f7       	brne	.-14     	; 0x1354 <oled_print_char+0x7c>
    1362:	08 95       	ret

00001364 <oled_print>:
}

//print a string starting on the current position
//size: 1 - small | 2 - medium | 3 - large 
void oled_print(char* name, int size)
{
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	8c 01       	movw	r16, r24
    1376:	6b 01       	movw	r12, r22
    1378:	7c 01       	movw	r14, r24
	for (int i = 0; i < strlen(name); i++)
    137a:	c0 e0       	ldi	r28, 0x00	; 0
    137c:	d0 e0       	ldi	r29, 0x00	; 0
    137e:	06 c0       	rjmp	.+12     	; 0x138c <oled_print+0x28>
	{
		oled_print_char(name[i], size);
    1380:	b6 01       	movw	r22, r12
    1382:	f7 01       	movw	r30, r14
    1384:	81 91       	ld	r24, Z+
    1386:	7f 01       	movw	r14, r30
    1388:	a7 df       	rcall	.-178    	; 0x12d8 <oled_print_char>

//print a string starting on the current position
//size: 1 - small | 2 - medium | 3 - large 
void oled_print(char* name, int size)
{
	for (int i = 0; i < strlen(name); i++)
    138a:	21 96       	adiw	r28, 0x01	; 1
    138c:	f8 01       	movw	r30, r16
    138e:	01 90       	ld	r0, Z+
    1390:	00 20       	and	r0, r0
    1392:	e9 f7       	brne	.-6      	; 0x138e <oled_print+0x2a>
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	e0 1b       	sub	r30, r16
    1398:	f1 0b       	sbc	r31, r17
    139a:	ce 17       	cp	r28, r30
    139c:	df 07       	cpc	r29, r31
    139e:	80 f3       	brcs	.-32     	; 0x1380 <oled_print+0x1c>
	{
		oled_print_char(name[i], size);
	}
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	df 90       	pop	r13
    13ae:	cf 90       	pop	r12
    13b0:	08 95       	ret

000013b2 <oled_print_special_char>:
	}
	
}

void oled_print_special_char (int code)
{
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	fc 01       	movw	r30, r24
    13c0:	e0 59       	subi	r30, 0x90	; 144
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	88 58       	subi	r24, 0x88	; 136
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    13c8:	a0 e0       	ldi	r26, 0x00	; 0
    13ca:	b2 e1       	ldi	r27, 0x12	; 18
{
	char mychar;
	
	for (int k = 0; k < 8; k++)
	{
		mychar =  pgm_read_byte_near(specialChar[code] + k);
    13cc:	24 91       	lpm	r18, Z
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
    13ce:	2c 93       	st	X, r18
    13d0:	31 96       	adiw	r30, 0x01	; 1

void oled_print_special_char (int code)
{
	char mychar;
	
	for (int k = 0; k < 8; k++)
    13d2:	e8 17       	cp	r30, r24
    13d4:	f9 07       	cpc	r31, r25
    13d6:	d1 f7       	brne	.-12     	; 0x13cc <oled_print_special_char+0x1a>
	{
		mychar =  pgm_read_byte_near(specialChar[code] + k);
		oled_write_data(mychar);
	}
}
    13d8:	08 95       	ret

000013da <SPI_MasterInit>:
//TODO - define for register bit (reusable code)

void SPI_MasterInit(void)
{
    /* Set MOSI, SCK output and SS all others input */
    DDRB = (1<<DDB5)|(1<<DDB7)|(1<<DDB4);
    13da:	80 eb       	ldi	r24, 0xB0	; 176
    13dc:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input 
	DDRB &= ~(1<<DDB6);
    13de:	be 98       	cbi	0x17, 6	; 23
	
    /* Enable SPI, Master, set clock rate fck/16 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    13e0:	81 e5       	ldi	r24, 0x51	; 81
    13e2:	8d b9       	out	0x0d, r24	; 13
    13e4:	08 95       	ret

000013e6 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
    /* Start transmission */
    SPDR = cData;
    13e6:	8f b9       	out	0x0f, r24	; 15
    /* Wait for transmission complete */
    while(!(SPSR & (1<<SPIF)));
    13e8:	77 9b       	sbis	0x0e, 7	; 14
    13ea:	fe cf       	rjmp	.-4      	; 0x13e8 <SPI_MasterTransmit+0x2>
}
    13ec:	08 95       	ret

000013ee <spi_init>:
// }


void spi_init()
{
	SPI_MasterInit();
    13ee:	f5 cf       	rjmp	.-22     	; 0x13da <SPI_MasterInit>
    13f0:	08 95       	ret

000013f2 <spi_send>:
}

void spi_send(char data)
{
	SPI_MasterTransmit(data);	
    13f2:	f9 cf       	rjmp	.-14     	; 0x13e6 <SPI_MasterTransmit>
    13f4:	08 95       	ret

000013f6 <spi_read>:
	
}

char spi_read()
{
	SPI_MasterTransmit(0x00);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	f6 df       	rcall	.-20     	; 0x13e6 <SPI_MasterTransmit>
	return SPDR;
    13fa:	8f b1       	in	r24, 0x0f	; 15
}
    13fc:	08 95       	ret

000013fe <SRAM_init>:
#include "avr/io.h" 

void SRAM_init()
{
	//Enable XMEM
	MCUCR |= (1 << SRE); 
    13fe:	85 b7       	in	r24, 0x35	; 53
    1400:	80 68       	ori	r24, 0x80	; 128
    1402:	85 bf       	out	0x35, r24	; 53
	
	//Mask JTAG pins
	SFIOR |= (1 << XMM2) | (0 << XMM1) | (0 << XMM0);	
    1404:	80 b7       	in	r24, 0x30	; 48
    1406:	80 62       	ori	r24, 0x20	; 32
    1408:	80 bf       	out	0x30, r24	; 48
    140a:	08 95       	ret

0000140c <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    140c:	5d 9b       	sbis	0x0b, 5	; 11
    140e:	fe cf       	rjmp	.-4      	; 0x140c <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1410:	8c b9       	out	0x0c, r24	; 12
    1412:	08 95       	ret

00001414 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
    1414:	5f 9b       	sbis	0x0b, 7	; 11
    1416:	fe cf       	rjmp	.-4      	; 0x1414 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
    1418:	8c b1       	in	r24, 0x0c	; 12
}
    141a:	08 95       	ret

0000141c <USART_Init>:
#include "avr/io.h"

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr >> 8);
    141c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
    141e:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    1420:	88 e1       	ldi	r24, 0x18	; 24
    1422:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0)|(3 << UCSZ00);
    1424:	8e e8       	ldi	r24, 0x8E	; 142
    1426:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_Transmit, USART_Receive);
    1428:	6a e0       	ldi	r22, 0x0A	; 10
    142a:	7a e0       	ldi	r23, 0x0A	; 10
    142c:	86 e0       	ldi	r24, 0x06	; 6
    142e:	9a e0       	ldi	r25, 0x0A	; 10
    1430:	b4 c2       	rjmp	.+1384   	; 0x199a <fdevopen>
    1432:	08 95       	ret

00001434 <__subsf3>:
    1434:	50 58       	subi	r21, 0x80	; 128

00001436 <__addsf3>:
    1436:	bb 27       	eor	r27, r27
    1438:	aa 27       	eor	r26, r26
    143a:	0e d0       	rcall	.+28     	; 0x1458 <__addsf3x>
    143c:	4d c1       	rjmp	.+666    	; 0x16d8 <__fp_round>
    143e:	3e d1       	rcall	.+636    	; 0x16bc <__fp_pscA>
    1440:	30 f0       	brcs	.+12     	; 0x144e <__addsf3+0x18>
    1442:	43 d1       	rcall	.+646    	; 0x16ca <__fp_pscB>
    1444:	20 f0       	brcs	.+8      	; 0x144e <__addsf3+0x18>
    1446:	31 f4       	brne	.+12     	; 0x1454 <__addsf3+0x1e>
    1448:	9f 3f       	cpi	r25, 0xFF	; 255
    144a:	11 f4       	brne	.+4      	; 0x1450 <__addsf3+0x1a>
    144c:	1e f4       	brtc	.+6      	; 0x1454 <__addsf3+0x1e>
    144e:	33 c1       	rjmp	.+614    	; 0x16b6 <__fp_nan>
    1450:	0e f4       	brtc	.+2      	; 0x1454 <__addsf3+0x1e>
    1452:	e0 95       	com	r30
    1454:	e7 fb       	bst	r30, 7
    1456:	29 c1       	rjmp	.+594    	; 0x16aa <__fp_inf>

00001458 <__addsf3x>:
    1458:	e9 2f       	mov	r30, r25
    145a:	4f d1       	rcall	.+670    	; 0x16fa <__fp_split3>
    145c:	80 f3       	brcs	.-32     	; 0x143e <__addsf3+0x8>
    145e:	ba 17       	cp	r27, r26
    1460:	62 07       	cpc	r22, r18
    1462:	73 07       	cpc	r23, r19
    1464:	84 07       	cpc	r24, r20
    1466:	95 07       	cpc	r25, r21
    1468:	18 f0       	brcs	.+6      	; 0x1470 <__addsf3x+0x18>
    146a:	71 f4       	brne	.+28     	; 0x1488 <__addsf3x+0x30>
    146c:	9e f5       	brtc	.+102    	; 0x14d4 <__addsf3x+0x7c>
    146e:	67 c1       	rjmp	.+718    	; 0x173e <__fp_zero>
    1470:	0e f4       	brtc	.+2      	; 0x1474 <__addsf3x+0x1c>
    1472:	e0 95       	com	r30
    1474:	0b 2e       	mov	r0, r27
    1476:	ba 2f       	mov	r27, r26
    1478:	a0 2d       	mov	r26, r0
    147a:	0b 01       	movw	r0, r22
    147c:	b9 01       	movw	r22, r18
    147e:	90 01       	movw	r18, r0
    1480:	0c 01       	movw	r0, r24
    1482:	ca 01       	movw	r24, r20
    1484:	a0 01       	movw	r20, r0
    1486:	11 24       	eor	r1, r1
    1488:	ff 27       	eor	r31, r31
    148a:	59 1b       	sub	r21, r25
    148c:	99 f0       	breq	.+38     	; 0x14b4 <__addsf3x+0x5c>
    148e:	59 3f       	cpi	r21, 0xF9	; 249
    1490:	50 f4       	brcc	.+20     	; 0x14a6 <__addsf3x+0x4e>
    1492:	50 3e       	cpi	r21, 0xE0	; 224
    1494:	68 f1       	brcs	.+90     	; 0x14f0 <__addsf3x+0x98>
    1496:	1a 16       	cp	r1, r26
    1498:	f0 40       	sbci	r31, 0x00	; 0
    149a:	a2 2f       	mov	r26, r18
    149c:	23 2f       	mov	r18, r19
    149e:	34 2f       	mov	r19, r20
    14a0:	44 27       	eor	r20, r20
    14a2:	58 5f       	subi	r21, 0xF8	; 248
    14a4:	f3 cf       	rjmp	.-26     	; 0x148c <__addsf3x+0x34>
    14a6:	46 95       	lsr	r20
    14a8:	37 95       	ror	r19
    14aa:	27 95       	ror	r18
    14ac:	a7 95       	ror	r26
    14ae:	f0 40       	sbci	r31, 0x00	; 0
    14b0:	53 95       	inc	r21
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <__addsf3x+0x4e>
    14b4:	7e f4       	brtc	.+30     	; 0x14d4 <__addsf3x+0x7c>
    14b6:	1f 16       	cp	r1, r31
    14b8:	ba 0b       	sbc	r27, r26
    14ba:	62 0b       	sbc	r22, r18
    14bc:	73 0b       	sbc	r23, r19
    14be:	84 0b       	sbc	r24, r20
    14c0:	ba f0       	brmi	.+46     	; 0x14f0 <__addsf3x+0x98>
    14c2:	91 50       	subi	r25, 0x01	; 1
    14c4:	a1 f0       	breq	.+40     	; 0x14ee <__addsf3x+0x96>
    14c6:	ff 0f       	add	r31, r31
    14c8:	bb 1f       	adc	r27, r27
    14ca:	66 1f       	adc	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	c2 f7       	brpl	.-16     	; 0x14c2 <__addsf3x+0x6a>
    14d2:	0e c0       	rjmp	.+28     	; 0x14f0 <__addsf3x+0x98>
    14d4:	ba 0f       	add	r27, r26
    14d6:	62 1f       	adc	r22, r18
    14d8:	73 1f       	adc	r23, r19
    14da:	84 1f       	adc	r24, r20
    14dc:	48 f4       	brcc	.+18     	; 0x14f0 <__addsf3x+0x98>
    14de:	87 95       	ror	r24
    14e0:	77 95       	ror	r23
    14e2:	67 95       	ror	r22
    14e4:	b7 95       	ror	r27
    14e6:	f7 95       	ror	r31
    14e8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <__addsf3x+0x96>
    14ec:	b3 cf       	rjmp	.-154    	; 0x1454 <__addsf3+0x1e>
    14ee:	93 95       	inc	r25
    14f0:	88 0f       	add	r24, r24
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <__addsf3x+0x9e>
    14f4:	99 27       	eor	r25, r25
    14f6:	ee 0f       	add	r30, r30
    14f8:	97 95       	ror	r25
    14fa:	87 95       	ror	r24
    14fc:	08 95       	ret

000014fe <__divsf3>:
    14fe:	0c d0       	rcall	.+24     	; 0x1518 <__divsf3x>
    1500:	eb c0       	rjmp	.+470    	; 0x16d8 <__fp_round>
    1502:	e3 d0       	rcall	.+454    	; 0x16ca <__fp_pscB>
    1504:	40 f0       	brcs	.+16     	; 0x1516 <__divsf3+0x18>
    1506:	da d0       	rcall	.+436    	; 0x16bc <__fp_pscA>
    1508:	30 f0       	brcs	.+12     	; 0x1516 <__divsf3+0x18>
    150a:	21 f4       	brne	.+8      	; 0x1514 <__divsf3+0x16>
    150c:	5f 3f       	cpi	r21, 0xFF	; 255
    150e:	19 f0       	breq	.+6      	; 0x1516 <__divsf3+0x18>
    1510:	cc c0       	rjmp	.+408    	; 0x16aa <__fp_inf>
    1512:	51 11       	cpse	r21, r1
    1514:	15 c1       	rjmp	.+554    	; 0x1740 <__fp_szero>
    1516:	cf c0       	rjmp	.+414    	; 0x16b6 <__fp_nan>

00001518 <__divsf3x>:
    1518:	f0 d0       	rcall	.+480    	; 0x16fa <__fp_split3>
    151a:	98 f3       	brcs	.-26     	; 0x1502 <__divsf3+0x4>

0000151c <__divsf3_pse>:
    151c:	99 23       	and	r25, r25
    151e:	c9 f3       	breq	.-14     	; 0x1512 <__divsf3+0x14>
    1520:	55 23       	and	r21, r21
    1522:	b1 f3       	breq	.-20     	; 0x1510 <__divsf3+0x12>
    1524:	95 1b       	sub	r25, r21
    1526:	55 0b       	sbc	r21, r21
    1528:	bb 27       	eor	r27, r27
    152a:	aa 27       	eor	r26, r26
    152c:	62 17       	cp	r22, r18
    152e:	73 07       	cpc	r23, r19
    1530:	84 07       	cpc	r24, r20
    1532:	38 f0       	brcs	.+14     	; 0x1542 <__divsf3_pse+0x26>
    1534:	9f 5f       	subi	r25, 0xFF	; 255
    1536:	5f 4f       	sbci	r21, 0xFF	; 255
    1538:	22 0f       	add	r18, r18
    153a:	33 1f       	adc	r19, r19
    153c:	44 1f       	adc	r20, r20
    153e:	aa 1f       	adc	r26, r26
    1540:	a9 f3       	breq	.-22     	; 0x152c <__divsf3_pse+0x10>
    1542:	33 d0       	rcall	.+102    	; 0x15aa <__divsf3_pse+0x8e>
    1544:	0e 2e       	mov	r0, r30
    1546:	3a f0       	brmi	.+14     	; 0x1556 <__divsf3_pse+0x3a>
    1548:	e0 e8       	ldi	r30, 0x80	; 128
    154a:	30 d0       	rcall	.+96     	; 0x15ac <__divsf3_pse+0x90>
    154c:	91 50       	subi	r25, 0x01	; 1
    154e:	50 40       	sbci	r21, 0x00	; 0
    1550:	e6 95       	lsr	r30
    1552:	00 1c       	adc	r0, r0
    1554:	ca f7       	brpl	.-14     	; 0x1548 <__divsf3_pse+0x2c>
    1556:	29 d0       	rcall	.+82     	; 0x15aa <__divsf3_pse+0x8e>
    1558:	fe 2f       	mov	r31, r30
    155a:	27 d0       	rcall	.+78     	; 0x15aa <__divsf3_pse+0x8e>
    155c:	66 0f       	add	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	bb 1f       	adc	r27, r27
    1564:	26 17       	cp	r18, r22
    1566:	37 07       	cpc	r19, r23
    1568:	48 07       	cpc	r20, r24
    156a:	ab 07       	cpc	r26, r27
    156c:	b0 e8       	ldi	r27, 0x80	; 128
    156e:	09 f0       	breq	.+2      	; 0x1572 <__divsf3_pse+0x56>
    1570:	bb 0b       	sbc	r27, r27
    1572:	80 2d       	mov	r24, r0
    1574:	bf 01       	movw	r22, r30
    1576:	ff 27       	eor	r31, r31
    1578:	93 58       	subi	r25, 0x83	; 131
    157a:	5f 4f       	sbci	r21, 0xFF	; 255
    157c:	2a f0       	brmi	.+10     	; 0x1588 <__divsf3_pse+0x6c>
    157e:	9e 3f       	cpi	r25, 0xFE	; 254
    1580:	51 05       	cpc	r21, r1
    1582:	68 f0       	brcs	.+26     	; 0x159e <__divsf3_pse+0x82>
    1584:	92 c0       	rjmp	.+292    	; 0x16aa <__fp_inf>
    1586:	dc c0       	rjmp	.+440    	; 0x1740 <__fp_szero>
    1588:	5f 3f       	cpi	r21, 0xFF	; 255
    158a:	ec f3       	brlt	.-6      	; 0x1586 <__divsf3_pse+0x6a>
    158c:	98 3e       	cpi	r25, 0xE8	; 232
    158e:	dc f3       	brlt	.-10     	; 0x1586 <__divsf3_pse+0x6a>
    1590:	86 95       	lsr	r24
    1592:	77 95       	ror	r23
    1594:	67 95       	ror	r22
    1596:	b7 95       	ror	r27
    1598:	f7 95       	ror	r31
    159a:	9f 5f       	subi	r25, 0xFF	; 255
    159c:	c9 f7       	brne	.-14     	; 0x1590 <__divsf3_pse+0x74>
    159e:	88 0f       	add	r24, r24
    15a0:	91 1d       	adc	r25, r1
    15a2:	96 95       	lsr	r25
    15a4:	87 95       	ror	r24
    15a6:	97 f9       	bld	r25, 7
    15a8:	08 95       	ret
    15aa:	e1 e0       	ldi	r30, 0x01	; 1
    15ac:	66 0f       	add	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	bb 1f       	adc	r27, r27
    15b4:	62 17       	cp	r22, r18
    15b6:	73 07       	cpc	r23, r19
    15b8:	84 07       	cpc	r24, r20
    15ba:	ba 07       	cpc	r27, r26
    15bc:	20 f0       	brcs	.+8      	; 0x15c6 <__divsf3_pse+0xaa>
    15be:	62 1b       	sub	r22, r18
    15c0:	73 0b       	sbc	r23, r19
    15c2:	84 0b       	sbc	r24, r20
    15c4:	ba 0b       	sbc	r27, r26
    15c6:	ee 1f       	adc	r30, r30
    15c8:	88 f7       	brcc	.-30     	; 0x15ac <__divsf3_pse+0x90>
    15ca:	e0 95       	com	r30
    15cc:	08 95       	ret

000015ce <__fixsfsi>:
    15ce:	04 d0       	rcall	.+8      	; 0x15d8 <__fixunssfsi>
    15d0:	68 94       	set
    15d2:	b1 11       	cpse	r27, r1
    15d4:	b5 c0       	rjmp	.+362    	; 0x1740 <__fp_szero>
    15d6:	08 95       	ret

000015d8 <__fixunssfsi>:
    15d8:	98 d0       	rcall	.+304    	; 0x170a <__fp_splitA>
    15da:	88 f0       	brcs	.+34     	; 0x15fe <__fixunssfsi+0x26>
    15dc:	9f 57       	subi	r25, 0x7F	; 127
    15de:	90 f0       	brcs	.+36     	; 0x1604 <__fixunssfsi+0x2c>
    15e0:	b9 2f       	mov	r27, r25
    15e2:	99 27       	eor	r25, r25
    15e4:	b7 51       	subi	r27, 0x17	; 23
    15e6:	a0 f0       	brcs	.+40     	; 0x1610 <__fixunssfsi+0x38>
    15e8:	d1 f0       	breq	.+52     	; 0x161e <__fixunssfsi+0x46>
    15ea:	66 0f       	add	r22, r22
    15ec:	77 1f       	adc	r23, r23
    15ee:	88 1f       	adc	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	1a f0       	brmi	.+6      	; 0x15fa <__fixunssfsi+0x22>
    15f4:	ba 95       	dec	r27
    15f6:	c9 f7       	brne	.-14     	; 0x15ea <__fixunssfsi+0x12>
    15f8:	12 c0       	rjmp	.+36     	; 0x161e <__fixunssfsi+0x46>
    15fa:	b1 30       	cpi	r27, 0x01	; 1
    15fc:	81 f0       	breq	.+32     	; 0x161e <__fixunssfsi+0x46>
    15fe:	9f d0       	rcall	.+318    	; 0x173e <__fp_zero>
    1600:	b1 e0       	ldi	r27, 0x01	; 1
    1602:	08 95       	ret
    1604:	9c c0       	rjmp	.+312    	; 0x173e <__fp_zero>
    1606:	67 2f       	mov	r22, r23
    1608:	78 2f       	mov	r23, r24
    160a:	88 27       	eor	r24, r24
    160c:	b8 5f       	subi	r27, 0xF8	; 248
    160e:	39 f0       	breq	.+14     	; 0x161e <__fixunssfsi+0x46>
    1610:	b9 3f       	cpi	r27, 0xF9	; 249
    1612:	cc f3       	brlt	.-14     	; 0x1606 <__fixunssfsi+0x2e>
    1614:	86 95       	lsr	r24
    1616:	77 95       	ror	r23
    1618:	67 95       	ror	r22
    161a:	b3 95       	inc	r27
    161c:	d9 f7       	brne	.-10     	; 0x1614 <__fixunssfsi+0x3c>
    161e:	3e f4       	brtc	.+14     	; 0x162e <__fixunssfsi+0x56>
    1620:	90 95       	com	r25
    1622:	80 95       	com	r24
    1624:	70 95       	com	r23
    1626:	61 95       	neg	r22
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	8f 4f       	sbci	r24, 0xFF	; 255
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	08 95       	ret

00001630 <__floatunsisf>:
    1630:	e8 94       	clt
    1632:	09 c0       	rjmp	.+18     	; 0x1646 <__floatsisf+0x12>

00001634 <__floatsisf>:
    1634:	97 fb       	bst	r25, 7
    1636:	3e f4       	brtc	.+14     	; 0x1646 <__floatsisf+0x12>
    1638:	90 95       	com	r25
    163a:	80 95       	com	r24
    163c:	70 95       	com	r23
    163e:	61 95       	neg	r22
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	99 23       	and	r25, r25
    1648:	a9 f0       	breq	.+42     	; 0x1674 <__floatsisf+0x40>
    164a:	f9 2f       	mov	r31, r25
    164c:	96 e9       	ldi	r25, 0x96	; 150
    164e:	bb 27       	eor	r27, r27
    1650:	93 95       	inc	r25
    1652:	f6 95       	lsr	r31
    1654:	87 95       	ror	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	b7 95       	ror	r27
    165c:	f1 11       	cpse	r31, r1
    165e:	f8 cf       	rjmp	.-16     	; 0x1650 <__floatsisf+0x1c>
    1660:	fa f4       	brpl	.+62     	; 0x16a0 <__floatsisf+0x6c>
    1662:	bb 0f       	add	r27, r27
    1664:	11 f4       	brne	.+4      	; 0x166a <__floatsisf+0x36>
    1666:	60 ff       	sbrs	r22, 0
    1668:	1b c0       	rjmp	.+54     	; 0x16a0 <__floatsisf+0x6c>
    166a:	6f 5f       	subi	r22, 0xFF	; 255
    166c:	7f 4f       	sbci	r23, 0xFF	; 255
    166e:	8f 4f       	sbci	r24, 0xFF	; 255
    1670:	9f 4f       	sbci	r25, 0xFF	; 255
    1672:	16 c0       	rjmp	.+44     	; 0x16a0 <__floatsisf+0x6c>
    1674:	88 23       	and	r24, r24
    1676:	11 f0       	breq	.+4      	; 0x167c <__floatsisf+0x48>
    1678:	96 e9       	ldi	r25, 0x96	; 150
    167a:	11 c0       	rjmp	.+34     	; 0x169e <__floatsisf+0x6a>
    167c:	77 23       	and	r23, r23
    167e:	21 f0       	breq	.+8      	; 0x1688 <__floatsisf+0x54>
    1680:	9e e8       	ldi	r25, 0x8E	; 142
    1682:	87 2f       	mov	r24, r23
    1684:	76 2f       	mov	r23, r22
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <__floatsisf+0x5e>
    1688:	66 23       	and	r22, r22
    168a:	71 f0       	breq	.+28     	; 0x16a8 <__floatsisf+0x74>
    168c:	96 e8       	ldi	r25, 0x86	; 134
    168e:	86 2f       	mov	r24, r22
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	2a f0       	brmi	.+10     	; 0x16a0 <__floatsisf+0x6c>
    1696:	9a 95       	dec	r25
    1698:	66 0f       	add	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	88 1f       	adc	r24, r24
    169e:	da f7       	brpl	.-10     	; 0x1696 <__floatsisf+0x62>
    16a0:	88 0f       	add	r24, r24
    16a2:	96 95       	lsr	r25
    16a4:	87 95       	ror	r24
    16a6:	97 f9       	bld	r25, 7
    16a8:	08 95       	ret

000016aa <__fp_inf>:
    16aa:	97 f9       	bld	r25, 7
    16ac:	9f 67       	ori	r25, 0x7F	; 127
    16ae:	80 e8       	ldi	r24, 0x80	; 128
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	08 95       	ret

000016b6 <__fp_nan>:
    16b6:	9f ef       	ldi	r25, 0xFF	; 255
    16b8:	80 ec       	ldi	r24, 0xC0	; 192
    16ba:	08 95       	ret

000016bc <__fp_pscA>:
    16bc:	00 24       	eor	r0, r0
    16be:	0a 94       	dec	r0
    16c0:	16 16       	cp	r1, r22
    16c2:	17 06       	cpc	r1, r23
    16c4:	18 06       	cpc	r1, r24
    16c6:	09 06       	cpc	r0, r25
    16c8:	08 95       	ret

000016ca <__fp_pscB>:
    16ca:	00 24       	eor	r0, r0
    16cc:	0a 94       	dec	r0
    16ce:	12 16       	cp	r1, r18
    16d0:	13 06       	cpc	r1, r19
    16d2:	14 06       	cpc	r1, r20
    16d4:	05 06       	cpc	r0, r21
    16d6:	08 95       	ret

000016d8 <__fp_round>:
    16d8:	09 2e       	mov	r0, r25
    16da:	03 94       	inc	r0
    16dc:	00 0c       	add	r0, r0
    16de:	11 f4       	brne	.+4      	; 0x16e4 <__fp_round+0xc>
    16e0:	88 23       	and	r24, r24
    16e2:	52 f0       	brmi	.+20     	; 0x16f8 <__fp_round+0x20>
    16e4:	bb 0f       	add	r27, r27
    16e6:	40 f4       	brcc	.+16     	; 0x16f8 <__fp_round+0x20>
    16e8:	bf 2b       	or	r27, r31
    16ea:	11 f4       	brne	.+4      	; 0x16f0 <__fp_round+0x18>
    16ec:	60 ff       	sbrs	r22, 0
    16ee:	04 c0       	rjmp	.+8      	; 0x16f8 <__fp_round+0x20>
    16f0:	6f 5f       	subi	r22, 0xFF	; 255
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	8f 4f       	sbci	r24, 0xFF	; 255
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	08 95       	ret

000016fa <__fp_split3>:
    16fa:	57 fd       	sbrc	r21, 7
    16fc:	90 58       	subi	r25, 0x80	; 128
    16fe:	44 0f       	add	r20, r20
    1700:	55 1f       	adc	r21, r21
    1702:	59 f0       	breq	.+22     	; 0x171a <__fp_splitA+0x10>
    1704:	5f 3f       	cpi	r21, 0xFF	; 255
    1706:	71 f0       	breq	.+28     	; 0x1724 <__fp_splitA+0x1a>
    1708:	47 95       	ror	r20

0000170a <__fp_splitA>:
    170a:	88 0f       	add	r24, r24
    170c:	97 fb       	bst	r25, 7
    170e:	99 1f       	adc	r25, r25
    1710:	61 f0       	breq	.+24     	; 0x172a <__fp_splitA+0x20>
    1712:	9f 3f       	cpi	r25, 0xFF	; 255
    1714:	79 f0       	breq	.+30     	; 0x1734 <__fp_splitA+0x2a>
    1716:	87 95       	ror	r24
    1718:	08 95       	ret
    171a:	12 16       	cp	r1, r18
    171c:	13 06       	cpc	r1, r19
    171e:	14 06       	cpc	r1, r20
    1720:	55 1f       	adc	r21, r21
    1722:	f2 cf       	rjmp	.-28     	; 0x1708 <__fp_split3+0xe>
    1724:	46 95       	lsr	r20
    1726:	f1 df       	rcall	.-30     	; 0x170a <__fp_splitA>
    1728:	08 c0       	rjmp	.+16     	; 0x173a <__fp_splitA+0x30>
    172a:	16 16       	cp	r1, r22
    172c:	17 06       	cpc	r1, r23
    172e:	18 06       	cpc	r1, r24
    1730:	99 1f       	adc	r25, r25
    1732:	f1 cf       	rjmp	.-30     	; 0x1716 <__fp_splitA+0xc>
    1734:	86 95       	lsr	r24
    1736:	71 05       	cpc	r23, r1
    1738:	61 05       	cpc	r22, r1
    173a:	08 94       	sec
    173c:	08 95       	ret

0000173e <__fp_zero>:
    173e:	e8 94       	clt

00001740 <__fp_szero>:
    1740:	bb 27       	eor	r27, r27
    1742:	66 27       	eor	r22, r22
    1744:	77 27       	eor	r23, r23
    1746:	cb 01       	movw	r24, r22
    1748:	97 f9       	bld	r25, 7
    174a:	08 95       	ret

0000174c <malloc>:
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	91 05       	cpc	r25, r1
    1754:	10 f4       	brcc	.+4      	; 0x175a <malloc+0xe>
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	e0 91 06 02 	lds	r30, 0x0206
    175e:	f0 91 07 02 	lds	r31, 0x0207
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	a0 e0       	ldi	r26, 0x00	; 0
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	30 97       	sbiw	r30, 0x00	; 0
    176c:	39 f1       	breq	.+78     	; 0x17bc <malloc+0x70>
    176e:	40 81       	ld	r20, Z
    1770:	51 81       	ldd	r21, Z+1	; 0x01
    1772:	48 17       	cp	r20, r24
    1774:	59 07       	cpc	r21, r25
    1776:	b8 f0       	brcs	.+46     	; 0x17a6 <malloc+0x5a>
    1778:	48 17       	cp	r20, r24
    177a:	59 07       	cpc	r21, r25
    177c:	71 f4       	brne	.+28     	; 0x179a <malloc+0x4e>
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	10 97       	sbiw	r26, 0x00	; 0
    1784:	29 f0       	breq	.+10     	; 0x1790 <malloc+0x44>
    1786:	13 96       	adiw	r26, 0x03	; 3
    1788:	9c 93       	st	X, r25
    178a:	8e 93       	st	-X, r24
    178c:	12 97       	sbiw	r26, 0x02	; 2
    178e:	2c c0       	rjmp	.+88     	; 0x17e8 <malloc+0x9c>
    1790:	90 93 07 02 	sts	0x0207, r25
    1794:	80 93 06 02 	sts	0x0206, r24
    1798:	27 c0       	rjmp	.+78     	; 0x17e8 <malloc+0x9c>
    179a:	21 15       	cp	r18, r1
    179c:	31 05       	cpc	r19, r1
    179e:	31 f0       	breq	.+12     	; 0x17ac <malloc+0x60>
    17a0:	42 17       	cp	r20, r18
    17a2:	53 07       	cpc	r21, r19
    17a4:	18 f0       	brcs	.+6      	; 0x17ac <malloc+0x60>
    17a6:	a9 01       	movw	r20, r18
    17a8:	db 01       	movw	r26, r22
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <malloc+0x62>
    17ac:	ef 01       	movw	r28, r30
    17ae:	9a 01       	movw	r18, r20
    17b0:	bd 01       	movw	r22, r26
    17b2:	df 01       	movw	r26, r30
    17b4:	02 80       	ldd	r0, Z+2	; 0x02
    17b6:	f3 81       	ldd	r31, Z+3	; 0x03
    17b8:	e0 2d       	mov	r30, r0
    17ba:	d7 cf       	rjmp	.-82     	; 0x176a <malloc+0x1e>
    17bc:	21 15       	cp	r18, r1
    17be:	31 05       	cpc	r19, r1
    17c0:	f9 f0       	breq	.+62     	; 0x1800 <malloc+0xb4>
    17c2:	28 1b       	sub	r18, r24
    17c4:	39 0b       	sbc	r19, r25
    17c6:	24 30       	cpi	r18, 0x04	; 4
    17c8:	31 05       	cpc	r19, r1
    17ca:	80 f4       	brcc	.+32     	; 0x17ec <malloc+0xa0>
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	9b 81       	ldd	r25, Y+3	; 0x03
    17d0:	61 15       	cp	r22, r1
    17d2:	71 05       	cpc	r23, r1
    17d4:	21 f0       	breq	.+8      	; 0x17de <malloc+0x92>
    17d6:	fb 01       	movw	r30, r22
    17d8:	93 83       	std	Z+3, r25	; 0x03
    17da:	82 83       	std	Z+2, r24	; 0x02
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <malloc+0x9a>
    17de:	90 93 07 02 	sts	0x0207, r25
    17e2:	80 93 06 02 	sts	0x0206, r24
    17e6:	fe 01       	movw	r30, r28
    17e8:	32 96       	adiw	r30, 0x02	; 2
    17ea:	44 c0       	rjmp	.+136    	; 0x1874 <malloc+0x128>
    17ec:	fe 01       	movw	r30, r28
    17ee:	e2 0f       	add	r30, r18
    17f0:	f3 1f       	adc	r31, r19
    17f2:	81 93       	st	Z+, r24
    17f4:	91 93       	st	Z+, r25
    17f6:	22 50       	subi	r18, 0x02	; 2
    17f8:	31 09       	sbc	r19, r1
    17fa:	39 83       	std	Y+1, r19	; 0x01
    17fc:	28 83       	st	Y, r18
    17fe:	3a c0       	rjmp	.+116    	; 0x1874 <malloc+0x128>
    1800:	20 91 04 02 	lds	r18, 0x0204
    1804:	30 91 05 02 	lds	r19, 0x0205
    1808:	23 2b       	or	r18, r19
    180a:	41 f4       	brne	.+16     	; 0x181c <malloc+0xd0>
    180c:	20 91 02 01 	lds	r18, 0x0102
    1810:	30 91 03 01 	lds	r19, 0x0103
    1814:	30 93 05 02 	sts	0x0205, r19
    1818:	20 93 04 02 	sts	0x0204, r18
    181c:	20 91 00 01 	lds	r18, 0x0100
    1820:	30 91 01 01 	lds	r19, 0x0101
    1824:	21 15       	cp	r18, r1
    1826:	31 05       	cpc	r19, r1
    1828:	41 f4       	brne	.+16     	; 0x183a <malloc+0xee>
    182a:	2d b7       	in	r18, 0x3d	; 61
    182c:	3e b7       	in	r19, 0x3e	; 62
    182e:	40 91 04 01 	lds	r20, 0x0104
    1832:	50 91 05 01 	lds	r21, 0x0105
    1836:	24 1b       	sub	r18, r20
    1838:	35 0b       	sbc	r19, r21
    183a:	e0 91 04 02 	lds	r30, 0x0204
    183e:	f0 91 05 02 	lds	r31, 0x0205
    1842:	e2 17       	cp	r30, r18
    1844:	f3 07       	cpc	r31, r19
    1846:	a0 f4       	brcc	.+40     	; 0x1870 <malloc+0x124>
    1848:	2e 1b       	sub	r18, r30
    184a:	3f 0b       	sbc	r19, r31
    184c:	28 17       	cp	r18, r24
    184e:	39 07       	cpc	r19, r25
    1850:	78 f0       	brcs	.+30     	; 0x1870 <malloc+0x124>
    1852:	ac 01       	movw	r20, r24
    1854:	4e 5f       	subi	r20, 0xFE	; 254
    1856:	5f 4f       	sbci	r21, 0xFF	; 255
    1858:	24 17       	cp	r18, r20
    185a:	35 07       	cpc	r19, r21
    185c:	48 f0       	brcs	.+18     	; 0x1870 <malloc+0x124>
    185e:	4e 0f       	add	r20, r30
    1860:	5f 1f       	adc	r21, r31
    1862:	50 93 05 02 	sts	0x0205, r21
    1866:	40 93 04 02 	sts	0x0204, r20
    186a:	81 93       	st	Z+, r24
    186c:	91 93       	st	Z+, r25
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <malloc+0x128>
    1870:	e0 e0       	ldi	r30, 0x00	; 0
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	cf 01       	movw	r24, r30
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <free>:
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	09 f4       	brne	.+2      	; 0x1886 <free+0xa>
    1884:	87 c0       	rjmp	.+270    	; 0x1994 <free+0x118>
    1886:	fc 01       	movw	r30, r24
    1888:	32 97       	sbiw	r30, 0x02	; 2
    188a:	13 82       	std	Z+3, r1	; 0x03
    188c:	12 82       	std	Z+2, r1	; 0x02
    188e:	c0 91 06 02 	lds	r28, 0x0206
    1892:	d0 91 07 02 	lds	r29, 0x0207
    1896:	20 97       	sbiw	r28, 0x00	; 0
    1898:	81 f4       	brne	.+32     	; 0x18ba <free+0x3e>
    189a:	20 81       	ld	r18, Z
    189c:	31 81       	ldd	r19, Z+1	; 0x01
    189e:	28 0f       	add	r18, r24
    18a0:	39 1f       	adc	r19, r25
    18a2:	80 91 04 02 	lds	r24, 0x0204
    18a6:	90 91 05 02 	lds	r25, 0x0205
    18aa:	82 17       	cp	r24, r18
    18ac:	93 07       	cpc	r25, r19
    18ae:	79 f5       	brne	.+94     	; 0x190e <free+0x92>
    18b0:	f0 93 05 02 	sts	0x0205, r31
    18b4:	e0 93 04 02 	sts	0x0204, r30
    18b8:	6d c0       	rjmp	.+218    	; 0x1994 <free+0x118>
    18ba:	de 01       	movw	r26, r28
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	ae 17       	cp	r26, r30
    18c2:	bf 07       	cpc	r27, r31
    18c4:	50 f4       	brcc	.+20     	; 0x18da <free+0x5e>
    18c6:	12 96       	adiw	r26, 0x02	; 2
    18c8:	4d 91       	ld	r20, X+
    18ca:	5c 91       	ld	r21, X
    18cc:	13 97       	sbiw	r26, 0x03	; 3
    18ce:	9d 01       	movw	r18, r26
    18d0:	41 15       	cp	r20, r1
    18d2:	51 05       	cpc	r21, r1
    18d4:	09 f1       	breq	.+66     	; 0x1918 <free+0x9c>
    18d6:	da 01       	movw	r26, r20
    18d8:	f3 cf       	rjmp	.-26     	; 0x18c0 <free+0x44>
    18da:	b3 83       	std	Z+3, r27	; 0x03
    18dc:	a2 83       	std	Z+2, r26	; 0x02
    18de:	40 81       	ld	r20, Z
    18e0:	51 81       	ldd	r21, Z+1	; 0x01
    18e2:	84 0f       	add	r24, r20
    18e4:	95 1f       	adc	r25, r21
    18e6:	8a 17       	cp	r24, r26
    18e8:	9b 07       	cpc	r25, r27
    18ea:	71 f4       	brne	.+28     	; 0x1908 <free+0x8c>
    18ec:	8d 91       	ld	r24, X+
    18ee:	9c 91       	ld	r25, X
    18f0:	11 97       	sbiw	r26, 0x01	; 1
    18f2:	84 0f       	add	r24, r20
    18f4:	95 1f       	adc	r25, r21
    18f6:	02 96       	adiw	r24, 0x02	; 2
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
    18fc:	12 96       	adiw	r26, 0x02	; 2
    18fe:	8d 91       	ld	r24, X+
    1900:	9c 91       	ld	r25, X
    1902:	13 97       	sbiw	r26, 0x03	; 3
    1904:	93 83       	std	Z+3, r25	; 0x03
    1906:	82 83       	std	Z+2, r24	; 0x02
    1908:	21 15       	cp	r18, r1
    190a:	31 05       	cpc	r19, r1
    190c:	29 f4       	brne	.+10     	; 0x1918 <free+0x9c>
    190e:	f0 93 07 02 	sts	0x0207, r31
    1912:	e0 93 06 02 	sts	0x0206, r30
    1916:	3e c0       	rjmp	.+124    	; 0x1994 <free+0x118>
    1918:	d9 01       	movw	r26, r18
    191a:	13 96       	adiw	r26, 0x03	; 3
    191c:	fc 93       	st	X, r31
    191e:	ee 93       	st	-X, r30
    1920:	12 97       	sbiw	r26, 0x02	; 2
    1922:	4d 91       	ld	r20, X+
    1924:	5d 91       	ld	r21, X+
    1926:	a4 0f       	add	r26, r20
    1928:	b5 1f       	adc	r27, r21
    192a:	ea 17       	cp	r30, r26
    192c:	fb 07       	cpc	r31, r27
    192e:	79 f4       	brne	.+30     	; 0x194e <free+0xd2>
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    1934:	84 0f       	add	r24, r20
    1936:	95 1f       	adc	r25, r21
    1938:	02 96       	adiw	r24, 0x02	; 2
    193a:	d9 01       	movw	r26, r18
    193c:	11 96       	adiw	r26, 0x01	; 1
    193e:	9c 93       	st	X, r25
    1940:	8e 93       	st	-X, r24
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	13 96       	adiw	r26, 0x03	; 3
    1948:	9c 93       	st	X, r25
    194a:	8e 93       	st	-X, r24
    194c:	12 97       	sbiw	r26, 0x02	; 2
    194e:	e0 e0       	ldi	r30, 0x00	; 0
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	9b 81       	ldd	r25, Y+3	; 0x03
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	19 f0       	breq	.+6      	; 0x1960 <free+0xe4>
    195a:	fe 01       	movw	r30, r28
    195c:	ec 01       	movw	r28, r24
    195e:	f9 cf       	rjmp	.-14     	; 0x1952 <free+0xd6>
    1960:	ce 01       	movw	r24, r28
    1962:	02 96       	adiw	r24, 0x02	; 2
    1964:	28 81       	ld	r18, Y
    1966:	39 81       	ldd	r19, Y+1	; 0x01
    1968:	82 0f       	add	r24, r18
    196a:	93 1f       	adc	r25, r19
    196c:	20 91 04 02 	lds	r18, 0x0204
    1970:	30 91 05 02 	lds	r19, 0x0205
    1974:	28 17       	cp	r18, r24
    1976:	39 07       	cpc	r19, r25
    1978:	69 f4       	brne	.+26     	; 0x1994 <free+0x118>
    197a:	30 97       	sbiw	r30, 0x00	; 0
    197c:	29 f4       	brne	.+10     	; 0x1988 <free+0x10c>
    197e:	10 92 07 02 	sts	0x0207, r1
    1982:	10 92 06 02 	sts	0x0206, r1
    1986:	02 c0       	rjmp	.+4      	; 0x198c <free+0x110>
    1988:	13 82       	std	Z+3, r1	; 0x03
    198a:	12 82       	std	Z+2, r1	; 0x02
    198c:	d0 93 05 02 	sts	0x0205, r29
    1990:	c0 93 04 02 	sts	0x0204, r28
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <fdevopen>:
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	ec 01       	movw	r28, r24
    19a4:	8b 01       	movw	r16, r22
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	31 f4       	brne	.+12     	; 0x19b6 <fdevopen+0x1c>
    19aa:	61 15       	cp	r22, r1
    19ac:	71 05       	cpc	r23, r1
    19ae:	19 f4       	brne	.+6      	; 0x19b6 <fdevopen+0x1c>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	37 c0       	rjmp	.+110    	; 0x1a24 <fdevopen+0x8a>
    19b6:	6e e0       	ldi	r22, 0x0E	; 14
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0b d2       	rcall	.+1046   	; 0x1dd6 <calloc>
    19c0:	fc 01       	movw	r30, r24
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	a9 f3       	breq	.-22     	; 0x19b0 <fdevopen+0x16>
    19c6:	80 e8       	ldi	r24, 0x80	; 128
    19c8:	83 83       	std	Z+3, r24	; 0x03
    19ca:	01 15       	cp	r16, r1
    19cc:	11 05       	cpc	r17, r1
    19ce:	71 f0       	breq	.+28     	; 0x19ec <fdevopen+0x52>
    19d0:	13 87       	std	Z+11, r17	; 0x0b
    19d2:	02 87       	std	Z+10, r16	; 0x0a
    19d4:	81 e8       	ldi	r24, 0x81	; 129
    19d6:	83 83       	std	Z+3, r24	; 0x03
    19d8:	80 91 08 02 	lds	r24, 0x0208
    19dc:	90 91 09 02 	lds	r25, 0x0209
    19e0:	89 2b       	or	r24, r25
    19e2:	21 f4       	brne	.+8      	; 0x19ec <fdevopen+0x52>
    19e4:	f0 93 09 02 	sts	0x0209, r31
    19e8:	e0 93 08 02 	sts	0x0208, r30
    19ec:	20 97       	sbiw	r28, 0x00	; 0
    19ee:	c9 f0       	breq	.+50     	; 0x1a22 <fdevopen+0x88>
    19f0:	d1 87       	std	Z+9, r29	; 0x09
    19f2:	c0 87       	std	Z+8, r28	; 0x08
    19f4:	83 81       	ldd	r24, Z+3	; 0x03
    19f6:	82 60       	ori	r24, 0x02	; 2
    19f8:	83 83       	std	Z+3, r24	; 0x03
    19fa:	80 91 0a 02 	lds	r24, 0x020A
    19fe:	90 91 0b 02 	lds	r25, 0x020B
    1a02:	89 2b       	or	r24, r25
    1a04:	71 f4       	brne	.+28     	; 0x1a22 <fdevopen+0x88>
    1a06:	f0 93 0b 02 	sts	0x020B, r31
    1a0a:	e0 93 0a 02 	sts	0x020A, r30
    1a0e:	80 91 0c 02 	lds	r24, 0x020C
    1a12:	90 91 0d 02 	lds	r25, 0x020D
    1a16:	89 2b       	or	r24, r25
    1a18:	21 f4       	brne	.+8      	; 0x1a22 <fdevopen+0x88>
    1a1a:	f0 93 0d 02 	sts	0x020D, r31
    1a1e:	e0 93 0c 02 	sts	0x020C, r30
    1a22:	cf 01       	movw	r24, r30
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	08 95       	ret

00001a2e <printf>:
    1a2e:	a0 e0       	ldi	r26, 0x00	; 0
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	ec e1       	ldi	r30, 0x1C	; 28
    1a34:	fd e0       	ldi	r31, 0x0D	; 13
    1a36:	a6 c2       	rjmp	.+1356   	; 0x1f84 <__prologue_saves__+0x20>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	35 96       	adiw	r30, 0x05	; 5
    1a3c:	61 91       	ld	r22, Z+
    1a3e:	71 91       	ld	r23, Z+
    1a40:	af 01       	movw	r20, r30
    1a42:	80 91 0a 02 	lds	r24, 0x020A
    1a46:	90 91 0b 02 	lds	r25, 0x020B
    1a4a:	02 d0       	rcall	.+4      	; 0x1a50 <vfprintf>
    1a4c:	e2 e0       	ldi	r30, 0x02	; 2
    1a4e:	b6 c2       	rjmp	.+1388   	; 0x1fbc <__epilogue_restores__+0x20>

00001a50 <vfprintf>:
    1a50:	ac e0       	ldi	r26, 0x0C	; 12
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	ed e2       	ldi	r30, 0x2D	; 45
    1a56:	fd e0       	ldi	r31, 0x0D	; 13
    1a58:	85 c2       	rjmp	.+1290   	; 0x1f64 <__prologue_saves__>
    1a5a:	7c 01       	movw	r14, r24
    1a5c:	6b 01       	movw	r12, r22
    1a5e:	8a 01       	movw	r16, r20
    1a60:	fc 01       	movw	r30, r24
    1a62:	17 82       	std	Z+7, r1	; 0x07
    1a64:	16 82       	std	Z+6, r1	; 0x06
    1a66:	83 81       	ldd	r24, Z+3	; 0x03
    1a68:	81 ff       	sbrs	r24, 1
    1a6a:	b0 c1       	rjmp	.+864    	; 0x1dcc <vfprintf+0x37c>
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	4c 01       	movw	r8, r24
    1a72:	f7 01       	movw	r30, r14
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	f6 01       	movw	r30, r12
    1a78:	93 fd       	sbrc	r25, 3
    1a7a:	85 91       	lpm	r24, Z+
    1a7c:	93 ff       	sbrs	r25, 3
    1a7e:	81 91       	ld	r24, Z+
    1a80:	6f 01       	movw	r12, r30
    1a82:	88 23       	and	r24, r24
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <vfprintf+0x38>
    1a86:	9e c1       	rjmp	.+828    	; 0x1dc4 <vfprintf+0x374>
    1a88:	85 32       	cpi	r24, 0x25	; 37
    1a8a:	39 f4       	brne	.+14     	; 0x1a9a <vfprintf+0x4a>
    1a8c:	93 fd       	sbrc	r25, 3
    1a8e:	85 91       	lpm	r24, Z+
    1a90:	93 ff       	sbrs	r25, 3
    1a92:	81 91       	ld	r24, Z+
    1a94:	6f 01       	movw	r12, r30
    1a96:	85 32       	cpi	r24, 0x25	; 37
    1a98:	21 f4       	brne	.+8      	; 0x1aa2 <vfprintf+0x52>
    1a9a:	b7 01       	movw	r22, r14
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	d2 d1       	rcall	.+932    	; 0x1e44 <fputc>
    1aa0:	e8 cf       	rjmp	.-48     	; 0x1a72 <vfprintf+0x22>
    1aa2:	51 2c       	mov	r5, r1
    1aa4:	31 2c       	mov	r3, r1
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	20 32       	cpi	r18, 0x20	; 32
    1aaa:	a0 f4       	brcc	.+40     	; 0x1ad4 <vfprintf+0x84>
    1aac:	8b 32       	cpi	r24, 0x2B	; 43
    1aae:	69 f0       	breq	.+26     	; 0x1aca <vfprintf+0x7a>
    1ab0:	30 f4       	brcc	.+12     	; 0x1abe <vfprintf+0x6e>
    1ab2:	80 32       	cpi	r24, 0x20	; 32
    1ab4:	59 f0       	breq	.+22     	; 0x1acc <vfprintf+0x7c>
    1ab6:	83 32       	cpi	r24, 0x23	; 35
    1ab8:	69 f4       	brne	.+26     	; 0x1ad4 <vfprintf+0x84>
    1aba:	20 61       	ori	r18, 0x10	; 16
    1abc:	2c c0       	rjmp	.+88     	; 0x1b16 <vfprintf+0xc6>
    1abe:	8d 32       	cpi	r24, 0x2D	; 45
    1ac0:	39 f0       	breq	.+14     	; 0x1ad0 <vfprintf+0x80>
    1ac2:	80 33       	cpi	r24, 0x30	; 48
    1ac4:	39 f4       	brne	.+14     	; 0x1ad4 <vfprintf+0x84>
    1ac6:	21 60       	ori	r18, 0x01	; 1
    1ac8:	26 c0       	rjmp	.+76     	; 0x1b16 <vfprintf+0xc6>
    1aca:	22 60       	ori	r18, 0x02	; 2
    1acc:	24 60       	ori	r18, 0x04	; 4
    1ace:	23 c0       	rjmp	.+70     	; 0x1b16 <vfprintf+0xc6>
    1ad0:	28 60       	ori	r18, 0x08	; 8
    1ad2:	21 c0       	rjmp	.+66     	; 0x1b16 <vfprintf+0xc6>
    1ad4:	27 fd       	sbrc	r18, 7
    1ad6:	27 c0       	rjmp	.+78     	; 0x1b26 <vfprintf+0xd6>
    1ad8:	30 ed       	ldi	r19, 0xD0	; 208
    1ada:	38 0f       	add	r19, r24
    1adc:	3a 30       	cpi	r19, 0x0A	; 10
    1ade:	78 f4       	brcc	.+30     	; 0x1afe <vfprintf+0xae>
    1ae0:	26 ff       	sbrs	r18, 6
    1ae2:	06 c0       	rjmp	.+12     	; 0x1af0 <vfprintf+0xa0>
    1ae4:	fa e0       	ldi	r31, 0x0A	; 10
    1ae6:	5f 9e       	mul	r5, r31
    1ae8:	30 0d       	add	r19, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	53 2e       	mov	r5, r19
    1aee:	13 c0       	rjmp	.+38     	; 0x1b16 <vfprintf+0xc6>
    1af0:	8a e0       	ldi	r24, 0x0A	; 10
    1af2:	38 9e       	mul	r3, r24
    1af4:	30 0d       	add	r19, r0
    1af6:	11 24       	eor	r1, r1
    1af8:	33 2e       	mov	r3, r19
    1afa:	20 62       	ori	r18, 0x20	; 32
    1afc:	0c c0       	rjmp	.+24     	; 0x1b16 <vfprintf+0xc6>
    1afe:	8e 32       	cpi	r24, 0x2E	; 46
    1b00:	21 f4       	brne	.+8      	; 0x1b0a <vfprintf+0xba>
    1b02:	26 fd       	sbrc	r18, 6
    1b04:	5f c1       	rjmp	.+702    	; 0x1dc4 <vfprintf+0x374>
    1b06:	20 64       	ori	r18, 0x40	; 64
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <vfprintf+0xc6>
    1b0a:	8c 36       	cpi	r24, 0x6C	; 108
    1b0c:	11 f4       	brne	.+4      	; 0x1b12 <vfprintf+0xc2>
    1b0e:	20 68       	ori	r18, 0x80	; 128
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <vfprintf+0xc6>
    1b12:	88 36       	cpi	r24, 0x68	; 104
    1b14:	41 f4       	brne	.+16     	; 0x1b26 <vfprintf+0xd6>
    1b16:	f6 01       	movw	r30, r12
    1b18:	93 fd       	sbrc	r25, 3
    1b1a:	85 91       	lpm	r24, Z+
    1b1c:	93 ff       	sbrs	r25, 3
    1b1e:	81 91       	ld	r24, Z+
    1b20:	6f 01       	movw	r12, r30
    1b22:	81 11       	cpse	r24, r1
    1b24:	c1 cf       	rjmp	.-126    	; 0x1aa8 <vfprintf+0x58>
    1b26:	98 2f       	mov	r25, r24
    1b28:	9f 7d       	andi	r25, 0xDF	; 223
    1b2a:	95 54       	subi	r25, 0x45	; 69
    1b2c:	93 30       	cpi	r25, 0x03	; 3
    1b2e:	28 f4       	brcc	.+10     	; 0x1b3a <vfprintf+0xea>
    1b30:	0c 5f       	subi	r16, 0xFC	; 252
    1b32:	1f 4f       	sbci	r17, 0xFF	; 255
    1b34:	ff e3       	ldi	r31, 0x3F	; 63
    1b36:	f9 83       	std	Y+1, r31	; 0x01
    1b38:	0d c0       	rjmp	.+26     	; 0x1b54 <vfprintf+0x104>
    1b3a:	83 36       	cpi	r24, 0x63	; 99
    1b3c:	31 f0       	breq	.+12     	; 0x1b4a <vfprintf+0xfa>
    1b3e:	83 37       	cpi	r24, 0x73	; 115
    1b40:	71 f0       	breq	.+28     	; 0x1b5e <vfprintf+0x10e>
    1b42:	83 35       	cpi	r24, 0x53	; 83
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <vfprintf+0xf8>
    1b46:	57 c0       	rjmp	.+174    	; 0x1bf6 <vfprintf+0x1a6>
    1b48:	21 c0       	rjmp	.+66     	; 0x1b8c <vfprintf+0x13c>
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	80 81       	ld	r24, Z
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	0e 5f       	subi	r16, 0xFE	; 254
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	44 24       	eor	r4, r4
    1b56:	43 94       	inc	r4
    1b58:	51 2c       	mov	r5, r1
    1b5a:	54 01       	movw	r10, r8
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <vfprintf+0x136>
    1b5e:	38 01       	movw	r6, r16
    1b60:	f2 e0       	ldi	r31, 0x02	; 2
    1b62:	6f 0e       	add	r6, r31
    1b64:	71 1c       	adc	r7, r1
    1b66:	f8 01       	movw	r30, r16
    1b68:	a0 80       	ld	r10, Z
    1b6a:	b1 80       	ldd	r11, Z+1	; 0x01
    1b6c:	26 ff       	sbrs	r18, 6
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <vfprintf+0x126>
    1b70:	65 2d       	mov	r22, r5
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <vfprintf+0x12a>
    1b76:	6f ef       	ldi	r22, 0xFF	; 255
    1b78:	7f ef       	ldi	r23, 0xFF	; 255
    1b7a:	c5 01       	movw	r24, r10
    1b7c:	2c 87       	std	Y+12, r18	; 0x0c
    1b7e:	57 d1       	rcall	.+686    	; 0x1e2e <strnlen>
    1b80:	2c 01       	movw	r4, r24
    1b82:	83 01       	movw	r16, r6
    1b84:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b86:	2f 77       	andi	r18, 0x7F	; 127
    1b88:	22 2e       	mov	r2, r18
    1b8a:	16 c0       	rjmp	.+44     	; 0x1bb8 <vfprintf+0x168>
    1b8c:	38 01       	movw	r6, r16
    1b8e:	f2 e0       	ldi	r31, 0x02	; 2
    1b90:	6f 0e       	add	r6, r31
    1b92:	71 1c       	adc	r7, r1
    1b94:	f8 01       	movw	r30, r16
    1b96:	a0 80       	ld	r10, Z
    1b98:	b1 80       	ldd	r11, Z+1	; 0x01
    1b9a:	26 ff       	sbrs	r18, 6
    1b9c:	03 c0       	rjmp	.+6      	; 0x1ba4 <vfprintf+0x154>
    1b9e:	65 2d       	mov	r22, r5
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <vfprintf+0x158>
    1ba4:	6f ef       	ldi	r22, 0xFF	; 255
    1ba6:	7f ef       	ldi	r23, 0xFF	; 255
    1ba8:	c5 01       	movw	r24, r10
    1baa:	2c 87       	std	Y+12, r18	; 0x0c
    1bac:	2e d1       	rcall	.+604    	; 0x1e0a <strnlen_P>
    1bae:	2c 01       	movw	r4, r24
    1bb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bb2:	20 68       	ori	r18, 0x80	; 128
    1bb4:	22 2e       	mov	r2, r18
    1bb6:	83 01       	movw	r16, r6
    1bb8:	23 fc       	sbrc	r2, 3
    1bba:	19 c0       	rjmp	.+50     	; 0x1bee <vfprintf+0x19e>
    1bbc:	83 2d       	mov	r24, r3
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	48 16       	cp	r4, r24
    1bc2:	59 06       	cpc	r5, r25
    1bc4:	a0 f4       	brcc	.+40     	; 0x1bee <vfprintf+0x19e>
    1bc6:	b7 01       	movw	r22, r14
    1bc8:	80 e2       	ldi	r24, 0x20	; 32
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	3b d1       	rcall	.+630    	; 0x1e44 <fputc>
    1bce:	3a 94       	dec	r3
    1bd0:	f5 cf       	rjmp	.-22     	; 0x1bbc <vfprintf+0x16c>
    1bd2:	f5 01       	movw	r30, r10
    1bd4:	27 fc       	sbrc	r2, 7
    1bd6:	85 91       	lpm	r24, Z+
    1bd8:	27 fe       	sbrs	r2, 7
    1bda:	81 91       	ld	r24, Z+
    1bdc:	5f 01       	movw	r10, r30
    1bde:	b7 01       	movw	r22, r14
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	30 d1       	rcall	.+608    	; 0x1e44 <fputc>
    1be4:	31 10       	cpse	r3, r1
    1be6:	3a 94       	dec	r3
    1be8:	f1 e0       	ldi	r31, 0x01	; 1
    1bea:	4f 1a       	sub	r4, r31
    1bec:	51 08       	sbc	r5, r1
    1bee:	41 14       	cp	r4, r1
    1bf0:	51 04       	cpc	r5, r1
    1bf2:	79 f7       	brne	.-34     	; 0x1bd2 <vfprintf+0x182>
    1bf4:	de c0       	rjmp	.+444    	; 0x1db2 <vfprintf+0x362>
    1bf6:	84 36       	cpi	r24, 0x64	; 100
    1bf8:	11 f0       	breq	.+4      	; 0x1bfe <vfprintf+0x1ae>
    1bfa:	89 36       	cpi	r24, 0x69	; 105
    1bfc:	31 f5       	brne	.+76     	; 0x1c4a <vfprintf+0x1fa>
    1bfe:	f8 01       	movw	r30, r16
    1c00:	27 ff       	sbrs	r18, 7
    1c02:	07 c0       	rjmp	.+14     	; 0x1c12 <vfprintf+0x1c2>
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	0c 5f       	subi	r16, 0xFC	; 252
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	08 c0       	rjmp	.+16     	; 0x1c22 <vfprintf+0x1d2>
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	88 27       	eor	r24, r24
    1c18:	77 fd       	sbrc	r23, 7
    1c1a:	80 95       	com	r24
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	0e 5f       	subi	r16, 0xFE	; 254
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	2f 76       	andi	r18, 0x6F	; 111
    1c24:	b2 2e       	mov	r11, r18
    1c26:	97 ff       	sbrs	r25, 7
    1c28:	09 c0       	rjmp	.+18     	; 0x1c3c <vfprintf+0x1ec>
    1c2a:	90 95       	com	r25
    1c2c:	80 95       	com	r24
    1c2e:	70 95       	com	r23
    1c30:	61 95       	neg	r22
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	8f 4f       	sbci	r24, 0xFF	; 255
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	20 68       	ori	r18, 0x80	; 128
    1c3a:	b2 2e       	mov	r11, r18
    1c3c:	2a e0       	ldi	r18, 0x0A	; 10
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	a4 01       	movw	r20, r8
    1c42:	32 d1       	rcall	.+612    	; 0x1ea8 <__ultoa_invert>
    1c44:	a8 2e       	mov	r10, r24
    1c46:	a8 18       	sub	r10, r8
    1c48:	43 c0       	rjmp	.+134    	; 0x1cd0 <vfprintf+0x280>
    1c4a:	85 37       	cpi	r24, 0x75	; 117
    1c4c:	29 f4       	brne	.+10     	; 0x1c58 <vfprintf+0x208>
    1c4e:	2f 7e       	andi	r18, 0xEF	; 239
    1c50:	b2 2e       	mov	r11, r18
    1c52:	2a e0       	ldi	r18, 0x0A	; 10
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	25 c0       	rjmp	.+74     	; 0x1ca2 <vfprintf+0x252>
    1c58:	f2 2f       	mov	r31, r18
    1c5a:	f9 7f       	andi	r31, 0xF9	; 249
    1c5c:	bf 2e       	mov	r11, r31
    1c5e:	8f 36       	cpi	r24, 0x6F	; 111
    1c60:	c1 f0       	breq	.+48     	; 0x1c92 <vfprintf+0x242>
    1c62:	18 f4       	brcc	.+6      	; 0x1c6a <vfprintf+0x21a>
    1c64:	88 35       	cpi	r24, 0x58	; 88
    1c66:	79 f0       	breq	.+30     	; 0x1c86 <vfprintf+0x236>
    1c68:	ad c0       	rjmp	.+346    	; 0x1dc4 <vfprintf+0x374>
    1c6a:	80 37       	cpi	r24, 0x70	; 112
    1c6c:	19 f0       	breq	.+6      	; 0x1c74 <vfprintf+0x224>
    1c6e:	88 37       	cpi	r24, 0x78	; 120
    1c70:	21 f0       	breq	.+8      	; 0x1c7a <vfprintf+0x22a>
    1c72:	a8 c0       	rjmp	.+336    	; 0x1dc4 <vfprintf+0x374>
    1c74:	2f 2f       	mov	r18, r31
    1c76:	20 61       	ori	r18, 0x10	; 16
    1c78:	b2 2e       	mov	r11, r18
    1c7a:	b4 fe       	sbrs	r11, 4
    1c7c:	0d c0       	rjmp	.+26     	; 0x1c98 <vfprintf+0x248>
    1c7e:	8b 2d       	mov	r24, r11
    1c80:	84 60       	ori	r24, 0x04	; 4
    1c82:	b8 2e       	mov	r11, r24
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <vfprintf+0x248>
    1c86:	24 ff       	sbrs	r18, 4
    1c88:	0a c0       	rjmp	.+20     	; 0x1c9e <vfprintf+0x24e>
    1c8a:	9f 2f       	mov	r25, r31
    1c8c:	96 60       	ori	r25, 0x06	; 6
    1c8e:	b9 2e       	mov	r11, r25
    1c90:	06 c0       	rjmp	.+12     	; 0x1c9e <vfprintf+0x24e>
    1c92:	28 e0       	ldi	r18, 0x08	; 8
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	05 c0       	rjmp	.+10     	; 0x1ca2 <vfprintf+0x252>
    1c98:	20 e1       	ldi	r18, 0x10	; 16
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <vfprintf+0x252>
    1c9e:	20 e1       	ldi	r18, 0x10	; 16
    1ca0:	32 e0       	ldi	r19, 0x02	; 2
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	b7 fe       	sbrs	r11, 7
    1ca6:	07 c0       	rjmp	.+14     	; 0x1cb6 <vfprintf+0x266>
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	0c 5f       	subi	r16, 0xFC	; 252
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	06 c0       	rjmp	.+12     	; 0x1cc2 <vfprintf+0x272>
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 5f       	subi	r16, 0xFE	; 254
    1cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc2:	a4 01       	movw	r20, r8
    1cc4:	f1 d0       	rcall	.+482    	; 0x1ea8 <__ultoa_invert>
    1cc6:	a8 2e       	mov	r10, r24
    1cc8:	a8 18       	sub	r10, r8
    1cca:	fb 2d       	mov	r31, r11
    1ccc:	ff 77       	andi	r31, 0x7F	; 127
    1cce:	bf 2e       	mov	r11, r31
    1cd0:	b6 fe       	sbrs	r11, 6
    1cd2:	0b c0       	rjmp	.+22     	; 0x1cea <vfprintf+0x29a>
    1cd4:	2b 2d       	mov	r18, r11
    1cd6:	2e 7f       	andi	r18, 0xFE	; 254
    1cd8:	a5 14       	cp	r10, r5
    1cda:	50 f4       	brcc	.+20     	; 0x1cf0 <vfprintf+0x2a0>
    1cdc:	b4 fe       	sbrs	r11, 4
    1cde:	0a c0       	rjmp	.+20     	; 0x1cf4 <vfprintf+0x2a4>
    1ce0:	b2 fc       	sbrc	r11, 2
    1ce2:	08 c0       	rjmp	.+16     	; 0x1cf4 <vfprintf+0x2a4>
    1ce4:	2b 2d       	mov	r18, r11
    1ce6:	2e 7e       	andi	r18, 0xEE	; 238
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <vfprintf+0x2a4>
    1cea:	7a 2c       	mov	r7, r10
    1cec:	2b 2d       	mov	r18, r11
    1cee:	03 c0       	rjmp	.+6      	; 0x1cf6 <vfprintf+0x2a6>
    1cf0:	7a 2c       	mov	r7, r10
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <vfprintf+0x2a6>
    1cf4:	75 2c       	mov	r7, r5
    1cf6:	24 ff       	sbrs	r18, 4
    1cf8:	0d c0       	rjmp	.+26     	; 0x1d14 <vfprintf+0x2c4>
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ea 0d       	add	r30, r10
    1cfe:	f1 1d       	adc	r31, r1
    1d00:	80 81       	ld	r24, Z
    1d02:	80 33       	cpi	r24, 0x30	; 48
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <vfprintf+0x2ba>
    1d06:	29 7e       	andi	r18, 0xE9	; 233
    1d08:	09 c0       	rjmp	.+18     	; 0x1d1c <vfprintf+0x2cc>
    1d0a:	22 ff       	sbrs	r18, 2
    1d0c:	06 c0       	rjmp	.+12     	; 0x1d1a <vfprintf+0x2ca>
    1d0e:	73 94       	inc	r7
    1d10:	73 94       	inc	r7
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <vfprintf+0x2cc>
    1d14:	82 2f       	mov	r24, r18
    1d16:	86 78       	andi	r24, 0x86	; 134
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <vfprintf+0x2cc>
    1d1a:	73 94       	inc	r7
    1d1c:	23 fd       	sbrc	r18, 3
    1d1e:	12 c0       	rjmp	.+36     	; 0x1d44 <vfprintf+0x2f4>
    1d20:	20 ff       	sbrs	r18, 0
    1d22:	06 c0       	rjmp	.+12     	; 0x1d30 <vfprintf+0x2e0>
    1d24:	5a 2c       	mov	r5, r10
    1d26:	73 14       	cp	r7, r3
    1d28:	18 f4       	brcc	.+6      	; 0x1d30 <vfprintf+0x2e0>
    1d2a:	53 0c       	add	r5, r3
    1d2c:	57 18       	sub	r5, r7
    1d2e:	73 2c       	mov	r7, r3
    1d30:	73 14       	cp	r7, r3
    1d32:	60 f4       	brcc	.+24     	; 0x1d4c <vfprintf+0x2fc>
    1d34:	b7 01       	movw	r22, r14
    1d36:	80 e2       	ldi	r24, 0x20	; 32
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	2c 87       	std	Y+12, r18	; 0x0c
    1d3c:	83 d0       	rcall	.+262    	; 0x1e44 <fputc>
    1d3e:	73 94       	inc	r7
    1d40:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d42:	f6 cf       	rjmp	.-20     	; 0x1d30 <vfprintf+0x2e0>
    1d44:	73 14       	cp	r7, r3
    1d46:	10 f4       	brcc	.+4      	; 0x1d4c <vfprintf+0x2fc>
    1d48:	37 18       	sub	r3, r7
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <vfprintf+0x2fe>
    1d4c:	31 2c       	mov	r3, r1
    1d4e:	24 ff       	sbrs	r18, 4
    1d50:	11 c0       	rjmp	.+34     	; 0x1d74 <vfprintf+0x324>
    1d52:	b7 01       	movw	r22, r14
    1d54:	80 e3       	ldi	r24, 0x30	; 48
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	2c 87       	std	Y+12, r18	; 0x0c
    1d5a:	74 d0       	rcall	.+232    	; 0x1e44 <fputc>
    1d5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d5e:	22 ff       	sbrs	r18, 2
    1d60:	16 c0       	rjmp	.+44     	; 0x1d8e <vfprintf+0x33e>
    1d62:	21 ff       	sbrs	r18, 1
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <vfprintf+0x31c>
    1d66:	88 e5       	ldi	r24, 0x58	; 88
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <vfprintf+0x320>
    1d6c:	88 e7       	ldi	r24, 0x78	; 120
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	b7 01       	movw	r22, r14
    1d72:	0c c0       	rjmp	.+24     	; 0x1d8c <vfprintf+0x33c>
    1d74:	82 2f       	mov	r24, r18
    1d76:	86 78       	andi	r24, 0x86	; 134
    1d78:	51 f0       	breq	.+20     	; 0x1d8e <vfprintf+0x33e>
    1d7a:	21 fd       	sbrc	r18, 1
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <vfprintf+0x332>
    1d7e:	80 e2       	ldi	r24, 0x20	; 32
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <vfprintf+0x334>
    1d82:	8b e2       	ldi	r24, 0x2B	; 43
    1d84:	27 fd       	sbrc	r18, 7
    1d86:	8d e2       	ldi	r24, 0x2D	; 45
    1d88:	b7 01       	movw	r22, r14
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	5b d0       	rcall	.+182    	; 0x1e44 <fputc>
    1d8e:	a5 14       	cp	r10, r5
    1d90:	30 f4       	brcc	.+12     	; 0x1d9e <vfprintf+0x34e>
    1d92:	b7 01       	movw	r22, r14
    1d94:	80 e3       	ldi	r24, 0x30	; 48
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	55 d0       	rcall	.+170    	; 0x1e44 <fputc>
    1d9a:	5a 94       	dec	r5
    1d9c:	f8 cf       	rjmp	.-16     	; 0x1d8e <vfprintf+0x33e>
    1d9e:	aa 94       	dec	r10
    1da0:	f4 01       	movw	r30, r8
    1da2:	ea 0d       	add	r30, r10
    1da4:	f1 1d       	adc	r31, r1
    1da6:	80 81       	ld	r24, Z
    1da8:	b7 01       	movw	r22, r14
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	4b d0       	rcall	.+150    	; 0x1e44 <fputc>
    1dae:	a1 10       	cpse	r10, r1
    1db0:	f6 cf       	rjmp	.-20     	; 0x1d9e <vfprintf+0x34e>
    1db2:	33 20       	and	r3, r3
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <vfprintf+0x368>
    1db6:	5d ce       	rjmp	.-838    	; 0x1a72 <vfprintf+0x22>
    1db8:	b7 01       	movw	r22, r14
    1dba:	80 e2       	ldi	r24, 0x20	; 32
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	42 d0       	rcall	.+132    	; 0x1e44 <fputc>
    1dc0:	3a 94       	dec	r3
    1dc2:	f7 cf       	rjmp	.-18     	; 0x1db2 <vfprintf+0x362>
    1dc4:	f7 01       	movw	r30, r14
    1dc6:	86 81       	ldd	r24, Z+6	; 0x06
    1dc8:	97 81       	ldd	r25, Z+7	; 0x07
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <vfprintf+0x380>
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	9f ef       	ldi	r25, 0xFF	; 255
    1dd0:	2c 96       	adiw	r28, 0x0c	; 12
    1dd2:	e2 e1       	ldi	r30, 0x12	; 18
    1dd4:	e3 c0       	rjmp	.+454    	; 0x1f9c <__epilogue_restores__>

00001dd6 <calloc>:
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	86 9f       	mul	r24, r22
    1de0:	80 01       	movw	r16, r0
    1de2:	87 9f       	mul	r24, r23
    1de4:	10 0d       	add	r17, r0
    1de6:	96 9f       	mul	r25, r22
    1de8:	10 0d       	add	r17, r0
    1dea:	11 24       	eor	r1, r1
    1dec:	c8 01       	movw	r24, r16
    1dee:	ae dc       	rcall	.-1700   	; 0x174c <malloc>
    1df0:	ec 01       	movw	r28, r24
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	21 f0       	breq	.+8      	; 0x1dfe <calloc+0x28>
    1df6:	a8 01       	movw	r20, r16
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	11 d0       	rcall	.+34     	; 0x1e20 <memset>
    1dfe:	ce 01       	movw	r24, r28
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	08 95       	ret

00001e0a <strnlen_P>:
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	05 90       	lpm	r0, Z+
    1e0e:	61 50       	subi	r22, 0x01	; 1
    1e10:	70 40       	sbci	r23, 0x00	; 0
    1e12:	01 10       	cpse	r0, r1
    1e14:	d8 f7       	brcc	.-10     	; 0x1e0c <strnlen_P+0x2>
    1e16:	80 95       	com	r24
    1e18:	90 95       	com	r25
    1e1a:	8e 0f       	add	r24, r30
    1e1c:	9f 1f       	adc	r25, r31
    1e1e:	08 95       	ret

00001e20 <memset>:
    1e20:	dc 01       	movw	r26, r24
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <memset+0x6>
    1e24:	6d 93       	st	X+, r22
    1e26:	41 50       	subi	r20, 0x01	; 1
    1e28:	50 40       	sbci	r21, 0x00	; 0
    1e2a:	e0 f7       	brcc	.-8      	; 0x1e24 <memset+0x4>
    1e2c:	08 95       	ret

00001e2e <strnlen>:
    1e2e:	fc 01       	movw	r30, r24
    1e30:	61 50       	subi	r22, 0x01	; 1
    1e32:	70 40       	sbci	r23, 0x00	; 0
    1e34:	01 90       	ld	r0, Z+
    1e36:	01 10       	cpse	r0, r1
    1e38:	d8 f7       	brcc	.-10     	; 0x1e30 <strnlen+0x2>
    1e3a:	80 95       	com	r24
    1e3c:	90 95       	com	r25
    1e3e:	8e 0f       	add	r24, r30
    1e40:	9f 1f       	adc	r25, r31
    1e42:	08 95       	ret

00001e44 <fputc>:
    1e44:	0f 93       	push	r16
    1e46:	1f 93       	push	r17
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	18 2f       	mov	r17, r24
    1e4e:	09 2f       	mov	r16, r25
    1e50:	eb 01       	movw	r28, r22
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	81 fd       	sbrc	r24, 1
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <fputc+0x1a>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	9f ef       	ldi	r25, 0xFF	; 255
    1e5c:	20 c0       	rjmp	.+64     	; 0x1e9e <fputc+0x5a>
    1e5e:	82 ff       	sbrs	r24, 2
    1e60:	10 c0       	rjmp	.+32     	; 0x1e82 <fputc+0x3e>
    1e62:	4e 81       	ldd	r20, Y+6	; 0x06
    1e64:	5f 81       	ldd	r21, Y+7	; 0x07
    1e66:	2c 81       	ldd	r18, Y+4	; 0x04
    1e68:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6a:	42 17       	cp	r20, r18
    1e6c:	53 07       	cpc	r21, r19
    1e6e:	7c f4       	brge	.+30     	; 0x1e8e <fputc+0x4a>
    1e70:	e8 81       	ld	r30, Y
    1e72:	f9 81       	ldd	r31, Y+1	; 0x01
    1e74:	9f 01       	movw	r18, r30
    1e76:	2f 5f       	subi	r18, 0xFF	; 255
    1e78:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7a:	39 83       	std	Y+1, r19	; 0x01
    1e7c:	28 83       	st	Y, r18
    1e7e:	10 83       	st	Z, r17
    1e80:	06 c0       	rjmp	.+12     	; 0x1e8e <fputc+0x4a>
    1e82:	e8 85       	ldd	r30, Y+8	; 0x08
    1e84:	f9 85       	ldd	r31, Y+9	; 0x09
    1e86:	81 2f       	mov	r24, r17
    1e88:	09 95       	icall
    1e8a:	89 2b       	or	r24, r25
    1e8c:	29 f7       	brne	.-54     	; 0x1e58 <fputc+0x14>
    1e8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e90:	3f 81       	ldd	r19, Y+7	; 0x07
    1e92:	2f 5f       	subi	r18, 0xFF	; 255
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	3f 83       	std	Y+7, r19	; 0x07
    1e98:	2e 83       	std	Y+6, r18	; 0x06
    1e9a:	81 2f       	mov	r24, r17
    1e9c:	90 2f       	mov	r25, r16
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	08 95       	ret

00001ea8 <__ultoa_invert>:
    1ea8:	fa 01       	movw	r30, r20
    1eaa:	aa 27       	eor	r26, r26
    1eac:	28 30       	cpi	r18, 0x08	; 8
    1eae:	51 f1       	breq	.+84     	; 0x1f04 <__ultoa_invert+0x5c>
    1eb0:	20 31       	cpi	r18, 0x10	; 16
    1eb2:	81 f1       	breq	.+96     	; 0x1f14 <__ultoa_invert+0x6c>
    1eb4:	e8 94       	clt
    1eb6:	6f 93       	push	r22
    1eb8:	6e 7f       	andi	r22, 0xFE	; 254
    1eba:	6e 5f       	subi	r22, 0xFE	; 254
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	af 4f       	sbci	r26, 0xFF	; 255
    1ec4:	b1 e0       	ldi	r27, 0x01	; 1
    1ec6:	3e d0       	rcall	.+124    	; 0x1f44 <__ultoa_invert+0x9c>
    1ec8:	b4 e0       	ldi	r27, 0x04	; 4
    1eca:	3c d0       	rcall	.+120    	; 0x1f44 <__ultoa_invert+0x9c>
    1ecc:	67 0f       	add	r22, r23
    1ece:	78 1f       	adc	r23, r24
    1ed0:	89 1f       	adc	r24, r25
    1ed2:	9a 1f       	adc	r25, r26
    1ed4:	a1 1d       	adc	r26, r1
    1ed6:	68 0f       	add	r22, r24
    1ed8:	79 1f       	adc	r23, r25
    1eda:	8a 1f       	adc	r24, r26
    1edc:	91 1d       	adc	r25, r1
    1ede:	a1 1d       	adc	r26, r1
    1ee0:	6a 0f       	add	r22, r26
    1ee2:	71 1d       	adc	r23, r1
    1ee4:	81 1d       	adc	r24, r1
    1ee6:	91 1d       	adc	r25, r1
    1ee8:	a1 1d       	adc	r26, r1
    1eea:	20 d0       	rcall	.+64     	; 0x1f2c <__ultoa_invert+0x84>
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__ultoa_invert+0x48>
    1eee:	68 94       	set
    1ef0:	3f 91       	pop	r19
    1ef2:	2a e0       	ldi	r18, 0x0A	; 10
    1ef4:	26 9f       	mul	r18, r22
    1ef6:	11 24       	eor	r1, r1
    1ef8:	30 19       	sub	r19, r0
    1efa:	30 5d       	subi	r19, 0xD0	; 208
    1efc:	31 93       	st	Z+, r19
    1efe:	de f6       	brtc	.-74     	; 0x1eb6 <__ultoa_invert+0xe>
    1f00:	cf 01       	movw	r24, r30
    1f02:	08 95       	ret
    1f04:	46 2f       	mov	r20, r22
    1f06:	47 70       	andi	r20, 0x07	; 7
    1f08:	40 5d       	subi	r20, 0xD0	; 208
    1f0a:	41 93       	st	Z+, r20
    1f0c:	b3 e0       	ldi	r27, 0x03	; 3
    1f0e:	0f d0       	rcall	.+30     	; 0x1f2e <__ultoa_invert+0x86>
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <__ultoa_invert+0x5c>
    1f12:	f6 cf       	rjmp	.-20     	; 0x1f00 <__ultoa_invert+0x58>
    1f14:	46 2f       	mov	r20, r22
    1f16:	4f 70       	andi	r20, 0x0F	; 15
    1f18:	40 5d       	subi	r20, 0xD0	; 208
    1f1a:	4a 33       	cpi	r20, 0x3A	; 58
    1f1c:	18 f0       	brcs	.+6      	; 0x1f24 <__ultoa_invert+0x7c>
    1f1e:	49 5d       	subi	r20, 0xD9	; 217
    1f20:	31 fd       	sbrc	r19, 1
    1f22:	40 52       	subi	r20, 0x20	; 32
    1f24:	41 93       	st	Z+, r20
    1f26:	02 d0       	rcall	.+4      	; 0x1f2c <__ultoa_invert+0x84>
    1f28:	a9 f7       	brne	.-22     	; 0x1f14 <__ultoa_invert+0x6c>
    1f2a:	ea cf       	rjmp	.-44     	; 0x1f00 <__ultoa_invert+0x58>
    1f2c:	b4 e0       	ldi	r27, 0x04	; 4
    1f2e:	a6 95       	lsr	r26
    1f30:	97 95       	ror	r25
    1f32:	87 95       	ror	r24
    1f34:	77 95       	ror	r23
    1f36:	67 95       	ror	r22
    1f38:	ba 95       	dec	r27
    1f3a:	c9 f7       	brne	.-14     	; 0x1f2e <__ultoa_invert+0x86>
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	61 05       	cpc	r22, r1
    1f40:	71 05       	cpc	r23, r1
    1f42:	08 95       	ret
    1f44:	9b 01       	movw	r18, r22
    1f46:	ac 01       	movw	r20, r24
    1f48:	0a 2e       	mov	r0, r26
    1f4a:	06 94       	lsr	r0
    1f4c:	57 95       	ror	r21
    1f4e:	47 95       	ror	r20
    1f50:	37 95       	ror	r19
    1f52:	27 95       	ror	r18
    1f54:	ba 95       	dec	r27
    1f56:	c9 f7       	brne	.-14     	; 0x1f4a <__ultoa_invert+0xa2>
    1f58:	62 0f       	add	r22, r18
    1f5a:	73 1f       	adc	r23, r19
    1f5c:	84 1f       	adc	r24, r20
    1f5e:	95 1f       	adc	r25, r21
    1f60:	a0 1d       	adc	r26, r0
    1f62:	08 95       	ret

00001f64 <__prologue_saves__>:
    1f64:	2f 92       	push	r2
    1f66:	3f 92       	push	r3
    1f68:	4f 92       	push	r4
    1f6a:	5f 92       	push	r5
    1f6c:	6f 92       	push	r6
    1f6e:	7f 92       	push	r7
    1f70:	8f 92       	push	r8
    1f72:	9f 92       	push	r9
    1f74:	af 92       	push	r10
    1f76:	bf 92       	push	r11
    1f78:	cf 92       	push	r12
    1f7a:	df 92       	push	r13
    1f7c:	ef 92       	push	r14
    1f7e:	ff 92       	push	r15
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	ca 1b       	sub	r28, r26
    1f8e:	db 0b       	sbc	r29, r27
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	09 94       	ijmp

00001f9c <__epilogue_restores__>:
    1f9c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f9e:	39 88       	ldd	r3, Y+17	; 0x11
    1fa0:	48 88       	ldd	r4, Y+16	; 0x10
    1fa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1faa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fac:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fae:	b9 84       	ldd	r11, Y+9	; 0x09
    1fb0:	c8 84       	ldd	r12, Y+8	; 0x08
    1fb2:	df 80       	ldd	r13, Y+7	; 0x07
    1fb4:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb6:	fd 80       	ldd	r15, Y+5	; 0x05
    1fb8:	0c 81       	ldd	r16, Y+4	; 0x04
    1fba:	1b 81       	ldd	r17, Y+3	; 0x03
    1fbc:	aa 81       	ldd	r26, Y+2	; 0x02
    1fbe:	b9 81       	ldd	r27, Y+1	; 0x01
    1fc0:	ce 0f       	add	r28, r30
    1fc2:	d1 1d       	adc	r29, r1
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	ed 01       	movw	r28, r26
    1fd0:	08 95       	ret

00001fd2 <_exit>:
    1fd2:	f8 94       	cli

00001fd4 <__stop_program>:
    1fd4:	ff cf       	rjmp	.-2      	; 0x1fd4 <__stop_program>
