
byggern24_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000520  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000520  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800106  00800106  000005ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013f8  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f6  00000000  00000000  00001b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000791  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d0  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b8  00000000  00000000  000033dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00003b94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e2       	ldi	r30, 0x20	; 32
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 31       	cpi	r26, 0x14	; 20
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  a6:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_read>:
	{
		return 0;
	} else 
	{
		volatile char *ext_adc = (char *) 0x1400; // Start address for the SRAM
		uint8_t val = chn + 3;
  ae:	8d 5f       	subi	r24, 0xFD	; 253
		
		ext_adc[0] = val;
  b0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <ADC_read+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <ADC_read+0xe>
		_delay_us(200);
		return ext_adc[0];
  bc:	80 91 00 14 	lds	r24, 0x1400
	}
	

  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	08 95       	ret

000000c4 <joystick_init>:
	float y_step = (255.0 - y_middle_pos)/100.0;
	
	int x_range = ADC_read(2);
	int y_range = ADC_read(1);

	j_position.x = (int) ((x_range - x_middle_pos)/x_step);
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
  cc:	90 93 09 01 	sts	0x0109, r25
  d0:	80 93 08 01 	sts	0x0108, r24
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
  dc:	90 93 07 01 	sts	0x0107, r25
  e0:	80 93 06 01 	sts	0x0106, r24
	j_position.y = (int) ((y_range - y_middle_pos)/y_step);
	
	return j_position;
  e4:	08 95       	ret

000000e6 <main>:
	}
}

int main(void)
{
	USART_Init(MYUBRR);
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Init>
	SRAM_init();
  ee:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SRAM_init>
	joystick_init();
  f2:	0e 94 62 00 	call	0xc4	; 0xc4 <joystick_init>
	//SRAM_test();
	
	oled_init();
  f6:	0e 94 82 00 	call	0x104	; 0x104 <oled_init>
	oled_test();
  fa:	0e 94 ce 00 	call	0x19c	; 0x19c <oled_test>
	//test_joystick();
	
	
	
	
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	08 95       	ret

00000104 <oled_init>:
}

void oled_write_cmd(unsigned char ins_c)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_MEM; // OLED Command
	ext_oled[0] = ins_c;
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f0 e1       	ldi	r31, 0x10	; 16
 108:	8e ea       	ldi	r24, 0xAE	; 174
 10a:	80 83       	st	Z, r24
 10c:	81 ea       	ldi	r24, 0xA1	; 161
 10e:	80 83       	st	Z, r24
 110:	8a ed       	ldi	r24, 0xDA	; 218
 112:	80 83       	st	Z, r24
 114:	82 e1       	ldi	r24, 0x12	; 18
 116:	80 83       	st	Z, r24
 118:	88 ec       	ldi	r24, 0xC8	; 200
 11a:	80 83       	st	Z, r24
 11c:	88 ea       	ldi	r24, 0xA8	; 168
 11e:	80 83       	st	Z, r24
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	80 83       	st	Z, r24
 124:	85 ed       	ldi	r24, 0xD5	; 213
 126:	80 83       	st	Z, r24
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	80 83       	st	Z, r24
 12c:	81 e8       	ldi	r24, 0x81	; 129
 12e:	80 83       	st	Z, r24
 130:	80 e5       	ldi	r24, 0x50	; 80
 132:	80 83       	st	Z, r24
 134:	89 ed       	ldi	r24, 0xD9	; 217
 136:	80 83       	st	Z, r24
 138:	81 e2       	ldi	r24, 0x21	; 33
 13a:	80 83       	st	Z, r24
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	80 83       	st	Z, r24
 140:	10 82       	st	Z, r1
 142:	8b ed       	ldi	r24, 0xDB	; 219
 144:	80 83       	st	Z, r24
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	80 83       	st	Z, r24
 14a:	8d ea       	ldi	r24, 0xAD	; 173
 14c:	80 83       	st	Z, r24
 14e:	10 82       	st	Z, r1
 150:	84 ea       	ldi	r24, 0xA4	; 164
 152:	80 83       	st	Z, r24
 154:	86 ea       	ldi	r24, 0xA6	; 166
 156:	80 83       	st	Z, r24
 158:	8f ea       	ldi	r24, 0xAF	; 175
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <oled_goto_line>:
 15e:	e0 e0       	ldi	r30, 0x00	; 0
 160:	f0 e1       	ldi	r31, 0x10	; 16
 162:	92 e2       	ldi	r25, 0x22	; 34
 164:	90 83       	st	Z, r25
 166:	80 83       	st	Z, r24
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <oled_reset>:
}

void oled_reset()
{
	oled_goto_line(0);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 af 00 	call	0x15e	; 0x15e <oled_goto_line>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	94 e0       	ldi	r25, 0x04	; 4
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
 178:	e0 e0       	ldi	r30, 0x00	; 0
 17a:	f2 e1       	ldi	r31, 0x12	; 18
 17c:	10 82       	st	Z, r1
 17e:	01 97       	sbiw	r24, 0x01	; 1
}

void oled_reset()
{
	oled_goto_line(0);
	for(int i = 0; i < 1024; i++)
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <oled_reset+0xe>
	{
		oled_write_data(0x00);
	}
	
}
 184:	08 95       	ret

00000186 <oled_clear_line>:
	oled_write_cmd(127);
}

void oled_clear_line(uint8_t line)
{
	oled_goto_line(line);
 186:	0e 94 af 00 	call	0x15e	; 0x15e <oled_goto_line>
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	90 e0       	ldi	r25, 0x00	; 0
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
 18e:	e0 e0       	ldi	r30, 0x00	; 0
 190:	f2 e1       	ldi	r31, 0x12	; 18
 192:	10 82       	st	Z, r1
 194:	01 97       	sbiw	r24, 0x01	; 1
}

void oled_clear_line(uint8_t line)
{
	oled_goto_line(line);
	for (int i = 0; i < 128; i++)
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <oled_clear_line+0xc>
	{
		oled_write_data(0x00);
	}
}
 19a:	08 95       	ret

0000019c <oled_test>:
	
}

void oled_test(){

	oled_reset();
 19c:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_reset>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	94 e0       	ldi	r25, 0x04	; 4
}

void oled_write_data(unsigned char ins_d)
{
	volatile char *ext_oled = (char *) OLED_DATA_MEM; // OLED Data
	ext_oled[0] = ins_d;
 1a4:	e0 e0       	ldi	r30, 0x00	; 0
 1a6:	f2 e1       	ldi	r31, 0x12	; 18
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	20 83       	st	Z, r18
 1ac:	01 97       	sbiw	r24, 0x01	; 1
	oled_write_cmd(0x05);*/
	
	//oled_goto_line(4);
	//oled_goto_column(39);

	for(int i = 0; i < 1024; i++)
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <oled_test+0xe>
	{
		oled_write_data(0xff);
	}
	
	oled_clear_line(6);
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	0e 94 c3 00 	call	0x186	; 0x186 <oled_clear_line>
 1b8:	08 95       	ret

000001ba <SRAM_init>:


void SRAM_init()
{
	//Enable XMEM
	MCUCR |= (1 << SRE); 
 1ba:	85 b7       	in	r24, 0x35	; 53
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	85 bf       	out	0x35, r24	; 53
	
	//Mask JTAG pins
	SFIOR |= (1 << XMM2) | (0 << XMM1) | (0 << XMM0);	
 1c0:	80 b7       	in	r24, 0x30	; 48
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	80 bf       	out	0x30, r24	; 48
 1c6:	08 95       	ret

000001c8 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 1c8:	5d 9b       	sbis	0x0b, 5	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1cc:	8c b9       	out	0x0c, r24	; 12
 1ce:	08 95       	ret

000001d0 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 1d0:	5f 9b       	sbis	0x0b, 7	; 11
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
 1d4:	8c b1       	in	r24, 0x0c	; 12
}
 1d6:	08 95       	ret

000001d8 <USART_Init>:
#include "avr/io.h"

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr >> 8);
 1d8:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 1da:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 1dc:	88 e1       	ldi	r24, 0x18	; 24
 1de:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0)|(3 << UCSZ00);
 1e0:	8e e8       	ldi	r24, 0x8E	; 142
 1e2:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_Transmit, USART_Receive);
 1e4:	68 ee       	ldi	r22, 0xE8	; 232
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	84 ee       	ldi	r24, 0xE4	; 228
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <fdevopen>
 1f0:	08 95       	ret

000001f2 <fdevopen>:
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	ec 01       	movw	r28, r24
 1fc:	8b 01       	movw	r16, r22
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	31 f4       	brne	.+12     	; 0x20e <fdevopen+0x1c>
 202:	61 15       	cp	r22, r1
 204:	71 05       	cpc	r23, r1
 206:	19 f4       	brne	.+6      	; 0x20e <fdevopen+0x1c>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	38 c0       	rjmp	.+112    	; 0x27e <fdevopen+0x8c>
 20e:	6e e0       	ldi	r22, 0x0E	; 14
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 44 01 	call	0x288	; 0x288 <calloc>
 21a:	fc 01       	movw	r30, r24
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	a1 f3       	breq	.-24     	; 0x208 <fdevopen+0x16>
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	83 83       	std	Z+3, r24	; 0x03
 224:	01 15       	cp	r16, r1
 226:	11 05       	cpc	r17, r1
 228:	71 f0       	breq	.+28     	; 0x246 <fdevopen+0x54>
 22a:	13 87       	std	Z+11, r17	; 0x0b
 22c:	02 87       	std	Z+10, r16	; 0x0a
 22e:	81 e8       	ldi	r24, 0x81	; 129
 230:	83 83       	std	Z+3, r24	; 0x03
 232:	80 91 0a 01 	lds	r24, 0x010A
 236:	90 91 0b 01 	lds	r25, 0x010B
 23a:	89 2b       	or	r24, r25
 23c:	21 f4       	brne	.+8      	; 0x246 <fdevopen+0x54>
 23e:	f0 93 0b 01 	sts	0x010B, r31
 242:	e0 93 0a 01 	sts	0x010A, r30
 246:	20 97       	sbiw	r28, 0x00	; 0
 248:	c9 f0       	breq	.+50     	; 0x27c <fdevopen+0x8a>
 24a:	d1 87       	std	Z+9, r29	; 0x09
 24c:	c0 87       	std	Z+8, r28	; 0x08
 24e:	83 81       	ldd	r24, Z+3	; 0x03
 250:	82 60       	ori	r24, 0x02	; 2
 252:	83 83       	std	Z+3, r24	; 0x03
 254:	80 91 0c 01 	lds	r24, 0x010C
 258:	90 91 0d 01 	lds	r25, 0x010D
 25c:	89 2b       	or	r24, r25
 25e:	71 f4       	brne	.+28     	; 0x27c <fdevopen+0x8a>
 260:	f0 93 0d 01 	sts	0x010D, r31
 264:	e0 93 0c 01 	sts	0x010C, r30
 268:	80 91 0e 01 	lds	r24, 0x010E
 26c:	90 91 0f 01 	lds	r25, 0x010F
 270:	89 2b       	or	r24, r25
 272:	21 f4       	brne	.+8      	; 0x27c <fdevopen+0x8a>
 274:	f0 93 0f 01 	sts	0x010F, r31
 278:	e0 93 0e 01 	sts	0x010E, r30
 27c:	cf 01       	movw	r24, r30
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <calloc>:
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	86 9f       	mul	r24, r22
 292:	80 01       	movw	r16, r0
 294:	87 9f       	mul	r24, r23
 296:	10 0d       	add	r17, r0
 298:	96 9f       	mul	r25, r22
 29a:	10 0d       	add	r17, r0
 29c:	11 24       	eor	r1, r1
 29e:	c8 01       	movw	r24, r16
 2a0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <malloc>
 2a4:	ec 01       	movw	r28, r24
 2a6:	00 97       	sbiw	r24, 0x00	; 0
 2a8:	29 f0       	breq	.+10     	; 0x2b4 <calloc+0x2c>
 2aa:	a8 01       	movw	r20, r16
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	0e 94 87 02 	call	0x50e	; 0x50e <memset>
 2b4:	ce 01       	movw	r24, r28
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <malloc>:
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	82 30       	cpi	r24, 0x02	; 2
 2c6:	91 05       	cpc	r25, r1
 2c8:	10 f4       	brcc	.+4      	; 0x2ce <malloc+0xe>
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	e0 91 12 01 	lds	r30, 0x0112
 2d2:	f0 91 13 01 	lds	r31, 0x0113
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	a0 e0       	ldi	r26, 0x00	; 0
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	30 97       	sbiw	r30, 0x00	; 0
 2e0:	39 f1       	breq	.+78     	; 0x330 <malloc+0x70>
 2e2:	40 81       	ld	r20, Z
 2e4:	51 81       	ldd	r21, Z+1	; 0x01
 2e6:	48 17       	cp	r20, r24
 2e8:	59 07       	cpc	r21, r25
 2ea:	b8 f0       	brcs	.+46     	; 0x31a <malloc+0x5a>
 2ec:	48 17       	cp	r20, r24
 2ee:	59 07       	cpc	r21, r25
 2f0:	71 f4       	brne	.+28     	; 0x30e <malloc+0x4e>
 2f2:	82 81       	ldd	r24, Z+2	; 0x02
 2f4:	93 81       	ldd	r25, Z+3	; 0x03
 2f6:	10 97       	sbiw	r26, 0x00	; 0
 2f8:	29 f0       	breq	.+10     	; 0x304 <malloc+0x44>
 2fa:	13 96       	adiw	r26, 0x03	; 3
 2fc:	9c 93       	st	X, r25
 2fe:	8e 93       	st	-X, r24
 300:	12 97       	sbiw	r26, 0x02	; 2
 302:	2c c0       	rjmp	.+88     	; 0x35c <malloc+0x9c>
 304:	90 93 13 01 	sts	0x0113, r25
 308:	80 93 12 01 	sts	0x0112, r24
 30c:	27 c0       	rjmp	.+78     	; 0x35c <malloc+0x9c>
 30e:	21 15       	cp	r18, r1
 310:	31 05       	cpc	r19, r1
 312:	31 f0       	breq	.+12     	; 0x320 <malloc+0x60>
 314:	42 17       	cp	r20, r18
 316:	53 07       	cpc	r21, r19
 318:	18 f0       	brcs	.+6      	; 0x320 <malloc+0x60>
 31a:	a9 01       	movw	r20, r18
 31c:	db 01       	movw	r26, r22
 31e:	01 c0       	rjmp	.+2      	; 0x322 <malloc+0x62>
 320:	ef 01       	movw	r28, r30
 322:	9a 01       	movw	r18, r20
 324:	bd 01       	movw	r22, r26
 326:	df 01       	movw	r26, r30
 328:	02 80       	ldd	r0, Z+2	; 0x02
 32a:	f3 81       	ldd	r31, Z+3	; 0x03
 32c:	e0 2d       	mov	r30, r0
 32e:	d7 cf       	rjmp	.-82     	; 0x2de <malloc+0x1e>
 330:	21 15       	cp	r18, r1
 332:	31 05       	cpc	r19, r1
 334:	f9 f0       	breq	.+62     	; 0x374 <malloc+0xb4>
 336:	28 1b       	sub	r18, r24
 338:	39 0b       	sbc	r19, r25
 33a:	24 30       	cpi	r18, 0x04	; 4
 33c:	31 05       	cpc	r19, r1
 33e:	80 f4       	brcc	.+32     	; 0x360 <malloc+0xa0>
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	9b 81       	ldd	r25, Y+3	; 0x03
 344:	61 15       	cp	r22, r1
 346:	71 05       	cpc	r23, r1
 348:	21 f0       	breq	.+8      	; 0x352 <malloc+0x92>
 34a:	fb 01       	movw	r30, r22
 34c:	93 83       	std	Z+3, r25	; 0x03
 34e:	82 83       	std	Z+2, r24	; 0x02
 350:	04 c0       	rjmp	.+8      	; 0x35a <malloc+0x9a>
 352:	90 93 13 01 	sts	0x0113, r25
 356:	80 93 12 01 	sts	0x0112, r24
 35a:	fe 01       	movw	r30, r28
 35c:	32 96       	adiw	r30, 0x02	; 2
 35e:	44 c0       	rjmp	.+136    	; 0x3e8 <malloc+0x128>
 360:	fe 01       	movw	r30, r28
 362:	e2 0f       	add	r30, r18
 364:	f3 1f       	adc	r31, r19
 366:	81 93       	st	Z+, r24
 368:	91 93       	st	Z+, r25
 36a:	22 50       	subi	r18, 0x02	; 2
 36c:	31 09       	sbc	r19, r1
 36e:	39 83       	std	Y+1, r19	; 0x01
 370:	28 83       	st	Y, r18
 372:	3a c0       	rjmp	.+116    	; 0x3e8 <malloc+0x128>
 374:	20 91 10 01 	lds	r18, 0x0110
 378:	30 91 11 01 	lds	r19, 0x0111
 37c:	23 2b       	or	r18, r19
 37e:	41 f4       	brne	.+16     	; 0x390 <malloc+0xd0>
 380:	20 91 02 01 	lds	r18, 0x0102
 384:	30 91 03 01 	lds	r19, 0x0103
 388:	30 93 11 01 	sts	0x0111, r19
 38c:	20 93 10 01 	sts	0x0110, r18
 390:	20 91 00 01 	lds	r18, 0x0100
 394:	30 91 01 01 	lds	r19, 0x0101
 398:	21 15       	cp	r18, r1
 39a:	31 05       	cpc	r19, r1
 39c:	41 f4       	brne	.+16     	; 0x3ae <malloc+0xee>
 39e:	2d b7       	in	r18, 0x3d	; 61
 3a0:	3e b7       	in	r19, 0x3e	; 62
 3a2:	40 91 04 01 	lds	r20, 0x0104
 3a6:	50 91 05 01 	lds	r21, 0x0105
 3aa:	24 1b       	sub	r18, r20
 3ac:	35 0b       	sbc	r19, r21
 3ae:	e0 91 10 01 	lds	r30, 0x0110
 3b2:	f0 91 11 01 	lds	r31, 0x0111
 3b6:	e2 17       	cp	r30, r18
 3b8:	f3 07       	cpc	r31, r19
 3ba:	a0 f4       	brcc	.+40     	; 0x3e4 <malloc+0x124>
 3bc:	2e 1b       	sub	r18, r30
 3be:	3f 0b       	sbc	r19, r31
 3c0:	28 17       	cp	r18, r24
 3c2:	39 07       	cpc	r19, r25
 3c4:	78 f0       	brcs	.+30     	; 0x3e4 <malloc+0x124>
 3c6:	ac 01       	movw	r20, r24
 3c8:	4e 5f       	subi	r20, 0xFE	; 254
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255
 3cc:	24 17       	cp	r18, r20
 3ce:	35 07       	cpc	r19, r21
 3d0:	48 f0       	brcs	.+18     	; 0x3e4 <malloc+0x124>
 3d2:	4e 0f       	add	r20, r30
 3d4:	5f 1f       	adc	r21, r31
 3d6:	50 93 11 01 	sts	0x0111, r21
 3da:	40 93 10 01 	sts	0x0110, r20
 3de:	81 93       	st	Z+, r24
 3e0:	91 93       	st	Z+, r25
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <malloc+0x128>
 3e4:	e0 e0       	ldi	r30, 0x00	; 0
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	cf 01       	movw	r24, r30
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <free>:
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	09 f4       	brne	.+2      	; 0x3fa <free+0xa>
 3f8:	87 c0       	rjmp	.+270    	; 0x508 <__stack+0x9>
 3fa:	fc 01       	movw	r30, r24
 3fc:	32 97       	sbiw	r30, 0x02	; 2
 3fe:	13 82       	std	Z+3, r1	; 0x03
 400:	12 82       	std	Z+2, r1	; 0x02
 402:	c0 91 12 01 	lds	r28, 0x0112
 406:	d0 91 13 01 	lds	r29, 0x0113
 40a:	20 97       	sbiw	r28, 0x00	; 0
 40c:	81 f4       	brne	.+32     	; 0x42e <free+0x3e>
 40e:	20 81       	ld	r18, Z
 410:	31 81       	ldd	r19, Z+1	; 0x01
 412:	28 0f       	add	r18, r24
 414:	39 1f       	adc	r19, r25
 416:	80 91 10 01 	lds	r24, 0x0110
 41a:	90 91 11 01 	lds	r25, 0x0111
 41e:	82 17       	cp	r24, r18
 420:	93 07       	cpc	r25, r19
 422:	79 f5       	brne	.+94     	; 0x482 <free+0x92>
 424:	f0 93 11 01 	sts	0x0111, r31
 428:	e0 93 10 01 	sts	0x0110, r30
 42c:	6d c0       	rjmp	.+218    	; 0x508 <__stack+0x9>
 42e:	de 01       	movw	r26, r28
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	ae 17       	cp	r26, r30
 436:	bf 07       	cpc	r27, r31
 438:	50 f4       	brcc	.+20     	; 0x44e <free+0x5e>
 43a:	12 96       	adiw	r26, 0x02	; 2
 43c:	4d 91       	ld	r20, X+
 43e:	5c 91       	ld	r21, X
 440:	13 97       	sbiw	r26, 0x03	; 3
 442:	9d 01       	movw	r18, r26
 444:	41 15       	cp	r20, r1
 446:	51 05       	cpc	r21, r1
 448:	09 f1       	breq	.+66     	; 0x48c <free+0x9c>
 44a:	da 01       	movw	r26, r20
 44c:	f3 cf       	rjmp	.-26     	; 0x434 <free+0x44>
 44e:	b3 83       	std	Z+3, r27	; 0x03
 450:	a2 83       	std	Z+2, r26	; 0x02
 452:	40 81       	ld	r20, Z
 454:	51 81       	ldd	r21, Z+1	; 0x01
 456:	84 0f       	add	r24, r20
 458:	95 1f       	adc	r25, r21
 45a:	8a 17       	cp	r24, r26
 45c:	9b 07       	cpc	r25, r27
 45e:	71 f4       	brne	.+28     	; 0x47c <free+0x8c>
 460:	8d 91       	ld	r24, X+
 462:	9c 91       	ld	r25, X
 464:	11 97       	sbiw	r26, 0x01	; 1
 466:	84 0f       	add	r24, r20
 468:	95 1f       	adc	r25, r21
 46a:	02 96       	adiw	r24, 0x02	; 2
 46c:	91 83       	std	Z+1, r25	; 0x01
 46e:	80 83       	st	Z, r24
 470:	12 96       	adiw	r26, 0x02	; 2
 472:	8d 91       	ld	r24, X+
 474:	9c 91       	ld	r25, X
 476:	13 97       	sbiw	r26, 0x03	; 3
 478:	93 83       	std	Z+3, r25	; 0x03
 47a:	82 83       	std	Z+2, r24	; 0x02
 47c:	21 15       	cp	r18, r1
 47e:	31 05       	cpc	r19, r1
 480:	29 f4       	brne	.+10     	; 0x48c <free+0x9c>
 482:	f0 93 13 01 	sts	0x0113, r31
 486:	e0 93 12 01 	sts	0x0112, r30
 48a:	3e c0       	rjmp	.+124    	; 0x508 <__stack+0x9>
 48c:	d9 01       	movw	r26, r18
 48e:	13 96       	adiw	r26, 0x03	; 3
 490:	fc 93       	st	X, r31
 492:	ee 93       	st	-X, r30
 494:	12 97       	sbiw	r26, 0x02	; 2
 496:	4d 91       	ld	r20, X+
 498:	5d 91       	ld	r21, X+
 49a:	a4 0f       	add	r26, r20
 49c:	b5 1f       	adc	r27, r21
 49e:	ea 17       	cp	r30, r26
 4a0:	fb 07       	cpc	r31, r27
 4a2:	79 f4       	brne	.+30     	; 0x4c2 <free+0xd2>
 4a4:	80 81       	ld	r24, Z
 4a6:	91 81       	ldd	r25, Z+1	; 0x01
 4a8:	84 0f       	add	r24, r20
 4aa:	95 1f       	adc	r25, r21
 4ac:	02 96       	adiw	r24, 0x02	; 2
 4ae:	d9 01       	movw	r26, r18
 4b0:	11 96       	adiw	r26, 0x01	; 1
 4b2:	9c 93       	st	X, r25
 4b4:	8e 93       	st	-X, r24
 4b6:	82 81       	ldd	r24, Z+2	; 0x02
 4b8:	93 81       	ldd	r25, Z+3	; 0x03
 4ba:	13 96       	adiw	r26, 0x03	; 3
 4bc:	9c 93       	st	X, r25
 4be:	8e 93       	st	-X, r24
 4c0:	12 97       	sbiw	r26, 0x02	; 2
 4c2:	e0 e0       	ldi	r30, 0x00	; 0
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	9b 81       	ldd	r25, Y+3	; 0x03
 4ca:	00 97       	sbiw	r24, 0x00	; 0
 4cc:	19 f0       	breq	.+6      	; 0x4d4 <free+0xe4>
 4ce:	fe 01       	movw	r30, r28
 4d0:	ec 01       	movw	r28, r24
 4d2:	f9 cf       	rjmp	.-14     	; 0x4c6 <free+0xd6>
 4d4:	ce 01       	movw	r24, r28
 4d6:	02 96       	adiw	r24, 0x02	; 2
 4d8:	28 81       	ld	r18, Y
 4da:	39 81       	ldd	r19, Y+1	; 0x01
 4dc:	82 0f       	add	r24, r18
 4de:	93 1f       	adc	r25, r19
 4e0:	20 91 10 01 	lds	r18, 0x0110
 4e4:	30 91 11 01 	lds	r19, 0x0111
 4e8:	28 17       	cp	r18, r24
 4ea:	39 07       	cpc	r19, r25
 4ec:	69 f4       	brne	.+26     	; 0x508 <__stack+0x9>
 4ee:	30 97       	sbiw	r30, 0x00	; 0
 4f0:	29 f4       	brne	.+10     	; 0x4fc <free+0x10c>
 4f2:	10 92 13 01 	sts	0x0113, r1
 4f6:	10 92 12 01 	sts	0x0112, r1
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <__stack+0x1>
 4fc:	13 82       	std	Z+3, r1	; 0x03
 4fe:	12 82       	std	Z+2, r1	; 0x02
 500:	d0 93 11 01 	sts	0x0111, r29
 504:	c0 93 10 01 	sts	0x0110, r28
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <memset>:
 50e:	dc 01       	movw	r26, r24
 510:	01 c0       	rjmp	.+2      	; 0x514 <memset+0x6>
 512:	6d 93       	st	X+, r22
 514:	41 50       	subi	r20, 0x01	; 1
 516:	50 40       	sbci	r21, 0x00	; 0
 518:	e0 f7       	brcc	.-8      	; 0x512 <memset+0x4>
 51a:	08 95       	ret

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
