
byggern24_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000252  00800100  00000ffc  00001090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ffc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800352  00800352  000012e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d0  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003451  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000113c  00000000  00000000  00004a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000102e  00000000  00000000  00005b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000874  00000000  00000000  00006bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008fe  00000000  00000000  00007440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002234  00000000  00000000  00007d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  00009f72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	13 e0       	ldi	r17, 0x03	; 3
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ef       	ldi	r30, 0xFC	; 252
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 35       	cpi	r26, 0x52	; 82
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a2 e5       	ldi	r26, 0x52	; 82
  96:	b3 e0       	ldi	r27, 0x03	; 3
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 36       	cpi	r26, 0x60	; 96
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 23 03 	call	0x646	; 0x646 <main>
  a6:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_read>:
  ae:	8d 5f       	subi	r24, 0xFD	; 253
  b0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <ADC_read+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <ADC_read+0xe>
  bc:	80 91 00 14 	lds	r24, 0x1400
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	08 95       	ret

000000c4 <can_controller_reset>:

#define CAN_CS PB4

void can_controller_reset()
{
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
  c4:	c4 98       	cbi	0x18, 4	; 24
	spi_send(MCP_RESET);
  c6:	80 ec       	ldi	r24, 0xC0	; 192
  c8:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>
	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
  cc:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	9f e2       	ldi	r25, 0x2F	; 47
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <can_controller_reset+0xe>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <can_controller_reset+0x14>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <can_controller_read>:
	can_controller_write(MCP_TXB0SIDL, 0x00);	
    return 0;
}

uint8_t can_controller_read(uint8_t address)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	uint8_t result;

	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
  e0:	c4 98       	cbi	0x18, 4	; 24

	spi_send(MCP_READ); // Send read instruction
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>
	spi_send(address); // Send address
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>
	result = spi_read(); // Read result
  ee:	0e 94 83 03 	call	0x706	; 0x706 <spi_read>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
  f2:	c4 9a       	sbi	0x18, 4	; 24

	return result;
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <can_controller_request_to_send>:
	return (modestat & MODE_MASK);
}

void can_controller_request_to_send()
{
		PORTB &= ~(1<<CAN_CS);
  f8:	c4 98       	cbi	0x18, 4	; 24
		
		// The buffer types are MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 and MCP_RTS_ALL
		spi_send(MCP_RTS_TX0);
  fa:	81 e8       	ldi	r24, 0x81	; 129
  fc:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>

		PORTB |= ~(1<<CAN_CS);
 100:	88 b3       	in	r24, 0x18	; 24
 102:	8f 6e       	ori	r24, 0xEF	; 239
 104:	88 bb       	out	0x18, r24	; 24
 106:	08 95       	ret

00000108 <can_controller_bit_modify>:
}

void can_controller_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	18 2f       	mov	r17, r24
 110:	d6 2f       	mov	r29, r22
 112:	c4 2f       	mov	r28, r20
		PORTB &= ~(1<<CAN_CS); // Select CAN-controller
 114:	c4 98       	cbi	0x18, 4	; 24

		spi_send(MCP_BITMOD); // Send read instruction
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>
		spi_send(address); // Send address
 11c:	81 2f       	mov	r24, r17
 11e:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>
		spi_send(mask); // Send mask,
 122:	8d 2f       	mov	r24, r29
 124:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>
		spi_send(data); // Send data
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>

		PORTB |= (1<<CAN_CS); // Deselect CAN-controller
 12e:	c4 9a       	sbi	0x18, 4	; 24
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	08 95       	ret

00000138 <can_controller_set_mode>:
}

uint8_t can_controller_set_mode(uint8_t mode)
{
	uint8_t modestat;
	can_controller_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
 138:	48 2f       	mov	r20, r24
 13a:	60 ee       	ldi	r22, 0xE0	; 224
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	modestat = can_controller_read(MCP_CANSTAT);
 142:	8e e0       	ldi	r24, 0x0E	; 14
 144:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	return (modestat & MODE_MASK);
}
 148:	80 7e       	andi	r24, 0xE0	; 224
 14a:	08 95       	ret

0000014c <can_controller_write>:

	return status;
}

void can_controller_write(uint8_t address, uint8_t data)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	d8 2f       	mov	r29, r24
 152:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<CAN_CS); // Select CAN-controller
 154:	c4 98       	cbi	0x18, 4	; 24
	
	spi_send(MCP_WRITE);
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>
	spi_send(address);
 15c:	8d 2f       	mov	r24, r29
 15e:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>
	spi_send(data);
 162:	8c 2f       	mov	r24, r28
 164:	0e 94 80 03 	call	0x700	; 0x700 <spi_send>

	PORTB |= (1<<CAN_CS); // Deselect CAN-controller
 168:	c4 9a       	sbi	0x18, 4	; 24
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <can_controller_init>:

uint8_t can_controller_init()
{
    uint8_t value;

    spi_init(); // Initialize SPI
 170:	0e 94 7d 03 	call	0x6fa	; 0x6fa <spi_init>
    can_controller_reset(); // Send reset-command
 174:	0e 94 62 00 	call	0xc4	; 0xc4 <can_controller_reset>
	

    // Self-test
    value = can_controller_read(MCP_CANSTAT);
 178:	8e e0       	ldi	r24, 0x0E	; 14
 17a:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
    if ((value & MODE_MASK)  != MODE_CONFIG) 
 17e:	98 2f       	mov	r25, r24
 180:	90 7e       	andi	r25, 0xE0	; 224
 182:	90 38       	cpi	r25, 0x80	; 128
 184:	71 f0       	breq	.+28     	; 0x1a2 <can_controller_init+0x32>
    {
        printf("%d can_controller is NOT in configuration mode after reset!\n\r", value);
 186:	1f 92       	push	r1
 188:	8f 93       	push	r24
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
        return 1;
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret
    }
	
	printf("mode value: %d\n\r", (value & MODE_MASK));
 1a2:	1f 92       	push	r1
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	8f 93       	push	r24
 1a8:	84 e4       	ldi	r24, 0x44	; 68
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	9f 93       	push	r25
 1ae:	8f 93       	push	r24
 1b0:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	
	//turn RXM1 and RXM0 to 11 to turn off filters and receive any messages
	can_controller_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000);
 1b4:	40 e6       	ldi	r20, 0x60	; 96
 1b6:	60 e6       	ldi	r22, 0x60	; 96
 1b8:	80 e6       	ldi	r24, 0x60	; 96
 1ba:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	printf("RBX0CTRL: %02x\n\r", can_controller_read(MCP_RXB0CTRL));
 1be:	80 e6       	ldi	r24, 0x60	; 96
 1c0:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 1c4:	1f 92       	push	r1
 1c6:	8f 93       	push	r24
 1c8:	85 e5       	ldi	r24, 0x55	; 85
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	9f 93       	push	r25
 1ce:	8f 93       	push	r24
 1d0:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	can_controller_bit_modify(MCP_RXB1CTRL, 0b01100000, 0b01100000);
 1d4:	40 e6       	ldi	r20, 0x60	; 96
 1d6:	60 e6       	ldi	r22, 0x60	; 96
 1d8:	80 e7       	ldi	r24, 0x70	; 112
 1da:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	printf("RBX1CTRL: %02x\n\r", can_controller_read(MCP_RXB1CTRL));
 1de:	80 e7       	ldi	r24, 0x70	; 112
 1e0:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 1e4:	1f 92       	push	r1
 1e6:	8f 93       	push	r24
 1e8:	86 e6       	ldi	r24, 0x66	; 102
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	9f 93       	push	r25
 1ee:	8f 93       	push	r24
 1f0:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>

    
	//Set lower ID reg to zero
	can_controller_write(MCP_TXB0SIDL, 0x00);	
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	82 e3       	ldi	r24, 0x32	; 50
 1f8:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
    return 0;
 1fc:	8d b7       	in	r24, 0x3d	; 61
 1fe:	9e b7       	in	r25, 0x3e	; 62
 200:	0c 96       	adiw	r24, 0x0c	; 12
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	9e bf       	out	0x3e, r25	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	8d bf       	out	0x3d, r24	; 61
 20c:	80 e0       	ldi	r24, 0x00	; 0
}
 20e:	08 95       	ret

00000210 <can_init>:
}


void can_init ()
{
	can_controller_init();
 210:	0e 94 b8 00 	call	0x170	; 0x170 <can_controller_init>
	
	//set loopback mode
	uint8_t mode = can_controller_set_mode(MODE_LOOPBACK);
 214:	80 e4       	ldi	r24, 0x40	; 64
 216:	0e 94 9c 00 	call	0x138	; 0x138 <can_controller_set_mode>
	if (mode != MODE_LOOPBACK)
 21a:	80 34       	cpi	r24, 0x40	; 64
 21c:	41 f0       	breq	.+16     	; 0x22e <can_init+0x1e>
	{
		printf("Could not set loopback mode! I am sorry!\n\r");
 21e:	86 e8       	ldi	r24, 0x86	; 134
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	9f 93       	push	r25
 224:	8f 93       	push	r24
 226:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
	}
		
	//enable RX interrupts
	can_controller_bit_modify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
 22e:	43 e0       	ldi	r20, 0x03	; 3
 230:	63 e0       	ldi	r22, 0x03	; 3
 232:	8b e2       	ldi	r24, 0x2B	; 43
 234:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	//can_controller_write(MCP_CANINTE, MCP_RX_INT);
	
	// SET UP INTERRUPTION TO RECIEVE MESSAGE
	DDRD &= ~(1<<PD3);
 238:	8b 98       	cbi	0x11, 3	; 17
	cli();
 23a:	f8 94       	cli
	GICR |= (1 << INT1);						//enable external interrupt INT1
 23c:	8b b7       	in	r24, 0x3b	; 59
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	8b bf       	out	0x3b, r24	; 59
	MCUCR &= ~(1 << ISC11);
 242:	85 b7       	in	r24, 0x35	; 53
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);	//interrupt on the falling edge
 248:	85 b7       	in	r24, 0x35	; 53
 24a:	8b 7f       	andi	r24, 0xFB	; 251
 24c:	85 bf       	out	0x35, r24	; 53
	sei();									//enable Global Interrupt
 24e:	78 94       	sei
 250:	08 95       	ret

00000252 <can_send_msg>:
}


uint8_t can_send_msg(can_message msg)
{
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	2a 97       	sbiw	r28, 0x0a	; 10
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	09 83       	std	Y+1, r16	; 0x01
 270:	1a 83       	std	Y+2, r17	; 0x02
 272:	2b 83       	std	Y+3, r18	; 0x03
 274:	3c 83       	std	Y+4, r19	; 0x04
 276:	4d 83       	std	Y+5, r20	; 0x05
 278:	5e 83       	std	Y+6, r21	; 0x06
 27a:	6f 83       	std	Y+7, r22	; 0x07
 27c:	78 87       	std	Y+8, r23	; 0x08
 27e:	89 87       	std	Y+9, r24	; 0x09
 280:	9a 87       	std	Y+10, r25	; 0x0a

	//writhe higher id
	can_controller_write(MCP_TXB0SIDH, msg.id);
 282:	60 2f       	mov	r22, r16
 284:	81 e3       	ldi	r24, 0x31	; 49
 286:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
    
	// Define data length of message
	uint8_t data_length = msg.length;
 28a:	ea 80       	ldd	r14, Y+2	; 0x02
	can_controller_write(MCP_TXB0DLC, msg.length);
 28c:	6e 2d       	mov	r22, r14
 28e:	85 e3       	ldi	r24, 0x35	; 53
 290:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg.data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
 294:	ee 20       	and	r14, r14
 296:	91 f0       	breq	.+36     	; 0x2bc <can_send_msg+0x6a>
 298:	8e 01       	movw	r16, r28
 29a:	0d 5f       	subi	r16, 0xFD	; 253
 29c:	1f 4f       	sbci	r17, 0xFF	; 255
 29e:	26 e3       	ldi	r18, 0x36	; 54
 2a0:	e2 0e       	add	r14, r18
 2a2:	0f 2e       	mov	r0, r31
 2a4:	f6 e3       	ldi	r31, 0x36	; 54
 2a6:	ff 2e       	mov	r15, r31
 2a8:	f0 2d       	mov	r31, r0
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
 2aa:	f8 01       	movw	r30, r16
 2ac:	61 91       	ld	r22, Z+
 2ae:	8f 01       	movw	r16, r30
 2b0:	8f 2d       	mov	r24, r15
 2b2:	0e 94 a6 00 	call	0x14c	; 0x14c <can_controller_write>
 2b6:	f3 94       	inc	r15
	uint8_t data_length = msg.length;
	can_controller_write(MCP_TXB0DLC, msg.length);
	
	// Write data bytes to transmit buffer
	uint8_t* data_bytes = msg.data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
 2b8:	fe 10       	cpse	r15, r14
 2ba:	f7 cf       	rjmp	.-18     	; 0x2aa <can_send_msg+0x58>
		can_controller_write(MCP_TXB0Dm + byte, data_bytes[byte]);
	}

	// Request to send message, send if successful
	printf("request to send\n\r");
 2bc:	81 eb       	ldi	r24, 0xB1	; 177
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	9f 93       	push	r25
 2c2:	8f 93       	push	r24
 2c4:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	can_controller_request_to_send();
 2c8:	0e 94 7c 00 	call	0xf8	; 0xf8 <can_controller_request_to_send>
 2cc:	ff ef       	ldi	r31, 0xFF	; 255
 2ce:	2f e7       	ldi	r18, 0x7F	; 127
 2d0:	34 e0       	ldi	r19, 0x04	; 4
 2d2:	f1 50       	subi	r31, 0x01	; 1
 2d4:	20 40       	sbci	r18, 0x00	; 0
 2d6:	30 40       	sbci	r19, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <can_send_msg+0x80>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <can_send_msg+0x8a>
 2dc:	00 00       	nop
	
	_delay_ms(300);
	
	printf("TXCTRL %02x\n\r", can_controller_read(0x30));
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 2e4:	1f 92       	push	r1
 2e6:	8f 93       	push	r24
 2e8:	03 ec       	ldi	r16, 0xC3	; 195
 2ea:	11 e0       	ldi	r17, 0x01	; 1
 2ec:	1f 93       	push	r17
 2ee:	0f 93       	push	r16
 2f0:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	printf("TXCTRL %02x\n\r", can_controller_read(0x30));
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 2fa:	1f 92       	push	r1
 2fc:	8f 93       	push	r24
 2fe:	1f 93       	push	r17
 300:	0f 93       	push	r16
 302:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	printf("MCP_CANINTE %02x\n\r", can_controller_read(MCP_CANINTE)); 
 306:	8b e2       	ldi	r24, 0x2B	; 43
 308:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 30c:	1f 92       	push	r1
 30e:	8f 93       	push	r24
 310:	81 ed       	ldi	r24, 0xD1	; 209
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	printf("CANINTF %02x\n\r", can_controller_read(MCP_CANINTF)); 
 31c:	8c e2       	ldi	r24, 0x2C	; 44
 31e:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 322:	1f 92       	push	r1
 324:	8f 93       	push	r24
 326:	84 ee       	ldi	r24, 0xE4	; 228
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	9f 93       	push	r25
 32c:	8f 93       	push	r24
 32e:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	printf("EFLG %02x\n\r", can_controller_read(MCP_EFLG));
 332:	8d e2       	ldi	r24, 0x2D	; 45
 334:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 338:	1f 92       	push	r1
 33a:	8f 93       	push	r24
 33c:	83 ef       	ldi	r24, 0xF3	; 243
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	9f 93       	push	r25
 342:	8f 93       	push	r24
 344:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	printf("MCP_RXB0CTRL %02x\n\r", can_controller_read(MCP_RXB0CTRL));
 348:	80 e6       	ldi	r24, 0x60	; 96
 34a:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 34e:	1f 92       	push	r1
 350:	8f 93       	push	r24
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	9f 93       	push	r25
 358:	8f 93       	push	r24
 35a:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	
	if ((can_controller_read(MCP_CANINTF) & 0x04) == 4)
 35e:	8c e2       	ldi	r24, 0x2C	; 44
 360:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	82 ff       	sbrs	r24, 2
 370:	05 c0       	rjmp	.+10     	; 0x37c <can_send_msg+0x12a>
	{
		can_controller_bit_modify(MCP_CANINTF, 0x04, 0x00);
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	64 e0       	ldi	r22, 0x04	; 4
 376:	8c e2       	ldi	r24, 0x2C	; 44
 378:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
	}
}
 37c:	2a 96       	adiw	r28, 0x0a	; 10
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	f8 94       	cli
 382:	de bf       	out	0x3e, r29	; 62
 384:	0f be       	out	0x3f, r0	; 63
 386:	cd bf       	out	0x3d, r28	; 61
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	08 95       	ret

00000396 <can_recieve_msg>:


// CALLED WHEN  AN INTERRUPTION OCCURS
can_message can_recieve_msg(uint8_t buffer)
{
 396:	bf 92       	push	r11
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	2a 97       	sbiw	r28, 0x0a	; 10
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	7c 01       	movw	r14, r24
	can_message msg;
	//READ RX BUFFER - save ID on RXBnSIDH to Message.id (2 TIMES)
    uint8_t id_high = can_controller_read(MCP_RXB0SIDH + buffer*16);
 3ba:	16 2f       	mov	r17, r22
 3bc:	12 95       	swap	r17
 3be:	10 7f       	andi	r17, 0xF0	; 240
 3c0:	81 e6       	ldi	r24, 0x61	; 97
 3c2:	81 0f       	add	r24, r17
 3c4:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	uint8_t mask;


	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
 3c8:	85 e6       	ldi	r24, 0x65	; 101
 3ca:	81 0f       	add	r24, r17
 3cc:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	mask = 0x0F;
	msg.length = (data_length & mask);
 3d0:	98 2f       	mov	r25, r24
 3d2:	9f 70       	andi	r25, 0x0F	; 15
 3d4:	b9 2e       	mov	r11, r25

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)	
	for (uint8_t byte = 0; byte < data_length; byte++) {
 3d6:	88 23       	and	r24, r24
 3d8:	99 f0       	breq	.+38     	; 0x400 <can_recieve_msg+0x6a>
 3da:	0f 2e       	mov	r0, r31
 3dc:	f6 e6       	ldi	r31, 0x66	; 102
 3de:	df 2e       	mov	r13, r31
 3e0:	f0 2d       	mov	r31, r0
 3e2:	d1 0e       	add	r13, r17
 3e4:	8e 01       	movw	r16, r28
 3e6:	0d 5f       	subi	r16, 0xFD	; 253
 3e8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ea:	c8 2e       	mov	r12, r24
 3ec:	cd 0c       	add	r12, r13
		msg.data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
 3ee:	8d 2d       	mov	r24, r13
 3f0:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
 3f4:	f8 01       	movw	r30, r16
 3f6:	81 93       	st	Z+, r24
 3f8:	8f 01       	movw	r16, r30
 3fa:	d3 94       	inc	r13
	uint8_t data_length = can_controller_read(MCP_RXB0DLC + buffer*16);
	mask = 0x0F;
	msg.length = (data_length & mask);

	//READ RX BUFFER - save DATA RXBnDm to Message.data (8 TIMES)	
	for (uint8_t byte = 0; byte < data_length; byte++) {
 3fc:	dc 10       	cpse	r13, r12
 3fe:	f7 cf       	rjmp	.-18     	; 0x3ee <can_recieve_msg+0x58>
		msg.data[byte] = can_controller_read(MCP_RXB0Dm + buffer*16 + byte);
    }
	

	return msg;
 400:	ba 82       	std	Y+2, r11	; 0x02
 402:	8a e0       	ldi	r24, 0x0A	; 10
 404:	fe 01       	movw	r30, r28
 406:	31 96       	adiw	r30, 0x01	; 1
 408:	d7 01       	movw	r26, r14
 40a:	01 90       	ld	r0, Z+
 40c:	0d 92       	st	X+, r0
 40e:	8a 95       	dec	r24
 410:	e1 f7       	brne	.-8      	; 0x40a <can_recieve_msg+0x74>
}
 412:	c7 01       	movw	r24, r14
 414:	2a 96       	adiw	r28, 0x0a	; 10
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	bf 90       	pop	r11
 432:	08 95       	ret

00000434 <__vector_2>:
#include "can_controller_driver.h"

#include "util/delay.h"

ISR(INT1_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	2a 97       	sbiw	r28, 0x0a	; 10
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	cd bf       	out	0x3d, r28	; 61
	cli();
 470:	f8 94       	cli
	can_message msg;
	//CHECK WHICH BUFFER RECIEVED MESSAGE
	printf("message INTERRUPTION recieved\n\r");
 472:	83 e1       	ldi	r24, 0x13	; 19
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	9f 93       	push	r25
 478:	8f 93       	push	r24
 47a:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	uint8_t canInt = can_controller_read(MCP_CANINTF);
 47e:	8c e2       	ldi	r24, 0x2C	; 44
 480:	0e 94 6e 00 	call	0xdc	; 0xdc <can_controller_read>
	if ((canInt & MCP_RX0IF) == MCP_RX0IF)
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	80 ff       	sbrs	r24, 0
 48a:	33 c0       	rjmp	.+102    	; 0x4f2 <__vector_2+0xbe>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	8c e2       	ldi	r24, 0x2C	; 44
 492:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
		msg = can_recieve_msg(0);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	ce 01       	movw	r24, r28
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	0e 94 cb 01 	call	0x396	; 0x396 <can_recieve_msg>
 4a0:	ca 80       	ldd	r12, Y+2	; 0x02
		can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	8c e2       	ldi	r24, 0x2C	; 44
 4a8:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
		printf("DATA ON RX0\n\r");
 4ac:	83 e3       	ldi	r24, 0x33	; 51
 4ae:	92 e0       	ldi	r25, 0x02	; 2
 4b0:	9f 93       	push	r25
 4b2:	8f 93       	push	r24
 4b4:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
		for (uint8_t byte = 0; byte < msg.length; byte++) {
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	cc 20       	and	r12, r12
 4be:	09 f4       	brne	.+2      	; 0x4c2 <__vector_2+0x8e>
 4c0:	50 c0       	rjmp	.+160    	; 0x562 <__stack+0x63>
 4c2:	7e 01       	movw	r14, r28
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	e8 0e       	add	r14, r24
 4c8:	f1 1c       	adc	r15, r1
 4ca:	d1 2c       	mov	r13, r1
			printf("%d \n\r", msg.data[byte]);
 4cc:	01 e4       	ldi	r16, 0x41	; 65
 4ce:	12 e0       	ldi	r17, 0x02	; 2
 4d0:	f7 01       	movw	r30, r14
 4d2:	81 91       	ld	r24, Z+
 4d4:	7f 01       	movw	r14, r30
 4d6:	1f 92       	push	r1
 4d8:	8f 93       	push	r24
 4da:	1f 93       	push	r17
 4dc:	0f 93       	push	r16
 4de:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
		msg = can_recieve_msg(0);
		can_controller_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
		printf("DATA ON RX0\n\r");
		for (uint8_t byte = 0; byte < msg.length; byte++) {
 4e2:	d3 94       	inc	r13
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	dc 10       	cpse	r13, r12
 4ee:	f0 cf       	rjmp	.-32     	; 0x4d0 <__vector_2+0x9c>
 4f0:	38 c0       	rjmp	.+112    	; 0x562 <__stack+0x63>
			printf("%d \n\r", msg.data[byte]);
		}
		
		
	}else if ((canInt & MCP_RX1IF) == MCP_RX1IF)
 4f2:	81 ff       	sbrs	r24, 1
 4f4:	2d c0       	rjmp	.+90     	; 0x550 <__stack+0x51>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	62 e0       	ldi	r22, 0x02	; 2
 4fa:	8c e2       	ldi	r24, 0x2C	; 44
 4fc:	0e 94 84 00 	call	0x108	; 0x108 <can_controller_bit_modify>
		msg = can_recieve_msg(1);
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	ce 01       	movw	r24, r28
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	0e 94 cb 01 	call	0x396	; 0x396 <can_recieve_msg>
 50a:	ca 80       	ldd	r12, Y+2	; 0x02
		
		printf("DATA ON RX1\n\r");
 50c:	87 e4       	ldi	r24, 0x47	; 71
 50e:	92 e0       	ldi	r25, 0x02	; 2
 510:	9f 93       	push	r25
 512:	8f 93       	push	r24
 514:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
		for (uint8_t byte = 0; byte < msg.length; byte++) {
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	cc 20       	and	r12, r12
 51e:	09 f1       	breq	.+66     	; 0x562 <__stack+0x63>
 520:	7e 01       	movw	r14, r28
 522:	f3 e0       	ldi	r31, 0x03	; 3
 524:	ef 0e       	add	r14, r31
 526:	f1 1c       	adc	r15, r1
 528:	d1 2c       	mov	r13, r1
			printf("%d \n\r", msg.data[byte]);
 52a:	01 e4       	ldi	r16, 0x41	; 65
 52c:	12 e0       	ldi	r17, 0x02	; 2
 52e:	f7 01       	movw	r30, r14
 530:	81 91       	ld	r24, Z+
 532:	7f 01       	movw	r14, r30
 534:	1f 92       	push	r1
 536:	8f 93       	push	r24
 538:	1f 93       	push	r17
 53a:	0f 93       	push	r16
 53c:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	{
		can_controller_bit_modify(MCP_CANINTF, MCP_RX1IF, 0);
		msg = can_recieve_msg(1);
		
		printf("DATA ON RX1\n\r");
		for (uint8_t byte = 0; byte < msg.length; byte++) {
 540:	d3 94       	inc	r13
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	dc 10       	cpse	r13, r12
 54c:	f0 cf       	rjmp	.-32     	; 0x52e <__stack+0x2f>
 54e:	09 c0       	rjmp	.+18     	; 0x562 <__stack+0x63>
			printf("%d \n\r", msg.data[byte]);
		}
	}else
	{
		printf("No message available on the CAN REX BUFFERs\n\r");
 550:	85 e5       	ldi	r24, 0x55	; 85
 552:	92 e0       	ldi	r25, 0x02	; 2
 554:	9f 93       	push	r25
 556:	8f 93       	push	r24
 558:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
		return;
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	09 c0       	rjmp	.+18     	; 0x574 <__stack+0x75>
	}
	
	printf("Done\n\r");
 562:	83 e8       	ldi	r24, 0x83	; 131
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	9f 93       	push	r25
 568:	8f 93       	push	r24
 56a:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	

	sei();
 56e:	78 94       	sei
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
	// 	for (uint8_t byte = 0; byte < msg.length; byte++) {
	// 		printf("%d \n\r", msg.data[byte]);
	// 	}
}
 574:	2a 96       	adiw	r28, 0x0a	; 10
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	ff 91       	pop	r31
 586:	ef 91       	pop	r30
 588:	bf 91       	pop	r27
 58a:	af 91       	pop	r26
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	7f 91       	pop	r23
 592:	6f 91       	pop	r22
 594:	5f 91       	pop	r21
 596:	4f 91       	pop	r20
 598:	3f 91       	pop	r19
 59a:	2f 91       	pop	r18
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	ff 90       	pop	r15
 5a2:	ef 90       	pop	r14
 5a4:	df 90       	pop	r13
 5a6:	cf 90       	pop	r12
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <can_driver_test>:
	return msg;
}


void can_driver_test()
{
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	2a 97       	sbiw	r28, 0x0a	; 10
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	printf("enter can driver test \n\r");
 5ca:	8a e8       	ldi	r24, 0x8A	; 138
 5cc:	92 e0       	ldi	r25, 0x02	; 2
 5ce:	9f 93       	push	r25
 5d0:	8f 93       	push	r24
 5d2:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	msg.id = 1;
	msg.data[0] = 254;
	msg.data[1] = 78;
	msg.data[2] = 2;
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 3;
	can_send_msg(msg);
 5da:	01 e0       	ldi	r16, 0x01	; 1
 5dc:	13 e0       	ldi	r17, 0x03	; 3
 5de:	2e ef       	ldi	r18, 0xFE	; 254
 5e0:	3e e4       	ldi	r19, 0x4E	; 78
 5e2:	42 e0       	ldi	r20, 0x02	; 2
 5e4:	5e 81       	ldd	r21, Y+6	; 0x06
 5e6:	6f 81       	ldd	r22, Y+7	; 0x07
 5e8:	78 85       	ldd	r23, Y+8	; 0x08
 5ea:	89 85       	ldd	r24, Y+9	; 0x09
 5ec:	9a 85       	ldd	r25, Y+10	; 0x0a
 5ee:	0e 94 29 01 	call	0x252	; 0x252 <can_send_msg>
msg.id = 5;
msg.data[0] = 25;
msg.data[1] = 52;

msg.length = 2;
	can_send_msg(msg);
 5f2:	05 e0       	ldi	r16, 0x05	; 5
 5f4:	12 e0       	ldi	r17, 0x02	; 2
 5f6:	29 e1       	ldi	r18, 0x19	; 25
 5f8:	34 e3       	ldi	r19, 0x34	; 52
 5fa:	4d 81       	ldd	r20, Y+5	; 0x05
 5fc:	5e 81       	ldd	r21, Y+6	; 0x06
 5fe:	6f 81       	ldd	r22, Y+7	; 0x07
 600:	78 85       	ldd	r23, Y+8	; 0x08
 602:	89 85       	ldd	r24, Y+9	; 0x09
 604:	9a 85       	ldd	r25, Y+10	; 0x0a
 606:	0e 94 29 01 	call	0x252	; 0x252 <can_send_msg>
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	2a 96       	adiw	r28, 0x0a	; 10
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	f8 94       	cli
 614:	de bf       	out	0x3e, r29	; 62
 616:	0f be       	out	0x3f, r0	; 63
 618:	cd bf       	out	0x3d, r28	; 61
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	1f 91       	pop	r17
 620:	0f 91       	pop	r16
 622:	08 95       	ret

00000624 <joystick_init>:
static int x_middle_pos;
static int y_middle_pos;

void joystick_init()
{
	x_middle_pos = ADC_read(2);
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
 62c:	90 93 55 03 	sts	0x0355, r25
 630:	80 93 54 03 	sts	0x0354, r24
	y_middle_pos = ADC_read(1);
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
 63c:	90 93 53 03 	sts	0x0353, r25
 640:	80 93 52 03 	sts	0x0352, r24
 644:	08 95       	ret

00000646 <main>:
}

int main(void)
{
	
	USART_Init(MYUBRR);
 646:	8f e1       	ldi	r24, 0x1F	; 31
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 97 03 	call	0x72e	; 0x72e <USART_Init>
	SRAM_init();
 64e:	0e 94 88 03 	call	0x710	; 0x710 <SRAM_init>
	joystick_init();
 652:	0e 94 12 03 	call	0x624	; 0x624 <joystick_init>
	oled_init();
 656:	0e 94 46 03 	call	0x68c	; 0x68c <oled_init>
	spi_init();
 65a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <spi_init>
	//can_controller_init();
	printf("START============================\n\r");
 65e:	88 e0       	ldi	r24, 0x08	; 8
 660:	93 e0       	ldi	r25, 0x03	; 3
 662:	9f 93       	push	r25
 664:	8f 93       	push	r24
 666:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
	can_init();
 66a:	0e 94 08 01 	call	0x210	; 0x210 <can_init>
	
	//oled_test();
	
	//test_joystick();
	//can_controller_test();
	can_driver_test();
 66e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <can_driver_test>

	
	printf("END   ============================\n\r");
 672:	8c e2       	ldi	r24, 0x2C	; 44
 674:	93 e0       	ldi	r25, 0x03	; 3
 676:	9f 93       	push	r25
 678:	8f 93       	push	r24
 67a:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0

	
	

	
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	08 95       	ret

0000068c <oled_init>:


void oled_write_cmd(unsigned char ins_c)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_MEM; // OLED Command
	ext_oled[0] = ins_c;
 68c:	e0 e0       	ldi	r30, 0x00	; 0
 68e:	f0 e1       	ldi	r31, 0x10	; 16
 690:	8e ea       	ldi	r24, 0xAE	; 174
 692:	80 83       	st	Z, r24
 694:	81 ea       	ldi	r24, 0xA1	; 161
 696:	80 83       	st	Z, r24
 698:	8a ed       	ldi	r24, 0xDA	; 218
 69a:	80 83       	st	Z, r24
 69c:	82 e1       	ldi	r24, 0x12	; 18
 69e:	80 83       	st	Z, r24
 6a0:	88 ec       	ldi	r24, 0xC8	; 200
 6a2:	80 83       	st	Z, r24
 6a4:	88 ea       	ldi	r24, 0xA8	; 168
 6a6:	80 83       	st	Z, r24
 6a8:	8f e3       	ldi	r24, 0x3F	; 63
 6aa:	80 83       	st	Z, r24
 6ac:	85 ed       	ldi	r24, 0xD5	; 213
 6ae:	80 83       	st	Z, r24
 6b0:	80 e8       	ldi	r24, 0x80	; 128
 6b2:	80 83       	st	Z, r24
 6b4:	81 e8       	ldi	r24, 0x81	; 129
 6b6:	80 83       	st	Z, r24
 6b8:	80 e5       	ldi	r24, 0x50	; 80
 6ba:	80 83       	st	Z, r24
 6bc:	89 ed       	ldi	r24, 0xD9	; 217
 6be:	80 83       	st	Z, r24
 6c0:	81 e2       	ldi	r24, 0x21	; 33
 6c2:	80 83       	st	Z, r24
 6c4:	80 e2       	ldi	r24, 0x20	; 32
 6c6:	80 83       	st	Z, r24
 6c8:	10 82       	st	Z, r1
 6ca:	8b ed       	ldi	r24, 0xDB	; 219
 6cc:	80 83       	st	Z, r24
 6ce:	80 e3       	ldi	r24, 0x30	; 48
 6d0:	80 83       	st	Z, r24
 6d2:	8d ea       	ldi	r24, 0xAD	; 173
 6d4:	80 83       	st	Z, r24
 6d6:	10 82       	st	Z, r1
 6d8:	84 ea       	ldi	r24, 0xA4	; 164
 6da:	80 83       	st	Z, r24
 6dc:	86 ea       	ldi	r24, 0xA6	; 166
 6de:	80 83       	st	Z, r24
 6e0:	8f ea       	ldi	r24, 0xAF	; 175
 6e2:	80 83       	st	Z, r24
 6e4:	08 95       	ret

000006e6 <SPI_MasterInit>:
 6e6:	80 eb       	ldi	r24, 0xB0	; 176
 6e8:	87 bb       	out	0x17, r24	; 23
 6ea:	be 98       	cbi	0x17, 6	; 23
 6ec:	81 e5       	ldi	r24, 0x51	; 81
 6ee:	8d b9       	out	0x0d, r24	; 13
 6f0:	08 95       	ret

000006f2 <SPI_MasterTransmit>:
 6f2:	8f b9       	out	0x0f, r24	; 15
 6f4:	77 9b       	sbis	0x0e, 7	; 14
 6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <SPI_MasterTransmit+0x2>
 6f8:	08 95       	ret

000006fa <spi_init>:
 6fa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <SPI_MasterInit>
 6fe:	08 95       	ret

00000700 <spi_send>:
 700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_MasterTransmit>
 704:	08 95       	ret

00000706 <spi_read>:
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_MasterTransmit>
 70c:	8f b1       	in	r24, 0x0f	; 15
 70e:	08 95       	ret

00000710 <SRAM_init>:
 710:	85 b7       	in	r24, 0x35	; 53
 712:	80 68       	ori	r24, 0x80	; 128
 714:	85 bf       	out	0x35, r24	; 53
 716:	80 b7       	in	r24, 0x30	; 48
 718:	80 62       	ori	r24, 0x20	; 32
 71a:	80 bf       	out	0x30, r24	; 48
 71c:	08 95       	ret

0000071e <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 71e:	5d 9b       	sbis	0x0b, 5	; 11
 720:	fe cf       	rjmp	.-4      	; 0x71e <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 722:	8c b9       	out	0x0c, r24	; 12
 724:	08 95       	ret

00000726 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 726:	5f 9b       	sbis	0x0b, 7	; 11
 728:	fe cf       	rjmp	.-4      	; 0x726 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
 72a:	8c b1       	in	r24, 0x0c	; 12
}
 72c:	08 95       	ret

0000072e <USART_Init>:
#include "avr/io.h"

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr >> 8);
 72e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 730:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 732:	88 e1       	ldi	r24, 0x18	; 24
 734:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0)|(3 << UCSZ00);
 736:	8e e8       	ldi	r24, 0x8E	; 142
 738:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_Transmit, USART_Receive);
 73a:	63 e9       	ldi	r22, 0x93	; 147
 73c:	73 e0       	ldi	r23, 0x03	; 3
 73e:	8f e8       	ldi	r24, 0x8F	; 143
 740:	93 e0       	ldi	r25, 0x03	; 3
 742:	0e 94 cb 04 	call	0x996	; 0x996 <fdevopen>
 746:	08 95       	ret

00000748 <malloc>:
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	82 30       	cpi	r24, 0x02	; 2
 74e:	91 05       	cpc	r25, r1
 750:	10 f4       	brcc	.+4      	; 0x756 <malloc+0xe>
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	e0 91 58 03 	lds	r30, 0x0358
 75a:	f0 91 59 03 	lds	r31, 0x0359
 75e:	20 e0       	ldi	r18, 0x00	; 0
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	a0 e0       	ldi	r26, 0x00	; 0
 764:	b0 e0       	ldi	r27, 0x00	; 0
 766:	30 97       	sbiw	r30, 0x00	; 0
 768:	39 f1       	breq	.+78     	; 0x7b8 <malloc+0x70>
 76a:	40 81       	ld	r20, Z
 76c:	51 81       	ldd	r21, Z+1	; 0x01
 76e:	48 17       	cp	r20, r24
 770:	59 07       	cpc	r21, r25
 772:	b8 f0       	brcs	.+46     	; 0x7a2 <malloc+0x5a>
 774:	48 17       	cp	r20, r24
 776:	59 07       	cpc	r21, r25
 778:	71 f4       	brne	.+28     	; 0x796 <malloc+0x4e>
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	93 81       	ldd	r25, Z+3	; 0x03
 77e:	10 97       	sbiw	r26, 0x00	; 0
 780:	29 f0       	breq	.+10     	; 0x78c <malloc+0x44>
 782:	13 96       	adiw	r26, 0x03	; 3
 784:	9c 93       	st	X, r25
 786:	8e 93       	st	-X, r24
 788:	12 97       	sbiw	r26, 0x02	; 2
 78a:	2c c0       	rjmp	.+88     	; 0x7e4 <malloc+0x9c>
 78c:	90 93 59 03 	sts	0x0359, r25
 790:	80 93 58 03 	sts	0x0358, r24
 794:	27 c0       	rjmp	.+78     	; 0x7e4 <malloc+0x9c>
 796:	21 15       	cp	r18, r1
 798:	31 05       	cpc	r19, r1
 79a:	31 f0       	breq	.+12     	; 0x7a8 <malloc+0x60>
 79c:	42 17       	cp	r20, r18
 79e:	53 07       	cpc	r21, r19
 7a0:	18 f0       	brcs	.+6      	; 0x7a8 <malloc+0x60>
 7a2:	a9 01       	movw	r20, r18
 7a4:	db 01       	movw	r26, r22
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <malloc+0x62>
 7a8:	ef 01       	movw	r28, r30
 7aa:	9a 01       	movw	r18, r20
 7ac:	bd 01       	movw	r22, r26
 7ae:	df 01       	movw	r26, r30
 7b0:	02 80       	ldd	r0, Z+2	; 0x02
 7b2:	f3 81       	ldd	r31, Z+3	; 0x03
 7b4:	e0 2d       	mov	r30, r0
 7b6:	d7 cf       	rjmp	.-82     	; 0x766 <malloc+0x1e>
 7b8:	21 15       	cp	r18, r1
 7ba:	31 05       	cpc	r19, r1
 7bc:	f9 f0       	breq	.+62     	; 0x7fc <malloc+0xb4>
 7be:	28 1b       	sub	r18, r24
 7c0:	39 0b       	sbc	r19, r25
 7c2:	24 30       	cpi	r18, 0x04	; 4
 7c4:	31 05       	cpc	r19, r1
 7c6:	80 f4       	brcc	.+32     	; 0x7e8 <malloc+0xa0>
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	9b 81       	ldd	r25, Y+3	; 0x03
 7cc:	61 15       	cp	r22, r1
 7ce:	71 05       	cpc	r23, r1
 7d0:	21 f0       	breq	.+8      	; 0x7da <malloc+0x92>
 7d2:	fb 01       	movw	r30, r22
 7d4:	93 83       	std	Z+3, r25	; 0x03
 7d6:	82 83       	std	Z+2, r24	; 0x02
 7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <malloc+0x9a>
 7da:	90 93 59 03 	sts	0x0359, r25
 7de:	80 93 58 03 	sts	0x0358, r24
 7e2:	fe 01       	movw	r30, r28
 7e4:	32 96       	adiw	r30, 0x02	; 2
 7e6:	44 c0       	rjmp	.+136    	; 0x870 <malloc+0x128>
 7e8:	fe 01       	movw	r30, r28
 7ea:	e2 0f       	add	r30, r18
 7ec:	f3 1f       	adc	r31, r19
 7ee:	81 93       	st	Z+, r24
 7f0:	91 93       	st	Z+, r25
 7f2:	22 50       	subi	r18, 0x02	; 2
 7f4:	31 09       	sbc	r19, r1
 7f6:	39 83       	std	Y+1, r19	; 0x01
 7f8:	28 83       	st	Y, r18
 7fa:	3a c0       	rjmp	.+116    	; 0x870 <malloc+0x128>
 7fc:	20 91 56 03 	lds	r18, 0x0356
 800:	30 91 57 03 	lds	r19, 0x0357
 804:	23 2b       	or	r18, r19
 806:	41 f4       	brne	.+16     	; 0x818 <malloc+0xd0>
 808:	20 91 02 01 	lds	r18, 0x0102
 80c:	30 91 03 01 	lds	r19, 0x0103
 810:	30 93 57 03 	sts	0x0357, r19
 814:	20 93 56 03 	sts	0x0356, r18
 818:	20 91 00 01 	lds	r18, 0x0100
 81c:	30 91 01 01 	lds	r19, 0x0101
 820:	21 15       	cp	r18, r1
 822:	31 05       	cpc	r19, r1
 824:	41 f4       	brne	.+16     	; 0x836 <malloc+0xee>
 826:	2d b7       	in	r18, 0x3d	; 61
 828:	3e b7       	in	r19, 0x3e	; 62
 82a:	40 91 04 01 	lds	r20, 0x0104
 82e:	50 91 05 01 	lds	r21, 0x0105
 832:	24 1b       	sub	r18, r20
 834:	35 0b       	sbc	r19, r21
 836:	e0 91 56 03 	lds	r30, 0x0356
 83a:	f0 91 57 03 	lds	r31, 0x0357
 83e:	e2 17       	cp	r30, r18
 840:	f3 07       	cpc	r31, r19
 842:	a0 f4       	brcc	.+40     	; 0x86c <malloc+0x124>
 844:	2e 1b       	sub	r18, r30
 846:	3f 0b       	sbc	r19, r31
 848:	28 17       	cp	r18, r24
 84a:	39 07       	cpc	r19, r25
 84c:	78 f0       	brcs	.+30     	; 0x86c <malloc+0x124>
 84e:	ac 01       	movw	r20, r24
 850:	4e 5f       	subi	r20, 0xFE	; 254
 852:	5f 4f       	sbci	r21, 0xFF	; 255
 854:	24 17       	cp	r18, r20
 856:	35 07       	cpc	r19, r21
 858:	48 f0       	brcs	.+18     	; 0x86c <malloc+0x124>
 85a:	4e 0f       	add	r20, r30
 85c:	5f 1f       	adc	r21, r31
 85e:	50 93 57 03 	sts	0x0357, r21
 862:	40 93 56 03 	sts	0x0356, r20
 866:	81 93       	st	Z+, r24
 868:	91 93       	st	Z+, r25
 86a:	02 c0       	rjmp	.+4      	; 0x870 <malloc+0x128>
 86c:	e0 e0       	ldi	r30, 0x00	; 0
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	cf 01       	movw	r24, r30
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	08 95       	ret

00000878 <free>:
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	00 97       	sbiw	r24, 0x00	; 0
 87e:	09 f4       	brne	.+2      	; 0x882 <free+0xa>
 880:	87 c0       	rjmp	.+270    	; 0x990 <free+0x118>
 882:	fc 01       	movw	r30, r24
 884:	32 97       	sbiw	r30, 0x02	; 2
 886:	13 82       	std	Z+3, r1	; 0x03
 888:	12 82       	std	Z+2, r1	; 0x02
 88a:	c0 91 58 03 	lds	r28, 0x0358
 88e:	d0 91 59 03 	lds	r29, 0x0359
 892:	20 97       	sbiw	r28, 0x00	; 0
 894:	81 f4       	brne	.+32     	; 0x8b6 <free+0x3e>
 896:	20 81       	ld	r18, Z
 898:	31 81       	ldd	r19, Z+1	; 0x01
 89a:	28 0f       	add	r18, r24
 89c:	39 1f       	adc	r19, r25
 89e:	80 91 56 03 	lds	r24, 0x0356
 8a2:	90 91 57 03 	lds	r25, 0x0357
 8a6:	82 17       	cp	r24, r18
 8a8:	93 07       	cpc	r25, r19
 8aa:	79 f5       	brne	.+94     	; 0x90a <free+0x92>
 8ac:	f0 93 57 03 	sts	0x0357, r31
 8b0:	e0 93 56 03 	sts	0x0356, r30
 8b4:	6d c0       	rjmp	.+218    	; 0x990 <free+0x118>
 8b6:	de 01       	movw	r26, r28
 8b8:	20 e0       	ldi	r18, 0x00	; 0
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	ae 17       	cp	r26, r30
 8be:	bf 07       	cpc	r27, r31
 8c0:	50 f4       	brcc	.+20     	; 0x8d6 <free+0x5e>
 8c2:	12 96       	adiw	r26, 0x02	; 2
 8c4:	4d 91       	ld	r20, X+
 8c6:	5c 91       	ld	r21, X
 8c8:	13 97       	sbiw	r26, 0x03	; 3
 8ca:	9d 01       	movw	r18, r26
 8cc:	41 15       	cp	r20, r1
 8ce:	51 05       	cpc	r21, r1
 8d0:	09 f1       	breq	.+66     	; 0x914 <free+0x9c>
 8d2:	da 01       	movw	r26, r20
 8d4:	f3 cf       	rjmp	.-26     	; 0x8bc <free+0x44>
 8d6:	b3 83       	std	Z+3, r27	; 0x03
 8d8:	a2 83       	std	Z+2, r26	; 0x02
 8da:	40 81       	ld	r20, Z
 8dc:	51 81       	ldd	r21, Z+1	; 0x01
 8de:	84 0f       	add	r24, r20
 8e0:	95 1f       	adc	r25, r21
 8e2:	8a 17       	cp	r24, r26
 8e4:	9b 07       	cpc	r25, r27
 8e6:	71 f4       	brne	.+28     	; 0x904 <free+0x8c>
 8e8:	8d 91       	ld	r24, X+
 8ea:	9c 91       	ld	r25, X
 8ec:	11 97       	sbiw	r26, 0x01	; 1
 8ee:	84 0f       	add	r24, r20
 8f0:	95 1f       	adc	r25, r21
 8f2:	02 96       	adiw	r24, 0x02	; 2
 8f4:	91 83       	std	Z+1, r25	; 0x01
 8f6:	80 83       	st	Z, r24
 8f8:	12 96       	adiw	r26, 0x02	; 2
 8fa:	8d 91       	ld	r24, X+
 8fc:	9c 91       	ld	r25, X
 8fe:	13 97       	sbiw	r26, 0x03	; 3
 900:	93 83       	std	Z+3, r25	; 0x03
 902:	82 83       	std	Z+2, r24	; 0x02
 904:	21 15       	cp	r18, r1
 906:	31 05       	cpc	r19, r1
 908:	29 f4       	brne	.+10     	; 0x914 <free+0x9c>
 90a:	f0 93 59 03 	sts	0x0359, r31
 90e:	e0 93 58 03 	sts	0x0358, r30
 912:	3e c0       	rjmp	.+124    	; 0x990 <free+0x118>
 914:	d9 01       	movw	r26, r18
 916:	13 96       	adiw	r26, 0x03	; 3
 918:	fc 93       	st	X, r31
 91a:	ee 93       	st	-X, r30
 91c:	12 97       	sbiw	r26, 0x02	; 2
 91e:	4d 91       	ld	r20, X+
 920:	5d 91       	ld	r21, X+
 922:	a4 0f       	add	r26, r20
 924:	b5 1f       	adc	r27, r21
 926:	ea 17       	cp	r30, r26
 928:	fb 07       	cpc	r31, r27
 92a:	79 f4       	brne	.+30     	; 0x94a <free+0xd2>
 92c:	80 81       	ld	r24, Z
 92e:	91 81       	ldd	r25, Z+1	; 0x01
 930:	84 0f       	add	r24, r20
 932:	95 1f       	adc	r25, r21
 934:	02 96       	adiw	r24, 0x02	; 2
 936:	d9 01       	movw	r26, r18
 938:	11 96       	adiw	r26, 0x01	; 1
 93a:	9c 93       	st	X, r25
 93c:	8e 93       	st	-X, r24
 93e:	82 81       	ldd	r24, Z+2	; 0x02
 940:	93 81       	ldd	r25, Z+3	; 0x03
 942:	13 96       	adiw	r26, 0x03	; 3
 944:	9c 93       	st	X, r25
 946:	8e 93       	st	-X, r24
 948:	12 97       	sbiw	r26, 0x02	; 2
 94a:	e0 e0       	ldi	r30, 0x00	; 0
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	8a 81       	ldd	r24, Y+2	; 0x02
 950:	9b 81       	ldd	r25, Y+3	; 0x03
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	19 f0       	breq	.+6      	; 0x95c <free+0xe4>
 956:	fe 01       	movw	r30, r28
 958:	ec 01       	movw	r28, r24
 95a:	f9 cf       	rjmp	.-14     	; 0x94e <free+0xd6>
 95c:	ce 01       	movw	r24, r28
 95e:	02 96       	adiw	r24, 0x02	; 2
 960:	28 81       	ld	r18, Y
 962:	39 81       	ldd	r19, Y+1	; 0x01
 964:	82 0f       	add	r24, r18
 966:	93 1f       	adc	r25, r19
 968:	20 91 56 03 	lds	r18, 0x0356
 96c:	30 91 57 03 	lds	r19, 0x0357
 970:	28 17       	cp	r18, r24
 972:	39 07       	cpc	r19, r25
 974:	69 f4       	brne	.+26     	; 0x990 <free+0x118>
 976:	30 97       	sbiw	r30, 0x00	; 0
 978:	29 f4       	brne	.+10     	; 0x984 <free+0x10c>
 97a:	10 92 59 03 	sts	0x0359, r1
 97e:	10 92 58 03 	sts	0x0358, r1
 982:	02 c0       	rjmp	.+4      	; 0x988 <free+0x110>
 984:	13 82       	std	Z+3, r1	; 0x03
 986:	12 82       	std	Z+2, r1	; 0x02
 988:	d0 93 57 03 	sts	0x0357, r29
 98c:	c0 93 56 03 	sts	0x0356, r28
 990:	df 91       	pop	r29
 992:	cf 91       	pop	r28
 994:	08 95       	ret

00000996 <fdevopen>:
 996:	0f 93       	push	r16
 998:	1f 93       	push	r17
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	ec 01       	movw	r28, r24
 9a0:	8b 01       	movw	r16, r22
 9a2:	00 97       	sbiw	r24, 0x00	; 0
 9a4:	31 f4       	brne	.+12     	; 0x9b2 <fdevopen+0x1c>
 9a6:	61 15       	cp	r22, r1
 9a8:	71 05       	cpc	r23, r1
 9aa:	19 f4       	brne	.+6      	; 0x9b2 <fdevopen+0x1c>
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	38 c0       	rjmp	.+112    	; 0xa22 <fdevopen+0x8c>
 9b2:	6e e0       	ldi	r22, 0x0E	; 14
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <calloc>
 9be:	fc 01       	movw	r30, r24
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	a1 f3       	breq	.-24     	; 0x9ac <fdevopen+0x16>
 9c4:	80 e8       	ldi	r24, 0x80	; 128
 9c6:	83 83       	std	Z+3, r24	; 0x03
 9c8:	01 15       	cp	r16, r1
 9ca:	11 05       	cpc	r17, r1
 9cc:	71 f0       	breq	.+28     	; 0x9ea <fdevopen+0x54>
 9ce:	13 87       	std	Z+11, r17	; 0x0b
 9d0:	02 87       	std	Z+10, r16	; 0x0a
 9d2:	81 e8       	ldi	r24, 0x81	; 129
 9d4:	83 83       	std	Z+3, r24	; 0x03
 9d6:	80 91 5a 03 	lds	r24, 0x035A
 9da:	90 91 5b 03 	lds	r25, 0x035B
 9de:	89 2b       	or	r24, r25
 9e0:	21 f4       	brne	.+8      	; 0x9ea <fdevopen+0x54>
 9e2:	f0 93 5b 03 	sts	0x035B, r31
 9e6:	e0 93 5a 03 	sts	0x035A, r30
 9ea:	20 97       	sbiw	r28, 0x00	; 0
 9ec:	c9 f0       	breq	.+50     	; 0xa20 <fdevopen+0x8a>
 9ee:	d1 87       	std	Z+9, r29	; 0x09
 9f0:	c0 87       	std	Z+8, r28	; 0x08
 9f2:	83 81       	ldd	r24, Z+3	; 0x03
 9f4:	82 60       	ori	r24, 0x02	; 2
 9f6:	83 83       	std	Z+3, r24	; 0x03
 9f8:	80 91 5c 03 	lds	r24, 0x035C
 9fc:	90 91 5d 03 	lds	r25, 0x035D
 a00:	89 2b       	or	r24, r25
 a02:	71 f4       	brne	.+28     	; 0xa20 <fdevopen+0x8a>
 a04:	f0 93 5d 03 	sts	0x035D, r31
 a08:	e0 93 5c 03 	sts	0x035C, r30
 a0c:	80 91 5e 03 	lds	r24, 0x035E
 a10:	90 91 5f 03 	lds	r25, 0x035F
 a14:	89 2b       	or	r24, r25
 a16:	21 f4       	brne	.+8      	; 0xa20 <fdevopen+0x8a>
 a18:	f0 93 5f 03 	sts	0x035F, r31
 a1c:	e0 93 5e 03 	sts	0x035E, r30
 a20:	cf 01       	movw	r24, r30
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	08 95       	ret

00000a2c <printf>:
 a2c:	a0 e0       	ldi	r26, 0x00	; 0
 a2e:	b0 e0       	ldi	r27, 0x00	; 0
 a30:	ec e1       	ldi	r30, 0x1C	; 28
 a32:	f5 e0       	ldi	r31, 0x05	; 5
 a34:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__prologue_saves__+0x20>
 a38:	fe 01       	movw	r30, r28
 a3a:	35 96       	adiw	r30, 0x05	; 5
 a3c:	61 91       	ld	r22, Z+
 a3e:	71 91       	ld	r23, Z+
 a40:	af 01       	movw	r20, r30
 a42:	80 91 5c 03 	lds	r24, 0x035C
 a46:	90 91 5d 03 	lds	r25, 0x035D
 a4a:	0e 94 2a 05 	call	0xa54	; 0xa54 <vfprintf>
 a4e:	e2 e0       	ldi	r30, 0x02	; 2
 a50:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__epilogue_restores__+0x20>

00000a54 <vfprintf>:
 a54:	ac e0       	ldi	r26, 0x0C	; 12
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	e0 e3       	ldi	r30, 0x30	; 48
 a5a:	f5 e0       	ldi	r31, 0x05	; 5
 a5c:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__prologue_saves__>
 a60:	7c 01       	movw	r14, r24
 a62:	6b 01       	movw	r12, r22
 a64:	8a 01       	movw	r16, r20
 a66:	fc 01       	movw	r30, r24
 a68:	17 82       	std	Z+7, r1	; 0x07
 a6a:	16 82       	std	Z+6, r1	; 0x06
 a6c:	83 81       	ldd	r24, Z+3	; 0x03
 a6e:	81 ff       	sbrs	r24, 1
 a70:	bd c1       	rjmp	.+890    	; 0xdec <vfprintf+0x398>
 a72:	ce 01       	movw	r24, r28
 a74:	01 96       	adiw	r24, 0x01	; 1
 a76:	4c 01       	movw	r8, r24
 a78:	f7 01       	movw	r30, r14
 a7a:	93 81       	ldd	r25, Z+3	; 0x03
 a7c:	f6 01       	movw	r30, r12
 a7e:	93 fd       	sbrc	r25, 3
 a80:	85 91       	lpm	r24, Z+
 a82:	93 ff       	sbrs	r25, 3
 a84:	81 91       	ld	r24, Z+
 a86:	6f 01       	movw	r12, r30
 a88:	88 23       	and	r24, r24
 a8a:	09 f4       	brne	.+2      	; 0xa8e <vfprintf+0x3a>
 a8c:	ab c1       	rjmp	.+854    	; 0xde4 <vfprintf+0x390>
 a8e:	85 32       	cpi	r24, 0x25	; 37
 a90:	39 f4       	brne	.+14     	; 0xaa0 <vfprintf+0x4c>
 a92:	93 fd       	sbrc	r25, 3
 a94:	85 91       	lpm	r24, Z+
 a96:	93 ff       	sbrs	r25, 3
 a98:	81 91       	ld	r24, Z+
 a9a:	6f 01       	movw	r12, r30
 a9c:	85 32       	cpi	r24, 0x25	; 37
 a9e:	29 f4       	brne	.+10     	; 0xaaa <vfprintf+0x56>
 aa0:	b7 01       	movw	r22, r14
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 35 07 	call	0xe6a	; 0xe6a <fputc>
 aa8:	e7 cf       	rjmp	.-50     	; 0xa78 <vfprintf+0x24>
 aaa:	51 2c       	mov	r5, r1
 aac:	31 2c       	mov	r3, r1
 aae:	20 e0       	ldi	r18, 0x00	; 0
 ab0:	20 32       	cpi	r18, 0x20	; 32
 ab2:	a0 f4       	brcc	.+40     	; 0xadc <vfprintf+0x88>
 ab4:	8b 32       	cpi	r24, 0x2B	; 43
 ab6:	69 f0       	breq	.+26     	; 0xad2 <vfprintf+0x7e>
 ab8:	30 f4       	brcc	.+12     	; 0xac6 <vfprintf+0x72>
 aba:	80 32       	cpi	r24, 0x20	; 32
 abc:	59 f0       	breq	.+22     	; 0xad4 <vfprintf+0x80>
 abe:	83 32       	cpi	r24, 0x23	; 35
 ac0:	69 f4       	brne	.+26     	; 0xadc <vfprintf+0x88>
 ac2:	20 61       	ori	r18, 0x10	; 16
 ac4:	2c c0       	rjmp	.+88     	; 0xb1e <vfprintf+0xca>
 ac6:	8d 32       	cpi	r24, 0x2D	; 45
 ac8:	39 f0       	breq	.+14     	; 0xad8 <vfprintf+0x84>
 aca:	80 33       	cpi	r24, 0x30	; 48
 acc:	39 f4       	brne	.+14     	; 0xadc <vfprintf+0x88>
 ace:	21 60       	ori	r18, 0x01	; 1
 ad0:	26 c0       	rjmp	.+76     	; 0xb1e <vfprintf+0xca>
 ad2:	22 60       	ori	r18, 0x02	; 2
 ad4:	24 60       	ori	r18, 0x04	; 4
 ad6:	23 c0       	rjmp	.+70     	; 0xb1e <vfprintf+0xca>
 ad8:	28 60       	ori	r18, 0x08	; 8
 ada:	21 c0       	rjmp	.+66     	; 0xb1e <vfprintf+0xca>
 adc:	27 fd       	sbrc	r18, 7
 ade:	27 c0       	rjmp	.+78     	; 0xb2e <vfprintf+0xda>
 ae0:	30 ed       	ldi	r19, 0xD0	; 208
 ae2:	38 0f       	add	r19, r24
 ae4:	3a 30       	cpi	r19, 0x0A	; 10
 ae6:	78 f4       	brcc	.+30     	; 0xb06 <vfprintf+0xb2>
 ae8:	26 ff       	sbrs	r18, 6
 aea:	06 c0       	rjmp	.+12     	; 0xaf8 <vfprintf+0xa4>
 aec:	fa e0       	ldi	r31, 0x0A	; 10
 aee:	5f 9e       	mul	r5, r31
 af0:	30 0d       	add	r19, r0
 af2:	11 24       	eor	r1, r1
 af4:	53 2e       	mov	r5, r19
 af6:	13 c0       	rjmp	.+38     	; 0xb1e <vfprintf+0xca>
 af8:	8a e0       	ldi	r24, 0x0A	; 10
 afa:	38 9e       	mul	r3, r24
 afc:	30 0d       	add	r19, r0
 afe:	11 24       	eor	r1, r1
 b00:	33 2e       	mov	r3, r19
 b02:	20 62       	ori	r18, 0x20	; 32
 b04:	0c c0       	rjmp	.+24     	; 0xb1e <vfprintf+0xca>
 b06:	8e 32       	cpi	r24, 0x2E	; 46
 b08:	21 f4       	brne	.+8      	; 0xb12 <vfprintf+0xbe>
 b0a:	26 fd       	sbrc	r18, 6
 b0c:	6b c1       	rjmp	.+726    	; 0xde4 <vfprintf+0x390>
 b0e:	20 64       	ori	r18, 0x40	; 64
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <vfprintf+0xca>
 b12:	8c 36       	cpi	r24, 0x6C	; 108
 b14:	11 f4       	brne	.+4      	; 0xb1a <vfprintf+0xc6>
 b16:	20 68       	ori	r18, 0x80	; 128
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <vfprintf+0xca>
 b1a:	88 36       	cpi	r24, 0x68	; 104
 b1c:	41 f4       	brne	.+16     	; 0xb2e <vfprintf+0xda>
 b1e:	f6 01       	movw	r30, r12
 b20:	93 fd       	sbrc	r25, 3
 b22:	85 91       	lpm	r24, Z+
 b24:	93 ff       	sbrs	r25, 3
 b26:	81 91       	ld	r24, Z+
 b28:	6f 01       	movw	r12, r30
 b2a:	81 11       	cpse	r24, r1
 b2c:	c1 cf       	rjmp	.-126    	; 0xab0 <vfprintf+0x5c>
 b2e:	98 2f       	mov	r25, r24
 b30:	9f 7d       	andi	r25, 0xDF	; 223
 b32:	95 54       	subi	r25, 0x45	; 69
 b34:	93 30       	cpi	r25, 0x03	; 3
 b36:	28 f4       	brcc	.+10     	; 0xb42 <vfprintf+0xee>
 b38:	0c 5f       	subi	r16, 0xFC	; 252
 b3a:	1f 4f       	sbci	r17, 0xFF	; 255
 b3c:	ff e3       	ldi	r31, 0x3F	; 63
 b3e:	f9 83       	std	Y+1, r31	; 0x01
 b40:	0d c0       	rjmp	.+26     	; 0xb5c <vfprintf+0x108>
 b42:	83 36       	cpi	r24, 0x63	; 99
 b44:	31 f0       	breq	.+12     	; 0xb52 <vfprintf+0xfe>
 b46:	83 37       	cpi	r24, 0x73	; 115
 b48:	71 f0       	breq	.+28     	; 0xb66 <vfprintf+0x112>
 b4a:	83 35       	cpi	r24, 0x53	; 83
 b4c:	09 f0       	breq	.+2      	; 0xb50 <vfprintf+0xfc>
 b4e:	5b c0       	rjmp	.+182    	; 0xc06 <vfprintf+0x1b2>
 b50:	22 c0       	rjmp	.+68     	; 0xb96 <vfprintf+0x142>
 b52:	f8 01       	movw	r30, r16
 b54:	80 81       	ld	r24, Z
 b56:	89 83       	std	Y+1, r24	; 0x01
 b58:	0e 5f       	subi	r16, 0xFE	; 254
 b5a:	1f 4f       	sbci	r17, 0xFF	; 255
 b5c:	44 24       	eor	r4, r4
 b5e:	43 94       	inc	r4
 b60:	51 2c       	mov	r5, r1
 b62:	54 01       	movw	r10, r8
 b64:	15 c0       	rjmp	.+42     	; 0xb90 <vfprintf+0x13c>
 b66:	38 01       	movw	r6, r16
 b68:	f2 e0       	ldi	r31, 0x02	; 2
 b6a:	6f 0e       	add	r6, r31
 b6c:	71 1c       	adc	r7, r1
 b6e:	f8 01       	movw	r30, r16
 b70:	a0 80       	ld	r10, Z
 b72:	b1 80       	ldd	r11, Z+1	; 0x01
 b74:	26 ff       	sbrs	r18, 6
 b76:	03 c0       	rjmp	.+6      	; 0xb7e <vfprintf+0x12a>
 b78:	65 2d       	mov	r22, r5
 b7a:	70 e0       	ldi	r23, 0x00	; 0
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <vfprintf+0x12e>
 b7e:	6f ef       	ldi	r22, 0xFF	; 255
 b80:	7f ef       	ldi	r23, 0xFF	; 255
 b82:	c5 01       	movw	r24, r10
 b84:	2c 87       	std	Y+12, r18	; 0x0c
 b86:	0e 94 2a 07 	call	0xe54	; 0xe54 <strnlen>
 b8a:	2c 01       	movw	r4, r24
 b8c:	83 01       	movw	r16, r6
 b8e:	2c 85       	ldd	r18, Y+12	; 0x0c
 b90:	2f 77       	andi	r18, 0x7F	; 127
 b92:	22 2e       	mov	r2, r18
 b94:	17 c0       	rjmp	.+46     	; 0xbc4 <vfprintf+0x170>
 b96:	38 01       	movw	r6, r16
 b98:	f2 e0       	ldi	r31, 0x02	; 2
 b9a:	6f 0e       	add	r6, r31
 b9c:	71 1c       	adc	r7, r1
 b9e:	f8 01       	movw	r30, r16
 ba0:	a0 80       	ld	r10, Z
 ba2:	b1 80       	ldd	r11, Z+1	; 0x01
 ba4:	26 ff       	sbrs	r18, 6
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <vfprintf+0x15a>
 ba8:	65 2d       	mov	r22, r5
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <vfprintf+0x15e>
 bae:	6f ef       	ldi	r22, 0xFF	; 255
 bb0:	7f ef       	ldi	r23, 0xFF	; 255
 bb2:	c5 01       	movw	r24, r10
 bb4:	2c 87       	std	Y+12, r18	; 0x0c
 bb6:	0e 94 18 07 	call	0xe30	; 0xe30 <strnlen_P>
 bba:	2c 01       	movw	r4, r24
 bbc:	2c 85       	ldd	r18, Y+12	; 0x0c
 bbe:	20 68       	ori	r18, 0x80	; 128
 bc0:	22 2e       	mov	r2, r18
 bc2:	83 01       	movw	r16, r6
 bc4:	23 fc       	sbrc	r2, 3
 bc6:	1b c0       	rjmp	.+54     	; 0xbfe <vfprintf+0x1aa>
 bc8:	83 2d       	mov	r24, r3
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	48 16       	cp	r4, r24
 bce:	59 06       	cpc	r5, r25
 bd0:	b0 f4       	brcc	.+44     	; 0xbfe <vfprintf+0x1aa>
 bd2:	b7 01       	movw	r22, r14
 bd4:	80 e2       	ldi	r24, 0x20	; 32
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	0e 94 35 07 	call	0xe6a	; 0xe6a <fputc>
 bdc:	3a 94       	dec	r3
 bde:	f4 cf       	rjmp	.-24     	; 0xbc8 <vfprintf+0x174>
 be0:	f5 01       	movw	r30, r10
 be2:	27 fc       	sbrc	r2, 7
 be4:	85 91       	lpm	r24, Z+
 be6:	27 fe       	sbrs	r2, 7
 be8:	81 91       	ld	r24, Z+
 bea:	5f 01       	movw	r10, r30
 bec:	b7 01       	movw	r22, r14
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	0e 94 35 07 	call	0xe6a	; 0xe6a <fputc>
 bf4:	31 10       	cpse	r3, r1
 bf6:	3a 94       	dec	r3
 bf8:	f1 e0       	ldi	r31, 0x01	; 1
 bfa:	4f 1a       	sub	r4, r31
 bfc:	51 08       	sbc	r5, r1
 bfe:	41 14       	cp	r4, r1
 c00:	51 04       	cpc	r5, r1
 c02:	71 f7       	brne	.-36     	; 0xbe0 <vfprintf+0x18c>
 c04:	e5 c0       	rjmp	.+458    	; 0xdd0 <vfprintf+0x37c>
 c06:	84 36       	cpi	r24, 0x64	; 100
 c08:	11 f0       	breq	.+4      	; 0xc0e <vfprintf+0x1ba>
 c0a:	89 36       	cpi	r24, 0x69	; 105
 c0c:	39 f5       	brne	.+78     	; 0xc5c <vfprintf+0x208>
 c0e:	f8 01       	movw	r30, r16
 c10:	27 ff       	sbrs	r18, 7
 c12:	07 c0       	rjmp	.+14     	; 0xc22 <vfprintf+0x1ce>
 c14:	60 81       	ld	r22, Z
 c16:	71 81       	ldd	r23, Z+1	; 0x01
 c18:	82 81       	ldd	r24, Z+2	; 0x02
 c1a:	93 81       	ldd	r25, Z+3	; 0x03
 c1c:	0c 5f       	subi	r16, 0xFC	; 252
 c1e:	1f 4f       	sbci	r17, 0xFF	; 255
 c20:	08 c0       	rjmp	.+16     	; 0xc32 <vfprintf+0x1de>
 c22:	60 81       	ld	r22, Z
 c24:	71 81       	ldd	r23, Z+1	; 0x01
 c26:	88 27       	eor	r24, r24
 c28:	77 fd       	sbrc	r23, 7
 c2a:	80 95       	com	r24
 c2c:	98 2f       	mov	r25, r24
 c2e:	0e 5f       	subi	r16, 0xFE	; 254
 c30:	1f 4f       	sbci	r17, 0xFF	; 255
 c32:	2f 76       	andi	r18, 0x6F	; 111
 c34:	b2 2e       	mov	r11, r18
 c36:	97 ff       	sbrs	r25, 7
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <vfprintf+0x1f8>
 c3a:	90 95       	com	r25
 c3c:	80 95       	com	r24
 c3e:	70 95       	com	r23
 c40:	61 95       	neg	r22
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	20 68       	ori	r18, 0x80	; 128
 c4a:	b2 2e       	mov	r11, r18
 c4c:	2a e0       	ldi	r18, 0x0A	; 10
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	a4 01       	movw	r20, r8
 c52:	0e 94 67 07 	call	0xece	; 0xece <__ultoa_invert>
 c56:	a8 2e       	mov	r10, r24
 c58:	a8 18       	sub	r10, r8
 c5a:	44 c0       	rjmp	.+136    	; 0xce4 <vfprintf+0x290>
 c5c:	85 37       	cpi	r24, 0x75	; 117
 c5e:	29 f4       	brne	.+10     	; 0xc6a <vfprintf+0x216>
 c60:	2f 7e       	andi	r18, 0xEF	; 239
 c62:	b2 2e       	mov	r11, r18
 c64:	2a e0       	ldi	r18, 0x0A	; 10
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	25 c0       	rjmp	.+74     	; 0xcb4 <vfprintf+0x260>
 c6a:	f2 2f       	mov	r31, r18
 c6c:	f9 7f       	andi	r31, 0xF9	; 249
 c6e:	bf 2e       	mov	r11, r31
 c70:	8f 36       	cpi	r24, 0x6F	; 111
 c72:	c1 f0       	breq	.+48     	; 0xca4 <vfprintf+0x250>
 c74:	18 f4       	brcc	.+6      	; 0xc7c <vfprintf+0x228>
 c76:	88 35       	cpi	r24, 0x58	; 88
 c78:	79 f0       	breq	.+30     	; 0xc98 <vfprintf+0x244>
 c7a:	b4 c0       	rjmp	.+360    	; 0xde4 <vfprintf+0x390>
 c7c:	80 37       	cpi	r24, 0x70	; 112
 c7e:	19 f0       	breq	.+6      	; 0xc86 <vfprintf+0x232>
 c80:	88 37       	cpi	r24, 0x78	; 120
 c82:	21 f0       	breq	.+8      	; 0xc8c <vfprintf+0x238>
 c84:	af c0       	rjmp	.+350    	; 0xde4 <vfprintf+0x390>
 c86:	2f 2f       	mov	r18, r31
 c88:	20 61       	ori	r18, 0x10	; 16
 c8a:	b2 2e       	mov	r11, r18
 c8c:	b4 fe       	sbrs	r11, 4
 c8e:	0d c0       	rjmp	.+26     	; 0xcaa <vfprintf+0x256>
 c90:	8b 2d       	mov	r24, r11
 c92:	84 60       	ori	r24, 0x04	; 4
 c94:	b8 2e       	mov	r11, r24
 c96:	09 c0       	rjmp	.+18     	; 0xcaa <vfprintf+0x256>
 c98:	24 ff       	sbrs	r18, 4
 c9a:	0a c0       	rjmp	.+20     	; 0xcb0 <vfprintf+0x25c>
 c9c:	9f 2f       	mov	r25, r31
 c9e:	96 60       	ori	r25, 0x06	; 6
 ca0:	b9 2e       	mov	r11, r25
 ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <vfprintf+0x25c>
 ca4:	28 e0       	ldi	r18, 0x08	; 8
 ca6:	30 e0       	ldi	r19, 0x00	; 0
 ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <vfprintf+0x260>
 caa:	20 e1       	ldi	r18, 0x10	; 16
 cac:	30 e0       	ldi	r19, 0x00	; 0
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <vfprintf+0x260>
 cb0:	20 e1       	ldi	r18, 0x10	; 16
 cb2:	32 e0       	ldi	r19, 0x02	; 2
 cb4:	f8 01       	movw	r30, r16
 cb6:	b7 fe       	sbrs	r11, 7
 cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <vfprintf+0x274>
 cba:	60 81       	ld	r22, Z
 cbc:	71 81       	ldd	r23, Z+1	; 0x01
 cbe:	82 81       	ldd	r24, Z+2	; 0x02
 cc0:	93 81       	ldd	r25, Z+3	; 0x03
 cc2:	0c 5f       	subi	r16, 0xFC	; 252
 cc4:	1f 4f       	sbci	r17, 0xFF	; 255
 cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <vfprintf+0x280>
 cc8:	60 81       	ld	r22, Z
 cca:	71 81       	ldd	r23, Z+1	; 0x01
 ccc:	80 e0       	ldi	r24, 0x00	; 0
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	0e 5f       	subi	r16, 0xFE	; 254
 cd2:	1f 4f       	sbci	r17, 0xFF	; 255
 cd4:	a4 01       	movw	r20, r8
 cd6:	0e 94 67 07 	call	0xece	; 0xece <__ultoa_invert>
 cda:	a8 2e       	mov	r10, r24
 cdc:	a8 18       	sub	r10, r8
 cde:	fb 2d       	mov	r31, r11
 ce0:	ff 77       	andi	r31, 0x7F	; 127
 ce2:	bf 2e       	mov	r11, r31
 ce4:	b6 fe       	sbrs	r11, 6
 ce6:	0b c0       	rjmp	.+22     	; 0xcfe <vfprintf+0x2aa>
 ce8:	2b 2d       	mov	r18, r11
 cea:	2e 7f       	andi	r18, 0xFE	; 254
 cec:	a5 14       	cp	r10, r5
 cee:	50 f4       	brcc	.+20     	; 0xd04 <vfprintf+0x2b0>
 cf0:	b4 fe       	sbrs	r11, 4
 cf2:	0a c0       	rjmp	.+20     	; 0xd08 <vfprintf+0x2b4>
 cf4:	b2 fc       	sbrc	r11, 2
 cf6:	08 c0       	rjmp	.+16     	; 0xd08 <vfprintf+0x2b4>
 cf8:	2b 2d       	mov	r18, r11
 cfa:	2e 7e       	andi	r18, 0xEE	; 238
 cfc:	05 c0       	rjmp	.+10     	; 0xd08 <vfprintf+0x2b4>
 cfe:	7a 2c       	mov	r7, r10
 d00:	2b 2d       	mov	r18, r11
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <vfprintf+0x2b6>
 d04:	7a 2c       	mov	r7, r10
 d06:	01 c0       	rjmp	.+2      	; 0xd0a <vfprintf+0x2b6>
 d08:	75 2c       	mov	r7, r5
 d0a:	24 ff       	sbrs	r18, 4
 d0c:	0d c0       	rjmp	.+26     	; 0xd28 <vfprintf+0x2d4>
 d0e:	fe 01       	movw	r30, r28
 d10:	ea 0d       	add	r30, r10
 d12:	f1 1d       	adc	r31, r1
 d14:	80 81       	ld	r24, Z
 d16:	80 33       	cpi	r24, 0x30	; 48
 d18:	11 f4       	brne	.+4      	; 0xd1e <vfprintf+0x2ca>
 d1a:	29 7e       	andi	r18, 0xE9	; 233
 d1c:	09 c0       	rjmp	.+18     	; 0xd30 <vfprintf+0x2dc>
 d1e:	22 ff       	sbrs	r18, 2
 d20:	06 c0       	rjmp	.+12     	; 0xd2e <vfprintf+0x2da>
 d22:	73 94       	inc	r7
 d24:	73 94       	inc	r7
 d26:	04 c0       	rjmp	.+8      	; 0xd30 <vfprintf+0x2dc>
 d28:	82 2f       	mov	r24, r18
 d2a:	86 78       	andi	r24, 0x86	; 134
 d2c:	09 f0       	breq	.+2      	; 0xd30 <vfprintf+0x2dc>
 d2e:	73 94       	inc	r7
 d30:	23 fd       	sbrc	r18, 3
 d32:	13 c0       	rjmp	.+38     	; 0xd5a <vfprintf+0x306>
 d34:	20 ff       	sbrs	r18, 0
 d36:	06 c0       	rjmp	.+12     	; 0xd44 <vfprintf+0x2f0>
 d38:	5a 2c       	mov	r5, r10
 d3a:	73 14       	cp	r7, r3
 d3c:	18 f4       	brcc	.+6      	; 0xd44 <vfprintf+0x2f0>
 d3e:	53 0c       	add	r5, r3
 d40:	57 18       	sub	r5, r7
 d42:	73 2c       	mov	r7, r3
 d44:	73 14       	cp	r7, r3
 d46:	68 f4       	brcc	.+26     	; 0xd62 <vfprintf+0x30e>
 d48:	b7 01       	movw	r22, r14
 d4a:	80 e2       	ldi	r24, 0x20	; 32
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	2c 87       	std	Y+12, r18	; 0x0c
 d50:	0e 94 35 07 	call	0xe6a	; 0xe6a <fputc>
 d54:	73 94       	inc	r7
 d56:	2c 85       	ldd	r18, Y+12	; 0x0c
 d58:	f5 cf       	rjmp	.-22     	; 0xd44 <vfprintf+0x2f0>
 d5a:	73 14       	cp	r7, r3
 d5c:	10 f4       	brcc	.+4      	; 0xd62 <vfprintf+0x30e>
 d5e:	37 18       	sub	r3, r7
 d60:	01 c0       	rjmp	.+2      	; 0xd64 <vfprintf+0x310>
 d62:	31 2c       	mov	r3, r1
 d64:	24 ff       	sbrs	r18, 4
 d66:	12 c0       	rjmp	.+36     	; 0xd8c <vfprintf+0x338>
 d68:	b7 01       	movw	r22, r14
 d6a:	80 e3       	ldi	r24, 0x30	; 48
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	2c 87       	std	Y+12, r18	; 0x0c
 d70:	0e 94 35 07 	call	0xe6a	; 0xe6a <fputc>
 d74:	2c 85       	ldd	r18, Y+12	; 0x0c
 d76:	22 ff       	sbrs	r18, 2
 d78:	17 c0       	rjmp	.+46     	; 0xda8 <vfprintf+0x354>
 d7a:	21 ff       	sbrs	r18, 1
 d7c:	03 c0       	rjmp	.+6      	; 0xd84 <vfprintf+0x330>
 d7e:	88 e5       	ldi	r24, 0x58	; 88
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	02 c0       	rjmp	.+4      	; 0xd88 <vfprintf+0x334>
 d84:	88 e7       	ldi	r24, 0x78	; 120
 d86:	90 e0       	ldi	r25, 0x00	; 0
 d88:	b7 01       	movw	r22, r14
 d8a:	0c c0       	rjmp	.+24     	; 0xda4 <vfprintf+0x350>
 d8c:	82 2f       	mov	r24, r18
 d8e:	86 78       	andi	r24, 0x86	; 134
 d90:	59 f0       	breq	.+22     	; 0xda8 <vfprintf+0x354>
 d92:	21 fd       	sbrc	r18, 1
 d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x346>
 d96:	80 e2       	ldi	r24, 0x20	; 32
 d98:	01 c0       	rjmp	.+2      	; 0xd9c <vfprintf+0x348>
 d9a:	8b e2       	ldi	r24, 0x2B	; 43
 d9c:	27 fd       	sbrc	r18, 7
 d9e:	8d e2       	ldi	r24, 0x2D	; 45
 da0:	b7 01       	movw	r22, r14
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	0e 94 35 07 	call	0xe6a	; 0xe6a <fputc>
 da8:	a5 14       	cp	r10, r5
 daa:	38 f4       	brcc	.+14     	; 0xdba <vfprintf+0x366>
 dac:	b7 01       	movw	r22, r14
 dae:	80 e3       	ldi	r24, 0x30	; 48
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	0e 94 35 07 	call	0xe6a	; 0xe6a <fputc>
 db6:	5a 94       	dec	r5
 db8:	f7 cf       	rjmp	.-18     	; 0xda8 <vfprintf+0x354>
 dba:	aa 94       	dec	r10
 dbc:	f4 01       	movw	r30, r8
 dbe:	ea 0d       	add	r30, r10
 dc0:	f1 1d       	adc	r31, r1
 dc2:	80 81       	ld	r24, Z
 dc4:	b7 01       	movw	r22, r14
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	0e 94 35 07 	call	0xe6a	; 0xe6a <fputc>
 dcc:	a1 10       	cpse	r10, r1
 dce:	f5 cf       	rjmp	.-22     	; 0xdba <vfprintf+0x366>
 dd0:	33 20       	and	r3, r3
 dd2:	09 f4       	brne	.+2      	; 0xdd6 <vfprintf+0x382>
 dd4:	51 ce       	rjmp	.-862    	; 0xa78 <vfprintf+0x24>
 dd6:	b7 01       	movw	r22, r14
 dd8:	80 e2       	ldi	r24, 0x20	; 32
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	0e 94 35 07 	call	0xe6a	; 0xe6a <fputc>
 de0:	3a 94       	dec	r3
 de2:	f6 cf       	rjmp	.-20     	; 0xdd0 <vfprintf+0x37c>
 de4:	f7 01       	movw	r30, r14
 de6:	86 81       	ldd	r24, Z+6	; 0x06
 de8:	97 81       	ldd	r25, Z+7	; 0x07
 dea:	02 c0       	rjmp	.+4      	; 0xdf0 <vfprintf+0x39c>
 dec:	8f ef       	ldi	r24, 0xFF	; 255
 dee:	9f ef       	ldi	r25, 0xFF	; 255
 df0:	2c 96       	adiw	r28, 0x0c	; 12
 df2:	e2 e1       	ldi	r30, 0x12	; 18
 df4:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__epilogue_restores__>

00000df8 <calloc>:
 df8:	0f 93       	push	r16
 dfa:	1f 93       	push	r17
 dfc:	cf 93       	push	r28
 dfe:	df 93       	push	r29
 e00:	86 9f       	mul	r24, r22
 e02:	80 01       	movw	r16, r0
 e04:	87 9f       	mul	r24, r23
 e06:	10 0d       	add	r17, r0
 e08:	96 9f       	mul	r25, r22
 e0a:	10 0d       	add	r17, r0
 e0c:	11 24       	eor	r1, r1
 e0e:	c8 01       	movw	r24, r16
 e10:	0e 94 a4 03 	call	0x748	; 0x748 <malloc>
 e14:	ec 01       	movw	r28, r24
 e16:	00 97       	sbiw	r24, 0x00	; 0
 e18:	29 f0       	breq	.+10     	; 0xe24 <calloc+0x2c>
 e1a:	a8 01       	movw	r20, r16
 e1c:	60 e0       	ldi	r22, 0x00	; 0
 e1e:	70 e0       	ldi	r23, 0x00	; 0
 e20:	0e 94 23 07 	call	0xe46	; 0xe46 <memset>
 e24:	ce 01       	movw	r24, r28
 e26:	df 91       	pop	r29
 e28:	cf 91       	pop	r28
 e2a:	1f 91       	pop	r17
 e2c:	0f 91       	pop	r16
 e2e:	08 95       	ret

00000e30 <strnlen_P>:
 e30:	fc 01       	movw	r30, r24
 e32:	05 90       	lpm	r0, Z+
 e34:	61 50       	subi	r22, 0x01	; 1
 e36:	70 40       	sbci	r23, 0x00	; 0
 e38:	01 10       	cpse	r0, r1
 e3a:	d8 f7       	brcc	.-10     	; 0xe32 <strnlen_P+0x2>
 e3c:	80 95       	com	r24
 e3e:	90 95       	com	r25
 e40:	8e 0f       	add	r24, r30
 e42:	9f 1f       	adc	r25, r31
 e44:	08 95       	ret

00000e46 <memset>:
 e46:	dc 01       	movw	r26, r24
 e48:	01 c0       	rjmp	.+2      	; 0xe4c <memset+0x6>
 e4a:	6d 93       	st	X+, r22
 e4c:	41 50       	subi	r20, 0x01	; 1
 e4e:	50 40       	sbci	r21, 0x00	; 0
 e50:	e0 f7       	brcc	.-8      	; 0xe4a <memset+0x4>
 e52:	08 95       	ret

00000e54 <strnlen>:
 e54:	fc 01       	movw	r30, r24
 e56:	61 50       	subi	r22, 0x01	; 1
 e58:	70 40       	sbci	r23, 0x00	; 0
 e5a:	01 90       	ld	r0, Z+
 e5c:	01 10       	cpse	r0, r1
 e5e:	d8 f7       	brcc	.-10     	; 0xe56 <strnlen+0x2>
 e60:	80 95       	com	r24
 e62:	90 95       	com	r25
 e64:	8e 0f       	add	r24, r30
 e66:	9f 1f       	adc	r25, r31
 e68:	08 95       	ret

00000e6a <fputc>:
 e6a:	0f 93       	push	r16
 e6c:	1f 93       	push	r17
 e6e:	cf 93       	push	r28
 e70:	df 93       	push	r29
 e72:	18 2f       	mov	r17, r24
 e74:	09 2f       	mov	r16, r25
 e76:	eb 01       	movw	r28, r22
 e78:	8b 81       	ldd	r24, Y+3	; 0x03
 e7a:	81 fd       	sbrc	r24, 1
 e7c:	03 c0       	rjmp	.+6      	; 0xe84 <fputc+0x1a>
 e7e:	8f ef       	ldi	r24, 0xFF	; 255
 e80:	9f ef       	ldi	r25, 0xFF	; 255
 e82:	20 c0       	rjmp	.+64     	; 0xec4 <fputc+0x5a>
 e84:	82 ff       	sbrs	r24, 2
 e86:	10 c0       	rjmp	.+32     	; 0xea8 <fputc+0x3e>
 e88:	4e 81       	ldd	r20, Y+6	; 0x06
 e8a:	5f 81       	ldd	r21, Y+7	; 0x07
 e8c:	2c 81       	ldd	r18, Y+4	; 0x04
 e8e:	3d 81       	ldd	r19, Y+5	; 0x05
 e90:	42 17       	cp	r20, r18
 e92:	53 07       	cpc	r21, r19
 e94:	7c f4       	brge	.+30     	; 0xeb4 <fputc+0x4a>
 e96:	e8 81       	ld	r30, Y
 e98:	f9 81       	ldd	r31, Y+1	; 0x01
 e9a:	9f 01       	movw	r18, r30
 e9c:	2f 5f       	subi	r18, 0xFF	; 255
 e9e:	3f 4f       	sbci	r19, 0xFF	; 255
 ea0:	39 83       	std	Y+1, r19	; 0x01
 ea2:	28 83       	st	Y, r18
 ea4:	10 83       	st	Z, r17
 ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <fputc+0x4a>
 ea8:	e8 85       	ldd	r30, Y+8	; 0x08
 eaa:	f9 85       	ldd	r31, Y+9	; 0x09
 eac:	81 2f       	mov	r24, r17
 eae:	09 95       	icall
 eb0:	89 2b       	or	r24, r25
 eb2:	29 f7       	brne	.-54     	; 0xe7e <fputc+0x14>
 eb4:	2e 81       	ldd	r18, Y+6	; 0x06
 eb6:	3f 81       	ldd	r19, Y+7	; 0x07
 eb8:	2f 5f       	subi	r18, 0xFF	; 255
 eba:	3f 4f       	sbci	r19, 0xFF	; 255
 ebc:	3f 83       	std	Y+7, r19	; 0x07
 ebe:	2e 83       	std	Y+6, r18	; 0x06
 ec0:	81 2f       	mov	r24, r17
 ec2:	90 2f       	mov	r25, r16
 ec4:	df 91       	pop	r29
 ec6:	cf 91       	pop	r28
 ec8:	1f 91       	pop	r17
 eca:	0f 91       	pop	r16
 ecc:	08 95       	ret

00000ece <__ultoa_invert>:
 ece:	fa 01       	movw	r30, r20
 ed0:	aa 27       	eor	r26, r26
 ed2:	28 30       	cpi	r18, 0x08	; 8
 ed4:	51 f1       	breq	.+84     	; 0xf2a <__ultoa_invert+0x5c>
 ed6:	20 31       	cpi	r18, 0x10	; 16
 ed8:	81 f1       	breq	.+96     	; 0xf3a <__ultoa_invert+0x6c>
 eda:	e8 94       	clt
 edc:	6f 93       	push	r22
 ede:	6e 7f       	andi	r22, 0xFE	; 254
 ee0:	6e 5f       	subi	r22, 0xFE	; 254
 ee2:	7f 4f       	sbci	r23, 0xFF	; 255
 ee4:	8f 4f       	sbci	r24, 0xFF	; 255
 ee6:	9f 4f       	sbci	r25, 0xFF	; 255
 ee8:	af 4f       	sbci	r26, 0xFF	; 255
 eea:	b1 e0       	ldi	r27, 0x01	; 1
 eec:	3e d0       	rcall	.+124    	; 0xf6a <__ultoa_invert+0x9c>
 eee:	b4 e0       	ldi	r27, 0x04	; 4
 ef0:	3c d0       	rcall	.+120    	; 0xf6a <__ultoa_invert+0x9c>
 ef2:	67 0f       	add	r22, r23
 ef4:	78 1f       	adc	r23, r24
 ef6:	89 1f       	adc	r24, r25
 ef8:	9a 1f       	adc	r25, r26
 efa:	a1 1d       	adc	r26, r1
 efc:	68 0f       	add	r22, r24
 efe:	79 1f       	adc	r23, r25
 f00:	8a 1f       	adc	r24, r26
 f02:	91 1d       	adc	r25, r1
 f04:	a1 1d       	adc	r26, r1
 f06:	6a 0f       	add	r22, r26
 f08:	71 1d       	adc	r23, r1
 f0a:	81 1d       	adc	r24, r1
 f0c:	91 1d       	adc	r25, r1
 f0e:	a1 1d       	adc	r26, r1
 f10:	20 d0       	rcall	.+64     	; 0xf52 <__ultoa_invert+0x84>
 f12:	09 f4       	brne	.+2      	; 0xf16 <__ultoa_invert+0x48>
 f14:	68 94       	set
 f16:	3f 91       	pop	r19
 f18:	2a e0       	ldi	r18, 0x0A	; 10
 f1a:	26 9f       	mul	r18, r22
 f1c:	11 24       	eor	r1, r1
 f1e:	30 19       	sub	r19, r0
 f20:	30 5d       	subi	r19, 0xD0	; 208
 f22:	31 93       	st	Z+, r19
 f24:	de f6       	brtc	.-74     	; 0xedc <__ultoa_invert+0xe>
 f26:	cf 01       	movw	r24, r30
 f28:	08 95       	ret
 f2a:	46 2f       	mov	r20, r22
 f2c:	47 70       	andi	r20, 0x07	; 7
 f2e:	40 5d       	subi	r20, 0xD0	; 208
 f30:	41 93       	st	Z+, r20
 f32:	b3 e0       	ldi	r27, 0x03	; 3
 f34:	0f d0       	rcall	.+30     	; 0xf54 <__ultoa_invert+0x86>
 f36:	c9 f7       	brne	.-14     	; 0xf2a <__ultoa_invert+0x5c>
 f38:	f6 cf       	rjmp	.-20     	; 0xf26 <__ultoa_invert+0x58>
 f3a:	46 2f       	mov	r20, r22
 f3c:	4f 70       	andi	r20, 0x0F	; 15
 f3e:	40 5d       	subi	r20, 0xD0	; 208
 f40:	4a 33       	cpi	r20, 0x3A	; 58
 f42:	18 f0       	brcs	.+6      	; 0xf4a <__ultoa_invert+0x7c>
 f44:	49 5d       	subi	r20, 0xD9	; 217
 f46:	31 fd       	sbrc	r19, 1
 f48:	40 52       	subi	r20, 0x20	; 32
 f4a:	41 93       	st	Z+, r20
 f4c:	02 d0       	rcall	.+4      	; 0xf52 <__ultoa_invert+0x84>
 f4e:	a9 f7       	brne	.-22     	; 0xf3a <__ultoa_invert+0x6c>
 f50:	ea cf       	rjmp	.-44     	; 0xf26 <__ultoa_invert+0x58>
 f52:	b4 e0       	ldi	r27, 0x04	; 4
 f54:	a6 95       	lsr	r26
 f56:	97 95       	ror	r25
 f58:	87 95       	ror	r24
 f5a:	77 95       	ror	r23
 f5c:	67 95       	ror	r22
 f5e:	ba 95       	dec	r27
 f60:	c9 f7       	brne	.-14     	; 0xf54 <__ultoa_invert+0x86>
 f62:	00 97       	sbiw	r24, 0x00	; 0
 f64:	61 05       	cpc	r22, r1
 f66:	71 05       	cpc	r23, r1
 f68:	08 95       	ret
 f6a:	9b 01       	movw	r18, r22
 f6c:	ac 01       	movw	r20, r24
 f6e:	0a 2e       	mov	r0, r26
 f70:	06 94       	lsr	r0
 f72:	57 95       	ror	r21
 f74:	47 95       	ror	r20
 f76:	37 95       	ror	r19
 f78:	27 95       	ror	r18
 f7a:	ba 95       	dec	r27
 f7c:	c9 f7       	brne	.-14     	; 0xf70 <__ultoa_invert+0xa2>
 f7e:	62 0f       	add	r22, r18
 f80:	73 1f       	adc	r23, r19
 f82:	84 1f       	adc	r24, r20
 f84:	95 1f       	adc	r25, r21
 f86:	a0 1d       	adc	r26, r0
 f88:	08 95       	ret

00000f8a <__prologue_saves__>:
 f8a:	2f 92       	push	r2
 f8c:	3f 92       	push	r3
 f8e:	4f 92       	push	r4
 f90:	5f 92       	push	r5
 f92:	6f 92       	push	r6
 f94:	7f 92       	push	r7
 f96:	8f 92       	push	r8
 f98:	9f 92       	push	r9
 f9a:	af 92       	push	r10
 f9c:	bf 92       	push	r11
 f9e:	cf 92       	push	r12
 fa0:	df 92       	push	r13
 fa2:	ef 92       	push	r14
 fa4:	ff 92       	push	r15
 fa6:	0f 93       	push	r16
 fa8:	1f 93       	push	r17
 faa:	cf 93       	push	r28
 fac:	df 93       	push	r29
 fae:	cd b7       	in	r28, 0x3d	; 61
 fb0:	de b7       	in	r29, 0x3e	; 62
 fb2:	ca 1b       	sub	r28, r26
 fb4:	db 0b       	sbc	r29, r27
 fb6:	0f b6       	in	r0, 0x3f	; 63
 fb8:	f8 94       	cli
 fba:	de bf       	out	0x3e, r29	; 62
 fbc:	0f be       	out	0x3f, r0	; 63
 fbe:	cd bf       	out	0x3d, r28	; 61
 fc0:	09 94       	ijmp

00000fc2 <__epilogue_restores__>:
 fc2:	2a 88       	ldd	r2, Y+18	; 0x12
 fc4:	39 88       	ldd	r3, Y+17	; 0x11
 fc6:	48 88       	ldd	r4, Y+16	; 0x10
 fc8:	5f 84       	ldd	r5, Y+15	; 0x0f
 fca:	6e 84       	ldd	r6, Y+14	; 0x0e
 fcc:	7d 84       	ldd	r7, Y+13	; 0x0d
 fce:	8c 84       	ldd	r8, Y+12	; 0x0c
 fd0:	9b 84       	ldd	r9, Y+11	; 0x0b
 fd2:	aa 84       	ldd	r10, Y+10	; 0x0a
 fd4:	b9 84       	ldd	r11, Y+9	; 0x09
 fd6:	c8 84       	ldd	r12, Y+8	; 0x08
 fd8:	df 80       	ldd	r13, Y+7	; 0x07
 fda:	ee 80       	ldd	r14, Y+6	; 0x06
 fdc:	fd 80       	ldd	r15, Y+5	; 0x05
 fde:	0c 81       	ldd	r16, Y+4	; 0x04
 fe0:	1b 81       	ldd	r17, Y+3	; 0x03
 fe2:	aa 81       	ldd	r26, Y+2	; 0x02
 fe4:	b9 81       	ldd	r27, Y+1	; 0x01
 fe6:	ce 0f       	add	r28, r30
 fe8:	d1 1d       	adc	r29, r1
 fea:	0f b6       	in	r0, 0x3f	; 63
 fec:	f8 94       	cli
 fee:	de bf       	out	0x3e, r29	; 62
 ff0:	0f be       	out	0x3f, r0	; 63
 ff2:	cd bf       	out	0x3d, r28	; 61
 ff4:	ed 01       	movw	r28, r26
 ff6:	08 95       	ret

00000ff8 <_exit>:
 ff8:	f8 94       	cli

00000ffa <__stop_program>:
 ffa:	ff cf       	rjmp	.-2      	; 0xffa <__stop_program>
